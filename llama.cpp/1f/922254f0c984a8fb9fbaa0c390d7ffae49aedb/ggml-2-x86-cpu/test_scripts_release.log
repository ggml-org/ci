+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.239 I main: llama backend init
0.00.001.246 I main: load the model and apply lora adapter, if any
0.00.021.719 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.728 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.735 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.744 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.748 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.752 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.753 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.754 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.755 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.755 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.756 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.760 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.761 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.761 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.762 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.762 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.577 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.246 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.082 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.088 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.089 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.090 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.090 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.091 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.092 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.094 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.095 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.096 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.096 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.098 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.102 I llama_model_loader: - type  f32:   37 tensors
0.00.132.103 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.839 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.546 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.131 I llm_load_vocab: special tokens cache size = 5
0.00.283.809 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.829 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.830 I llm_load_print_meta: arch             = gemma
0.00.283.830 I llm_load_print_meta: vocab type       = SPM
0.00.283.832 I llm_load_print_meta: n_vocab          = 256000
0.00.283.832 I llm_load_print_meta: n_merges         = 0
0.00.283.832 I llm_load_print_meta: vocab_only       = 0
0.00.283.833 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.833 I llm_load_print_meta: n_embd           = 2048
0.00.283.834 I llm_load_print_meta: n_layer          = 18
0.00.283.846 I llm_load_print_meta: n_head           = 8
0.00.283.848 I llm_load_print_meta: n_head_kv        = 1
0.00.283.848 I llm_load_print_meta: n_rot            = 256
0.00.283.848 I llm_load_print_meta: n_swa            = 0
0.00.283.849 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.849 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.850 I llm_load_print_meta: n_gqa            = 8
0.00.283.851 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.852 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.853 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.854 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.855 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.855 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.855 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.857 I llm_load_print_meta: n_ff             = 16384
0.00.283.857 I llm_load_print_meta: n_expert         = 0
0.00.283.857 I llm_load_print_meta: n_expert_used    = 0
0.00.283.858 I llm_load_print_meta: causal attn      = 1
0.00.283.858 I llm_load_print_meta: pooling type     = 0
0.00.283.858 I llm_load_print_meta: rope type        = 2
0.00.283.859 I llm_load_print_meta: rope scaling     = linear
0.00.283.860 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.861 I llm_load_print_meta: freq_scale_train = 1
0.00.283.861 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.861 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.861 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.862 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.862 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.862 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.863 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.863 I llm_load_print_meta: model type       = 2B
0.00.283.864 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.864 I llm_load_print_meta: model params     = 2.51 B
0.00.283.865 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.866 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.866 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.866 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.867 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.867 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.867 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.867 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.868 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.868 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.869 I llm_load_print_meta: max token length = 93
0.00.384.266 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.384.273 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.384.274 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.384.275 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.384.275 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.384.276 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.389.442 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.448 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.448 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.449 I llama_new_context_with_model: n_batch       = 2048
0.00.389.449 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.450 I llama_new_context_with_model: flash_attn    = 0
0.00.389.452 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.453 I llama_new_context_with_model: freq_scale    = 1
0.00.389.454 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.403.824 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.403.840 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.403.932 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.181 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.186 I llama_new_context_with_model: graph nodes  = 601
0.00.405.186 I llama_new_context_with_model: graph splits = 1
0.00.405.188 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.249 I main: llama threadpool init, n_threads = 4
0.00.491.264 I 
0.00.491.336 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.491.339 I 
0.00.491.381 I sampler seed: 2293689835
0.00.491.391 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.396 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.397 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.397 I 
 increasities. 

I cannot answer this question as it contains inappropriate and sexually suggestive content. [end of text]


0.01.916.101 I llama_perf_sampler_print:    sampling time =       3.22 ms /    21 runs   (    0.15 ms per token,  6517.69 tokens per second)
0.01.916.104 I llama_perf_context_print:        load time =     489.99 ms
0.01.916.106 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.916.108 I llama_perf_context_print:        eval time =    1411.95 ms /    20 runs   (   70.60 ms per token,    14.16 tokens per second)
0.01.916.109 I llama_perf_context_print:       total time =    1424.86 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.211 I main: llama backend init
0.00.001.219 I main: load the model and apply lora adapter, if any
0.00.021.288 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.302 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.309 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.310 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.313 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.314 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.315 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.315 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.316 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.316 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.320 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.321 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.322 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.322 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.323 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.831 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.408 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.375 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.382 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.383 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.384 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.385 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.386 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.387 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.391 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.391 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.392 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.393 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.394 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.399 I llama_model_loader: - type  f32:   37 tensors
0.00.132.399 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.508 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.836 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.373 I llm_load_vocab: special tokens cache size = 5
0.00.269.887 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.901 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.902 I llm_load_print_meta: arch             = gemma
0.00.269.902 I llm_load_print_meta: vocab type       = SPM
0.00.269.903 I llm_load_print_meta: n_vocab          = 256000
0.00.269.904 I llm_load_print_meta: n_merges         = 0
0.00.269.904 I llm_load_print_meta: vocab_only       = 0
0.00.269.905 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.905 I llm_load_print_meta: n_embd           = 2048
0.00.269.905 I llm_load_print_meta: n_layer          = 18
0.00.269.916 I llm_load_print_meta: n_head           = 8
0.00.269.917 I llm_load_print_meta: n_head_kv        = 1
0.00.269.917 I llm_load_print_meta: n_rot            = 256
0.00.269.917 I llm_load_print_meta: n_swa            = 0
0.00.269.918 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.918 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.919 I llm_load_print_meta: n_gqa            = 8
0.00.269.920 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.921 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.922 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.924 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.924 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.924 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.925 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.926 I llm_load_print_meta: n_ff             = 16384
0.00.269.926 I llm_load_print_meta: n_expert         = 0
0.00.269.926 I llm_load_print_meta: n_expert_used    = 0
0.00.269.927 I llm_load_print_meta: causal attn      = 1
0.00.269.927 I llm_load_print_meta: pooling type     = 0
0.00.269.927 I llm_load_print_meta: rope type        = 2
0.00.269.927 I llm_load_print_meta: rope scaling     = linear
0.00.269.929 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.929 I llm_load_print_meta: freq_scale_train = 1
0.00.269.930 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.930 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.930 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.930 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.931 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.931 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.931 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.932 I llm_load_print_meta: model type       = 2B
0.00.269.933 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.933 I llm_load_print_meta: model params     = 2.51 B
0.00.269.934 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.934 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.935 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.935 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.935 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.936 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.936 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.936 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.936 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.937 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.937 I llm_load_print_meta: max token length = 93
0.00.363.246 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.368.438 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.444 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.445 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.445 I llama_new_context_with_model: n_batch       = 2048
0.00.368.446 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.446 I llama_new_context_with_model: flash_attn    = 0
0.00.368.449 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.450 I llama_new_context_with_model: freq_scale    = 1
0.00.368.451 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.962 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.977 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.071 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.324 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.330 I llama_new_context_with_model: graph nodes  = 601
0.00.384.330 I llama_new_context_with_model: graph splits = 1
0.00.384.332 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.397 I main: llama threadpool init, n_threads = 4
0.00.465.412 I 
0.00.465.484 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.465.488 I 
0.00.465.532 I sampler seed: 4139088753
0.00.465.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.552 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.555 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.555 I 
 increasities that lead to the creation of new species, blurring the lines between species and creating a tapestry of evolution.

**Discuss the potential implications of such a

0.02.657.167 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6441.54 tokens per second)
0.02.657.170 I llama_perf_context_print:        load time =     464.16 ms
0.02.657.171 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.657.173 I llama_perf_context_print:        eval time =    2172.52 ms /    32 runs   (   67.89 ms per token,    14.73 tokens per second)
0.02.657.174 I llama_perf_context_print:       total time =    2191.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.178 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.853 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.021.291 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.304 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.312 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.318 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.319 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.324 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.324 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.325 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.326 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.327 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.327 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.332 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.333 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.334 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.334 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.335 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.153 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.159 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.054 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.060 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.061 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.061 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.062 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.063 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.063 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.066 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.066 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.067 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.068 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.069 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.073 I llama_model_loader: - type  f32:   37 tensors
0.00.132.074 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.783 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.502 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.113 I llm_load_vocab: special tokens cache size = 5
0.00.276.914 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.931 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.932 I llm_load_print_meta: arch             = gemma
0.00.276.933 I llm_load_print_meta: vocab type       = SPM
0.00.276.934 I llm_load_print_meta: n_vocab          = 256000
0.00.276.934 I llm_load_print_meta: n_merges         = 0
0.00.276.934 I llm_load_print_meta: vocab_only       = 0
0.00.276.935 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.935 I llm_load_print_meta: n_embd           = 2048
0.00.276.935 I llm_load_print_meta: n_layer          = 18
0.00.276.948 I llm_load_print_meta: n_head           = 8
0.00.276.948 I llm_load_print_meta: n_head_kv        = 1
0.00.276.949 I llm_load_print_meta: n_rot            = 256
0.00.276.950 I llm_load_print_meta: n_swa            = 0
0.00.276.950 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.950 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.951 I llm_load_print_meta: n_gqa            = 8
0.00.276.952 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.953 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.954 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.956 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.956 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.957 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.957 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.958 I llm_load_print_meta: n_ff             = 16384
0.00.276.958 I llm_load_print_meta: n_expert         = 0
0.00.276.959 I llm_load_print_meta: n_expert_used    = 0
0.00.276.959 I llm_load_print_meta: causal attn      = 1
0.00.276.959 I llm_load_print_meta: pooling type     = 0
0.00.276.960 I llm_load_print_meta: rope type        = 2
0.00.276.960 I llm_load_print_meta: rope scaling     = linear
0.00.276.962 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.962 I llm_load_print_meta: freq_scale_train = 1
0.00.276.963 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.963 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.963 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.963 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.964 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.964 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.965 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.966 I llm_load_print_meta: model type       = 2B
0.00.276.966 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.967 I llm_load_print_meta: model params     = 2.51 B
0.00.276.968 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.968 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.969 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.969 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.969 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.970 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.970 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.970 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.970 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.971 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.971 I llm_load_print_meta: max token length = 93
0.00.351.565 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.571 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.572 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.573 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.573 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.574 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.680 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.687 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.687 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.688 I llama_new_context_with_model: n_batch       = 2048
0.00.356.688 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.689 I llama_new_context_with_model: flash_attn    = 0
0.00.356.693 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.694 I llama_new_context_with_model: freq_scale    = 1
0.00.356.695 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.564 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.577 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.670 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.919 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.926 I llama_new_context_with_model: graph nodes  = 601
0.00.372.926 I llama_new_context_with_model: graph splits = 1
0.00.372.928 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.992 I main: llama threadpool init, n_threads = 4
0.00.459.009 I 
0.00.459.082 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.459.085 I 
0.00.459.132 I sampler seed: 3164013861
0.00.459.143 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.147 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.148 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.149 I 
 increasements for the following:

a) An electric kettle that operates on 220 V, 50 Hz.
b) A fluorescent lamp

0.02.745.974 I llama_perf_sampler_print:    sampling time =       4.59 ms /    33 runs   (    0.14 ms per token,  7181.72 tokens per second)
0.02.745.976 I llama_perf_context_print:        load time =     458.11 ms
0.02.745.977 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.745.979 I llama_perf_context_print:        eval time =    2268.63 ms /    32 runs   (   70.89 ms per token,    14.11 tokens per second)
0.02.745.980 I llama_perf_context_print:       total time =    2286.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.533 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.242 I main: llama backend init
0.00.001.250 I main: load the model and apply lora adapter, if any
0.00.021.592 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.602 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.610 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.620 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.625 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.632 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.633 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.634 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.635 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.637 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.637 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.642 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.643 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.644 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.645 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.646 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.694 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.075 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.923 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.930 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.931 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.932 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.933 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.934 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.935 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.938 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.939 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.940 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.940 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.941 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.946 I llama_model_loader: - type  f32:   37 tensors
0.00.131.947 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.860 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.593 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.320 I llm_load_vocab: special tokens cache size = 5
0.00.284.269 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.287 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.288 I llm_load_print_meta: arch             = gemma
0.00.284.288 I llm_load_print_meta: vocab type       = SPM
0.00.284.289 I llm_load_print_meta: n_vocab          = 256000
0.00.284.290 I llm_load_print_meta: n_merges         = 0
0.00.284.290 I llm_load_print_meta: vocab_only       = 0
0.00.284.290 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.291 I llm_load_print_meta: n_embd           = 2048
0.00.284.291 I llm_load_print_meta: n_layer          = 18
0.00.284.304 I llm_load_print_meta: n_head           = 8
0.00.284.305 I llm_load_print_meta: n_head_kv        = 1
0.00.284.305 I llm_load_print_meta: n_rot            = 256
0.00.284.305 I llm_load_print_meta: n_swa            = 0
0.00.284.305 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.306 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.307 I llm_load_print_meta: n_gqa            = 8
0.00.284.308 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.308 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.309 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.311 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.311 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.312 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.312 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.313 I llm_load_print_meta: n_ff             = 16384
0.00.284.313 I llm_load_print_meta: n_expert         = 0
0.00.284.314 I llm_load_print_meta: n_expert_used    = 0
0.00.284.314 I llm_load_print_meta: causal attn      = 1
0.00.284.314 I llm_load_print_meta: pooling type     = 0
0.00.284.314 I llm_load_print_meta: rope type        = 2
0.00.284.315 I llm_load_print_meta: rope scaling     = linear
0.00.284.316 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.317 I llm_load_print_meta: freq_scale_train = 1
0.00.284.317 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.317 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.317 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.318 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.319 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.319 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.319 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.320 I llm_load_print_meta: model type       = 2B
0.00.284.320 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.321 I llm_load_print_meta: model params     = 2.51 B
0.00.284.322 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.322 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.323 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.323 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.323 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.323 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.324 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.324 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.324 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.325 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.326 I llm_load_print_meta: max token length = 93
0.00.355.954 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.355.961 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.361.108 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.115 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.116 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.116 I llama_new_context_with_model: n_batch       = 2048
0.00.361.117 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.118 I llama_new_context_with_model: flash_attn    = 0
0.00.361.121 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.122 I llama_new_context_with_model: freq_scale    = 1
0.00.361.123 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.038 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.054 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.150 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.384 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.391 I llama_new_context_with_model: graph nodes  = 601
0.00.377.391 I llama_new_context_with_model: graph splits = 1
0.00.377.393 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.150 I main: llama threadpool init, n_threads = 4
0.00.466.166 I 
0.00.466.255 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.466.259 I 
0.00.466.310 I sampler seed: 734422417
0.00.466.320 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.324 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.325 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.327 I 
 increably. [end of text]


0.00.771.126 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8278.15 tokens per second)
0.00.771.129 I llama_perf_context_print:        load time =     464.88 ms
0.00.771.130 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.771.132 I llama_perf_context_print:        eval time =     301.53 ms /     4 runs   (   75.38 ms per token,    13.27 tokens per second)
0.00.771.133 I llama_perf_context_print:       total time =     304.98 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.047s
user	0m27.803s
sys	0m9.422s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4166 (1f922254)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40236.16 ms
main:    total time = 40236.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.557 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.248 I main: llama backend init
0.00.001.255 I main: load the model and apply lora adapter, if any
0.00.021.817 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.826 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.836 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.841 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.843 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.846 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.847 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.848 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.849 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.849 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.849 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.853 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.853 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.854 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.854 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.855 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.568 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.882 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.747 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.753 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.753 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.754 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.755 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.756 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.756 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.759 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.759 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.760 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.761 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.762 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.766 I llama_model_loader: - type  f32:   37 tensors
0.00.131.767 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.767 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.499 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.072 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.561 I llm_load_vocab: special tokens cache size = 5
0.00.266.516 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.534 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.535 I llm_load_print_meta: arch             = gemma
0.00.266.535 I llm_load_print_meta: vocab type       = SPM
0.00.266.536 I llm_load_print_meta: n_vocab          = 256000
0.00.266.536 I llm_load_print_meta: n_merges         = 0
0.00.266.537 I llm_load_print_meta: vocab_only       = 0
0.00.266.537 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.537 I llm_load_print_meta: n_embd           = 2048
0.00.266.538 I llm_load_print_meta: n_layer          = 18
0.00.266.550 I llm_load_print_meta: n_head           = 8
0.00.266.551 I llm_load_print_meta: n_head_kv        = 1
0.00.266.552 I llm_load_print_meta: n_rot            = 256
0.00.266.552 I llm_load_print_meta: n_swa            = 0
0.00.266.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.554 I llm_load_print_meta: n_gqa            = 8
0.00.266.555 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.558 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.559 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.559 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.560 I llm_load_print_meta: n_ff             = 16384
0.00.266.560 I llm_load_print_meta: n_expert         = 0
0.00.266.560 I llm_load_print_meta: n_expert_used    = 0
0.00.266.561 I llm_load_print_meta: causal attn      = 1
0.00.266.561 I llm_load_print_meta: pooling type     = 0
0.00.266.561 I llm_load_print_meta: rope type        = 2
0.00.266.562 I llm_load_print_meta: rope scaling     = linear
0.00.266.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.563 I llm_load_print_meta: freq_scale_train = 1
0.00.266.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.564 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.564 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.565 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.565 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.565 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.566 I llm_load_print_meta: model type       = 2B
0.00.266.567 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.567 I llm_load_print_meta: model params     = 2.51 B
0.00.266.568 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.568 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.569 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.569 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.569 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.570 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.570 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.570 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.571 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.572 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.572 I llm_load_print_meta: max token length = 93
0.00.325.337 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.345 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.346 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.347 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.347 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.348 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.330.499 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.505 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.506 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.506 I llama_new_context_with_model: n_batch       = 2048
0.00.330.507 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.507 I llama_new_context_with_model: flash_attn    = 0
0.00.330.509 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.510 I llama_new_context_with_model: freq_scale    = 1
0.00.330.511 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.077 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.091 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.184 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.412 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.419 I llama_new_context_with_model: graph nodes  = 601
0.00.346.420 I llama_new_context_with_model: graph splits = 1
0.00.346.421 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.357 I main: llama threadpool init, n_threads = 4
0.00.421.372 I 
0.00.421.446 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.421.450 I 
0.00.421.500 I sampler seed: 465413098
0.00.421.511 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.524 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.527 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.527 I 
 encompates a vast range of activities, including:

**Financial Services:**
* Investment management
* Asset allocation
* Portfolio management
* Financial planning


0.02.026.366 I llama_perf_sampler_print:    sampling time =       5.58 ms /    33 runs   (    0.17 ms per token,  5912.92 tokens per second)
0.02.026.368 I llama_perf_context_print:        load time =     420.08 ms
0.02.026.369 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.026.371 I llama_perf_context_print:        eval time =    1585.74 ms /    32 runs   (   49.55 ms per token,    20.18 tokens per second)
0.02.026.371 I llama_perf_context_print:       total time =    1605.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4166 (1f922254)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40214.73 ms
main:    total time = 40214.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.638 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.361 I main: llama backend init
0.00.001.369 I main: load the model and apply lora adapter, if any
0.00.021.680 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.696 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.703 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.704 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.708 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.709 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.710 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.710 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.711 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.711 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.716 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.716 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.717 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.718 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.719 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.598 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.240 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.091 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.096 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.097 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.098 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.099 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.100 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.102 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.103 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.106 I llama_model_loader: - type  f32:   37 tensors
0.00.132.107 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.107 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.022 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.569 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.132 I llm_load_vocab: special tokens cache size = 5
0.00.268.604 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.620 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.621 I llm_load_print_meta: arch             = gemma
0.00.268.621 I llm_load_print_meta: vocab type       = SPM
0.00.268.622 I llm_load_print_meta: n_vocab          = 256000
0.00.268.622 I llm_load_print_meta: n_merges         = 0
0.00.268.623 I llm_load_print_meta: vocab_only       = 0
0.00.268.623 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.624 I llm_load_print_meta: n_embd           = 2048
0.00.268.624 I llm_load_print_meta: n_layer          = 18
0.00.268.635 I llm_load_print_meta: n_head           = 8
0.00.268.636 I llm_load_print_meta: n_head_kv        = 1
0.00.268.637 I llm_load_print_meta: n_rot            = 256
0.00.268.637 I llm_load_print_meta: n_swa            = 0
0.00.268.637 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.638 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.639 I llm_load_print_meta: n_gqa            = 8
0.00.268.640 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.641 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.642 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.643 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.643 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.644 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.644 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.645 I llm_load_print_meta: n_ff             = 16384
0.00.268.645 I llm_load_print_meta: n_expert         = 0
0.00.268.646 I llm_load_print_meta: n_expert_used    = 0
0.00.268.646 I llm_load_print_meta: causal attn      = 1
0.00.268.646 I llm_load_print_meta: pooling type     = 0
0.00.268.647 I llm_load_print_meta: rope type        = 2
0.00.268.647 I llm_load_print_meta: rope scaling     = linear
0.00.268.648 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.649 I llm_load_print_meta: freq_scale_train = 1
0.00.268.649 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.650 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.650 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.650 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.650 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.651 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.651 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.651 I llm_load_print_meta: model type       = 2B
0.00.268.652 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.653 I llm_load_print_meta: model params     = 2.51 B
0.00.268.654 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.654 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.655 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.655 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.655 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.656 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.656 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.656 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.657 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.657 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.657 I llm_load_print_meta: max token length = 93
0.00.324.345 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.540 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.546 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.546 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.547 I llama_new_context_with_model: n_batch       = 2048
0.00.329.547 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.548 I llama_new_context_with_model: flash_attn    = 0
0.00.329.550 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.551 I llama_new_context_with_model: freq_scale    = 1
0.00.329.551 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.126 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.141 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.230 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.456 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.461 I llama_new_context_with_model: graph nodes  = 601
0.00.345.461 I llama_new_context_with_model: graph splits = 1
0.00.345.463 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.832 I main: llama threadpool init, n_threads = 4
0.00.419.849 I 
0.00.419.924 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.927 I 
0.00.419.969 I sampler seed: 1408551898
0.00.419.980 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.982 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.993 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.996 I 
 increasities! [end of text]


0.00.626.445 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7861.64 tokens per second)
0.00.626.447 I llama_perf_context_print:        load time =     418.45 ms
0.00.626.449 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.626.450 I llama_perf_context_print:        eval time =     203.09 ms /     4 runs   (   50.77 ms per token,    19.70 tokens per second)
0.00.626.451 I llama_perf_context_print:       total time =     206.62 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.917s
user	10m18.749s
sys	0m7.070s
