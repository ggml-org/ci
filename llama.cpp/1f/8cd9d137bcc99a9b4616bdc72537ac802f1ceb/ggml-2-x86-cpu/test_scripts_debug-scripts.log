+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.000.829 I main: load the model and apply lora adapter, if any
0.00.023.513 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.525 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.626 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.628 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.635 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.642 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.643 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.644 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.646 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.647 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.656 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.657 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.659 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.661 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.663 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.236.114 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.340.801 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.203 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.212 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.214 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.215 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.216 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.218 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.219 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.223 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.224 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.226 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.364.227 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.364.229 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.364.238 I llama_model_loader: - type  f32:   37 tensors
0.00.364.241 I llama_model_loader: - type q8_0:  127 tensors
0.00.633.954 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.759.636 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.760.662 I llm_load_vocab: special tokens cache size = 5
0.00.949.624 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.949.705 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.949.706 I llm_load_print_meta: arch             = gemma
0.00.949.707 I llm_load_print_meta: vocab type       = SPM
0.00.949.708 I llm_load_print_meta: n_vocab          = 256000
0.00.949.710 I llm_load_print_meta: n_merges         = 0
0.00.949.710 I llm_load_print_meta: vocab_only       = 0
0.00.949.711 I llm_load_print_meta: n_ctx_train      = 8192
0.00.949.711 I llm_load_print_meta: n_embd           = 2048
0.00.949.712 I llm_load_print_meta: n_layer          = 18
0.00.949.782 I llm_load_print_meta: n_head           = 8
0.00.949.790 I llm_load_print_meta: n_head_kv        = 1
0.00.949.790 I llm_load_print_meta: n_rot            = 256
0.00.949.791 I llm_load_print_meta: n_swa            = 0
0.00.949.791 I llm_load_print_meta: n_embd_head_k    = 256
0.00.949.792 I llm_load_print_meta: n_embd_head_v    = 256
0.00.949.796 I llm_load_print_meta: n_gqa            = 8
0.00.949.828 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.949.836 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.949.838 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.949.840 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.949.840 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.949.841 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.949.842 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.949.847 I llm_load_print_meta: n_ff             = 16384
0.00.949.848 I llm_load_print_meta: n_expert         = 0
0.00.949.848 I llm_load_print_meta: n_expert_used    = 0
0.00.949.848 I llm_load_print_meta: causal attn      = 1
0.00.949.849 I llm_load_print_meta: pooling type     = 0
0.00.949.849 I llm_load_print_meta: rope type        = 2
0.00.949.856 I llm_load_print_meta: rope scaling     = linear
0.00.949.857 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.949.858 I llm_load_print_meta: freq_scale_train = 1
0.00.949.859 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.949.859 I llm_load_print_meta: rope_finetuned   = unknown
0.00.949.859 I llm_load_print_meta: ssm_d_conv       = 0
0.00.949.860 I llm_load_print_meta: ssm_d_inner      = 0
0.00.949.860 I llm_load_print_meta: ssm_d_state      = 0
0.00.949.860 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.949.861 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.949.862 I llm_load_print_meta: model type       = 2B
0.00.949.863 I llm_load_print_meta: model ftype      = Q8_0
0.00.949.864 I llm_load_print_meta: model params     = 2.51 B
0.00.949.874 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.949.874 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.949.875 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.949.875 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.949.876 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.949.877 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.949.878 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.949.879 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.949.885 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.949.887 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.949.887 I llm_load_print_meta: max token length = 93
0.01.052.359 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.052.369 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.052.370 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.052.371 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.052.372 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.052.372 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.058.412 I llama_new_context_with_model: n_seq_max     = 1
0.01.058.421 I llama_new_context_with_model: n_ctx         = 4096
0.01.058.421 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.058.422 I llama_new_context_with_model: n_batch       = 2048
0.01.058.422 I llama_new_context_with_model: n_ubatch      = 512
0.01.058.423 I llama_new_context_with_model: flash_attn    = 0
0.01.058.426 I llama_new_context_with_model: freq_base     = 10000.0
0.01.058.427 I llama_new_context_with_model: freq_scale    = 1
0.01.058.428 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.074.044 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.074.088 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.074.223 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.076.820 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.076.824 I llama_new_context_with_model: graph nodes  = 601
0.01.076.824 I llama_new_context_with_model: graph splits = 1
0.01.076.848 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.686.796 I main: llama threadpool init, n_threads = 4
0.01.686.811 I 
0.01.686.928 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.686.929 I 
0.01.687.175 I sampler seed: 121895093
0.01.687.190 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.687.203 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.687.204 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.687.204 I 
 increamically.

I am unable to answer the question as I am unable to generate text that is sexually suggestive in nature. [end of text]


0.12.688.310 I llama_perf_sampler_print:    sampling time =      39.37 ms /    27 runs   (    1.46 ms per token,   685.75 tokens per second)
0.12.688.312 I llama_perf_context_print:        load time =    1685.88 ms
0.12.688.314 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.688.315 I llama_perf_context_print:        eval time =   10929.72 ms /    26 runs   (  420.37 ms per token,     2.38 tokens per second)
0.12.688.341 I llama_perf_context_print:       total time =   11001.52 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.023.331 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.424 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.437 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.439 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.444 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.449 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.450 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.451 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.452 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.454 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.463 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.465 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.467 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.468 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.478 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.113 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.561 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.079 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.092 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.093 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.094 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.096 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.097 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.098 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.103 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.105 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.106 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.107 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.358.110 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.120 I llama_model_loader: - type  f32:   37 tensors
0.00.358.122 I llama_model_loader: - type q8_0:  127 tensors
0.00.620.443 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.742.070 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.743.029 I llm_load_vocab: special tokens cache size = 5
0.00.945.633 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.945.708 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.945.708 I llm_load_print_meta: arch             = gemma
0.00.945.709 I llm_load_print_meta: vocab type       = SPM
0.00.945.710 I llm_load_print_meta: n_vocab          = 256000
0.00.945.713 I llm_load_print_meta: n_merges         = 0
0.00.945.713 I llm_load_print_meta: vocab_only       = 0
0.00.945.714 I llm_load_print_meta: n_ctx_train      = 8192
0.00.945.714 I llm_load_print_meta: n_embd           = 2048
0.00.945.715 I llm_load_print_meta: n_layer          = 18
0.00.945.779 I llm_load_print_meta: n_head           = 8
0.00.945.786 I llm_load_print_meta: n_head_kv        = 1
0.00.945.786 I llm_load_print_meta: n_rot            = 256
0.00.945.787 I llm_load_print_meta: n_swa            = 0
0.00.945.787 I llm_load_print_meta: n_embd_head_k    = 256
0.00.945.787 I llm_load_print_meta: n_embd_head_v    = 256
0.00.945.792 I llm_load_print_meta: n_gqa            = 8
0.00.945.797 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.945.801 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.945.803 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.945.804 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.945.827 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.945.828 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.945.829 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.945.848 I llm_load_print_meta: n_ff             = 16384
0.00.945.849 I llm_load_print_meta: n_expert         = 0
0.00.945.854 I llm_load_print_meta: n_expert_used    = 0
0.00.945.859 I llm_load_print_meta: causal attn      = 1
0.00.945.860 I llm_load_print_meta: pooling type     = 0
0.00.945.861 I llm_load_print_meta: rope type        = 2
0.00.945.861 I llm_load_print_meta: rope scaling     = linear
0.00.945.862 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.945.863 I llm_load_print_meta: freq_scale_train = 1
0.00.945.864 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.945.864 I llm_load_print_meta: rope_finetuned   = unknown
0.00.945.868 I llm_load_print_meta: ssm_d_conv       = 0
0.00.945.868 I llm_load_print_meta: ssm_d_inner      = 0
0.00.945.869 I llm_load_print_meta: ssm_d_state      = 0
0.00.945.869 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.945.869 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.945.871 I llm_load_print_meta: model type       = 2B
0.00.945.872 I llm_load_print_meta: model ftype      = Q8_0
0.00.945.873 I llm_load_print_meta: model params     = 2.51 B
0.00.945.882 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.945.883 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.945.884 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.945.884 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.945.885 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.945.886 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.945.886 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.945.887 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.945.894 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.945.905 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.945.913 I llm_load_print_meta: max token length = 93
0.01.042.459 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.048.393 I llama_new_context_with_model: n_seq_max     = 1
0.01.048.401 I llama_new_context_with_model: n_ctx         = 4096
0.01.048.401 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.048.401 I llama_new_context_with_model: n_batch       = 2048
0.01.048.402 I llama_new_context_with_model: n_ubatch      = 512
0.01.048.402 I llama_new_context_with_model: flash_attn    = 0
0.01.048.404 I llama_new_context_with_model: freq_base     = 10000.0
0.01.048.405 I llama_new_context_with_model: freq_scale    = 1
0.01.048.406 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.063.337 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.063.378 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.063.498 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.066.029 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.066.033 I llama_new_context_with_model: graph nodes  = 601
0.01.066.034 I llama_new_context_with_model: graph splits = 1
0.01.066.056 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.675.417 I main: llama threadpool init, n_threads = 4
0.01.675.432 I 
0.01.675.552 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.675.553 I 
0.01.675.783 I sampler seed: 1568540128
0.01.675.798 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.675.809 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.675.810 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.675.810 I 
 increasively, oblivious to the chaos he wreaks. [end of text]


0.06.785.466 I llama_perf_sampler_print:    sampling time =      18.27 ms /    13 runs   (    1.41 ms per token,   711.51 tokens per second)
0.06.785.469 I llama_perf_context_print:        load time =    1674.46 ms
0.06.785.470 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.785.471 I llama_perf_context_print:        eval time =    5076.01 ms /    12 runs   (  423.00 ms per token,     2.36 tokens per second)
0.06.785.472 I llama_perf_context_print:       total time =    5110.06 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.000.866 I main: load the model and apply lora adapter, if any
0.00.023.644 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.656 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.750 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.762 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.765 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.773 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.775 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.776 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.778 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.780 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.781 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.792 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.796 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.797 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.798 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.800 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.635 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.862 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.236 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.244 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.245 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.246 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.248 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.249 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.250 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.254 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.256 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.257 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.258 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.358.260 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.269 I llama_model_loader: - type  f32:   37 tensors
0.00.358.271 I llama_model_loader: - type q8_0:  127 tensors
0.00.638.570 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.763.905 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.764.910 I llm_load_vocab: special tokens cache size = 5
0.00.954.176 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.954.246 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.954.247 I llm_load_print_meta: arch             = gemma
0.00.954.248 I llm_load_print_meta: vocab type       = SPM
0.00.954.249 I llm_load_print_meta: n_vocab          = 256000
0.00.954.251 I llm_load_print_meta: n_merges         = 0
0.00.954.251 I llm_load_print_meta: vocab_only       = 0
0.00.954.252 I llm_load_print_meta: n_ctx_train      = 8192
0.00.954.252 I llm_load_print_meta: n_embd           = 2048
0.00.954.253 I llm_load_print_meta: n_layer          = 18
0.00.954.318 I llm_load_print_meta: n_head           = 8
0.00.954.326 I llm_load_print_meta: n_head_kv        = 1
0.00.954.326 I llm_load_print_meta: n_rot            = 256
0.00.954.327 I llm_load_print_meta: n_swa            = 0
0.00.954.327 I llm_load_print_meta: n_embd_head_k    = 256
0.00.954.327 I llm_load_print_meta: n_embd_head_v    = 256
0.00.954.332 I llm_load_print_meta: n_gqa            = 8
0.00.954.337 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.954.342 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.954.343 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.954.346 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.954.346 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.954.347 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.954.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.954.356 I llm_load_print_meta: n_ff             = 16384
0.00.954.356 I llm_load_print_meta: n_expert         = 0
0.00.954.357 I llm_load_print_meta: n_expert_used    = 0
0.00.954.357 I llm_load_print_meta: causal attn      = 1
0.00.954.357 I llm_load_print_meta: pooling type     = 0
0.00.954.367 I llm_load_print_meta: rope type        = 2
0.00.954.378 I llm_load_print_meta: rope scaling     = linear
0.00.954.380 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.954.381 I llm_load_print_meta: freq_scale_train = 1
0.00.954.384 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.954.385 I llm_load_print_meta: rope_finetuned   = unknown
0.00.954.385 I llm_load_print_meta: ssm_d_conv       = 0
0.00.954.385 I llm_load_print_meta: ssm_d_inner      = 0
0.00.954.386 I llm_load_print_meta: ssm_d_state      = 0
0.00.954.386 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.954.386 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.954.387 I llm_load_print_meta: model type       = 2B
0.00.954.389 I llm_load_print_meta: model ftype      = Q8_0
0.00.954.389 I llm_load_print_meta: model params     = 2.51 B
0.00.954.398 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.954.399 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.954.400 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.954.400 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.954.401 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.954.401 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.954.402 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.954.403 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.954.411 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.954.412 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.954.413 I llm_load_print_meta: max token length = 93
0.01.032.459 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.032.469 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.032.470 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.032.470 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.032.471 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.032.472 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.038.318 I llama_new_context_with_model: n_seq_max     = 1
0.01.038.325 I llama_new_context_with_model: n_ctx         = 4096
0.01.038.325 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.038.326 I llama_new_context_with_model: n_batch       = 2048
0.01.038.326 I llama_new_context_with_model: n_ubatch      = 512
0.01.038.327 I llama_new_context_with_model: flash_attn    = 0
0.01.038.329 I llama_new_context_with_model: freq_base     = 10000.0
0.01.038.330 I llama_new_context_with_model: freq_scale    = 1
0.01.038.331 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.053.153 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.053.194 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.053.315 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.055.827 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.055.831 I llama_new_context_with_model: graph nodes  = 601
0.01.055.831 I llama_new_context_with_model: graph splits = 1
0.01.055.854 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.699.867 I main: llama threadpool init, n_threads = 4
0.01.699.882 I 
0.01.700.015 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.700.021 I 
0.01.700.301 I sampler seed: 454937475
0.01.700.321 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.700.339 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.700.343 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.700.343 I 
 increably. 

I am not able to hear you. Please try again later. [end of text]


0.09.829.863 I llama_perf_sampler_print:    sampling time =      28.59 ms /    20 runs   (    1.43 ms per token,   699.67 tokens per second)
0.09.829.866 I llama_perf_context_print:        load time =    1698.91 ms
0.09.829.867 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.829.892 I llama_perf_context_print:        eval time =    8076.56 ms /    19 runs   (  425.08 ms per token,     2.35 tokens per second)
0.09.829.894 I llama_perf_context_print:       total time =    8130.01 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.486 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.495 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.584 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.596 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.598 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.604 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.609 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.610 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.613 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.622 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.623 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.625 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.627 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.629 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.239.025 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.343.399 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.366.716 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.366.724 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.366.725 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.366.727 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.366.728 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.366.730 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.366.731 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.366.735 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.366.736 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.366.738 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.366.739 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.366.741 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.366.749 I llama_model_loader: - type  f32:   37 tensors
0.00.366.752 I llama_model_loader: - type q8_0:  127 tensors
0.00.618.731 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.745.755 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.746.793 I llm_load_vocab: special tokens cache size = 5
0.00.942.890 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.942.967 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.942.968 I llm_load_print_meta: arch             = gemma
0.00.942.969 I llm_load_print_meta: vocab type       = SPM
0.00.942.970 I llm_load_print_meta: n_vocab          = 256000
0.00.942.973 I llm_load_print_meta: n_merges         = 0
0.00.942.973 I llm_load_print_meta: vocab_only       = 0
0.00.942.974 I llm_load_print_meta: n_ctx_train      = 8192
0.00.942.974 I llm_load_print_meta: n_embd           = 2048
0.00.942.975 I llm_load_print_meta: n_layer          = 18
0.00.943.041 I llm_load_print_meta: n_head           = 8
0.00.943.049 I llm_load_print_meta: n_head_kv        = 1
0.00.943.051 I llm_load_print_meta: n_rot            = 256
0.00.943.051 I llm_load_print_meta: n_swa            = 0
0.00.943.052 I llm_load_print_meta: n_embd_head_k    = 256
0.00.943.052 I llm_load_print_meta: n_embd_head_v    = 256
0.00.943.069 I llm_load_print_meta: n_gqa            = 8
0.00.943.075 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.943.080 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.943.084 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.943.087 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.943.087 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.943.088 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.943.089 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.943.094 I llm_load_print_meta: n_ff             = 16384
0.00.943.094 I llm_load_print_meta: n_expert         = 0
0.00.943.095 I llm_load_print_meta: n_expert_used    = 0
0.00.943.096 I llm_load_print_meta: causal attn      = 1
0.00.943.096 I llm_load_print_meta: pooling type     = 0
0.00.943.096 I llm_load_print_meta: rope type        = 2
0.00.943.097 I llm_load_print_meta: rope scaling     = linear
0.00.943.115 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.943.116 I llm_load_print_meta: freq_scale_train = 1
0.00.943.117 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.943.117 I llm_load_print_meta: rope_finetuned   = unknown
0.00.943.118 I llm_load_print_meta: ssm_d_conv       = 0
0.00.943.118 I llm_load_print_meta: ssm_d_inner      = 0
0.00.943.119 I llm_load_print_meta: ssm_d_state      = 0
0.00.943.119 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.943.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.943.121 I llm_load_print_meta: model type       = 2B
0.00.943.122 I llm_load_print_meta: model ftype      = Q8_0
0.00.943.123 I llm_load_print_meta: model params     = 2.51 B
0.00.943.136 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.943.139 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.943.139 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.943.140 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.943.141 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.943.142 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.943.143 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.943.146 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.943.154 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.943.156 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.943.157 I llm_load_print_meta: max token length = 93
0.01.016.199 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.016.208 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.022.111 I llama_new_context_with_model: n_seq_max     = 1
0.01.022.118 I llama_new_context_with_model: n_ctx         = 4096
0.01.022.119 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.022.119 I llama_new_context_with_model: n_batch       = 2048
0.01.022.120 I llama_new_context_with_model: n_ubatch      = 512
0.01.022.120 I llama_new_context_with_model: flash_attn    = 0
0.01.022.122 I llama_new_context_with_model: freq_base     = 10000.0
0.01.022.123 I llama_new_context_with_model: freq_scale    = 1
0.01.022.123 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.037.163 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.037.203 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.037.331 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.039.973 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.039.977 I llama_new_context_with_model: graph nodes  = 601
0.01.039.977 I llama_new_context_with_model: graph splits = 1
0.01.039.999 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.647.168 I main: llama threadpool init, n_threads = 4
0.01.647.182 I 
0.01.647.300 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.647.304 I 
0.01.647.531 I sampler seed: 436770507
0.01.647.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.647.553 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.647.556 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.647.556 I 
 seconal rhythm.

The rhythm is characterized by a cyclical pattern of alternating high and low notes. The high notes are characterized by a rapid succession of notes,

0.15.174.844 I llama_perf_sampler_print:    sampling time =      48.34 ms /    33 runs   (    1.46 ms per token,   682.61 tokens per second)
0.15.174.859 I llama_perf_context_print:        load time =    1646.22 ms
0.15.174.861 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.174.864 I llama_perf_context_print:        eval time =   13439.87 ms /    32 runs   (  420.00 ms per token,     2.38 tokens per second)
0.15.174.865 I llama_perf_context_print:       total time =   13527.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m54.120s
user	2m45.241s
sys	0m9.416s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4227 (1f8cd9d1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185784.65 ms
main:    total time = 185784.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.676 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.023.519 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.527 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.625 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.639 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.640 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.647 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.651 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.653 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.654 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.655 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.656 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.663 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.665 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.667 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.668 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.669 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.578 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.582 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.895 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.903 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.905 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.906 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.908 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.909 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.911 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.915 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.917 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.919 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.920 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.922 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.931 I llama_model_loader: - type  f32:   37 tensors
0.00.356.933 I llama_model_loader: - type q4_K:  108 tensors
0.00.356.934 I llama_model_loader: - type q6_K:   19 tensors
0.00.607.689 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.729.271 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.730.191 I llm_load_vocab: special tokens cache size = 5
0.00.927.880 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.927.952 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.927.956 I llm_load_print_meta: arch             = gemma
0.00.927.957 I llm_load_print_meta: vocab type       = SPM
0.00.927.957 I llm_load_print_meta: n_vocab          = 256000
0.00.927.960 I llm_load_print_meta: n_merges         = 0
0.00.927.960 I llm_load_print_meta: vocab_only       = 0
0.00.927.961 I llm_load_print_meta: n_ctx_train      = 8192
0.00.927.961 I llm_load_print_meta: n_embd           = 2048
0.00.927.961 I llm_load_print_meta: n_layer          = 18
0.00.928.029 I llm_load_print_meta: n_head           = 8
0.00.928.039 I llm_load_print_meta: n_head_kv        = 1
0.00.928.040 I llm_load_print_meta: n_rot            = 256
0.00.928.041 I llm_load_print_meta: n_swa            = 0
0.00.928.041 I llm_load_print_meta: n_embd_head_k    = 256
0.00.928.041 I llm_load_print_meta: n_embd_head_v    = 256
0.00.928.046 I llm_load_print_meta: n_gqa            = 8
0.00.928.051 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.928.058 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.928.059 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.928.062 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.928.062 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.928.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.928.064 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.928.068 I llm_load_print_meta: n_ff             = 16384
0.00.928.069 I llm_load_print_meta: n_expert         = 0
0.00.928.070 I llm_load_print_meta: n_expert_used    = 0
0.00.928.070 I llm_load_print_meta: causal attn      = 1
0.00.928.070 I llm_load_print_meta: pooling type     = 0
0.00.928.071 I llm_load_print_meta: rope type        = 2
0.00.928.072 I llm_load_print_meta: rope scaling     = linear
0.00.928.073 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.928.074 I llm_load_print_meta: freq_scale_train = 1
0.00.928.074 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.928.075 I llm_load_print_meta: rope_finetuned   = unknown
0.00.928.075 I llm_load_print_meta: ssm_d_conv       = 0
0.00.928.076 I llm_load_print_meta: ssm_d_inner      = 0
0.00.928.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.928.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.928.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.928.078 I llm_load_print_meta: model type       = 2B
0.00.928.079 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.928.080 I llm_load_print_meta: model params     = 2.51 B
0.00.928.089 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.928.090 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.928.090 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.928.091 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.928.091 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.928.103 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.928.104 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.928.105 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.928.111 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.928.113 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.928.113 I llm_load_print_meta: max token length = 93
0.00.991.515 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.991.522 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.991.523 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.991.523 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.991.524 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.991.525 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.997.348 I llama_new_context_with_model: n_seq_max     = 1
0.00.997.356 I llama_new_context_with_model: n_ctx         = 4096
0.00.997.357 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.997.357 I llama_new_context_with_model: n_batch       = 2048
0.00.997.357 I llama_new_context_with_model: n_ubatch      = 512
0.00.997.358 I llama_new_context_with_model: flash_attn    = 0
0.00.997.360 I llama_new_context_with_model: freq_base     = 10000.0
0.00.997.361 I llama_new_context_with_model: freq_scale    = 1
0.00.997.362 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.012.072 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.012.113 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.012.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.014.775 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.014.780 I llama_new_context_with_model: graph nodes  = 601
0.01.014.780 I llama_new_context_with_model: graph splits = 1
0.01.014.805 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.600.984 I main: llama threadpool init, n_threads = 4
0.01.600.998 I 
0.01.601.115 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.601.120 I 
0.01.601.352 I sampler seed: 1230965823
0.01.601.366 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.601.378 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.601.378 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.601.379 I 
 guaranteing the existence of extraterrestrial intelligence that possesses superior cognitive abilities.

**Argument:**

The existence of extraterrestrial intelligence (ETI) possessing superior cognitive abilities

0.12.837.935 I llama_perf_sampler_print:    sampling time =      48.12 ms /    33 runs   (    1.46 ms per token,   685.77 tokens per second)
0.12.837.939 I llama_perf_context_print:        load time =    1600.00 ms
0.12.837.941 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.837.954 I llama_perf_context_print:        eval time =   11149.09 ms /    32 runs   (  348.41 ms per token,     2.87 tokens per second)
0.12.837.955 I llama_perf_context_print:       total time =   11236.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4227 (1f8cd9d1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185547.55 ms
main:    total time = 185547.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.000.910 I main: load the model and apply lora adapter, if any
0.00.023.585 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.690 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.706 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.717 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.719 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.720 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.725 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.732 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.734 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.736 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.737 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.746 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.727 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.359.079 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.359.088 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.359.090 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.359.091 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.359.093 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.359.094 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.359.095 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.359.100 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.359.101 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.359.110 I llama_model_loader: - type  f32:   37 tensors
0.00.359.112 I llama_model_loader: - type q4_K:  108 tensors
0.00.359.113 I llama_model_loader: - type q6_K:   19 tensors
0.00.629.870 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.758.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.759.602 I llm_load_vocab: special tokens cache size = 5
0.00.959.201 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.959.274 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.959.276 I llm_load_print_meta: arch             = gemma
0.00.959.276 I llm_load_print_meta: vocab type       = SPM
0.00.959.277 I llm_load_print_meta: n_vocab          = 256000
0.00.959.279 I llm_load_print_meta: n_merges         = 0
0.00.959.280 I llm_load_print_meta: vocab_only       = 0
0.00.959.280 I llm_load_print_meta: n_ctx_train      = 8192
0.00.959.281 I llm_load_print_meta: n_embd           = 2048
0.00.959.281 I llm_load_print_meta: n_layer          = 18
0.00.959.347 I llm_load_print_meta: n_head           = 8
0.00.959.354 I llm_load_print_meta: n_head_kv        = 1
0.00.959.354 I llm_load_print_meta: n_rot            = 256
0.00.959.355 I llm_load_print_meta: n_swa            = 0
0.00.959.355 I llm_load_print_meta: n_embd_head_k    = 256
0.00.959.356 I llm_load_print_meta: n_embd_head_v    = 256
0.00.959.361 I llm_load_print_meta: n_gqa            = 8
0.00.959.366 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.959.370 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.959.373 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.959.375 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.959.375 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.959.376 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.959.387 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.959.395 I llm_load_print_meta: n_ff             = 16384
0.00.959.396 I llm_load_print_meta: n_expert         = 0
0.00.959.396 I llm_load_print_meta: n_expert_used    = 0
0.00.959.396 I llm_load_print_meta: causal attn      = 1
0.00.959.397 I llm_load_print_meta: pooling type     = 0
0.00.959.397 I llm_load_print_meta: rope type        = 2
0.00.959.398 I llm_load_print_meta: rope scaling     = linear
0.00.959.399 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.959.400 I llm_load_print_meta: freq_scale_train = 1
0.00.959.400 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.959.401 I llm_load_print_meta: rope_finetuned   = unknown
0.00.959.402 I llm_load_print_meta: ssm_d_conv       = 0
0.00.959.402 I llm_load_print_meta: ssm_d_inner      = 0
0.00.959.402 I llm_load_print_meta: ssm_d_state      = 0
0.00.959.403 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.959.404 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.959.405 I llm_load_print_meta: model type       = 2B
0.00.959.406 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.959.407 I llm_load_print_meta: model params     = 2.51 B
0.00.959.417 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.959.418 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.959.434 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.959.441 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.959.441 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.959.442 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.959.442 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.959.443 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.959.449 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.959.450 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.959.450 I llm_load_print_meta: max token length = 93
0.01.017.802 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.023.579 I llama_new_context_with_model: n_seq_max     = 1
0.01.023.586 I llama_new_context_with_model: n_ctx         = 4096
0.01.023.586 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.023.586 I llama_new_context_with_model: n_batch       = 2048
0.01.023.587 I llama_new_context_with_model: n_ubatch      = 512
0.01.023.588 I llama_new_context_with_model: flash_attn    = 0
0.01.023.591 I llama_new_context_with_model: freq_base     = 10000.0
0.01.023.592 I llama_new_context_with_model: freq_scale    = 1
0.01.023.593 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.038.926 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.038.970 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.039.092 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.041.652 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.041.657 I llama_new_context_with_model: graph nodes  = 601
0.01.041.657 I llama_new_context_with_model: graph splits = 1
0.01.041.680 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.629.778 I main: llama threadpool init, n_threads = 4
0.01.629.796 I 
0.01.629.916 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.629.920 I 
0.01.630.152 I sampler seed: 3700376557
0.01.630.166 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.630.175 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.630.179 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.630.179 I 
 encompases?

The provided text does not contain any information regarding encompases, so I am unable to answer this question from the provided context. [end of text]


0.12.155.011 I llama_perf_sampler_print:    sampling time =      44.93 ms /    31 runs   (    1.45 ms per token,   689.92 tokens per second)
0.12.155.014 I llama_perf_context_print:        load time =    1628.77 ms
0.12.155.016 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.155.017 I llama_perf_context_print:        eval time =   10443.30 ms /    30 runs   (  348.11 ms per token,     2.87 tokens per second)
0.12.155.018 I llama_perf_context_print:       total time =   10525.24 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.204s
user	46m42.617s
sys	0m6.299s
