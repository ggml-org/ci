+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.546 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.501 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.512 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.520 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.524 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.525 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.529 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.530 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.531 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.532 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.533 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.533 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.538 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.538 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.539 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.539 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.540 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.309 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.860 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.644 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.650 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.651 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.652 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.652 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.653 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.654 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.656 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.657 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.658 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.659 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.660 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.663 I llama_model_loader: - type  f32:   37 tensors
0.00.130.664 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.854 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.415 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.959 I llm_load_vocab: special tokens cache size = 5
0.00.273.552 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.567 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.567 I llm_load_print_meta: arch             = gemma
0.00.273.568 I llm_load_print_meta: vocab type       = SPM
0.00.273.568 I llm_load_print_meta: n_vocab          = 256000
0.00.273.569 I llm_load_print_meta: n_merges         = 0
0.00.273.569 I llm_load_print_meta: vocab_only       = 0
0.00.273.569 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.570 I llm_load_print_meta: n_embd           = 2048
0.00.273.570 I llm_load_print_meta: n_layer          = 18
0.00.273.582 I llm_load_print_meta: n_head           = 8
0.00.273.583 I llm_load_print_meta: n_head_kv        = 1
0.00.273.584 I llm_load_print_meta: n_rot            = 256
0.00.273.584 I llm_load_print_meta: n_swa            = 0
0.00.273.584 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.584 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.585 I llm_load_print_meta: n_gqa            = 8
0.00.273.586 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.587 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.588 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.589 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.590 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.590 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.590 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.591 I llm_load_print_meta: n_ff             = 16384
0.00.273.591 I llm_load_print_meta: n_expert         = 0
0.00.273.592 I llm_load_print_meta: n_expert_used    = 0
0.00.273.592 I llm_load_print_meta: causal attn      = 1
0.00.273.592 I llm_load_print_meta: pooling type     = 0
0.00.273.592 I llm_load_print_meta: rope type        = 2
0.00.273.593 I llm_load_print_meta: rope scaling     = linear
0.00.273.594 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.594 I llm_load_print_meta: freq_scale_train = 1
0.00.273.595 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.595 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.595 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.596 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.596 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.596 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.597 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.597 I llm_load_print_meta: model type       = 2B
0.00.273.598 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.599 I llm_load_print_meta: model params     = 2.51 B
0.00.273.600 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.600 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.601 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.601 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.602 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.602 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.602 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.603 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.604 I llm_load_print_meta: max token length = 93
0.00.374.497 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.504 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.505 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.506 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.506 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.507 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.379.770 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.775 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.776 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.776 I llama_new_context_with_model: n_batch       = 2048
0.00.379.777 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.777 I llama_new_context_with_model: flash_attn    = 0
0.00.379.779 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.780 I llama_new_context_with_model: freq_scale    = 1
0.00.379.782 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.242 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.255 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.350 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.612 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.619 I llama_new_context_with_model: graph nodes  = 601
0.00.395.619 I llama_new_context_with_model: graph splits = 1
0.00.395.621 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.441 I main: llama threadpool init, n_threads = 4
0.00.480.454 I 
0.00.480.527 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.480.530 I 
0.00.480.578 I sampler seed: 2538816176
0.00.480.589 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.600 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.604 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.604 I 
 increadibly

I am unable to generate a response as I am unable to access or process external information or resources. [end of text]


0.02.169.037 I llama_perf_sampler_print:    sampling time =       3.65 ms /    25 runs   (    0.15 ms per token,  6851.19 tokens per second)
0.02.169.040 I llama_perf_context_print:        load time =     479.67 ms
0.02.169.041 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.169.042 I llama_perf_context_print:        eval time =    1674.29 ms /    24 runs   (   69.76 ms per token,    14.33 tokens per second)
0.02.169.043 I llama_perf_context_print:       total time =    1688.60 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.533 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.020.933 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.947 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.953 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.955 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.958 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.961 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.962 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.962 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.963 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.963 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.967 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.968 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.969 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.969 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.970 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.859 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.370 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.170 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.177 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.178 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.179 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.180 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.181 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.185 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.186 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.187 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.188 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.189 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.192 I llama_model_loader: - type  f32:   37 tensors
0.00.130.193 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.811 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.437 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.058 I llm_load_vocab: special tokens cache size = 5
0.00.268.270 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.286 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.286 I llm_load_print_meta: arch             = gemma
0.00.268.287 I llm_load_print_meta: vocab type       = SPM
0.00.268.287 I llm_load_print_meta: n_vocab          = 256000
0.00.268.288 I llm_load_print_meta: n_merges         = 0
0.00.268.288 I llm_load_print_meta: vocab_only       = 0
0.00.268.289 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.289 I llm_load_print_meta: n_embd           = 2048
0.00.268.289 I llm_load_print_meta: n_layer          = 18
0.00.268.300 I llm_load_print_meta: n_head           = 8
0.00.268.301 I llm_load_print_meta: n_head_kv        = 1
0.00.268.301 I llm_load_print_meta: n_rot            = 256
0.00.268.302 I llm_load_print_meta: n_swa            = 0
0.00.268.302 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.302 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.303 I llm_load_print_meta: n_gqa            = 8
0.00.268.304 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.305 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.306 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.308 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.309 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.309 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.309 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.310 I llm_load_print_meta: n_ff             = 16384
0.00.268.311 I llm_load_print_meta: n_expert         = 0
0.00.268.311 I llm_load_print_meta: n_expert_used    = 0
0.00.268.311 I llm_load_print_meta: causal attn      = 1
0.00.268.312 I llm_load_print_meta: pooling type     = 0
0.00.268.312 I llm_load_print_meta: rope type        = 2
0.00.268.312 I llm_load_print_meta: rope scaling     = linear
0.00.268.313 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.314 I llm_load_print_meta: freq_scale_train = 1
0.00.268.314 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.315 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.315 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.316 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.316 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.316 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.316 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.317 I llm_load_print_meta: model type       = 2B
0.00.268.318 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.319 I llm_load_print_meta: model params     = 2.51 B
0.00.268.320 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.320 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.320 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.321 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.321 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.321 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.322 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.322 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.323 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.323 I llm_load_print_meta: max token length = 93
0.00.363.802 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.368.815 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.822 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.822 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.823 I llama_new_context_with_model: n_batch       = 2048
0.00.368.823 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.824 I llama_new_context_with_model: flash_attn    = 0
0.00.368.826 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.827 I llama_new_context_with_model: freq_scale    = 1
0.00.368.827 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.612 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.628 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.720 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.981 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.988 I llama_new_context_with_model: graph nodes  = 601
0.00.384.988 I llama_new_context_with_model: graph splits = 1
0.00.384.990 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.131 I main: llama threadpool init, n_threads = 4
0.00.466.147 I 
0.00.466.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.466.222 I 
0.00.466.263 I sampler seed: 2756901750
0.00.466.293 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.304 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.308 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.308 I 
 increasively. [end of text]


0.00.743.160 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8196.72 tokens per second)
0.00.743.162 I llama_perf_context_print:        load time =     465.37 ms
0.00.743.163 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.743.164 I llama_perf_context_print:        eval time =     273.50 ms /     4 runs   (   68.37 ms per token,    14.63 tokens per second)
0.00.743.166 I llama_perf_context_print:       total time =     277.04 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.559 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.020.849 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.856 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.874 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.878 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.881 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.882 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.882 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.883 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.883 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.885 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.889 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.890 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.891 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.891 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.891 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.822 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.590 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.416 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.422 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.423 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.424 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.424 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.425 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.426 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.428 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.429 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.429 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.431 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.432 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.435 I llama_model_loader: - type  f32:   37 tensors
0.00.130.436 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.257 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.010 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.584 I llm_load_vocab: special tokens cache size = 5
0.00.271.717 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.732 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.733 I llm_load_print_meta: arch             = gemma
0.00.271.733 I llm_load_print_meta: vocab type       = SPM
0.00.271.734 I llm_load_print_meta: n_vocab          = 256000
0.00.271.734 I llm_load_print_meta: n_merges         = 0
0.00.271.735 I llm_load_print_meta: vocab_only       = 0
0.00.271.735 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.735 I llm_load_print_meta: n_embd           = 2048
0.00.271.735 I llm_load_print_meta: n_layer          = 18
0.00.271.746 I llm_load_print_meta: n_head           = 8
0.00.271.747 I llm_load_print_meta: n_head_kv        = 1
0.00.271.747 I llm_load_print_meta: n_rot            = 256
0.00.271.748 I llm_load_print_meta: n_swa            = 0
0.00.271.748 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.748 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.749 I llm_load_print_meta: n_gqa            = 8
0.00.271.750 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.751 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.752 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.753 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.754 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.754 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.755 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.755 I llm_load_print_meta: n_ff             = 16384
0.00.271.756 I llm_load_print_meta: n_expert         = 0
0.00.271.756 I llm_load_print_meta: n_expert_used    = 0
0.00.271.756 I llm_load_print_meta: causal attn      = 1
0.00.271.757 I llm_load_print_meta: pooling type     = 0
0.00.271.757 I llm_load_print_meta: rope type        = 2
0.00.271.757 I llm_load_print_meta: rope scaling     = linear
0.00.271.759 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.759 I llm_load_print_meta: freq_scale_train = 1
0.00.271.759 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.760 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.760 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.761 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.761 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.761 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.761 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.762 I llm_load_print_meta: model type       = 2B
0.00.271.763 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.763 I llm_load_print_meta: model params     = 2.51 B
0.00.271.764 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.764 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.765 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.765 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.765 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.766 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.766 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.766 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.767 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.767 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.768 I llm_load_print_meta: max token length = 93
0.00.347.029 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.347.038 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.039 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.347.040 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.347.040 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.041 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.352.110 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.117 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.117 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.118 I llama_new_context_with_model: n_batch       = 2048
0.00.352.118 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.119 I llama_new_context_with_model: flash_attn    = 0
0.00.352.121 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.122 I llama_new_context_with_model: freq_scale    = 1
0.00.352.123 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.336 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.351 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.442 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.715 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.720 I llama_new_context_with_model: graph nodes  = 601
0.00.367.721 I llama_new_context_with_model: graph splits = 1
0.00.367.723 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.114 I main: llama threadpool init, n_threads = 4
0.00.453.128 I 
0.00.453.199 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.453.202 I 
0.00.453.243 I sampler seed: 566677076
0.00.453.254 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.267 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.271 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.271 I 
 increadibly!

I'm so glad you're feeling better! I'm so happy for you!

**Answer:**

I am unable to

0.02.740.236 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6873.57 tokens per second)
0.02.740.239 I llama_perf_context_print:        load time =     452.33 ms
0.02.740.241 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.740.242 I llama_perf_context_print:        eval time =    2267.51 ms /    32 runs   (   70.86 ms per token,    14.11 tokens per second)
0.02.740.243 I llama_perf_context_print:       total time =    2287.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.531 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.706 I main: llama backend init
0.00.000.714 I main: load the model and apply lora adapter, if any
0.00.020.848 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.858 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.866 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.875 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.876 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.882 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.885 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.886 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.887 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.887 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.888 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.891 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.891 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.892 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.892 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.893 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.982 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.222 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.122 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.130 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.130 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.132 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.135 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.136 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.137 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.138 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.138 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.144 I llama_model_loader: - type  f32:   37 tensors
0.00.131.145 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.580 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.996 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.598 I llm_load_vocab: special tokens cache size = 5
0.00.270.638 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.656 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.656 I llm_load_print_meta: arch             = gemma
0.00.270.657 I llm_load_print_meta: vocab type       = SPM
0.00.270.658 I llm_load_print_meta: n_vocab          = 256000
0.00.270.658 I llm_load_print_meta: n_merges         = 0
0.00.270.659 I llm_load_print_meta: vocab_only       = 0
0.00.270.659 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.672 I llm_load_print_meta: n_embd           = 2048
0.00.270.672 I llm_load_print_meta: n_layer          = 18
0.00.270.685 I llm_load_print_meta: n_head           = 8
0.00.270.686 I llm_load_print_meta: n_head_kv        = 1
0.00.270.686 I llm_load_print_meta: n_rot            = 256
0.00.270.686 I llm_load_print_meta: n_swa            = 0
0.00.270.687 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.688 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.689 I llm_load_print_meta: n_gqa            = 8
0.00.270.690 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.691 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.692 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.693 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.694 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.694 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.694 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.695 I llm_load_print_meta: n_ff             = 16384
0.00.270.696 I llm_load_print_meta: n_expert         = 0
0.00.270.696 I llm_load_print_meta: n_expert_used    = 0
0.00.270.696 I llm_load_print_meta: causal attn      = 1
0.00.270.696 I llm_load_print_meta: pooling type     = 0
0.00.270.697 I llm_load_print_meta: rope type        = 2
0.00.270.697 I llm_load_print_meta: rope scaling     = linear
0.00.270.699 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.699 I llm_load_print_meta: freq_scale_train = 1
0.00.270.700 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.701 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.701 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.701 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.702 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.702 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.703 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.703 I llm_load_print_meta: model type       = 2B
0.00.270.704 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.705 I llm_load_print_meta: model params     = 2.51 B
0.00.270.705 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.706 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.706 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.707 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.707 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.708 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.709 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.709 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.709 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.710 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.710 I llm_load_print_meta: max token length = 93
0.00.341.787 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.794 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.831 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.837 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.838 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.838 I llama_new_context_with_model: n_batch       = 2048
0.00.346.839 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.839 I llama_new_context_with_model: flash_attn    = 0
0.00.346.842 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.843 I llama_new_context_with_model: freq_scale    = 1
0.00.346.844 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.502 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.515 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.607 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.893 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.899 I llama_new_context_with_model: graph nodes  = 601
0.00.362.899 I llama_new_context_with_model: graph splits = 1
0.00.362.901 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.619 I main: llama threadpool init, n_threads = 4
0.00.452.635 I 
0.00.452.709 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.452.713 I 
0.00.452.753 I sampler seed: 2926397211
0.00.452.763 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.766 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.766 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.766 I 
 seconally. [end of text]


0.00.753.010 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8090.61 tokens per second)
0.00.753.012 I llama_perf_context_print:        load time =     451.89 ms
0.00.753.013 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.753.015 I llama_perf_context_print:        eval time =     297.29 ms /     4 runs   (   74.32 ms per token,    13.46 tokens per second)
0.00.753.016 I llama_perf_context_print:       total time =     300.40 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.804s
user	0m21.084s
sys	0m9.384s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4227 (1f8cd9d1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40213.64 ms
main:    total time = 40213.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.527 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.216 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.225 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.233 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.238 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.242 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.245 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.246 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.247 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.248 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.248 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.249 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.252 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.252 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.253 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.253 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.254 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.565 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.867 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.693 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.699 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.700 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.701 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.701 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.702 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.703 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.705 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.706 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.706 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.707 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.708 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.712 I llama_model_loader: - type  f32:   37 tensors
0.00.129.714 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.714 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.205 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.613 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.318 I llm_load_vocab: special tokens cache size = 5
0.00.279.611 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.628 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.629 I llm_load_print_meta: arch             = gemma
0.00.279.630 I llm_load_print_meta: vocab type       = SPM
0.00.279.630 I llm_load_print_meta: n_vocab          = 256000
0.00.279.631 I llm_load_print_meta: n_merges         = 0
0.00.279.631 I llm_load_print_meta: vocab_only       = 0
0.00.279.631 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.631 I llm_load_print_meta: n_embd           = 2048
0.00.279.632 I llm_load_print_meta: n_layer          = 18
0.00.279.644 I llm_load_print_meta: n_head           = 8
0.00.279.645 I llm_load_print_meta: n_head_kv        = 1
0.00.279.645 I llm_load_print_meta: n_rot            = 256
0.00.279.645 I llm_load_print_meta: n_swa            = 0
0.00.279.646 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.646 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.647 I llm_load_print_meta: n_gqa            = 8
0.00.279.648 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.649 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.649 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.651 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.651 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.652 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.653 I llm_load_print_meta: n_ff             = 16384
0.00.279.653 I llm_load_print_meta: n_expert         = 0
0.00.279.653 I llm_load_print_meta: n_expert_used    = 0
0.00.279.653 I llm_load_print_meta: causal attn      = 1
0.00.279.653 I llm_load_print_meta: pooling type     = 0
0.00.279.654 I llm_load_print_meta: rope type        = 2
0.00.279.654 I llm_load_print_meta: rope scaling     = linear
0.00.279.655 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.656 I llm_load_print_meta: freq_scale_train = 1
0.00.279.656 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.657 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.657 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.657 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.657 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.658 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.658 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.658 I llm_load_print_meta: model type       = 2B
0.00.279.659 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.660 I llm_load_print_meta: model params     = 2.51 B
0.00.279.660 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.661 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.661 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.661 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.662 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.662 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.662 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.663 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.663 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.664 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.664 I llm_load_print_meta: max token length = 93
0.00.339.597 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.339.604 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.339.605 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.339.606 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.339.606 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.339.607 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.344.718 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.724 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.724 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.725 I llama_new_context_with_model: n_batch       = 2048
0.00.344.725 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.725 I llama_new_context_with_model: flash_attn    = 0
0.00.344.727 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.728 I llama_new_context_with_model: freq_scale    = 1
0.00.344.729 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.809 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.821 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.907 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.098 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.104 I llama_new_context_with_model: graph nodes  = 601
0.00.360.105 I llama_new_context_with_model: graph splits = 1
0.00.360.107 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.609 I main: llama threadpool init, n_threads = 4
0.00.434.624 I 
0.00.434.696 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.434.700 I 
0.00.434.744 I sampler seed: 1816593537
0.00.434.758 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.769 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.772 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.773 I 
 seconally to the prompt.

I am unable to generate a response as requested as I do not have access to personal information, including social security numbers, banking

0.02.013.907 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6529.48 tokens per second)
0.02.013.910 I llama_perf_context_print:        load time =     433.86 ms
0.02.013.911 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.013.912 I llama_perf_context_print:        eval time =    1560.65 ms /    32 runs   (   48.77 ms per token,    20.50 tokens per second)
0.02.013.913 I llama_perf_context_print:       total time =    1579.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4227 (1f8cd9d1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40194.07 ms
main:    total time = 40194.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.537 I build: 4227 (1f8cd9d1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.766 I main: load the model and apply lora adapter, if any
0.00.021.233 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.249 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.258 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.263 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.266 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.271 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.272 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.273 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.281 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.281 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.792 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.355 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.204 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.211 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.212 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.212 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.213 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.215 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.215 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.218 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.219 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.223 I llama_model_loader: - type  f32:   37 tensors
0.00.130.224 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.224 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.695 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.125 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.815 I llm_load_vocab: special tokens cache size = 5
0.00.277.916 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.932 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.933 I llm_load_print_meta: arch             = gemma
0.00.277.933 I llm_load_print_meta: vocab type       = SPM
0.00.277.934 I llm_load_print_meta: n_vocab          = 256000
0.00.277.935 I llm_load_print_meta: n_merges         = 0
0.00.277.935 I llm_load_print_meta: vocab_only       = 0
0.00.277.935 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.936 I llm_load_print_meta: n_embd           = 2048
0.00.277.936 I llm_load_print_meta: n_layer          = 18
0.00.277.948 I llm_load_print_meta: n_head           = 8
0.00.277.949 I llm_load_print_meta: n_head_kv        = 1
0.00.277.950 I llm_load_print_meta: n_rot            = 256
0.00.277.950 I llm_load_print_meta: n_swa            = 0
0.00.277.950 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.950 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.951 I llm_load_print_meta: n_gqa            = 8
0.00.277.952 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.954 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.954 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.956 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.956 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.957 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.957 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.958 I llm_load_print_meta: n_ff             = 16384
0.00.277.958 I llm_load_print_meta: n_expert         = 0
0.00.277.959 I llm_load_print_meta: n_expert_used    = 0
0.00.277.959 I llm_load_print_meta: causal attn      = 1
0.00.277.959 I llm_load_print_meta: pooling type     = 0
0.00.277.959 I llm_load_print_meta: rope type        = 2
0.00.277.960 I llm_load_print_meta: rope scaling     = linear
0.00.277.961 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.961 I llm_load_print_meta: freq_scale_train = 1
0.00.277.962 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.962 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.962 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.963 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.963 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.963 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.964 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.964 I llm_load_print_meta: model type       = 2B
0.00.277.964 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.965 I llm_load_print_meta: model params     = 2.51 B
0.00.277.966 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.967 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.967 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.968 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.968 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.968 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.968 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.969 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.969 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.970 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.970 I llm_load_print_meta: max token length = 93
0.00.334.188 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.256 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.262 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.262 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.263 I llama_new_context_with_model: n_batch       = 2048
0.00.339.263 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.264 I llama_new_context_with_model: flash_attn    = 0
0.00.339.266 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.267 I llama_new_context_with_model: freq_scale    = 1
0.00.339.268 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.584 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.598 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.685 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.939 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.946 I llama_new_context_with_model: graph nodes  = 601
0.00.354.946 I llama_new_context_with_model: graph splits = 1
0.00.354.948 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.759 I main: llama threadpool init, n_threads = 4
0.00.429.775 I 
0.00.429.850 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.429.854 I 
0.00.429.903 I sampler seed: 198007961
0.00.429.914 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.927 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.931 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.931 I 
 increasities are a complex phenomenon that arise in the context of complex systems. They are characterized by emergent properties that emerge from the collective behavior of individuals in a system

0.01.987.182 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6740.20 tokens per second)
0.01.987.185 I llama_perf_context_print:        load time =     428.97 ms
0.01.987.186 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.987.187 I llama_perf_context_print:        eval time =    1538.67 ms /    32 runs   (   48.08 ms per token,    20.80 tokens per second)
0.01.987.188 I llama_perf_context_print:       total time =    1557.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.230s
user	10m23.749s
sys	0m6.940s
