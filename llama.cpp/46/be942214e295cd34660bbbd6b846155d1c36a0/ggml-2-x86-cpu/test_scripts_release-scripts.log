+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.531 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.050 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.059 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.072 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.076 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.078 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.079 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.080 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.081 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.081 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.082 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.085 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.086 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.086 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.087 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.087 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.763 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.558 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.472 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.479 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.480 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.481 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.481 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.482 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.483 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.486 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.486 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.487 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.487 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.488 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.492 I llama_model_loader: - type  f32:   37 tensors
0.00.131.493 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.329 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.596 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.035 I llm_load_vocab: special tokens cache size = 5
0.00.274.998 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.016 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.017 I llm_load_print_meta: arch             = gemma
0.00.275.018 I llm_load_print_meta: vocab type       = SPM
0.00.275.018 I llm_load_print_meta: n_vocab          = 256000
0.00.275.019 I llm_load_print_meta: n_merges         = 0
0.00.275.019 I llm_load_print_meta: vocab_only       = 0
0.00.275.020 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.020 I llm_load_print_meta: n_embd           = 2048
0.00.275.020 I llm_load_print_meta: n_layer          = 18
0.00.275.032 I llm_load_print_meta: n_head           = 8
0.00.275.034 I llm_load_print_meta: n_head_kv        = 1
0.00.275.034 I llm_load_print_meta: n_rot            = 256
0.00.275.035 I llm_load_print_meta: n_swa            = 0
0.00.275.035 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.035 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.037 I llm_load_print_meta: n_gqa            = 8
0.00.275.039 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.041 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.041 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.043 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.043 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.044 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.044 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.046 I llm_load_print_meta: n_ff             = 16384
0.00.275.046 I llm_load_print_meta: n_expert         = 0
0.00.275.046 I llm_load_print_meta: n_expert_used    = 0
0.00.275.047 I llm_load_print_meta: causal attn      = 1
0.00.275.047 I llm_load_print_meta: pooling type     = 0
0.00.275.047 I llm_load_print_meta: rope type        = 2
0.00.275.048 I llm_load_print_meta: rope scaling     = linear
0.00.275.049 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.050 I llm_load_print_meta: freq_scale_train = 1
0.00.275.050 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.050 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.050 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.051 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.051 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.051 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.051 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.053 I llm_load_print_meta: model type       = 2B
0.00.275.054 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.056 I llm_load_print_meta: model params     = 2.51 B
0.00.275.057 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.057 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.058 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.058 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.058 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.058 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.059 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.059 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.059 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.060 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.060 I llm_load_print_meta: max token length = 93
0.00.378.527 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.378.535 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.378.536 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.378.536 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.378.537 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.378.537 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.383.693 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.700 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.700 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.701 I llama_new_context_with_model: n_batch       = 2048
0.00.383.701 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.702 I llama_new_context_with_model: flash_attn    = 0
0.00.383.704 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.705 I llama_new_context_with_model: freq_scale    = 1
0.00.383.706 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.727 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.397.661 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.672 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.763 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.044 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.051 I llama_new_context_with_model: graph nodes  = 601
0.00.399.051 I llama_new_context_with_model: graph splits = 1
0.00.399.054 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.399.055 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.611 I main: llama threadpool init, n_threads = 4
0.00.483.628 I 
0.00.483.701 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.483.704 I 
0.00.483.738 I sampler seed: 1601964422
0.00.483.749 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.762 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.765 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.765 I 
 increably.

I am not sure if I should use a comma or a semicolon to separate the two parts of the sentence.

[Answer]

A

0.02.735.527 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6561.94 tokens per second)
0.02.735.531 I llama_perf_context_print:        load time =     482.85 ms
0.02.735.533 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.735.535 I llama_perf_context_print:        eval time =    2231.93 ms /    32 runs   (   69.75 ms per token,    14.34 tokens per second)
0.02.735.536 I llama_perf_context_print:       total time =    2251.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.524 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.021.242 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.256 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.263 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.264 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.268 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.268 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.269 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.269 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.270 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.270 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.274 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.274 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.275 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.275 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.276 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.031 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.294 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.128 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.135 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.135 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.136 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.137 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.138 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.138 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.141 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.141 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.142 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.143 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.144 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.147 I llama_model_loader: - type  f32:   37 tensors
0.00.131.148 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.117 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.602 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.347 I llm_load_vocab: special tokens cache size = 5
0.00.278.485 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.503 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.505 I llm_load_print_meta: arch             = gemma
0.00.278.506 I llm_load_print_meta: vocab type       = SPM
0.00.278.506 I llm_load_print_meta: n_vocab          = 256000
0.00.278.507 I llm_load_print_meta: n_merges         = 0
0.00.278.507 I llm_load_print_meta: vocab_only       = 0
0.00.278.507 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.508 I llm_load_print_meta: n_embd           = 2048
0.00.278.508 I llm_load_print_meta: n_layer          = 18
0.00.278.521 I llm_load_print_meta: n_head           = 8
0.00.278.522 I llm_load_print_meta: n_head_kv        = 1
0.00.278.523 I llm_load_print_meta: n_rot            = 256
0.00.278.523 I llm_load_print_meta: n_swa            = 0
0.00.278.523 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.524 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.526 I llm_load_print_meta: n_gqa            = 8
0.00.278.527 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.529 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.529 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.531 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.531 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.532 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.532 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.534 I llm_load_print_meta: n_ff             = 16384
0.00.278.535 I llm_load_print_meta: n_expert         = 0
0.00.278.535 I llm_load_print_meta: n_expert_used    = 0
0.00.278.535 I llm_load_print_meta: causal attn      = 1
0.00.278.536 I llm_load_print_meta: pooling type     = 0
0.00.278.536 I llm_load_print_meta: rope type        = 2
0.00.278.536 I llm_load_print_meta: rope scaling     = linear
0.00.278.538 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.538 I llm_load_print_meta: freq_scale_train = 1
0.00.278.539 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.539 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.539 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.539 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.540 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.540 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.540 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.542 I llm_load_print_meta: model type       = 2B
0.00.278.543 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.544 I llm_load_print_meta: model params     = 2.51 B
0.00.278.545 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.545 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.546 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.546 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.547 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.547 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.547 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.547 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.548 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.548 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.548 I llm_load_print_meta: max token length = 93
0.00.373.899 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.379.152 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.158 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.159 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.159 I llama_new_context_with_model: n_batch       = 2048
0.00.379.159 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.160 I llama_new_context_with_model: flash_attn    = 0
0.00.379.162 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.163 I llama_new_context_with_model: freq_scale    = 1
0.00.379.164 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.183 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.393.875 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.889 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.978 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.224 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.230 I llama_new_context_with_model: graph nodes  = 601
0.00.395.230 I llama_new_context_with_model: graph splits = 1
0.00.395.234 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.395.234 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.748 I main: llama threadpool init, n_threads = 4
0.00.476.763 I 
0.00.476.837 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.840 I 
0.00.476.872 I sampler seed: 3624893171
0.00.476.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.894 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.896 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.896 I 
 increasities and other sexually suggestive content. [end of text]


0.01.087.965 I llama_perf_sampler_print:    sampling time =       1.42 ms /    10 runs   (    0.14 ms per token,  7022.47 tokens per second)
0.01.087.968 I llama_perf_context_print:        load time =     476.00 ms
0.01.087.969 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.087.970 I llama_perf_context_print:        eval time =     605.37 ms /     9 runs   (   67.26 ms per token,    14.87 tokens per second)
0.01.087.971 I llama_perf_context_print:       total time =     611.22 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.177 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.367 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.020.561 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.574 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.583 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.590 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.591 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.594 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.595 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.595 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.596 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.596 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.597 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.602 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.602 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.603 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.604 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.605 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.787 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.471 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.656 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.662 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.663 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.664 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.664 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.665 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.666 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.668 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.669 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.669 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.670 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.137.671 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.675 I llama_model_loader: - type  f32:   37 tensors
0.00.137.676 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.261 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.990 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.489 I llm_load_vocab: special tokens cache size = 5
0.00.277.373 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.391 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.393 I llm_load_print_meta: arch             = gemma
0.00.277.393 I llm_load_print_meta: vocab type       = SPM
0.00.277.394 I llm_load_print_meta: n_vocab          = 256000
0.00.277.394 I llm_load_print_meta: n_merges         = 0
0.00.277.395 I llm_load_print_meta: vocab_only       = 0
0.00.277.395 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.396 I llm_load_print_meta: n_embd           = 2048
0.00.277.396 I llm_load_print_meta: n_layer          = 18
0.00.277.408 I llm_load_print_meta: n_head           = 8
0.00.277.410 I llm_load_print_meta: n_head_kv        = 1
0.00.277.410 I llm_load_print_meta: n_rot            = 256
0.00.277.410 I llm_load_print_meta: n_swa            = 0
0.00.277.410 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.411 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.413 I llm_load_print_meta: n_gqa            = 8
0.00.277.414 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.416 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.416 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.417 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.418 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.418 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.418 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.420 I llm_load_print_meta: n_ff             = 16384
0.00.277.420 I llm_load_print_meta: n_expert         = 0
0.00.277.421 I llm_load_print_meta: n_expert_used    = 0
0.00.277.421 I llm_load_print_meta: causal attn      = 1
0.00.277.421 I llm_load_print_meta: pooling type     = 0
0.00.277.422 I llm_load_print_meta: rope type        = 2
0.00.277.422 I llm_load_print_meta: rope scaling     = linear
0.00.277.423 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.424 I llm_load_print_meta: freq_scale_train = 1
0.00.277.424 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.424 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.424 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.425 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.425 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.425 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.425 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.427 I llm_load_print_meta: model type       = 2B
0.00.277.429 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.429 I llm_load_print_meta: model params     = 2.51 B
0.00.277.430 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.430 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.431 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.431 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.432 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.432 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.432 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.432 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.432 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.433 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.433 I llm_load_print_meta: max token length = 93
0.00.355.079 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.355.084 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.085 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.355.085 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.355.086 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.087 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.360.030 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.037 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.037 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.038 I llama_new_context_with_model: n_batch       = 2048
0.00.360.038 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.039 I llama_new_context_with_model: flash_attn    = 0
0.00.360.041 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.042 I llama_new_context_with_model: freq_scale    = 1
0.00.360.043 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.063 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.374.666 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.679 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.771 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.000 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.007 I llama_new_context_with_model: graph nodes  = 601
0.00.376.007 I llama_new_context_with_model: graph splits = 1
0.00.376.011 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.376.011 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.479 I main: llama threadpool init, n_threads = 4
0.00.460.494 I 
0.00.460.567 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.570 I 
0.00.460.604 I sampler seed: 1639699408
0.00.460.615 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.618 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.619 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.621 I 
 seconary.

**Assistant**

I am unable to provide legal or professional advice. If you have any questions or concerns that require professional assistance, please contact

0.02.713.815 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6716.87 tokens per second)
0.02.713.818 I llama_perf_context_print:        load time =     460.09 ms
0.02.713.820 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.713.822 I llama_perf_context_print:        eval time =    2234.46 ms /    32 runs   (   69.83 ms per token,    14.32 tokens per second)
0.02.713.824 I llama_perf_context_print:       total time =    2253.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.530 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.020.682 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.690 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.697 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.703 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.704 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.706 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.707 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.707 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.708 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.708 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.709 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.712 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.713 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.713 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.714 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.714 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.846 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.036 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.849 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.856 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.857 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.858 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.858 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.860 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.860 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.864 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.865 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.866 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.866 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.868 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.871 I llama_model_loader: - type  f32:   37 tensors
0.00.130.872 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.643 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.577 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.073 I llm_load_vocab: special tokens cache size = 5
0.00.264.140 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.157 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.159 I llm_load_print_meta: arch             = gemma
0.00.264.160 I llm_load_print_meta: vocab type       = SPM
0.00.264.160 I llm_load_print_meta: n_vocab          = 256000
0.00.264.161 I llm_load_print_meta: n_merges         = 0
0.00.264.161 I llm_load_print_meta: vocab_only       = 0
0.00.264.161 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.162 I llm_load_print_meta: n_embd           = 2048
0.00.264.162 I llm_load_print_meta: n_layer          = 18
0.00.264.174 I llm_load_print_meta: n_head           = 8
0.00.264.176 I llm_load_print_meta: n_head_kv        = 1
0.00.264.176 I llm_load_print_meta: n_rot            = 256
0.00.264.177 I llm_load_print_meta: n_swa            = 0
0.00.264.177 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.179 I llm_load_print_meta: n_gqa            = 8
0.00.264.180 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.182 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.183 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.184 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.184 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.185 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.185 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.187 I llm_load_print_meta: n_ff             = 16384
0.00.264.187 I llm_load_print_meta: n_expert         = 0
0.00.264.187 I llm_load_print_meta: n_expert_used    = 0
0.00.264.188 I llm_load_print_meta: causal attn      = 1
0.00.264.188 I llm_load_print_meta: pooling type     = 0
0.00.264.188 I llm_load_print_meta: rope type        = 2
0.00.264.189 I llm_load_print_meta: rope scaling     = linear
0.00.264.190 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.190 I llm_load_print_meta: freq_scale_train = 1
0.00.264.191 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.191 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.191 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.192 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.192 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.192 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.192 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.194 I llm_load_print_meta: model type       = 2B
0.00.264.195 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.196 I llm_load_print_meta: model params     = 2.51 B
0.00.264.196 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.197 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.197 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.198 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.198 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.198 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.199 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.199 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.200 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.200 I llm_load_print_meta: max token length = 93
0.00.335.464 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.472 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.820 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.826 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.827 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.827 I llama_new_context_with_model: n_batch       = 2048
0.00.340.827 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.828 I llama_new_context_with_model: flash_attn    = 0
0.00.340.831 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.832 I llama_new_context_with_model: freq_scale    = 1
0.00.340.833 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.857 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.356.239 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.252 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.363 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.669 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.676 I llama_new_context_with_model: graph nodes  = 601
0.00.357.676 I llama_new_context_with_model: graph splits = 1
0.00.357.680 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.680 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.054 I main: llama threadpool init, n_threads = 4
0.00.449.072 I 
0.00.449.149 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.449.153 I 
0.00.449.188 I sampler seed: 2325674901
0.00.449.199 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.201 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.203 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.203 I 
 increasities, and the limitations of the traditional economic model.

**Answer:**

**1. The Rise of Inequality and Social Polarization:**

* The traditional

0.02.870.502 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6910.99 tokens per second)
0.02.870.505 I llama_perf_context_print:        load time =     448.29 ms
0.02.870.506 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.870.508 I llama_perf_context_print:        eval time =    2401.69 ms /    32 runs   (   75.05 ms per token,    13.32 tokens per second)
0.02.870.508 I llama_perf_context_print:       total time =    2421.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.976s
user	0m32.928s
sys	0m9.437s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4415 (46be9422)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40248.62 ms
main:    total time = 40248.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.532 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.735 I main: load the model and apply lora adapter, if any
0.00.021.240 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.249 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.257 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.262 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.264 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.267 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.267 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.268 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.269 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.269 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.270 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.272 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.273 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.274 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.275 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.956 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.151 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.903 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.909 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.910 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.910 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.911 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.912 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.913 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.915 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.915 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.916 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.918 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.918 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.921 I llama_model_loader: - type  f32:   37 tensors
0.00.130.923 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.923 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.475 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.538 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.063 I llm_load_vocab: special tokens cache size = 5
0.00.278.262 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.285 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.286 I llm_load_print_meta: arch             = gemma
0.00.278.287 I llm_load_print_meta: vocab type       = SPM
0.00.278.288 I llm_load_print_meta: n_vocab          = 256000
0.00.278.288 I llm_load_print_meta: n_merges         = 0
0.00.278.289 I llm_load_print_meta: vocab_only       = 0
0.00.278.289 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.289 I llm_load_print_meta: n_embd           = 2048
0.00.278.290 I llm_load_print_meta: n_layer          = 18
0.00.278.302 I llm_load_print_meta: n_head           = 8
0.00.278.303 I llm_load_print_meta: n_head_kv        = 1
0.00.278.304 I llm_load_print_meta: n_rot            = 256
0.00.278.305 I llm_load_print_meta: n_swa            = 0
0.00.278.305 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.305 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.307 I llm_load_print_meta: n_gqa            = 8
0.00.278.308 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.310 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.311 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.312 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.312 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.313 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.313 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.315 I llm_load_print_meta: n_ff             = 16384
0.00.278.315 I llm_load_print_meta: n_expert         = 0
0.00.278.316 I llm_load_print_meta: n_expert_used    = 0
0.00.278.316 I llm_load_print_meta: causal attn      = 1
0.00.278.316 I llm_load_print_meta: pooling type     = 0
0.00.278.316 I llm_load_print_meta: rope type        = 2
0.00.278.317 I llm_load_print_meta: rope scaling     = linear
0.00.278.318 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.319 I llm_load_print_meta: freq_scale_train = 1
0.00.278.319 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.320 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.320 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.320 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.321 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.321 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.321 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.323 I llm_load_print_meta: model type       = 2B
0.00.278.324 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.325 I llm_load_print_meta: model params     = 2.51 B
0.00.278.326 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.326 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.327 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.327 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.328 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.328 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.328 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.328 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.329 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.329 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.330 I llm_load_print_meta: max token length = 93
0.00.337.051 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.337.059 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.337.059 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.337.060 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.337.060 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.337.061 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.342.394 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.401 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.402 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.402 I llama_new_context_with_model: n_batch       = 2048
0.00.342.403 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.404 I llama_new_context_with_model: flash_attn    = 0
0.00.342.406 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.407 I llama_new_context_with_model: freq_scale    = 1
0.00.342.408 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.440 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.357.660 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.674 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.771 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.040 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.047 I llama_new_context_with_model: graph nodes  = 601
0.00.359.047 I llama_new_context_with_model: graph splits = 1
0.00.359.052 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.359.052 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.314 I main: llama threadpool init, n_threads = 4
0.00.435.331 I 
0.00.435.403 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.435.407 I 
0.00.435.439 I sampler seed: 3623802088
0.00.435.450 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.454 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.435.454 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.435.455 I 
 increasities, and other forms of misconduct are unacceptable and will not be tolerated.

This commitment to professional integrity extends beyond the workplace and encompasses all aspects of personal

0.02.033.601 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6483.30 tokens per second)
0.02.033.604 I llama_perf_context_print:        load time =     434.56 ms
0.02.033.605 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.033.607 I llama_perf_context_print:        eval time =    1579.66 ms /    32 runs   (   49.36 ms per token,    20.26 tokens per second)
0.02.033.608 I llama_perf_context_print:       total time =    1598.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4415 (46be9422)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40213.73 ms
main:    total time = 40213.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.539 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.079 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.094 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.101 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.102 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.105 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.106 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.107 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.107 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.107 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.110 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.111 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.111 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.112 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.113 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.708 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.859 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.654 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.660 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.661 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.662 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.662 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.663 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.663 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.666 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.666 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.668 I llama_model_loader: - type  f32:   37 tensors
0.00.130.669 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.670 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.967 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.041 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.774 I llm_load_vocab: special tokens cache size = 5
0.00.277.233 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.255 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.256 I llm_load_print_meta: arch             = gemma
0.00.277.256 I llm_load_print_meta: vocab type       = SPM
0.00.277.257 I llm_load_print_meta: n_vocab          = 256000
0.00.277.258 I llm_load_print_meta: n_merges         = 0
0.00.277.258 I llm_load_print_meta: vocab_only       = 0
0.00.277.258 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.259 I llm_load_print_meta: n_embd           = 2048
0.00.277.259 I llm_load_print_meta: n_layer          = 18
0.00.277.270 I llm_load_print_meta: n_head           = 8
0.00.277.272 I llm_load_print_meta: n_head_kv        = 1
0.00.277.273 I llm_load_print_meta: n_rot            = 256
0.00.277.273 I llm_load_print_meta: n_swa            = 0
0.00.277.273 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.274 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.275 I llm_load_print_meta: n_gqa            = 8
0.00.277.277 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.279 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.279 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.281 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.281 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.281 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.281 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.283 I llm_load_print_meta: n_ff             = 16384
0.00.277.284 I llm_load_print_meta: n_expert         = 0
0.00.277.284 I llm_load_print_meta: n_expert_used    = 0
0.00.277.284 I llm_load_print_meta: causal attn      = 1
0.00.277.284 I llm_load_print_meta: pooling type     = 0
0.00.277.285 I llm_load_print_meta: rope type        = 2
0.00.277.285 I llm_load_print_meta: rope scaling     = linear
0.00.277.287 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.287 I llm_load_print_meta: freq_scale_train = 1
0.00.277.288 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.288 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.289 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.289 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.289 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.289 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.289 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.291 I llm_load_print_meta: model type       = 2B
0.00.277.292 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.293 I llm_load_print_meta: model params     = 2.51 B
0.00.277.294 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.294 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.295 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.295 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.295 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.296 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.296 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.297 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.297 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.298 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.298 I llm_load_print_meta: max token length = 93
0.00.334.113 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.193 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.199 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.200 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.200 I llama_new_context_with_model: n_batch       = 2048
0.00.339.201 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.202 I llama_new_context_with_model: flash_attn    = 0
0.00.339.204 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.205 I llama_new_context_with_model: freq_scale    = 1
0.00.339.205 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.226 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.354.126 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.139 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.233 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.502 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.507 I llama_new_context_with_model: graph nodes  = 601
0.00.355.508 I llama_new_context_with_model: graph splits = 1
0.00.355.511 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.355.511 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.321 I main: llama threadpool init, n_threads = 4
0.00.430.337 I 
0.00.430.412 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.430.415 I 
0.00.430.447 I sampler seed: 579297203
0.00.430.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.461 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.461 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.461 I 
 seconally.

I am unable to access the internet. I am connected to a wired broadband connection, but I am unable to access any websites. I have

0.01.964.005 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6485.85 tokens per second)
0.01.964.008 I llama_perf_context_print:        load time =     429.56 ms
0.01.964.009 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.964.010 I llama_perf_context_print:        eval time =    1515.14 ms /    32 runs   (   47.35 ms per token,    21.12 tokens per second)
0.01.964.011 I llama_perf_context_print:       total time =    1533.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.237s
user	10m23.827s
sys	0m6.965s
