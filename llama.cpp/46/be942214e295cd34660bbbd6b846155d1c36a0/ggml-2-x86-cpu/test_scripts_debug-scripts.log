+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.587 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.598 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.686 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.700 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.702 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.706 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.712 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.713 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.715 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.716 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.717 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.723 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.724 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.725 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.726 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.728 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.260 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.658 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.507 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.516 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.518 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.520 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.521 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.523 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.524 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.528 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.530 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.531 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.532 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.534 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.543 I llama_model_loader: - type  f32:   37 tensors
0.00.348.545 I llama_model_loader: - type q8_0:  127 tensors
0.00.568.133 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.479 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.515 I llm_load_vocab: special tokens cache size = 5
0.00.849.189 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.849.264 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.849.272 I llm_load_print_meta: arch             = gemma
0.00.849.273 I llm_load_print_meta: vocab type       = SPM
0.00.849.274 I llm_load_print_meta: n_vocab          = 256000
0.00.849.276 I llm_load_print_meta: n_merges         = 0
0.00.849.277 I llm_load_print_meta: vocab_only       = 0
0.00.849.278 I llm_load_print_meta: n_ctx_train      = 8192
0.00.849.278 I llm_load_print_meta: n_embd           = 2048
0.00.849.280 I llm_load_print_meta: n_layer          = 18
0.00.849.358 I llm_load_print_meta: n_head           = 8
0.00.849.369 I llm_load_print_meta: n_head_kv        = 1
0.00.849.369 I llm_load_print_meta: n_rot            = 256
0.00.849.370 I llm_load_print_meta: n_swa            = 0
0.00.849.371 I llm_load_print_meta: n_embd_head_k    = 256
0.00.849.371 I llm_load_print_meta: n_embd_head_v    = 256
0.00.849.375 I llm_load_print_meta: n_gqa            = 8
0.00.849.381 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.849.387 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.849.391 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.849.393 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.849.393 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.849.394 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.849.394 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.849.399 I llm_load_print_meta: n_ff             = 16384
0.00.849.400 I llm_load_print_meta: n_expert         = 0
0.00.849.400 I llm_load_print_meta: n_expert_used    = 0
0.00.849.400 I llm_load_print_meta: causal attn      = 1
0.00.849.401 I llm_load_print_meta: pooling type     = 0
0.00.849.401 I llm_load_print_meta: rope type        = 2
0.00.849.401 I llm_load_print_meta: rope scaling     = linear
0.00.849.403 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.404 I llm_load_print_meta: freq_scale_train = 1
0.00.849.404 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.405 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.406 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.406 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.406 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.408 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.408 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.411 I llm_load_print_meta: model type       = 2B
0.00.849.413 I llm_load_print_meta: model ftype      = Q8_0
0.00.849.414 I llm_load_print_meta: model params     = 2.51 B
0.00.849.415 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.849.416 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.416 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.417 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.417 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.418 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.418 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.419 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.425 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.427 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.430 I llm_load_print_meta: max token length = 93
0.00.951.875 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.951.883 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.951.884 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.951.885 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.951.886 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.951.887 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.957.858 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.865 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.865 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.866 I llama_new_context_with_model: n_batch       = 2048
0.00.957.866 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.866 I llama_new_context_with_model: flash_attn    = 0
0.00.957.869 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.870 I llama_new_context_with_model: freq_scale    = 1
0.00.957.870 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.957.976 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.972.368 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.972.406 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.972.535 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.975.172 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.975.177 I llama_new_context_with_model: graph nodes  = 601
0.00.975.177 I llama_new_context_with_model: graph splits = 1
0.00.975.200 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.975.204 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.584.856 I main: llama threadpool init, n_threads = 4
0.01.584.873 I 
0.01.584.995 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.584.999 I 
0.01.585.241 I sampler seed: 1042774409
0.01.585.255 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.585.264 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.585.268 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.585.268 I 
 increamically.

I am unable to answer the question as it contains offensive and derogatory language. It is important to treat all people with respect and dignity, regardless

0.15.057.997 I llama_perf_sampler_print:    sampling time =      48.93 ms /    33 runs   (    1.48 ms per token,   674.50 tokens per second)
0.15.058.021 I llama_perf_context_print:        load time =    1583.93 ms
0.15.058.023 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.058.025 I llama_perf_context_print:        eval time =   13388.92 ms /    32 runs   (  418.40 ms per token,     2.39 tokens per second)
0.15.058.026 I llama_perf_context_print:       total time =   13473.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.874 I main: load the model and apply lora adapter, if any
0.00.023.349 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.449 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.467 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.471 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.475 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.478 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.479 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.480 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.482 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.483 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.490 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.491 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.492 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.248.490 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.349.768 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.373.600 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.373.608 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.373.610 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.373.611 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.373.612 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.373.614 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.373.615 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.373.620 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.373.621 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.373.622 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.373.624 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.373.625 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.373.634 I llama_model_loader: - type  f32:   37 tensors
0.00.373.636 I llama_model_loader: - type q8_0:  127 tensors
0.00.618.668 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.681.536 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.682.499 I llm_load_vocab: special tokens cache size = 5
0.00.889.639 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.889.720 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.889.725 I llm_load_print_meta: arch             = gemma
0.00.889.726 I llm_load_print_meta: vocab type       = SPM
0.00.889.727 I llm_load_print_meta: n_vocab          = 256000
0.00.889.730 I llm_load_print_meta: n_merges         = 0
0.00.889.730 I llm_load_print_meta: vocab_only       = 0
0.00.889.731 I llm_load_print_meta: n_ctx_train      = 8192
0.00.889.731 I llm_load_print_meta: n_embd           = 2048
0.00.889.732 I llm_load_print_meta: n_layer          = 18
0.00.889.811 I llm_load_print_meta: n_head           = 8
0.00.889.822 I llm_load_print_meta: n_head_kv        = 1
0.00.889.822 I llm_load_print_meta: n_rot            = 256
0.00.889.823 I llm_load_print_meta: n_swa            = 0
0.00.889.823 I llm_load_print_meta: n_embd_head_k    = 256
0.00.889.823 I llm_load_print_meta: n_embd_head_v    = 256
0.00.889.828 I llm_load_print_meta: n_gqa            = 8
0.00.889.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.889.838 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.889.839 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.889.841 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.889.842 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.889.843 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.889.844 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.889.849 I llm_load_print_meta: n_ff             = 16384
0.00.889.849 I llm_load_print_meta: n_expert         = 0
0.00.889.850 I llm_load_print_meta: n_expert_used    = 0
0.00.889.851 I llm_load_print_meta: causal attn      = 1
0.00.889.851 I llm_load_print_meta: pooling type     = 0
0.00.889.851 I llm_load_print_meta: rope type        = 2
0.00.889.861 I llm_load_print_meta: rope scaling     = linear
0.00.889.862 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.889.863 I llm_load_print_meta: freq_scale_train = 1
0.00.889.864 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.889.864 I llm_load_print_meta: rope_finetuned   = unknown
0.00.889.865 I llm_load_print_meta: ssm_d_conv       = 0
0.00.889.865 I llm_load_print_meta: ssm_d_inner      = 0
0.00.889.878 I llm_load_print_meta: ssm_d_state      = 0
0.00.889.879 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.889.879 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.889.882 I llm_load_print_meta: model type       = 2B
0.00.889.884 I llm_load_print_meta: model ftype      = Q8_0
0.00.889.885 I llm_load_print_meta: model params     = 2.51 B
0.00.889.886 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.889.886 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.889.887 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.889.896 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.889.897 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.889.897 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.889.898 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.889.899 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.889.905 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.889.907 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.889.908 I llm_load_print_meta: max token length = 93
0.00.987.641 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.993.654 I llama_new_context_with_model: n_seq_max     = 1
0.00.993.661 I llama_new_context_with_model: n_ctx         = 4096
0.00.993.661 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.993.661 I llama_new_context_with_model: n_batch       = 2048
0.00.993.662 I llama_new_context_with_model: n_ubatch      = 512
0.00.993.662 I llama_new_context_with_model: flash_attn    = 0
0.00.993.665 I llama_new_context_with_model: freq_base     = 10000.0
0.00.993.666 I llama_new_context_with_model: freq_scale    = 1
0.00.993.667 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.993.751 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.008.377 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.008.418 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.008.542 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.011.190 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.011.194 I llama_new_context_with_model: graph nodes  = 601
0.01.011.194 I llama_new_context_with_model: graph splits = 1
0.01.011.219 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.011.222 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.620.698 I main: llama threadpool init, n_threads = 4
0.01.620.716 I 
0.01.620.842 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.620.843 I 
0.01.621.084 I sampler seed: 1710578256
0.01.621.099 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.621.108 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.621.111 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.621.111 I 
 increadibly in the context of the COVID-19 pandemic.

**Answer:**

The provided text does not contain any information regarding the impact of COVID-

0.15.238.935 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.21 tokens per second)
0.15.238.938 I llama_perf_context_print:        load time =    1619.74 ms
0.15.238.940 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.238.941 I llama_perf_context_print:        eval time =   13531.53 ms /    32 runs   (  422.86 ms per token,     2.36 tokens per second)
0.15.238.956 I llama_perf_context_print:       total time =   13618.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.383 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.396 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.488 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.501 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.503 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.507 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.511 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.512 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.513 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.515 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.516 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.522 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.523 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.525 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.526 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.527 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.839 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.100 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.985 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.987 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.988 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.989 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.991 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.992 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.996 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.998 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.999 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.000 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.002 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.011 I llama_model_loader: - type  f32:   37 tensors
0.00.349.014 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.994 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.851 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.842 I llm_load_vocab: special tokens cache size = 5
0.00.861.601 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.861.676 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.861.680 I llm_load_print_meta: arch             = gemma
0.00.861.681 I llm_load_print_meta: vocab type       = SPM
0.00.861.682 I llm_load_print_meta: n_vocab          = 256000
0.00.861.684 I llm_load_print_meta: n_merges         = 0
0.00.861.685 I llm_load_print_meta: vocab_only       = 0
0.00.861.685 I llm_load_print_meta: n_ctx_train      = 8192
0.00.861.686 I llm_load_print_meta: n_embd           = 2048
0.00.861.686 I llm_load_print_meta: n_layer          = 18
0.00.861.766 I llm_load_print_meta: n_head           = 8
0.00.861.777 I llm_load_print_meta: n_head_kv        = 1
0.00.861.779 I llm_load_print_meta: n_rot            = 256
0.00.861.779 I llm_load_print_meta: n_swa            = 0
0.00.861.780 I llm_load_print_meta: n_embd_head_k    = 256
0.00.861.781 I llm_load_print_meta: n_embd_head_v    = 256
0.00.861.785 I llm_load_print_meta: n_gqa            = 8
0.00.861.790 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.861.796 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.861.798 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.861.800 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.861.800 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.861.801 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.861.820 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.861.829 I llm_load_print_meta: n_ff             = 16384
0.00.861.829 I llm_load_print_meta: n_expert         = 0
0.00.861.830 I llm_load_print_meta: n_expert_used    = 0
0.00.861.830 I llm_load_print_meta: causal attn      = 1
0.00.861.830 I llm_load_print_meta: pooling type     = 0
0.00.861.831 I llm_load_print_meta: rope type        = 2
0.00.861.839 I llm_load_print_meta: rope scaling     = linear
0.00.861.840 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.861.841 I llm_load_print_meta: freq_scale_train = 1
0.00.861.842 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.861.842 I llm_load_print_meta: rope_finetuned   = unknown
0.00.861.843 I llm_load_print_meta: ssm_d_conv       = 0
0.00.861.843 I llm_load_print_meta: ssm_d_inner      = 0
0.00.861.844 I llm_load_print_meta: ssm_d_state      = 0
0.00.861.845 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.861.845 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.861.848 I llm_load_print_meta: model type       = 2B
0.00.861.849 I llm_load_print_meta: model ftype      = Q8_0
0.00.861.850 I llm_load_print_meta: model params     = 2.51 B
0.00.861.851 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.861.852 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.861.853 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.861.854 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.861.854 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.861.855 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.861.856 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.861.857 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.861.864 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.861.865 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.861.866 I llm_load_print_meta: max token length = 93
0.00.942.266 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.942.274 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.942.275 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.942.276 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.942.277 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.942.278 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.948.108 I llama_new_context_with_model: n_seq_max     = 1
0.00.948.114 I llama_new_context_with_model: n_ctx         = 4096
0.00.948.114 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.948.114 I llama_new_context_with_model: n_batch       = 2048
0.00.948.115 I llama_new_context_with_model: n_ubatch      = 512
0.00.948.115 I llama_new_context_with_model: flash_attn    = 0
0.00.948.117 I llama_new_context_with_model: freq_base     = 10000.0
0.00.948.118 I llama_new_context_with_model: freq_scale    = 1
0.00.948.119 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.948.202 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.962.913 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.962.953 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.963.072 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.736 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.740 I llama_new_context_with_model: graph nodes  = 601
0.00.965.740 I llama_new_context_with_model: graph splits = 1
0.00.965.765 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.965.768 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.573.997 I main: llama threadpool init, n_threads = 4
0.01.574.013 I 
0.01.574.133 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.574.137 I 
0.01.574.373 I sampler seed: 642106478
0.01.574.387 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.574.397 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.574.400 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.574.401 I 
 increasities is an ongoing research topic focused on how we can best understand and communicate complex information in a way that is accessible and engaging for all audiences.

**

0.15.038.437 I llama_perf_sampler_print:    sampling time =      48.89 ms /    33 runs   (    1.48 ms per token,   674.96 tokens per second)
0.15.038.441 I llama_perf_context_print:        load time =    1573.04 ms
0.15.038.453 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.038.456 I llama_perf_context_print:        eval time =   13379.93 ms /    32 runs   (  418.12 ms per token,     2.39 tokens per second)
0.15.038.457 I llama_perf_context_print:       total time =   13464.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.023.324 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.336 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.432 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.446 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.448 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.452 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.456 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.458 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.460 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.465 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.467 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.478 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.487 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.489 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.493 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.498 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.217.234 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.319.992 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.343.926 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.343.941 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.343.943 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.343.944 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.343.945 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.343.947 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.343.948 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.343.953 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.343.955 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.343.956 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.343.958 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.343.960 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.343.970 I llama_model_loader: - type  f32:   37 tensors
0.00.343.973 I llama_model_loader: - type q8_0:  127 tensors
0.00.568.648 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.628.895 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.629.773 I llm_load_vocab: special tokens cache size = 5
0.00.845.026 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.105 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.109 I llm_load_print_meta: arch             = gemma
0.00.845.110 I llm_load_print_meta: vocab type       = SPM
0.00.845.111 I llm_load_print_meta: n_vocab          = 256000
0.00.845.114 I llm_load_print_meta: n_merges         = 0
0.00.845.114 I llm_load_print_meta: vocab_only       = 0
0.00.845.115 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.115 I llm_load_print_meta: n_embd           = 2048
0.00.845.116 I llm_load_print_meta: n_layer          = 18
0.00.845.198 I llm_load_print_meta: n_head           = 8
0.00.845.205 I llm_load_print_meta: n_head_kv        = 1
0.00.845.206 I llm_load_print_meta: n_rot            = 256
0.00.845.206 I llm_load_print_meta: n_swa            = 0
0.00.845.207 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.207 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.212 I llm_load_print_meta: n_gqa            = 8
0.00.845.217 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.221 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.223 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.224 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.226 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.247 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.248 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.256 I llm_load_print_meta: n_ff             = 16384
0.00.845.256 I llm_load_print_meta: n_expert         = 0
0.00.845.257 I llm_load_print_meta: n_expert_used    = 0
0.00.845.258 I llm_load_print_meta: causal attn      = 1
0.00.845.258 I llm_load_print_meta: pooling type     = 0
0.00.845.259 I llm_load_print_meta: rope type        = 2
0.00.845.259 I llm_load_print_meta: rope scaling     = linear
0.00.845.261 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.262 I llm_load_print_meta: freq_scale_train = 1
0.00.845.263 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.263 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.264 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.264 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.272 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.277 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.278 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.282 I llm_load_print_meta: model type       = 2B
0.00.845.287 I llm_load_print_meta: model ftype      = Q8_0
0.00.845.287 I llm_load_print_meta: model params     = 2.51 B
0.00.845.288 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.845.289 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.289 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.290 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.290 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.291 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.291 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.292 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.299 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.300 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.301 I llm_load_print_meta: max token length = 93
0.00.918.492 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.918.501 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.924.444 I llama_new_context_with_model: n_seq_max     = 1
0.00.924.451 I llama_new_context_with_model: n_ctx         = 4096
0.00.924.452 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.924.452 I llama_new_context_with_model: n_batch       = 2048
0.00.924.453 I llama_new_context_with_model: n_ubatch      = 512
0.00.924.453 I llama_new_context_with_model: flash_attn    = 0
0.00.924.455 I llama_new_context_with_model: freq_base     = 10000.0
0.00.924.456 I llama_new_context_with_model: freq_scale    = 1
0.00.924.457 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.924.547 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.938.838 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.938.878 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.939.009 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.941.629 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.941.633 I llama_new_context_with_model: graph nodes  = 601
0.00.941.633 I llama_new_context_with_model: graph splits = 1
0.00.941.658 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.941.662 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.549.176 I main: llama threadpool init, n_threads = 4
0.01.549.192 I 
0.01.549.323 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.549.327 I 
0.01.549.570 I sampler seed: 2301401626
0.01.549.585 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.549.595 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.549.599 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.549.599 I 
 increasively, blurring the lines between what is real and imagined. [end of text]


0.07.432.143 I llama_perf_sampler_print:    sampling time =      21.55 ms /    15 runs   (    1.44 ms per token,   696.15 tokens per second)
0.07.432.148 I llama_perf_context_print:        load time =    1548.20 ms
0.07.432.149 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.432.151 I llama_perf_context_print:        eval time =    5844.09 ms /    14 runs   (  417.44 ms per token,     2.40 tokens per second)
0.07.432.152 I llama_perf_context_print:       total time =    5882.98 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.353s
user	3m19.388s
sys	0m9.413s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4415 (46be9422)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187072.26 ms
main:    total time = 187072.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.000.822 I main: load the model and apply lora adapter, if any
0.00.023.368 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.377 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.467 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.481 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.485 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.490 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.491 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.493 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.494 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.498 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.499 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.505 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.506 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.507 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.510 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.511 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.221.510 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.322.447 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.346.270 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.346.280 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.346.281 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.346.283 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.346.284 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.346.286 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.346.287 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.346.292 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.346.293 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.346.295 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.346.296 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.346.298 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.346.306 I llama_model_loader: - type  f32:   37 tensors
0.00.346.309 I llama_model_loader: - type q4_K:  108 tensors
0.00.346.309 I llama_model_loader: - type q6_K:   19 tensors
0.00.560.171 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.619.276 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.620.181 I llm_load_vocab: special tokens cache size = 5
0.00.845.320 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.396 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.403 I llm_load_print_meta: arch             = gemma
0.00.845.404 I llm_load_print_meta: vocab type       = SPM
0.00.845.405 I llm_load_print_meta: n_vocab          = 256000
0.00.845.408 I llm_load_print_meta: n_merges         = 0
0.00.845.408 I llm_load_print_meta: vocab_only       = 0
0.00.845.409 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.409 I llm_load_print_meta: n_embd           = 2048
0.00.845.411 I llm_load_print_meta: n_layer          = 18
0.00.845.492 I llm_load_print_meta: n_head           = 8
0.00.845.503 I llm_load_print_meta: n_head_kv        = 1
0.00.845.504 I llm_load_print_meta: n_rot            = 256
0.00.845.512 I llm_load_print_meta: n_swa            = 0
0.00.845.513 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.513 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.519 I llm_load_print_meta: n_gqa            = 8
0.00.845.524 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.530 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.531 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.533 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.533 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.535 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.539 I llm_load_print_meta: n_ff             = 16384
0.00.845.540 I llm_load_print_meta: n_expert         = 0
0.00.845.541 I llm_load_print_meta: n_expert_used    = 0
0.00.845.541 I llm_load_print_meta: causal attn      = 1
0.00.845.542 I llm_load_print_meta: pooling type     = 0
0.00.845.542 I llm_load_print_meta: rope type        = 2
0.00.845.543 I llm_load_print_meta: rope scaling     = linear
0.00.845.545 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.545 I llm_load_print_meta: freq_scale_train = 1
0.00.845.546 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.546 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.547 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.547 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.548 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.549 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.552 I llm_load_print_meta: model type       = 2B
0.00.845.554 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.845.555 I llm_load_print_meta: model params     = 2.51 B
0.00.845.556 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.845.556 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.557 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.557 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.558 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.558 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.559 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.566 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.568 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.568 I llm_load_print_meta: max token length = 93
0.00.908.774 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.908.784 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.908.785 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.908.785 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.908.786 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.908.787 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.914.628 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.635 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.636 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.636 I llama_new_context_with_model: n_batch       = 2048
0.00.914.637 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.637 I llama_new_context_with_model: flash_attn    = 0
0.00.914.639 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.640 I llama_new_context_with_model: freq_scale    = 1
0.00.914.641 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.914.724 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.929.200 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.240 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.389 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.010 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.014 I llama_new_context_with_model: graph nodes  = 601
0.00.932.014 I llama_new_context_with_model: graph splits = 1
0.00.932.040 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.932.042 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.513.826 I main: llama threadpool init, n_threads = 4
0.01.513.843 I 
0.01.513.970 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.513.973 I 
0.01.514.209 I sampler seed: 3457283085
0.01.514.223 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.514.235 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.514.236 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.514.236 I 
 squaRE!

I have a question about the relationship between the variables in the following equation:

$$y = mx + c$$

Where:
-

0.12.640.494 I llama_perf_sampler_print:    sampling time =      48.51 ms /    33 runs   (    1.47 ms per token,   680.30 tokens per second)
0.12.640.497 I llama_perf_context_print:        load time =    1512.92 ms
0.12.640.511 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.640.513 I llama_perf_context_print:        eval time =   11042.75 ms /    32 runs   (  345.09 ms per token,     2.90 tokens per second)
0.12.640.514 I llama_perf_context_print:       total time =   11126.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4415 (46be9422)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186771.87 ms
main:    total time = 186771.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4415 (46be9422) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.023.113 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.206 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.221 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.226 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.230 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.232 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.234 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.235 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.237 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.238 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.243 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.245 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.246 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.248 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.249 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.062 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.794 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.692 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.701 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.705 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.707 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.708 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.713 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.714 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.724 I llama_model_loader: - type  f32:   37 tensors
0.00.360.726 I llama_model_loader: - type q4_K:  108 tensors
0.00.360.726 I llama_model_loader: - type q6_K:   19 tensors
0.00.600.805 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.054 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.982 I llm_load_vocab: special tokens cache size = 5
0.00.889.095 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.889.172 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.889.177 I llm_load_print_meta: arch             = gemma
0.00.889.178 I llm_load_print_meta: vocab type       = SPM
0.00.889.179 I llm_load_print_meta: n_vocab          = 256000
0.00.889.182 I llm_load_print_meta: n_merges         = 0
0.00.889.182 I llm_load_print_meta: vocab_only       = 0
0.00.889.183 I llm_load_print_meta: n_ctx_train      = 8192
0.00.889.183 I llm_load_print_meta: n_embd           = 2048
0.00.889.184 I llm_load_print_meta: n_layer          = 18
0.00.889.265 I llm_load_print_meta: n_head           = 8
0.00.889.276 I llm_load_print_meta: n_head_kv        = 1
0.00.889.277 I llm_load_print_meta: n_rot            = 256
0.00.889.277 I llm_load_print_meta: n_swa            = 0
0.00.889.279 I llm_load_print_meta: n_embd_head_k    = 256
0.00.889.279 I llm_load_print_meta: n_embd_head_v    = 256
0.00.889.284 I llm_load_print_meta: n_gqa            = 8
0.00.889.288 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.889.294 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.889.297 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.889.299 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.889.299 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.889.300 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.889.300 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.889.305 I llm_load_print_meta: n_ff             = 16384
0.00.889.306 I llm_load_print_meta: n_expert         = 0
0.00.889.307 I llm_load_print_meta: n_expert_used    = 0
0.00.889.307 I llm_load_print_meta: causal attn      = 1
0.00.889.308 I llm_load_print_meta: pooling type     = 0
0.00.889.309 I llm_load_print_meta: rope type        = 2
0.00.889.310 I llm_load_print_meta: rope scaling     = linear
0.00.889.311 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.889.312 I llm_load_print_meta: freq_scale_train = 1
0.00.889.313 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.889.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.889.313 I llm_load_print_meta: ssm_d_conv       = 0
0.00.889.314 I llm_load_print_meta: ssm_d_inner      = 0
0.00.889.315 I llm_load_print_meta: ssm_d_state      = 0
0.00.889.316 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.889.316 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.889.319 I llm_load_print_meta: model type       = 2B
0.00.889.322 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.889.324 I llm_load_print_meta: model params     = 2.51 B
0.00.889.325 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.889.326 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.889.326 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.889.327 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.889.327 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.889.327 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.889.328 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.889.328 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.889.335 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.889.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.889.338 I llm_load_print_meta: max token length = 93
0.00.949.623 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.955.474 I llama_new_context_with_model: n_seq_max     = 1
0.00.955.480 I llama_new_context_with_model: n_ctx         = 4096
0.00.955.481 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.955.481 I llama_new_context_with_model: n_batch       = 2048
0.00.955.482 I llama_new_context_with_model: n_ubatch      = 512
0.00.955.482 I llama_new_context_with_model: flash_attn    = 0
0.00.955.484 I llama_new_context_with_model: freq_base     = 10000.0
0.00.955.485 I llama_new_context_with_model: freq_scale    = 1
0.00.955.486 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.568 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.970.740 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.970.780 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.970.907 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.973.477 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.973.480 I llama_new_context_with_model: graph nodes  = 601
0.00.973.481 I llama_new_context_with_model: graph splits = 1
0.00.973.506 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.973.509 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.557.229 I main: llama threadpool init, n_threads = 4
0.01.557.245 I 
0.01.557.366 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.557.370 I 
0.01.557.605 I sampler seed: 1531823653
0.01.557.618 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.557.629 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.557.630 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.557.630 I 
 seconally.

The following are some sentences that describe different types of people:

- "He is a kind and gentle man."
- "She is

0.12.743.764 I llama_perf_sampler_print:    sampling time =      48.94 ms /    33 runs   (    1.48 ms per token,   674.24 tokens per second)
0.12.743.767 I llama_perf_context_print:        load time =    1556.28 ms
0.12.743.769 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.743.795 I llama_perf_context_print:        eval time =   11102.60 ms /    32 runs   (  346.96 ms per token,     2.88 tokens per second)
0.12.743.797 I llama_perf_context_print:       total time =   11186.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.185s
user	46m46.237s
sys	0m6.336s
