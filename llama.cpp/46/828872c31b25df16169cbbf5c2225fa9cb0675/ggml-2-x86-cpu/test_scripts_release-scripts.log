+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.629 I build: 4353 (46828872) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.826 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.021.538 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.548 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.556 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.561 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.562 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.566 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.567 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.568 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.569 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.569 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.570 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.575 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.576 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.577 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.578 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.582 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.385 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.779 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.686 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.692 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.693 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.693 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.694 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.695 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.695 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.697 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.698 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.698 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.699 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.701 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.704 I llama_model_loader: - type  f32:   37 tensors
0.00.131.705 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.776 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.355 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.855 I llm_load_vocab: special tokens cache size = 5
0.00.283.963 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.980 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.980 I llm_load_print_meta: arch             = gemma
0.00.283.981 I llm_load_print_meta: vocab type       = SPM
0.00.283.982 I llm_load_print_meta: n_vocab          = 256000
0.00.283.982 I llm_load_print_meta: n_merges         = 0
0.00.283.982 I llm_load_print_meta: vocab_only       = 0
0.00.283.983 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.983 I llm_load_print_meta: n_embd           = 2048
0.00.283.983 I llm_load_print_meta: n_layer          = 18
0.00.283.995 I llm_load_print_meta: n_head           = 8
0.00.283.996 I llm_load_print_meta: n_head_kv        = 1
0.00.283.997 I llm_load_print_meta: n_rot            = 256
0.00.283.997 I llm_load_print_meta: n_swa            = 0
0.00.283.997 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.998 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.998 I llm_load_print_meta: n_gqa            = 8
0.00.283.999 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.000 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.001 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.002 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.003 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.003 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.004 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.005 I llm_load_print_meta: n_ff             = 16384
0.00.284.005 I llm_load_print_meta: n_expert         = 0
0.00.284.005 I llm_load_print_meta: n_expert_used    = 0
0.00.284.005 I llm_load_print_meta: causal attn      = 1
0.00.284.005 I llm_load_print_meta: pooling type     = 0
0.00.284.006 I llm_load_print_meta: rope type        = 2
0.00.284.006 I llm_load_print_meta: rope scaling     = linear
0.00.284.007 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.008 I llm_load_print_meta: freq_scale_train = 1
0.00.284.008 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.008 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.008 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.009 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.009 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.009 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.010 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.010 I llm_load_print_meta: model type       = 2B
0.00.284.011 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.012 I llm_load_print_meta: model params     = 2.51 B
0.00.284.012 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.013 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.013 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.014 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.014 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.014 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.015 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.015 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.016 I llm_load_print_meta: max token length = 93
0.00.385.284 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.385.290 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.385.291 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.385.291 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.385.292 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.385.292 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.390.641 I llama_new_context_with_model: n_seq_max     = 1
0.00.390.647 I llama_new_context_with_model: n_ctx         = 4096
0.00.390.648 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.390.648 I llama_new_context_with_model: n_batch       = 2048
0.00.390.649 I llama_new_context_with_model: n_ubatch      = 512
0.00.390.649 I llama_new_context_with_model: flash_attn    = 0
0.00.390.652 I llama_new_context_with_model: freq_base     = 10000.0
0.00.390.653 I llama_new_context_with_model: freq_scale    = 1
0.00.390.654 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.237 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.250 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.339 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.633 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.638 I llama_new_context_with_model: graph nodes  = 601
0.00.406.638 I llama_new_context_with_model: graph splits = 1
0.00.406.641 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.406.641 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.446 I main: llama threadpool init, n_threads = 4
0.00.491.462 I 
0.00.491.532 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.491.535 I 
0.00.491.581 I sampler seed: 1933463047
0.00.491.591 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.594 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.603 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.606 I 
 increasities are a type of sexual harassment that involves unwanted sexual advances or requests towards a person who is in a position of power or authority. They can be directed

0.02.740.439 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6975.27 tokens per second)
0.02.740.441 I llama_perf_context_print:        load time =     490.60 ms
0.02.740.443 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.740.445 I llama_perf_context_print:        eval time =    2229.61 ms /    32 runs   (   69.68 ms per token,    14.35 tokens per second)
0.02.740.446 I llama_perf_context_print:       total time =    2249.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.554 I build: 4353 (46828872) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.898 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.913 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.920 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.921 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.925 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.929 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.930 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.930 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.931 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.937 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.938 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.939 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.939 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.940 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.062 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.708 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.651 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.657 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.658 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.659 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.659 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.660 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.661 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.663 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.664 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.664 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.665 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.666 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.668 I llama_model_loader: - type  f32:   37 tensors
0.00.131.669 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.926 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.952 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.611 I llm_load_vocab: special tokens cache size = 5
0.00.271.756 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.771 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.771 I llm_load_print_meta: arch             = gemma
0.00.271.781 I llm_load_print_meta: vocab type       = SPM
0.00.271.782 I llm_load_print_meta: n_vocab          = 256000
0.00.271.783 I llm_load_print_meta: n_merges         = 0
0.00.271.783 I llm_load_print_meta: vocab_only       = 0
0.00.271.783 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.783 I llm_load_print_meta: n_embd           = 2048
0.00.271.784 I llm_load_print_meta: n_layer          = 18
0.00.271.795 I llm_load_print_meta: n_head           = 8
0.00.271.796 I llm_load_print_meta: n_head_kv        = 1
0.00.271.796 I llm_load_print_meta: n_rot            = 256
0.00.271.797 I llm_load_print_meta: n_swa            = 0
0.00.271.797 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.798 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.799 I llm_load_print_meta: n_gqa            = 8
0.00.271.800 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.801 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.802 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.804 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.804 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.805 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.805 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.806 I llm_load_print_meta: n_ff             = 16384
0.00.271.807 I llm_load_print_meta: n_expert         = 0
0.00.271.808 I llm_load_print_meta: n_expert_used    = 0
0.00.271.808 I llm_load_print_meta: causal attn      = 1
0.00.271.808 I llm_load_print_meta: pooling type     = 0
0.00.271.809 I llm_load_print_meta: rope type        = 2
0.00.271.809 I llm_load_print_meta: rope scaling     = linear
0.00.271.810 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.811 I llm_load_print_meta: freq_scale_train = 1
0.00.271.811 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.811 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.812 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.813 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.813 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.814 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.814 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.815 I llm_load_print_meta: model type       = 2B
0.00.271.815 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.816 I llm_load_print_meta: model params     = 2.51 B
0.00.271.817 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.817 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.818 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.818 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.818 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.819 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.819 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.819 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.820 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.820 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.821 I llm_load_print_meta: max token length = 93
0.00.366.437 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.778 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.786 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.787 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.787 I llama_new_context_with_model: n_batch       = 2048
0.00.371.788 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.788 I llama_new_context_with_model: flash_attn    = 0
0.00.371.792 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.793 I llama_new_context_with_model: freq_scale    = 1
0.00.371.794 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.520 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.536 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.633 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.956 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.963 I llama_new_context_with_model: graph nodes  = 601
0.00.388.963 I llama_new_context_with_model: graph splits = 1
0.00.388.966 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.966 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.991 I main: llama threadpool init, n_threads = 4
0.00.471.006 I 
0.00.471.070 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.074 I 
0.00.471.111 I sampler seed: 762232480
0.00.471.123 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.134 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.138 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.138 I 
 increasities! [end of text]


0.00.743.456 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7923.93 tokens per second)
0.00.743.458 I llama_perf_context_print:        load time =     470.22 ms
0.00.743.459 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.743.460 I llama_perf_context_print:        eval time =     269.39 ms /     4 runs   (   67.35 ms per token,    14.85 tokens per second)
0.00.743.461 I llama_perf_context_print:       total time =     272.47 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.166 I build: 4353 (46828872) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.361 I main: llama backend init
0.00.000.367 I main: load the model and apply lora adapter, if any
0.00.020.614 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.624 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.632 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.637 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.638 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.642 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.642 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.643 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.644 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.644 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.644 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.649 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.650 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.650 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.651 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.651 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.162 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.660 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.626 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.632 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.633 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.634 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.634 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.635 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.636 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.638 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.639 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.640 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.641 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.642 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.646 I llama_model_loader: - type  f32:   37 tensors
0.00.130.647 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.091 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.981 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.626 I llm_load_vocab: special tokens cache size = 5
0.00.270.775 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.792 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.793 I llm_load_print_meta: arch             = gemma
0.00.270.793 I llm_load_print_meta: vocab type       = SPM
0.00.270.794 I llm_load_print_meta: n_vocab          = 256000
0.00.270.794 I llm_load_print_meta: n_merges         = 0
0.00.270.795 I llm_load_print_meta: vocab_only       = 0
0.00.270.795 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.795 I llm_load_print_meta: n_embd           = 2048
0.00.270.796 I llm_load_print_meta: n_layer          = 18
0.00.270.808 I llm_load_print_meta: n_head           = 8
0.00.270.809 I llm_load_print_meta: n_head_kv        = 1
0.00.270.809 I llm_load_print_meta: n_rot            = 256
0.00.270.809 I llm_load_print_meta: n_swa            = 0
0.00.270.810 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.810 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.811 I llm_load_print_meta: n_gqa            = 8
0.00.270.812 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.813 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.814 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.815 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.816 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.816 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.817 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.818 I llm_load_print_meta: n_ff             = 16384
0.00.270.818 I llm_load_print_meta: n_expert         = 0
0.00.270.819 I llm_load_print_meta: n_expert_used    = 0
0.00.270.820 I llm_load_print_meta: causal attn      = 1
0.00.270.821 I llm_load_print_meta: pooling type     = 0
0.00.270.821 I llm_load_print_meta: rope type        = 2
0.00.270.822 I llm_load_print_meta: rope scaling     = linear
0.00.270.823 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.823 I llm_load_print_meta: freq_scale_train = 1
0.00.270.824 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.824 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.825 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.826 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.826 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.826 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.826 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.827 I llm_load_print_meta: model type       = 2B
0.00.270.831 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.832 I llm_load_print_meta: model params     = 2.51 B
0.00.270.833 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.833 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.834 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.834 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.834 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.834 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.835 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.835 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.835 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.836 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.836 I llm_load_print_meta: max token length = 93
0.00.348.066 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.348.071 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.072 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.348.073 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.348.073 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.074 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.353.135 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.141 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.142 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.142 I llama_new_context_with_model: n_batch       = 2048
0.00.353.143 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.143 I llama_new_context_with_model: flash_attn    = 0
0.00.353.145 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.147 I llama_new_context_with_model: freq_scale    = 1
0.00.353.147 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.379 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.393 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.488 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.786 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.793 I llama_new_context_with_model: graph nodes  = 601
0.00.369.793 I llama_new_context_with_model: graph splits = 1
0.00.369.795 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.796 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.668 I main: llama threadpool init, n_threads = 4
0.00.454.684 I 
0.00.454.758 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.762 I 
0.00.454.806 I sampler seed: 2781160878
0.00.454.817 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.828 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.831 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.831 I 
 increasities?

I'm unable to access the text you provided. Please provide the text or paste it here so I can assist you. [end of text]


0.02.604.351 I llama_perf_sampler_print:    sampling time =       4.79 ms /    31 runs   (    0.15 ms per token,  6475.87 tokens per second)
0.02.604.354 I llama_perf_context_print:        load time =     454.28 ms
0.02.604.355 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.604.356 I llama_perf_context_print:        eval time =    2131.63 ms /    30 runs   (   71.05 ms per token,    14.07 tokens per second)
0.02.604.357 I llama_perf_context_print:       total time =    2149.69 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.553 I build: 4353 (46828872) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.020.954 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.966 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.974 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.979 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.980 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.985 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.986 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.988 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.989 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.990 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.004 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.021 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.025 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.026 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.026 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.027 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.426 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.096 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.969 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.976 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.976 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.977 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.979 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.980 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.984 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.984 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.985 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.986 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.987 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.991 I llama_model_loader: - type  f32:   37 tensors
0.00.131.992 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.667 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.684 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.191 I llm_load_vocab: special tokens cache size = 5
0.00.261.183 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.198 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.199 I llm_load_print_meta: arch             = gemma
0.00.261.199 I llm_load_print_meta: vocab type       = SPM
0.00.261.200 I llm_load_print_meta: n_vocab          = 256000
0.00.261.200 I llm_load_print_meta: n_merges         = 0
0.00.261.201 I llm_load_print_meta: vocab_only       = 0
0.00.261.201 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.201 I llm_load_print_meta: n_embd           = 2048
0.00.261.202 I llm_load_print_meta: n_layer          = 18
0.00.261.212 I llm_load_print_meta: n_head           = 8
0.00.261.214 I llm_load_print_meta: n_head_kv        = 1
0.00.261.214 I llm_load_print_meta: n_rot            = 256
0.00.261.214 I llm_load_print_meta: n_swa            = 0
0.00.261.215 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.215 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.216 I llm_load_print_meta: n_gqa            = 8
0.00.261.217 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.218 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.218 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.220 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.221 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.221 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.222 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.222 I llm_load_print_meta: n_ff             = 16384
0.00.261.223 I llm_load_print_meta: n_expert         = 0
0.00.261.223 I llm_load_print_meta: n_expert_used    = 0
0.00.261.223 I llm_load_print_meta: causal attn      = 1
0.00.261.223 I llm_load_print_meta: pooling type     = 0
0.00.261.224 I llm_load_print_meta: rope type        = 2
0.00.261.224 I llm_load_print_meta: rope scaling     = linear
0.00.261.226 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.226 I llm_load_print_meta: freq_scale_train = 1
0.00.261.226 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.227 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.227 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.227 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.228 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.228 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.229 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.229 I llm_load_print_meta: model type       = 2B
0.00.261.230 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.231 I llm_load_print_meta: model params     = 2.51 B
0.00.261.232 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.232 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.232 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.232 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.233 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.233 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.233 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.234 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.234 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.235 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.235 I llm_load_print_meta: max token length = 93
0.00.333.595 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.333.601 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.338.578 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.584 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.584 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.585 I llama_new_context_with_model: n_batch       = 2048
0.00.338.585 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.586 I llama_new_context_with_model: flash_attn    = 0
0.00.338.588 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.589 I llama_new_context_with_model: freq_scale    = 1
0.00.338.590 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.224 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.236 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.327 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.590 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.595 I llama_new_context_with_model: graph nodes  = 601
0.00.354.596 I llama_new_context_with_model: graph splits = 1
0.00.354.598 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.354.598 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.016 I main: llama threadpool init, n_threads = 4
0.00.441.031 I 
0.00.441.108 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.441.111 I 
0.00.441.157 I sampler seed: 2308473895
0.00.441.168 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.179 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.183 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.183 I 
 increasels, and other small, brightly colored organisms are found in a diverse range of environments. These organisms are vital for the functioning of ecosystems, contributing to nutrient

0.02.861.633 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6699.15 tokens per second)
0.02.861.635 I llama_perf_context_print:        load time =     440.24 ms
0.02.861.636 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.861.638 I llama_perf_context_print:        eval time =    2401.15 ms /    32 runs   (   75.04 ms per token,    13.33 tokens per second)
0.02.861.640 I llama_perf_context_print:       total time =    2420.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.360s
user	0m31.258s
sys	0m9.304s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4353 (46828872)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40268.64 ms
main:    total time = 40268.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.582 I build: 4353 (46828872) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.787 I main: load the model and apply lora adapter, if any
0.00.021.329 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.343 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.351 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.356 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.357 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.362 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.363 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.364 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.364 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.365 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.365 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.370 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.371 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.371 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.373 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.373 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.068 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.346 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.352 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.353 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.353 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.354 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.355 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.356 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.358 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.358 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.359 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.360 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.361 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.364 I llama_model_loader: - type  f32:   37 tensors
0.00.131.365 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.365 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.430 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.488 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.013 I llm_load_vocab: special tokens cache size = 5
0.00.263.045 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.061 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.062 I llm_load_print_meta: arch             = gemma
0.00.263.063 I llm_load_print_meta: vocab type       = SPM
0.00.263.064 I llm_load_print_meta: n_vocab          = 256000
0.00.263.064 I llm_load_print_meta: n_merges         = 0
0.00.263.064 I llm_load_print_meta: vocab_only       = 0
0.00.263.065 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.065 I llm_load_print_meta: n_embd           = 2048
0.00.263.065 I llm_load_print_meta: n_layer          = 18
0.00.263.076 I llm_load_print_meta: n_head           = 8
0.00.263.077 I llm_load_print_meta: n_head_kv        = 1
0.00.263.078 I llm_load_print_meta: n_rot            = 256
0.00.263.078 I llm_load_print_meta: n_swa            = 0
0.00.263.078 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.078 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.079 I llm_load_print_meta: n_gqa            = 8
0.00.263.080 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.081 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.082 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.083 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.083 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.084 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.084 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.085 I llm_load_print_meta: n_ff             = 16384
0.00.263.086 I llm_load_print_meta: n_expert         = 0
0.00.263.086 I llm_load_print_meta: n_expert_used    = 0
0.00.263.086 I llm_load_print_meta: causal attn      = 1
0.00.263.086 I llm_load_print_meta: pooling type     = 0
0.00.263.087 I llm_load_print_meta: rope type        = 2
0.00.263.087 I llm_load_print_meta: rope scaling     = linear
0.00.263.088 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.089 I llm_load_print_meta: freq_scale_train = 1
0.00.263.089 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.090 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.090 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.090 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.091 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.091 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.091 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.092 I llm_load_print_meta: model type       = 2B
0.00.263.092 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.093 I llm_load_print_meta: model params     = 2.51 B
0.00.263.094 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.094 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.094 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.095 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.095 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.095 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.096 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.096 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.096 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.097 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.097 I llm_load_print_meta: max token length = 93
0.00.323.803 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.809 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.809 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.810 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.810 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.811 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.074 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.080 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.081 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.081 I llama_new_context_with_model: n_batch       = 2048
0.00.329.082 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.082 I llama_new_context_with_model: flash_attn    = 0
0.00.329.084 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.085 I llama_new_context_with_model: freq_scale    = 1
0.00.329.086 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.322 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.336 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.426 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.701 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.708 I llama_new_context_with_model: graph nodes  = 601
0.00.344.708 I llama_new_context_with_model: graph splits = 1
0.00.344.710 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.711 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.886 I main: llama threadpool init, n_threads = 4
0.00.419.901 I 
0.00.419.976 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.979 I 
0.00.420.019 I sampler seed: 1695166944
0.00.420.030 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.033 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.034 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.034 I 
 seconally.

**Assistant**

I am unable to generate responses that are sexually suggestive in nature. My purpose is to assist with tasks and questions that are

0.02.014.002 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6416.49 tokens per second)
0.02.014.005 I llama_perf_context_print:        load time =     419.08 ms
0.02.014.006 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.014.008 I llama_perf_context_print:        eval time =    1575.04 ms /    32 runs   (   49.22 ms per token,    20.32 tokens per second)
0.02.014.009 I llama_perf_context_print:       total time =    1594.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4353 (46828872)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40229.94 ms
main:    total time = 40229.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.580 I build: 4353 (46828872) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.780 I main: load the model and apply lora adapter, if any
0.00.021.153 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.174 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.182 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.183 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.188 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.192 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.192 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.197 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.198 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.199 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.200 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.201 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.025 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.555 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.421 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.427 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.428 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.429 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.429 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.430 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.431 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.433 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.434 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.436 I llama_model_loader: - type  f32:   37 tensors
0.00.131.437 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.438 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.115 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.165 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.706 I llm_load_vocab: special tokens cache size = 5
0.00.265.771 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.790 I llm_load_print_meta: arch             = gemma
0.00.265.791 I llm_load_print_meta: vocab type       = SPM
0.00.265.791 I llm_load_print_meta: n_vocab          = 256000
0.00.265.791 I llm_load_print_meta: n_merges         = 0
0.00.265.792 I llm_load_print_meta: vocab_only       = 0
0.00.265.792 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.792 I llm_load_print_meta: n_embd           = 2048
0.00.265.793 I llm_load_print_meta: n_layer          = 18
0.00.265.803 I llm_load_print_meta: n_head           = 8
0.00.265.804 I llm_load_print_meta: n_head_kv        = 1
0.00.265.805 I llm_load_print_meta: n_rot            = 256
0.00.265.805 I llm_load_print_meta: n_swa            = 0
0.00.265.805 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.806 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.807 I llm_load_print_meta: n_gqa            = 8
0.00.265.808 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.809 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.810 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.811 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.811 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.812 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.812 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.813 I llm_load_print_meta: n_ff             = 16384
0.00.265.813 I llm_load_print_meta: n_expert         = 0
0.00.265.814 I llm_load_print_meta: n_expert_used    = 0
0.00.265.814 I llm_load_print_meta: causal attn      = 1
0.00.265.814 I llm_load_print_meta: pooling type     = 0
0.00.265.815 I llm_load_print_meta: rope type        = 2
0.00.265.815 I llm_load_print_meta: rope scaling     = linear
0.00.265.817 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.817 I llm_load_print_meta: freq_scale_train = 1
0.00.265.818 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.818 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.818 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.818 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.819 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.819 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.819 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.820 I llm_load_print_meta: model type       = 2B
0.00.265.820 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.821 I llm_load_print_meta: model params     = 2.51 B
0.00.265.822 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.822 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.822 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.823 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.823 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.823 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.823 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.824 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.824 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.824 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.825 I llm_load_print_meta: max token length = 93
0.00.323.213 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.381 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.388 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.388 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.389 I llama_new_context_with_model: n_batch       = 2048
0.00.328.389 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.390 I llama_new_context_with_model: flash_attn    = 0
0.00.328.392 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.393 I llama_new_context_with_model: freq_scale    = 1
0.00.328.394 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.269 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.285 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.373 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.611 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.617 I llama_new_context_with_model: graph nodes  = 601
0.00.344.618 I llama_new_context_with_model: graph splits = 1
0.00.344.620 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.620 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.030 I main: llama threadpool init, n_threads = 4
0.00.419.046 I 
0.00.419.122 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.125 I 
0.00.419.168 I sampler seed: 688190459
0.00.419.179 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.186 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.190 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.190 I 
 squaRE® 100% organic cotton

**Benefits of SQUARE® 100% Organic Cotton:**

* **Superior comfort:**

0.01.979.597 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6396.59 tokens per second)
0.01.979.599 I llama_perf_context_print:        load time =     418.23 ms
0.01.979.600 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.979.601 I llama_perf_context_print:        eval time =    1541.48 ms /    32 runs   (   48.17 ms per token,    20.76 tokens per second)
0.01.979.602 I llama_perf_context_print:       total time =    1560.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.248s
user	10m24.042s
sys	0m6.797s
