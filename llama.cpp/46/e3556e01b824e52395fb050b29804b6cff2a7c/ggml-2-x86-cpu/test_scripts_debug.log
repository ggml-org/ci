+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.408 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.422 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.519 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.533 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.538 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.543 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.545 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.546 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.548 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.549 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.551 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.558 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.562 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.564 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.565 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.566 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.135 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.653 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.637 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.645 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.647 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.648 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.650 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.651 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.653 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.658 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.659 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.661 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.662 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.664 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.672 I llama_model_loader: - type  f32:   37 tensors
0.00.351.674 I llama_model_loader: - type q8_0:  127 tensors
0.00.559.140 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.619.024 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.619.912 I llm_load_vocab: special tokens cache size = 5
0.00.844.644 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.844.720 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.844.724 I llm_load_print_meta: arch             = gemma
0.00.844.724 I llm_load_print_meta: vocab type       = SPM
0.00.844.725 I llm_load_print_meta: n_vocab          = 256000
0.00.844.728 I llm_load_print_meta: n_merges         = 0
0.00.844.728 I llm_load_print_meta: vocab_only       = 0
0.00.844.728 I llm_load_print_meta: n_ctx_train      = 8192
0.00.844.729 I llm_load_print_meta: n_embd           = 2048
0.00.844.729 I llm_load_print_meta: n_layer          = 18
0.00.844.806 I llm_load_print_meta: n_head           = 8
0.00.844.817 I llm_load_print_meta: n_head_kv        = 1
0.00.844.818 I llm_load_print_meta: n_rot            = 256
0.00.844.819 I llm_load_print_meta: n_swa            = 0
0.00.844.819 I llm_load_print_meta: n_embd_head_k    = 256
0.00.844.820 I llm_load_print_meta: n_embd_head_v    = 256
0.00.844.824 I llm_load_print_meta: n_gqa            = 8
0.00.844.829 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.844.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.844.839 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.844.840 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.844.841 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.841 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.842 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.847 I llm_load_print_meta: n_ff             = 16384
0.00.844.847 I llm_load_print_meta: n_expert         = 0
0.00.844.848 I llm_load_print_meta: n_expert_used    = 0
0.00.844.849 I llm_load_print_meta: causal attn      = 1
0.00.844.849 I llm_load_print_meta: pooling type     = 0
0.00.844.850 I llm_load_print_meta: rope type        = 2
0.00.844.850 I llm_load_print_meta: rope scaling     = linear
0.00.844.852 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.852 I llm_load_print_meta: freq_scale_train = 1
0.00.844.854 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.854 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.855 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.856 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.857 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.858 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.858 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.861 I llm_load_print_meta: model type       = 2B
0.00.844.864 I llm_load_print_meta: model ftype      = Q8_0
0.00.844.876 I llm_load_print_meta: model params     = 2.51 B
0.00.844.878 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.844.878 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.880 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.880 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.881 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.883 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.884 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.884 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.891 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.893 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.894 I llm_load_print_meta: max token length = 93
0.00.946.709 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.946.719 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.946.720 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.946.720 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.946.721 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.946.722 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.952.616 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.623 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.624 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.624 I llama_new_context_with_model: n_batch       = 2048
0.00.952.625 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.625 I llama_new_context_with_model: flash_attn    = 0
0.00.952.628 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.629 I llama_new_context_with_model: freq_scale    = 1
0.00.952.629 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.952.714 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.968.420 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.968.460 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.968.585 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.971.233 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.971.238 I llama_new_context_with_model: graph nodes  = 601
0.00.971.238 I llama_new_context_with_model: graph splits = 1
0.00.971.263 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.971.266 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.580.991 I main: llama threadpool init, n_threads = 4
0.01.581.007 I 
0.01.581.127 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.581.131 I 
0.01.581.366 I sampler seed: 1910038403
0.01.581.379 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.581.392 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.581.393 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.581.393 I 
 increasities are a form of sexual harassment where women are subjected to unwanted sexual advances, propositions, or solicitations.

The goal of this paper is to critically

0.15.068.570 I llama_perf_sampler_print:    sampling time =      49.77 ms /    33 runs   (    1.51 ms per token,   662.98 tokens per second)
0.15.068.586 I llama_perf_context_print:        load time =    1580.02 ms
0.15.068.588 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.068.590 I llama_perf_context_print:        eval time =   13402.13 ms /    32 runs   (  418.82 ms per token,     2.39 tokens per second)
0.15.068.591 I llama_perf_context_print:       total time =   13487.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.023.256 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.371 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.376 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.381 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.383 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.385 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.386 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.387 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.388 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.396 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.398 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.399 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.401 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.403 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.976 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.736 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.744 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.745 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.747 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.748 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.750 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.751 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.755 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.777 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.780 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.355.782 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.790 I llama_model_loader: - type  f32:   37 tensors
0.00.355.793 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.436 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.280 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.215 I llm_load_vocab: special tokens cache size = 5
0.00.850.530 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.600 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.605 I llm_load_print_meta: arch             = gemma
0.00.850.605 I llm_load_print_meta: vocab type       = SPM
0.00.850.606 I llm_load_print_meta: n_vocab          = 256000
0.00.850.608 I llm_load_print_meta: n_merges         = 0
0.00.850.609 I llm_load_print_meta: vocab_only       = 0
0.00.850.609 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.610 I llm_load_print_meta: n_embd           = 2048
0.00.850.610 I llm_load_print_meta: n_layer          = 18
0.00.850.688 I llm_load_print_meta: n_head           = 8
0.00.850.700 I llm_load_print_meta: n_head_kv        = 1
0.00.850.701 I llm_load_print_meta: n_rot            = 256
0.00.850.701 I llm_load_print_meta: n_swa            = 0
0.00.850.702 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.702 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.707 I llm_load_print_meta: n_gqa            = 8
0.00.850.712 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.716 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.718 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.720 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.720 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.721 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.721 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.726 I llm_load_print_meta: n_ff             = 16384
0.00.850.727 I llm_load_print_meta: n_expert         = 0
0.00.850.727 I llm_load_print_meta: n_expert_used    = 0
0.00.850.727 I llm_load_print_meta: causal attn      = 1
0.00.850.728 I llm_load_print_meta: pooling type     = 0
0.00.850.728 I llm_load_print_meta: rope type        = 2
0.00.850.729 I llm_load_print_meta: rope scaling     = linear
0.00.850.730 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.730 I llm_load_print_meta: freq_scale_train = 1
0.00.850.731 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.731 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.732 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.732 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.732 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.733 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.733 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.736 I llm_load_print_meta: model type       = 2B
0.00.850.737 I llm_load_print_meta: model ftype      = Q8_0
0.00.850.738 I llm_load_print_meta: model params     = 2.51 B
0.00.850.739 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.850.739 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.740 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.740 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.741 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.741 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.741 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.742 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.748 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.749 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.750 I llm_load_print_meta: max token length = 93
0.00.946.962 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.952.855 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.862 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.862 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.863 I llama_new_context_with_model: n_batch       = 2048
0.00.952.863 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.864 I llama_new_context_with_model: flash_attn    = 0
0.00.952.867 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.868 I llama_new_context_with_model: freq_scale    = 1
0.00.952.869 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.952.961 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.968.670 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.968.712 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.968.839 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.971.490 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.971.493 I llama_new_context_with_model: graph nodes  = 601
0.00.971.494 I llama_new_context_with_model: graph splits = 1
0.00.971.518 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.971.521 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.580.443 I main: llama threadpool init, n_threads = 4
0.01.580.457 I 
0.01.580.576 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.580.580 I 
0.01.580.812 I sampler seed: 2360199056
0.01.580.826 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.580.836 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.580.839 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.580.839 I 
 increasities from the 1970s and 1980s. [end of text]


0.09.603.863 I llama_perf_sampler_print:    sampling time =      29.54 ms /    20 runs   (    1.48 ms per token,   677.00 tokens per second)
0.09.603.866 I llama_perf_context_print:        load time =    1579.47 ms
0.09.603.868 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.603.869 I llama_perf_context_print:        eval time =    7971.60 ms /    19 runs   (  419.56 ms per token,     2.38 tokens per second)
0.09.603.870 I llama_perf_context_print:       total time =    8023.43 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.431 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.442 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.530 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.544 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.548 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.553 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.562 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.564 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.566 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.567 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.569 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.575 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.579 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.580 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.582 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.246.144 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.347.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.371.989 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.372.001 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.372.002 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.372.004 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.372.005 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.372.007 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.372.009 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.372.013 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.372.015 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.372.016 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.372.018 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.372.019 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.372.028 I llama_model_loader: - type  f32:   37 tensors
0.00.372.030 I llama_model_loader: - type q8_0:  127 tensors
0.00.588.586 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.667 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.636 I llm_load_vocab: special tokens cache size = 5
0.00.856.099 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.173 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.177 I llm_load_print_meta: arch             = gemma
0.00.856.178 I llm_load_print_meta: vocab type       = SPM
0.00.856.179 I llm_load_print_meta: n_vocab          = 256000
0.00.856.181 I llm_load_print_meta: n_merges         = 0
0.00.856.182 I llm_load_print_meta: vocab_only       = 0
0.00.856.183 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.183 I llm_load_print_meta: n_embd           = 2048
0.00.856.183 I llm_load_print_meta: n_layer          = 18
0.00.856.260 I llm_load_print_meta: n_head           = 8
0.00.856.267 I llm_load_print_meta: n_head_kv        = 1
0.00.856.267 I llm_load_print_meta: n_rot            = 256
0.00.856.268 I llm_load_print_meta: n_swa            = 0
0.00.856.268 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.268 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.273 I llm_load_print_meta: n_gqa            = 8
0.00.856.278 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.283 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.284 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.287 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.292 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.293 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.293 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.301 I llm_load_print_meta: n_ff             = 16384
0.00.856.302 I llm_load_print_meta: n_expert         = 0
0.00.856.303 I llm_load_print_meta: n_expert_used    = 0
0.00.856.305 I llm_load_print_meta: causal attn      = 1
0.00.856.306 I llm_load_print_meta: pooling type     = 0
0.00.856.306 I llm_load_print_meta: rope type        = 2
0.00.856.307 I llm_load_print_meta: rope scaling     = linear
0.00.856.312 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.313 I llm_load_print_meta: freq_scale_train = 1
0.00.856.313 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.314 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.314 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.315 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.315 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.316 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.316 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.319 I llm_load_print_meta: model type       = 2B
0.00.856.321 I llm_load_print_meta: model ftype      = Q8_0
0.00.856.322 I llm_load_print_meta: model params     = 2.51 B
0.00.856.323 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.856.324 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.327 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.328 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.329 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.330 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.330 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.331 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.346 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.348 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.349 I llm_load_print_meta: max token length = 93
0.00.936.982 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.936.991 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.936.992 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.936.993 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.936.994 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.936.995 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.943.473 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.479 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.480 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.480 I llama_new_context_with_model: n_batch       = 2048
0.00.943.481 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.481 I llama_new_context_with_model: flash_attn    = 0
0.00.943.484 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.485 I llama_new_context_with_model: freq_scale    = 1
0.00.943.486 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.943.579 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.958.361 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.958.395 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.527 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.122 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.126 I llama_new_context_with_model: graph nodes  = 601
0.00.961.127 I llama_new_context_with_model: graph splits = 1
0.00.961.151 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.961.155 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.602.028 I main: llama threadpool init, n_threads = 4
0.01.602.046 I 
0.01.602.164 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.602.168 I 
0.01.602.421 I sampler seed: 3379586035
0.01.602.435 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.602.447 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.602.448 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.602.448 I 
 increably with a melodious voice, weaving tales of magic and mystery.

**The Night Wanderer's Tale**

The wind sighed through the crumbling tower,

0.15.103.959 I llama_perf_sampler_print:    sampling time =      50.26 ms /    33 runs   (    1.52 ms per token,   656.56 tokens per second)
0.15.103.974 I llama_perf_context_print:        load time =    1601.07 ms
0.15.103.976 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.103.978 I llama_perf_context_print:        eval time =   13415.54 ms /    32 runs   (  419.24 ms per token,     2.39 tokens per second)
0.15.103.979 I llama_perf_context_print:       total time =   13501.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.898 I main: load the model and apply lora adapter, if any
0.00.023.614 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.628 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.724 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.739 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.743 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.748 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.752 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.753 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.754 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.756 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.757 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.764 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.765 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.766 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.768 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.769 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.835 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.215 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.233 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.245 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.247 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.248 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.250 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.251 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.253 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.257 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.258 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.260 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.261 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.263 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.272 I llama_model_loader: - type  f32:   37 tensors
0.00.351.274 I llama_model_loader: - type q8_0:  127 tensors
0.00.565.843 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.622.736 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.623.653 I llm_load_vocab: special tokens cache size = 5
0.00.832.908 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.982 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.987 I llm_load_print_meta: arch             = gemma
0.00.832.988 I llm_load_print_meta: vocab type       = SPM
0.00.832.989 I llm_load_print_meta: n_vocab          = 256000
0.00.832.992 I llm_load_print_meta: n_merges         = 0
0.00.832.993 I llm_load_print_meta: vocab_only       = 0
0.00.832.993 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.994 I llm_load_print_meta: n_embd           = 2048
0.00.832.994 I llm_load_print_meta: n_layer          = 18
0.00.833.075 I llm_load_print_meta: n_head           = 8
0.00.833.084 I llm_load_print_meta: n_head_kv        = 1
0.00.833.085 I llm_load_print_meta: n_rot            = 256
0.00.833.085 I llm_load_print_meta: n_swa            = 0
0.00.833.086 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.086 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.091 I llm_load_print_meta: n_gqa            = 8
0.00.833.096 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.101 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.102 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.105 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.106 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.106 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.111 I llm_load_print_meta: n_ff             = 16384
0.00.833.112 I llm_load_print_meta: n_expert         = 0
0.00.833.113 I llm_load_print_meta: n_expert_used    = 0
0.00.833.113 I llm_load_print_meta: causal attn      = 1
0.00.833.113 I llm_load_print_meta: pooling type     = 0
0.00.833.114 I llm_load_print_meta: rope type        = 2
0.00.833.114 I llm_load_print_meta: rope scaling     = linear
0.00.833.116 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.116 I llm_load_print_meta: freq_scale_train = 1
0.00.833.117 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.117 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.117 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.130 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.131 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.131 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.132 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.135 I llm_load_print_meta: model type       = 2B
0.00.833.137 I llm_load_print_meta: model ftype      = Q8_0
0.00.833.138 I llm_load_print_meta: model params     = 2.51 B
0.00.833.139 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.833.139 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.140 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.140 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.141 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.141 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.142 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.142 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.149 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.150 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.163 I llm_load_print_meta: max token length = 93
0.00.905.502 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.905.512 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.911.526 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.533 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.534 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.534 I llama_new_context_with_model: n_batch       = 2048
0.00.911.534 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.535 I llama_new_context_with_model: flash_attn    = 0
0.00.911.538 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.539 I llama_new_context_with_model: freq_scale    = 1
0.00.911.539 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.911.626 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.926.293 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.333 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.455 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.929.042 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.929.046 I llama_new_context_with_model: graph nodes  = 601
0.00.929.046 I llama_new_context_with_model: graph splits = 1
0.00.929.069 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.929.070 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.543.640 I main: llama threadpool init, n_threads = 4
0.01.543.656 I 
0.01.543.778 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.543.782 I 
0.01.544.016 I sampler seed: 1157846461
0.01.544.030 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.544.042 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.544.043 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.544.043 I 
 increasities. [end of text]


0.03.236.214 I llama_perf_sampler_print:    sampling time =       6.36 ms /     5 runs   (    1.27 ms per token,   786.53 tokens per second)
0.03.236.229 I llama_perf_context_print:        load time =    1542.65 ms
0.03.236.231 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.236.233 I llama_perf_context_print:        eval time =    1680.03 ms /     4 runs   (  420.01 ms per token,     2.38 tokens per second)
0.03.236.234 I llama_perf_context_print:       total time =    1692.59 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.621s
user	2m40.620s
sys	0m9.320s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4419 (46e3556e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186777.00 ms
main:    total time = 186777.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.000.822 I main: load the model and apply lora adapter, if any
0.00.023.299 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.310 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.399 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.413 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.415 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.419 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.420 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.421 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.423 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.424 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.425 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.431 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.433 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.434 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.435 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.436 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.900 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.801 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.827 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.836 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.837 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.838 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.840 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.841 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.842 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.847 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.848 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.850 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.851 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.853 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.861 I llama_model_loader: - type  f32:   37 tensors
0.00.350.863 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.864 I llama_model_loader: - type q6_K:   19 tensors
0.00.563.526 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.619.299 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.620.193 I llm_load_vocab: special tokens cache size = 5
0.00.833.550 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.833.624 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.833.629 I llm_load_print_meta: arch             = gemma
0.00.833.630 I llm_load_print_meta: vocab type       = SPM
0.00.833.630 I llm_load_print_meta: n_vocab          = 256000
0.00.833.633 I llm_load_print_meta: n_merges         = 0
0.00.833.633 I llm_load_print_meta: vocab_only       = 0
0.00.833.633 I llm_load_print_meta: n_ctx_train      = 8192
0.00.833.634 I llm_load_print_meta: n_embd           = 2048
0.00.833.634 I llm_load_print_meta: n_layer          = 18
0.00.833.712 I llm_load_print_meta: n_head           = 8
0.00.833.722 I llm_load_print_meta: n_head_kv        = 1
0.00.833.723 I llm_load_print_meta: n_rot            = 256
0.00.833.724 I llm_load_print_meta: n_swa            = 0
0.00.833.725 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.726 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.731 I llm_load_print_meta: n_gqa            = 8
0.00.833.736 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.744 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.745 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.747 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.748 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.748 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.749 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.754 I llm_load_print_meta: n_ff             = 16384
0.00.833.755 I llm_load_print_meta: n_expert         = 0
0.00.833.756 I llm_load_print_meta: n_expert_used    = 0
0.00.833.756 I llm_load_print_meta: causal attn      = 1
0.00.833.756 I llm_load_print_meta: pooling type     = 0
0.00.833.757 I llm_load_print_meta: rope type        = 2
0.00.833.758 I llm_load_print_meta: rope scaling     = linear
0.00.833.759 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.760 I llm_load_print_meta: freq_scale_train = 1
0.00.833.761 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.762 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.762 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.763 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.771 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.775 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.775 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.779 I llm_load_print_meta: model type       = 2B
0.00.833.781 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.833.782 I llm_load_print_meta: model params     = 2.51 B
0.00.833.783 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.833.783 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.784 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.786 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.786 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.787 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.787 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.788 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.794 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.795 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.796 I llm_load_print_meta: max token length = 93
0.00.896.998 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.897.005 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.897.006 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.897.007 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.897.008 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.897.008 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.902.833 I llama_new_context_with_model: n_seq_max     = 1
0.00.902.841 I llama_new_context_with_model: n_ctx         = 4096
0.00.902.841 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.902.842 I llama_new_context_with_model: n_batch       = 2048
0.00.902.842 I llama_new_context_with_model: n_ubatch      = 512
0.00.902.842 I llama_new_context_with_model: flash_attn    = 0
0.00.902.845 I llama_new_context_with_model: freq_base     = 10000.0
0.00.902.845 I llama_new_context_with_model: freq_scale    = 1
0.00.902.846 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.902.928 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.917.616 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.917.653 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.917.772 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.920.358 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.920.362 I llama_new_context_with_model: graph nodes  = 601
0.00.920.363 I llama_new_context_with_model: graph splits = 1
0.00.920.387 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.920.390 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.500.884 I main: llama threadpool init, n_threads = 4
0.01.500.902 I 
0.01.501.020 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.501.024 I 
0.01.501.260 I sampler seed: 884257178
0.01.501.275 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.501.284 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.501.285 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.501.286 I 
 increasities is the first part of a sequence, and the sequence continues as follows:

- The second part of the sequence is called "The Ascending Series

0.12.643.464 I llama_perf_sampler_print:    sampling time =      49.57 ms /    33 runs   (    1.50 ms per token,   665.71 tokens per second)
0.12.643.468 I llama_perf_context_print:        load time =    1499.98 ms
0.12.643.469 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.643.491 I llama_perf_context_print:        eval time =   11056.98 ms /    32 runs   (  345.53 ms per token,     2.89 tokens per second)
0.12.643.492 I llama_perf_context_print:       total time =   11142.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4419 (46e3556e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187109.78 ms
main:    total time = 187109.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.486 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.587 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.603 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.609 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.612 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.613 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.614 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.616 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.617 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.623 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.624 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.626 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.627 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.629 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.238.544 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.339.479 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.363.913 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.363.920 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.363.922 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.363.923 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.363.924 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.363.926 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.363.927 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.363.932 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.363.934 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.363.941 I llama_model_loader: - type  f32:   37 tensors
0.00.363.944 I llama_model_loader: - type q4_K:  108 tensors
0.00.363.945 I llama_model_loader: - type q6_K:   19 tensors
0.00.581.136 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.651.467 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.652.532 I llm_load_vocab: special tokens cache size = 5
0.00.875.192 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.875.268 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.875.275 I llm_load_print_meta: arch             = gemma
0.00.875.276 I llm_load_print_meta: vocab type       = SPM
0.00.875.277 I llm_load_print_meta: n_vocab          = 256000
0.00.875.279 I llm_load_print_meta: n_merges         = 0
0.00.875.280 I llm_load_print_meta: vocab_only       = 0
0.00.875.281 I llm_load_print_meta: n_ctx_train      = 8192
0.00.875.281 I llm_load_print_meta: n_embd           = 2048
0.00.875.282 I llm_load_print_meta: n_layer          = 18
0.00.875.361 I llm_load_print_meta: n_head           = 8
0.00.875.371 I llm_load_print_meta: n_head_kv        = 1
0.00.875.371 I llm_load_print_meta: n_rot            = 256
0.00.875.373 I llm_load_print_meta: n_swa            = 0
0.00.875.373 I llm_load_print_meta: n_embd_head_k    = 256
0.00.875.374 I llm_load_print_meta: n_embd_head_v    = 256
0.00.875.378 I llm_load_print_meta: n_gqa            = 8
0.00.875.383 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.875.388 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.875.392 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.875.394 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.875.394 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.875.395 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.875.396 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.875.400 I llm_load_print_meta: n_ff             = 16384
0.00.875.401 I llm_load_print_meta: n_expert         = 0
0.00.875.402 I llm_load_print_meta: n_expert_used    = 0
0.00.875.402 I llm_load_print_meta: causal attn      = 1
0.00.875.402 I llm_load_print_meta: pooling type     = 0
0.00.875.403 I llm_load_print_meta: rope type        = 2
0.00.875.403 I llm_load_print_meta: rope scaling     = linear
0.00.875.405 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.875.406 I llm_load_print_meta: freq_scale_train = 1
0.00.875.406 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.875.406 I llm_load_print_meta: rope_finetuned   = unknown
0.00.875.407 I llm_load_print_meta: ssm_d_conv       = 0
0.00.875.407 I llm_load_print_meta: ssm_d_inner      = 0
0.00.875.407 I llm_load_print_meta: ssm_d_state      = 0
0.00.875.408 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.875.408 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.875.411 I llm_load_print_meta: model type       = 2B
0.00.875.412 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.875.413 I llm_load_print_meta: model params     = 2.51 B
0.00.875.414 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.875.415 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.875.416 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.875.416 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.875.417 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.875.418 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.875.419 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.875.419 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.875.426 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.875.427 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.875.430 I llm_load_print_meta: max token length = 93
0.00.936.077 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.941.826 I llama_new_context_with_model: n_seq_max     = 1
0.00.941.833 I llama_new_context_with_model: n_ctx         = 4096
0.00.941.833 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.941.834 I llama_new_context_with_model: n_batch       = 2048
0.00.941.834 I llama_new_context_with_model: n_ubatch      = 512
0.00.941.835 I llama_new_context_with_model: flash_attn    = 0
0.00.941.837 I llama_new_context_with_model: freq_base     = 10000.0
0.00.941.838 I llama_new_context_with_model: freq_scale    = 1
0.00.941.838 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.941.923 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.956.785 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.956.825 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.956.944 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.959.430 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.959.434 I llama_new_context_with_model: graph nodes  = 601
0.00.959.434 I llama_new_context_with_model: graph splits = 1
0.00.959.457 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.959.460 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.539.631 I main: llama threadpool init, n_threads = 4
0.01.539.648 I 
0.01.539.774 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.539.778 I 
0.01.540.024 I sampler seed: 3862057667
0.01.540.038 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.540.047 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.540.051 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.540.051 I 
 encompassing the potential ethical challenges and opportunities of the metaverse.

**Ethical Challenges:**

**1. Privacy and data security:**
* Managing vast amounts of

0.12.672.991 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.16 tokens per second)
0.12.672.995 I llama_perf_context_print:        load time =    1538.69 ms
0.12.672.996 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.672.998 I llama_perf_context_print:        eval time =   11047.72 ms /    32 runs   (  345.24 ms per token,     2.90 tokens per second)
0.12.672.999 I llama_perf_context_print:       total time =   11133.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.127s
user	46m49.795s
sys	0m6.275s
