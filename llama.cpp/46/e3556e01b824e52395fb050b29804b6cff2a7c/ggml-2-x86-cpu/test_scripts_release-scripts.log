+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.555 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.020.851 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.861 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.869 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.874 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.879 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.881 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.882 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.882 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.883 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.884 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.884 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.887 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.888 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.888 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.889 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.890 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.022 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.338 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.180 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.187 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.187 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.188 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.189 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.190 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.191 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.194 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.195 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.196 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.197 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.198 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.201 I llama_model_loader: - type  f32:   37 tensors
0.00.130.203 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.125 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.603 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.292 I llm_load_vocab: special tokens cache size = 5
0.00.270.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.617 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.618 I llm_load_print_meta: arch             = gemma
0.00.270.619 I llm_load_print_meta: vocab type       = SPM
0.00.270.619 I llm_load_print_meta: n_vocab          = 256000
0.00.270.620 I llm_load_print_meta: n_merges         = 0
0.00.270.620 I llm_load_print_meta: vocab_only       = 0
0.00.270.621 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.621 I llm_load_print_meta: n_embd           = 2048
0.00.270.621 I llm_load_print_meta: n_layer          = 18
0.00.270.633 I llm_load_print_meta: n_head           = 8
0.00.270.635 I llm_load_print_meta: n_head_kv        = 1
0.00.270.635 I llm_load_print_meta: n_rot            = 256
0.00.270.635 I llm_load_print_meta: n_swa            = 0
0.00.270.636 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.636 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.638 I llm_load_print_meta: n_gqa            = 8
0.00.270.639 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.641 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.642 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.644 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.644 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.645 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.645 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.647 I llm_load_print_meta: n_ff             = 16384
0.00.270.647 I llm_load_print_meta: n_expert         = 0
0.00.270.647 I llm_load_print_meta: n_expert_used    = 0
0.00.270.647 I llm_load_print_meta: causal attn      = 1
0.00.270.648 I llm_load_print_meta: pooling type     = 0
0.00.270.648 I llm_load_print_meta: rope type        = 2
0.00.270.648 I llm_load_print_meta: rope scaling     = linear
0.00.270.650 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.650 I llm_load_print_meta: freq_scale_train = 1
0.00.270.650 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.651 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.651 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.651 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.652 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.652 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.652 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.654 I llm_load_print_meta: model type       = 2B
0.00.270.655 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.655 I llm_load_print_meta: model params     = 2.51 B
0.00.270.656 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.656 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.657 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.657 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.658 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.658 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.658 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.659 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.660 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.660 I llm_load_print_meta: max token length = 93
0.00.369.412 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.420 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.421 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.422 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.422 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.423 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.565 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.571 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.571 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.571 I llama_new_context_with_model: n_batch       = 2048
0.00.374.572 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.572 I llama_new_context_with_model: flash_attn    = 0
0.00.374.575 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.576 I llama_new_context_with_model: freq_scale    = 1
0.00.374.577 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.596 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.389.639 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.654 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.749 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.009 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.016 I llama_new_context_with_model: graph nodes  = 601
0.00.391.016 I llama_new_context_with_model: graph splits = 1
0.00.391.020 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.020 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.269 I main: llama threadpool init, n_threads = 4
0.00.476.284 I 
0.00.476.357 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.360 I 
0.00.476.393 I sampler seed: 3393924676
0.00.476.404 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.415 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.418 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.418 I 
 increably, and exclaimed, "This is the greatest invention of all time!"

What invention is being referred to?

The provided text does not specify what

0.02.720.418 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6797.12 tokens per second)
0.02.720.422 I llama_perf_context_print:        load time =     475.51 ms
0.02.720.423 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.720.425 I llama_perf_context_print:        eval time =    2225.28 ms /    32 runs   (   69.54 ms per token,    14.38 tokens per second)
0.02.720.426 I llama_perf_context_print:       total time =    2244.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.172 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.020.663 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.677 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.685 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.686 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.689 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.690 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.690 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.691 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.692 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.692 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.697 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.697 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.698 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.699 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.700 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.474 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.808 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.618 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.624 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.625 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.626 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.627 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.628 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.630 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.631 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.631 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.635 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.636 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.639 I llama_model_loader: - type  f32:   37 tensors
0.00.129.640 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.192 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.002 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.599 I llm_load_vocab: special tokens cache size = 5
0.00.265.761 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.779 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.780 I llm_load_print_meta: arch             = gemma
0.00.265.781 I llm_load_print_meta: vocab type       = SPM
0.00.265.781 I llm_load_print_meta: n_vocab          = 256000
0.00.265.782 I llm_load_print_meta: n_merges         = 0
0.00.265.782 I llm_load_print_meta: vocab_only       = 0
0.00.265.783 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.783 I llm_load_print_meta: n_embd           = 2048
0.00.265.783 I llm_load_print_meta: n_layer          = 18
0.00.265.795 I llm_load_print_meta: n_head           = 8
0.00.265.797 I llm_load_print_meta: n_head_kv        = 1
0.00.265.797 I llm_load_print_meta: n_rot            = 256
0.00.265.797 I llm_load_print_meta: n_swa            = 0
0.00.265.797 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.798 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.800 I llm_load_print_meta: n_gqa            = 8
0.00.265.801 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.803 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.804 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.805 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.805 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.806 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.807 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.808 I llm_load_print_meta: n_ff             = 16384
0.00.265.809 I llm_load_print_meta: n_expert         = 0
0.00.265.809 I llm_load_print_meta: n_expert_used    = 0
0.00.265.809 I llm_load_print_meta: causal attn      = 1
0.00.265.809 I llm_load_print_meta: pooling type     = 0
0.00.265.810 I llm_load_print_meta: rope type        = 2
0.00.265.810 I llm_load_print_meta: rope scaling     = linear
0.00.265.811 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.812 I llm_load_print_meta: freq_scale_train = 1
0.00.265.812 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.813 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.813 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.813 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.814 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.814 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.814 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.816 I llm_load_print_meta: model type       = 2B
0.00.265.817 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.817 I llm_load_print_meta: model params     = 2.51 B
0.00.265.819 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.819 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.820 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.820 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.820 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.820 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.821 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.822 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.822 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.823 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.823 I llm_load_print_meta: max token length = 93
0.00.360.988 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.336 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.342 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.343 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.343 I llama_new_context_with_model: n_batch       = 2048
0.00.366.344 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.344 I llama_new_context_with_model: flash_attn    = 0
0.00.366.348 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.349 I llama_new_context_with_model: freq_scale    = 1
0.00.366.350 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.382 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.381.447 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.461 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.562 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.828 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.835 I llama_new_context_with_model: graph nodes  = 601
0.00.382.835 I llama_new_context_with_model: graph splits = 1
0.00.382.838 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.382.839 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.322 I main: llama threadpool init, n_threads = 4
0.00.467.339 I 
0.00.467.426 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.431 I 
0.00.467.479 I sampler seed: 2264673424
0.00.467.490 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.494 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.494 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.495 I 
 increasities. [end of text]


0.00.742.140 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8237.23 tokens per second)
0.00.742.143 I llama_perf_context_print:        load time =     466.92 ms
0.00.742.144 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.742.146 I llama_perf_context_print:        eval time =     271.39 ms /     4 runs   (   67.85 ms per token,    14.74 tokens per second)
0.00.742.147 I llama_perf_context_print:       total time =     274.83 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.573 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.000.803 I main: load the model and apply lora adapter, if any
0.00.021.116 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.127 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.134 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.140 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.141 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.144 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.144 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.145 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.146 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.146 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.147 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.151 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.152 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.153 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.154 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.155 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.210 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.026 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.900 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.907 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.907 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.908 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.909 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.910 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.911 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.914 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.914 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.915 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.916 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.917 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.921 I llama_model_loader: - type  f32:   37 tensors
0.00.130.922 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.350 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.355 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.911 I llm_load_vocab: special tokens cache size = 5
0.00.266.634 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.652 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.653 I llm_load_print_meta: arch             = gemma
0.00.266.653 I llm_load_print_meta: vocab type       = SPM
0.00.266.654 I llm_load_print_meta: n_vocab          = 256000
0.00.266.654 I llm_load_print_meta: n_merges         = 0
0.00.266.655 I llm_load_print_meta: vocab_only       = 0
0.00.266.655 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.655 I llm_load_print_meta: n_embd           = 2048
0.00.266.655 I llm_load_print_meta: n_layer          = 18
0.00.266.666 I llm_load_print_meta: n_head           = 8
0.00.266.668 I llm_load_print_meta: n_head_kv        = 1
0.00.266.668 I llm_load_print_meta: n_rot            = 256
0.00.266.669 I llm_load_print_meta: n_swa            = 0
0.00.266.669 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.669 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.671 I llm_load_print_meta: n_gqa            = 8
0.00.266.672 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.674 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.675 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.676 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.676 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.677 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.677 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.678 I llm_load_print_meta: n_ff             = 16384
0.00.266.679 I llm_load_print_meta: n_expert         = 0
0.00.266.679 I llm_load_print_meta: n_expert_used    = 0
0.00.266.679 I llm_load_print_meta: causal attn      = 1
0.00.266.680 I llm_load_print_meta: pooling type     = 0
0.00.266.680 I llm_load_print_meta: rope type        = 2
0.00.266.680 I llm_load_print_meta: rope scaling     = linear
0.00.266.681 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.682 I llm_load_print_meta: freq_scale_train = 1
0.00.266.682 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.683 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.683 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.683 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.683 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.684 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.684 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.686 I llm_load_print_meta: model type       = 2B
0.00.266.687 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.687 I llm_load_print_meta: model params     = 2.51 B
0.00.266.688 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.689 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.689 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.689 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.690 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.690 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.690 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.691 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.691 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.691 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.692 I llm_load_print_meta: max token length = 93
0.00.344.333 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.344.338 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.339 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.344.339 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.344.340 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.341 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.349.495 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.502 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.502 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.502 I llama_new_context_with_model: n_batch       = 2048
0.00.349.503 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.503 I llama_new_context_with_model: flash_attn    = 0
0.00.349.506 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.507 I llama_new_context_with_model: freq_scale    = 1
0.00.349.508 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.540 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.363.438 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.453 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.557 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.817 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.823 I llama_new_context_with_model: graph nodes  = 601
0.00.364.823 I llama_new_context_with_model: graph splits = 1
0.00.364.827 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.827 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.705 I main: llama threadpool init, n_threads = 4
0.00.448.719 I 
0.00.448.795 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.448.799 I 
0.00.448.851 I sampler seed: 3094942339
0.00.448.862 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.865 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.866 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.867 I 
 increably.

**Assistant:** I am unable to provide responses that are sexually suggestive in nature. [end of text]


0.01.933.278 I llama_perf_sampler_print:    sampling time =       3.24 ms /    22 runs   (    0.15 ms per token,  6798.52 tokens per second)
0.01.933.280 I llama_perf_context_print:        load time =     447.88 ms
0.01.933.282 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.933.283 I llama_perf_context_print:        eval time =    1471.16 ms /    21 runs   (   70.06 ms per token,    14.27 tokens per second)
0.01.933.284 I llama_perf_context_print:       total time =    1484.58 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.173 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.584 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.594 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.601 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.606 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.608 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.610 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.611 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.611 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.612 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.613 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.616 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.617 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.618 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.618 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.618 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.048 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.959 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.820 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.825 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.826 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.826 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.827 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.829 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.829 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.832 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.833 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.834 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.834 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.836 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.839 I llama_model_loader: - type  f32:   37 tensors
0.00.129.840 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.783 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.518 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.049 I llm_load_vocab: special tokens cache size = 5
0.00.265.869 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.886 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.887 I llm_load_print_meta: arch             = gemma
0.00.265.888 I llm_load_print_meta: vocab type       = SPM
0.00.265.888 I llm_load_print_meta: n_vocab          = 256000
0.00.265.889 I llm_load_print_meta: n_merges         = 0
0.00.265.889 I llm_load_print_meta: vocab_only       = 0
0.00.265.890 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.890 I llm_load_print_meta: n_embd           = 2048
0.00.265.890 I llm_load_print_meta: n_layer          = 18
0.00.265.901 I llm_load_print_meta: n_head           = 8
0.00.265.903 I llm_load_print_meta: n_head_kv        = 1
0.00.265.904 I llm_load_print_meta: n_rot            = 256
0.00.265.904 I llm_load_print_meta: n_swa            = 0
0.00.265.904 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.904 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.906 I llm_load_print_meta: n_gqa            = 8
0.00.265.908 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.910 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.910 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.912 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.912 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.913 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.913 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.915 I llm_load_print_meta: n_ff             = 16384
0.00.265.915 I llm_load_print_meta: n_expert         = 0
0.00.265.915 I llm_load_print_meta: n_expert_used    = 0
0.00.265.915 I llm_load_print_meta: causal attn      = 1
0.00.265.916 I llm_load_print_meta: pooling type     = 0
0.00.265.916 I llm_load_print_meta: rope type        = 2
0.00.265.916 I llm_load_print_meta: rope scaling     = linear
0.00.265.917 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.918 I llm_load_print_meta: freq_scale_train = 1
0.00.265.918 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.918 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.919 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.919 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.919 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.920 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.920 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.922 I llm_load_print_meta: model type       = 2B
0.00.265.923 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.924 I llm_load_print_meta: model params     = 2.51 B
0.00.265.925 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.925 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.925 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.926 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.926 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.926 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.926 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.927 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.927 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.928 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.928 I llm_load_print_meta: max token length = 93
0.00.337.632 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.639 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.589 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.595 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.595 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.596 I llama_new_context_with_model: n_batch       = 2048
0.00.342.596 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.597 I llama_new_context_with_model: flash_attn    = 0
0.00.342.599 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.600 I llama_new_context_with_model: freq_scale    = 1
0.00.342.601 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.620 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.357.383 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.398 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.504 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.775 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.781 I llama_new_context_with_model: graph nodes  = 601
0.00.358.782 I llama_new_context_with_model: graph splits = 1
0.00.358.786 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.358.786 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.001 I main: llama threadpool init, n_threads = 4
0.00.445.018 I 
0.00.445.093 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.445.097 I 
0.00.445.129 I sampler seed: 1160410486
0.00.445.140 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.144 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.145 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.145 I 
 increasities in the context of machine learning.

**What are the different types of adversarial networks?**

**Adversarial networks** are a family of

0.02.868.808 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6484.57 tokens per second)
0.02.868.810 I llama_perf_context_print:        load time =     444.61 ms
0.02.868.811 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.868.813 I llama_perf_context_print:        eval time =    2404.48 ms /    32 runs   (   75.14 ms per token,    13.31 tokens per second)
0.02.868.814 I llama_perf_context_print:       total time =    2423.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.678s
user	0m28.450s
sys	0m9.420s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4419 (46e3556e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40253.91 ms
main:    total time = 40253.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.570 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.046 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.057 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.072 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.076 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.078 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.079 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.079 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.080 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.082 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.082 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.086 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.086 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.087 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.088 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.088 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.608 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.385 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.253 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.260 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.260 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.261 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.263 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.264 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.264 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.267 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.268 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.268 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.269 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.270 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.274 I llama_model_loader: - type  f32:   37 tensors
0.00.130.275 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.275 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.351 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.864 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.449 I llm_load_vocab: special tokens cache size = 5
0.00.280.653 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.674 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.675 I llm_load_print_meta: arch             = gemma
0.00.280.676 I llm_load_print_meta: vocab type       = SPM
0.00.280.677 I llm_load_print_meta: n_vocab          = 256000
0.00.280.677 I llm_load_print_meta: n_merges         = 0
0.00.280.678 I llm_load_print_meta: vocab_only       = 0
0.00.280.678 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.678 I llm_load_print_meta: n_embd           = 2048
0.00.280.679 I llm_load_print_meta: n_layer          = 18
0.00.280.689 I llm_load_print_meta: n_head           = 8
0.00.280.691 I llm_load_print_meta: n_head_kv        = 1
0.00.280.692 I llm_load_print_meta: n_rot            = 256
0.00.280.692 I llm_load_print_meta: n_swa            = 0
0.00.280.692 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.692 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.694 I llm_load_print_meta: n_gqa            = 8
0.00.280.696 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.697 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.698 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.700 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.701 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.701 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.701 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.703 I llm_load_print_meta: n_ff             = 16384
0.00.280.704 I llm_load_print_meta: n_expert         = 0
0.00.280.704 I llm_load_print_meta: n_expert_used    = 0
0.00.280.704 I llm_load_print_meta: causal attn      = 1
0.00.280.704 I llm_load_print_meta: pooling type     = 0
0.00.280.705 I llm_load_print_meta: rope type        = 2
0.00.280.705 I llm_load_print_meta: rope scaling     = linear
0.00.280.706 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.707 I llm_load_print_meta: freq_scale_train = 1
0.00.280.707 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.708 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.709 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.709 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.709 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.710 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.710 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.712 I llm_load_print_meta: model type       = 2B
0.00.280.713 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.714 I llm_load_print_meta: model params     = 2.51 B
0.00.280.715 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.715 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.715 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.716 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.716 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.717 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.717 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.718 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.718 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.719 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.719 I llm_load_print_meta: max token length = 93
0.00.342.728 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.342.738 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.342.738 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.342.739 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.342.739 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.342.740 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.347.958 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.965 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.966 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.966 I llama_new_context_with_model: n_batch       = 2048
0.00.347.967 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.967 I llama_new_context_with_model: flash_attn    = 0
0.00.347.971 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.971 I llama_new_context_with_model: freq_scale    = 1
0.00.347.972 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.000 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.362.657 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.670 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.762 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.989 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.996 I llama_new_context_with_model: graph nodes  = 601
0.00.363.997 I llama_new_context_with_model: graph splits = 1
0.00.364.000 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.000 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.610 I main: llama threadpool init, n_threads = 4
0.00.439.626 I 
0.00.439.700 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.439.704 I 
0.00.439.744 I sampler seed: 3500839475
0.00.439.755 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.758 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.759 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.759 I 
 seconded:

"I can't believe he did that to me. It's so unfair. He should be punished for his actions."

**

0.02.044.363 I llama_perf_sampler_print:    sampling time =       5.26 ms /    33 runs   (    0.16 ms per token,  6277.34 tokens per second)
0.02.044.366 I llama_perf_context_print:        load time =     438.82 ms
0.02.044.367 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.044.368 I llama_perf_context_print:        eval time =    1585.00 ms /    32 runs   (   49.53 ms per token,    20.19 tokens per second)
0.02.044.369 I llama_perf_context_print:       total time =    1604.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4419 (46e3556e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40243.97 ms
main:    total time = 40243.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.489 I build: 4419 (46e3556e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.680 I main: llama backend init
0.00.000.686 I main: load the model and apply lora adapter, if any
0.00.021.003 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.017 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.024 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.025 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.027 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.028 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.029 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.030 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.031 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.034 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.035 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.035 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.036 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.783 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.576 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.582 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.582 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.583 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.583 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.584 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.585 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.589 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.589 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.593 I llama_model_loader: - type  f32:   37 tensors
0.00.130.594 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.595 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.623 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.650 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.117 I llm_load_vocab: special tokens cache size = 5
0.00.263.846 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.862 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.863 I llm_load_print_meta: arch             = gemma
0.00.263.863 I llm_load_print_meta: vocab type       = SPM
0.00.263.864 I llm_load_print_meta: n_vocab          = 256000
0.00.263.865 I llm_load_print_meta: n_merges         = 0
0.00.263.865 I llm_load_print_meta: vocab_only       = 0
0.00.263.865 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.866 I llm_load_print_meta: n_embd           = 2048
0.00.263.866 I llm_load_print_meta: n_layer          = 18
0.00.263.875 I llm_load_print_meta: n_head           = 8
0.00.263.877 I llm_load_print_meta: n_head_kv        = 1
0.00.263.877 I llm_load_print_meta: n_rot            = 256
0.00.263.878 I llm_load_print_meta: n_swa            = 0
0.00.263.878 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.878 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.880 I llm_load_print_meta: n_gqa            = 8
0.00.263.882 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.883 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.884 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.885 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.886 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.886 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.887 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.888 I llm_load_print_meta: n_ff             = 16384
0.00.263.889 I llm_load_print_meta: n_expert         = 0
0.00.263.889 I llm_load_print_meta: n_expert_used    = 0
0.00.263.889 I llm_load_print_meta: causal attn      = 1
0.00.263.890 I llm_load_print_meta: pooling type     = 0
0.00.263.890 I llm_load_print_meta: rope type        = 2
0.00.263.890 I llm_load_print_meta: rope scaling     = linear
0.00.263.892 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.892 I llm_load_print_meta: freq_scale_train = 1
0.00.263.892 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.893 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.894 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.894 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.896 I llm_load_print_meta: model type       = 2B
0.00.263.897 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.898 I llm_load_print_meta: model params     = 2.51 B
0.00.263.899 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.899 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.900 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.900 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.900 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.901 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.901 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.901 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.902 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.902 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.902 I llm_load_print_meta: max token length = 93
0.00.322.095 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.059 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.065 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.065 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.066 I llama_new_context_with_model: n_batch       = 2048
0.00.327.066 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.066 I llama_new_context_with_model: flash_attn    = 0
0.00.327.068 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.069 I llama_new_context_with_model: freq_scale    = 1
0.00.327.070 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.327.101 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.341.376 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.388 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.475 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.726 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.733 I llama_new_context_with_model: graph nodes  = 601
0.00.342.733 I llama_new_context_with_model: graph splits = 1
0.00.342.737 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.342.738 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.385 I main: llama threadpool init, n_threads = 4
0.00.416.401 I 
0.00.416.476 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.416.479 I 
0.00.416.513 I sampler seed: 968880275
0.00.416.526 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.530 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.532 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.532 I 
 increasities. 
**Explanation:**
I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and questions that are within

0.01.963.983 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6862.13 tokens per second)
0.01.963.986 I llama_perf_context_print:        load time =     415.68 ms
0.01.963.987 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.963.988 I llama_perf_context_print:        eval time =    1529.62 ms /    32 runs   (   47.80 ms per token,    20.92 tokens per second)
0.01.963.989 I llama_perf_context_print:       total time =    1547.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.294s
user	10m23.777s
sys	0m6.908s
