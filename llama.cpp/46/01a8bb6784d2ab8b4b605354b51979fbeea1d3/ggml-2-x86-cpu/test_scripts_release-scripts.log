+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.591 I build: 4322 (4601a8bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.021.543 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.555 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.563 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.573 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.577 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.582 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.583 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.583 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.585 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.586 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.586 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.591 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.592 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.592 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.593 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.001 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.203 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.057 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.064 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.065 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.066 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.067 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.068 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.069 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.072 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.073 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.074 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.075 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.076 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.080 I llama_model_loader: - type  f32:   37 tensors
0.00.132.081 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.467 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.845 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.460 I llm_load_vocab: special tokens cache size = 5
0.00.288.127 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.144 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.145 I llm_load_print_meta: arch             = gemma
0.00.288.145 I llm_load_print_meta: vocab type       = SPM
0.00.288.146 I llm_load_print_meta: n_vocab          = 256000
0.00.288.146 I llm_load_print_meta: n_merges         = 0
0.00.288.147 I llm_load_print_meta: vocab_only       = 0
0.00.288.147 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.147 I llm_load_print_meta: n_embd           = 2048
0.00.288.148 I llm_load_print_meta: n_layer          = 18
0.00.288.160 I llm_load_print_meta: n_head           = 8
0.00.288.161 I llm_load_print_meta: n_head_kv        = 1
0.00.288.162 I llm_load_print_meta: n_rot            = 256
0.00.288.162 I llm_load_print_meta: n_swa            = 0
0.00.288.162 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.163 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.164 I llm_load_print_meta: n_gqa            = 8
0.00.288.165 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.166 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.167 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.168 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.168 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.169 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.169 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.170 I llm_load_print_meta: n_ff             = 16384
0.00.288.170 I llm_load_print_meta: n_expert         = 0
0.00.288.170 I llm_load_print_meta: n_expert_used    = 0
0.00.288.171 I llm_load_print_meta: causal attn      = 1
0.00.288.171 I llm_load_print_meta: pooling type     = 0
0.00.288.171 I llm_load_print_meta: rope type        = 2
0.00.288.172 I llm_load_print_meta: rope scaling     = linear
0.00.288.173 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.174 I llm_load_print_meta: freq_scale_train = 1
0.00.288.174 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.174 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.175 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.175 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.175 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.176 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.176 I llm_load_print_meta: model type       = 2B
0.00.288.177 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.177 I llm_load_print_meta: model params     = 2.51 B
0.00.288.178 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.179 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.179 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.180 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.180 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.180 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.181 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.181 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.181 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.182 I llm_load_print_meta: max token length = 93
0.00.389.811 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.389.818 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.389.819 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.389.820 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.389.820 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.389.821 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.395.184 I llama_new_context_with_model: n_seq_max     = 1
0.00.395.191 I llama_new_context_with_model: n_ctx         = 4096
0.00.395.192 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.395.192 I llama_new_context_with_model: n_batch       = 2048
0.00.395.193 I llama_new_context_with_model: n_ubatch      = 512
0.00.395.193 I llama_new_context_with_model: flash_attn    = 0
0.00.395.197 I llama_new_context_with_model: freq_base     = 10000.0
0.00.395.198 I llama_new_context_with_model: freq_scale    = 1
0.00.395.199 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.410.029 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.410.043 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.410.136 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.411.502 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.411.507 I llama_new_context_with_model: graph nodes  = 601
0.00.411.508 I llama_new_context_with_model: graph splits = 1
0.00.411.509 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.115 I main: llama threadpool init, n_threads = 4
0.00.500.130 I 
0.00.500.221 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.500.227 I 
0.00.500.283 I sampler seed: 565181752
0.00.500.295 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.299 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.500.299 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.302 I 
 increasively, highlighting the increasing complexity and potential dangers involved with the rapid expansion.

**Rapid Expansion of Decentralized Applications (dApps)**

The decentralized nature

0.02.815.831 I llama_perf_sampler_print:    sampling time =       5.76 ms /    33 runs   (    0.17 ms per token,  5729.17 tokens per second)
0.02.815.834 I llama_perf_context_print:        load time =     499.31 ms
0.02.815.835 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.815.836 I llama_perf_context_print:        eval time =    2294.46 ms /    32 runs   (   71.70 ms per token,    13.95 tokens per second)
0.02.815.837 I llama_perf_context_print:       total time =    2315.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.588 I build: 4322 (4601a8bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.786 I main: llama backend init
0.00.000.793 I main: load the model and apply lora adapter, if any
0.00.020.915 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.931 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.937 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.938 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.943 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.946 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.947 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.947 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.948 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.948 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.952 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.953 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.953 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.954 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.954 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.229 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.075 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.963 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.970 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.971 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.972 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.973 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.975 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.976 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.979 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.980 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.981 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.982 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.983 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.986 I llama_model_loader: - type  f32:   37 tensors
0.00.131.988 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.707 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.895 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.521 I llm_load_vocab: special tokens cache size = 5
0.00.283.153 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.173 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.174 I llm_load_print_meta: arch             = gemma
0.00.283.175 I llm_load_print_meta: vocab type       = SPM
0.00.283.176 I llm_load_print_meta: n_vocab          = 256000
0.00.283.176 I llm_load_print_meta: n_merges         = 0
0.00.283.177 I llm_load_print_meta: vocab_only       = 0
0.00.283.177 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.177 I llm_load_print_meta: n_embd           = 2048
0.00.283.178 I llm_load_print_meta: n_layer          = 18
0.00.283.191 I llm_load_print_meta: n_head           = 8
0.00.283.192 I llm_load_print_meta: n_head_kv        = 1
0.00.283.192 I llm_load_print_meta: n_rot            = 256
0.00.283.192 I llm_load_print_meta: n_swa            = 0
0.00.283.193 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.193 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.194 I llm_load_print_meta: n_gqa            = 8
0.00.283.195 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.196 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.197 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.198 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.199 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.199 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.199 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.200 I llm_load_print_meta: n_ff             = 16384
0.00.283.200 I llm_load_print_meta: n_expert         = 0
0.00.283.201 I llm_load_print_meta: n_expert_used    = 0
0.00.283.201 I llm_load_print_meta: causal attn      = 1
0.00.283.201 I llm_load_print_meta: pooling type     = 0
0.00.283.202 I llm_load_print_meta: rope type        = 2
0.00.283.202 I llm_load_print_meta: rope scaling     = linear
0.00.283.203 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.204 I llm_load_print_meta: freq_scale_train = 1
0.00.283.205 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.205 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.205 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.206 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.206 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.206 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.206 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.207 I llm_load_print_meta: model type       = 2B
0.00.283.207 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.208 I llm_load_print_meta: model params     = 2.51 B
0.00.283.209 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.209 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.210 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.210 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.211 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.211 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.211 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.211 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.211 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.212 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.212 I llm_load_print_meta: max token length = 93
0.00.376.488 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.381.684 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.690 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.691 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.691 I llama_new_context_with_model: n_batch       = 2048
0.00.381.691 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.692 I llama_new_context_with_model: flash_attn    = 0
0.00.381.695 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.696 I llama_new_context_with_model: freq_scale    = 1
0.00.381.697 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.362 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.377 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.469 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.809 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.813 I llama_new_context_with_model: graph nodes  = 601
0.00.397.813 I llama_new_context_with_model: graph splits = 1
0.00.397.816 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.673 I main: llama threadpool init, n_threads = 4
0.00.483.693 I 
0.00.483.773 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.483.776 I 
0.00.483.824 I sampler seed: 1666366241
0.00.483.834 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.837 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.837 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.838 I 
 increably.

I apologize for my incompetence. I am a novice in this matter, and I am still learning the ropes.

Could you please provide guidance

0.02.721.377 I llama_perf_sampler_print:    sampling time =       5.59 ms /    33 runs   (    0.17 ms per token,  5905.51 tokens per second)
0.02.721.379 I llama_perf_context_print:        load time =     482.86 ms
0.02.721.381 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.383 I llama_perf_context_print:        eval time =    2217.69 ms /    32 runs   (   69.30 ms per token,    14.43 tokens per second)
0.02.721.383 I llama_perf_context_print:       total time =    2237.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.615 I build: 4322 (4601a8bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.814 I main: llama backend init
0.00.000.821 I main: load the model and apply lora adapter, if any
0.00.021.487 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.497 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.506 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.512 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.513 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.518 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.518 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.519 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.520 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.521 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.521 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.526 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.526 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.527 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.528 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.528 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.896 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.691 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.511 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.517 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.518 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.519 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.520 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.520 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.521 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.523 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.524 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.525 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.525 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.527 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.531 I llama_model_loader: - type  f32:   37 tensors
0.00.132.531 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.348 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.676 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.291 I llm_load_vocab: special tokens cache size = 5
0.00.279.392 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.411 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.412 I llm_load_print_meta: arch             = gemma
0.00.279.412 I llm_load_print_meta: vocab type       = SPM
0.00.279.413 I llm_load_print_meta: n_vocab          = 256000
0.00.279.413 I llm_load_print_meta: n_merges         = 0
0.00.279.414 I llm_load_print_meta: vocab_only       = 0
0.00.279.414 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.415 I llm_load_print_meta: n_embd           = 2048
0.00.279.415 I llm_load_print_meta: n_layer          = 18
0.00.279.427 I llm_load_print_meta: n_head           = 8
0.00.279.428 I llm_load_print_meta: n_head_kv        = 1
0.00.279.428 I llm_load_print_meta: n_rot            = 256
0.00.279.429 I llm_load_print_meta: n_swa            = 0
0.00.279.429 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.429 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.430 I llm_load_print_meta: n_gqa            = 8
0.00.279.432 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.433 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.433 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.434 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.435 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.435 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.435 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.436 I llm_load_print_meta: n_ff             = 16384
0.00.279.436 I llm_load_print_meta: n_expert         = 0
0.00.279.437 I llm_load_print_meta: n_expert_used    = 0
0.00.279.437 I llm_load_print_meta: causal attn      = 1
0.00.279.437 I llm_load_print_meta: pooling type     = 0
0.00.279.438 I llm_load_print_meta: rope type        = 2
0.00.279.438 I llm_load_print_meta: rope scaling     = linear
0.00.279.440 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.441 I llm_load_print_meta: freq_scale_train = 1
0.00.279.441 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.441 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.442 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.442 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.442 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.442 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.442 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.443 I llm_load_print_meta: model type       = 2B
0.00.279.444 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.444 I llm_load_print_meta: model params     = 2.51 B
0.00.279.445 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.446 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.446 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.447 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.447 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.448 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.448 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.448 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.449 I llm_load_print_meta: max token length = 93
0.00.355.613 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.355.620 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.621 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.355.621 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.355.622 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.623 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.360.742 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.750 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.750 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.750 I llama_new_context_with_model: n_batch       = 2048
0.00.360.751 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.751 I llama_new_context_with_model: flash_attn    = 0
0.00.360.754 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.754 I llama_new_context_with_model: freq_scale    = 1
0.00.360.755 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.537 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.552 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.645 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.038 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.043 I llama_new_context_with_model: graph nodes  = 601
0.00.377.044 I llama_new_context_with_model: graph splits = 1
0.00.377.046 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.058 I main: llama threadpool init, n_threads = 4
0.00.463.075 I 
0.00.463.155 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.158 I 
0.00.463.206 I sampler seed: 4041309350
0.00.463.217 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.223 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.223 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.223 I 
 increably! [end of text]


0.00.750.772 I llama_perf_sampler_print:    sampling time =       0.71 ms /     5 runs   (    0.14 ms per token,  7022.47 tokens per second)
0.00.750.774 I llama_perf_context_print:        load time =     462.22 ms
0.00.750.775 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.750.777 I llama_perf_context_print:        eval time =     284.46 ms /     4 runs   (   71.11 ms per token,    14.06 tokens per second)
0.00.750.777 I llama_perf_context_print:       total time =     287.72 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.543 I build: 4322 (4601a8bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.465 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.475 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.483 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.488 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.489 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.494 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.499 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.504 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.505 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.506 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.508 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.509 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.854 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.187 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.114 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.124 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.125 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.126 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.127 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.128 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.128 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.131 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.132 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.133 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.133 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.135 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.139 I llama_model_loader: - type  f32:   37 tensors
0.00.133.141 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.650 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.111 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.875 I llm_load_vocab: special tokens cache size = 5
0.00.292.760 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.781 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.782 I llm_load_print_meta: arch             = gemma
0.00.292.783 I llm_load_print_meta: vocab type       = SPM
0.00.292.783 I llm_load_print_meta: n_vocab          = 256000
0.00.292.784 I llm_load_print_meta: n_merges         = 0
0.00.292.785 I llm_load_print_meta: vocab_only       = 0
0.00.292.785 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.785 I llm_load_print_meta: n_embd           = 2048
0.00.292.785 I llm_load_print_meta: n_layer          = 18
0.00.292.797 I llm_load_print_meta: n_head           = 8
0.00.292.798 I llm_load_print_meta: n_head_kv        = 1
0.00.292.799 I llm_load_print_meta: n_rot            = 256
0.00.292.799 I llm_load_print_meta: n_swa            = 0
0.00.292.799 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.800 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.801 I llm_load_print_meta: n_gqa            = 8
0.00.292.802 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.803 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.804 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.805 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.805 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.805 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.806 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.806 I llm_load_print_meta: n_ff             = 16384
0.00.292.807 I llm_load_print_meta: n_expert         = 0
0.00.292.807 I llm_load_print_meta: n_expert_used    = 0
0.00.292.807 I llm_load_print_meta: causal attn      = 1
0.00.292.808 I llm_load_print_meta: pooling type     = 0
0.00.292.808 I llm_load_print_meta: rope type        = 2
0.00.292.808 I llm_load_print_meta: rope scaling     = linear
0.00.292.810 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.810 I llm_load_print_meta: freq_scale_train = 1
0.00.292.811 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.811 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.811 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.812 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.812 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.812 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.812 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.813 I llm_load_print_meta: model type       = 2B
0.00.292.813 I llm_load_print_meta: model ftype      = Q8_0
0.00.292.814 I llm_load_print_meta: model params     = 2.51 B
0.00.292.815 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.292.815 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.816 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.816 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.816 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.817 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.817 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.817 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.818 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.818 I llm_load_print_meta: max token length = 93
0.00.364.111 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.364.121 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.369.598 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.606 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.606 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.607 I llama_new_context_with_model: n_batch       = 2048
0.00.369.607 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.608 I llama_new_context_with_model: flash_attn    = 0
0.00.369.612 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.613 I llama_new_context_with_model: freq_scale    = 1
0.00.369.614 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.228 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.240 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.343 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.635 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.642 I llama_new_context_with_model: graph nodes  = 601
0.00.385.642 I llama_new_context_with_model: graph splits = 1
0.00.385.644 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.860 I main: llama threadpool init, n_threads = 4
0.00.473.876 I 
0.00.473.961 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.965 I 
0.00.474.019 I sampler seed: 1374121656
0.00.474.030 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.039 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.043 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.043 I 
 seconally. [end of text]


0.00.777.272 I llama_perf_sampler_print:    sampling time =       0.74 ms /     5 runs   (    0.15 ms per token,  6784.26 tokens per second)
0.00.777.275 I llama_perf_context_print:        load time =     473.07 ms
0.00.777.276 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.777.278 I llama_perf_context_print:        eval time =     299.78 ms /     4 runs   (   74.94 ms per token,    13.34 tokens per second)
0.00.777.278 I llama_perf_context_print:       total time =     303.42 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.804s
user	0m23.611s
sys	0m9.509s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4322 (4601a8bb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40244.72 ms
main:    total time = 40244.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.562 I build: 4322 (4601a8bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.020.966 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.976 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.985 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.992 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.998 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.002 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.003 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.004 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.005 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.005 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.006 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.011 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.011 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.012 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.012 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.013 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.354 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.047 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.933 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.941 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.942 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.943 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.944 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.945 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.949 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.950 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.951 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.951 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.953 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.956 I llama_model_loader: - type  f32:   37 tensors
0.00.131.957 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.958 I llama_model_loader: - type q6_K:   19 tensors
0.00.226.551 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.277.778 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.278.404 I llm_load_vocab: special tokens cache size = 5
0.00.299.324 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.299.341 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.299.342 I llm_load_print_meta: arch             = gemma
0.00.299.343 I llm_load_print_meta: vocab type       = SPM
0.00.299.343 I llm_load_print_meta: n_vocab          = 256000
0.00.299.344 I llm_load_print_meta: n_merges         = 0
0.00.299.344 I llm_load_print_meta: vocab_only       = 0
0.00.299.344 I llm_load_print_meta: n_ctx_train      = 8192
0.00.299.345 I llm_load_print_meta: n_embd           = 2048
0.00.299.345 I llm_load_print_meta: n_layer          = 18
0.00.299.356 I llm_load_print_meta: n_head           = 8
0.00.299.357 I llm_load_print_meta: n_head_kv        = 1
0.00.299.357 I llm_load_print_meta: n_rot            = 256
0.00.299.358 I llm_load_print_meta: n_swa            = 0
0.00.299.358 I llm_load_print_meta: n_embd_head_k    = 256
0.00.299.358 I llm_load_print_meta: n_embd_head_v    = 256
0.00.299.359 I llm_load_print_meta: n_gqa            = 8
0.00.299.360 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.299.361 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.299.362 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.299.364 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.299.364 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.299.364 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.299.365 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.299.366 I llm_load_print_meta: n_ff             = 16384
0.00.299.366 I llm_load_print_meta: n_expert         = 0
0.00.299.366 I llm_load_print_meta: n_expert_used    = 0
0.00.299.367 I llm_load_print_meta: causal attn      = 1
0.00.299.367 I llm_load_print_meta: pooling type     = 0
0.00.299.367 I llm_load_print_meta: rope type        = 2
0.00.299.368 I llm_load_print_meta: rope scaling     = linear
0.00.299.369 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.299.370 I llm_load_print_meta: freq_scale_train = 1
0.00.299.370 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.299.371 I llm_load_print_meta: rope_finetuned   = unknown
0.00.299.371 I llm_load_print_meta: ssm_d_conv       = 0
0.00.299.371 I llm_load_print_meta: ssm_d_inner      = 0
0.00.299.372 I llm_load_print_meta: ssm_d_state      = 0
0.00.299.372 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.299.372 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.299.372 I llm_load_print_meta: model type       = 2B
0.00.299.373 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.299.374 I llm_load_print_meta: model params     = 2.51 B
0.00.299.375 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.299.375 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.299.375 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.299.376 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.299.376 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.299.376 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.299.377 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.299.377 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.299.378 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.299.378 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.299.378 I llm_load_print_meta: max token length = 93
0.00.357.788 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.357.797 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.357.797 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.357.798 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.357.799 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.357.799 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.363.007 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.013 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.013 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.014 I llama_new_context_with_model: n_batch       = 2048
0.00.363.014 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.015 I llama_new_context_with_model: flash_attn    = 0
0.00.363.018 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.019 I llama_new_context_with_model: freq_scale    = 1
0.00.363.020 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.993 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.008 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.098 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.476 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.481 I llama_new_context_with_model: graph nodes  = 601
0.00.379.481 I llama_new_context_with_model: graph splits = 1
0.00.379.483 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.081 I main: llama threadpool init, n_threads = 4
0.00.457.099 I 
0.00.457.176 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.457.180 I 
0.00.457.223 I sampler seed: 3516339591
0.00.457.234 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.246 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.247 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.247 I 
 increasities, and the overall impact on the community. [end of text]


0.01.077.149 I llama_perf_sampler_print:    sampling time =       2.10 ms /    13 runs   (    0.16 ms per token,  6202.29 tokens per second)
0.01.077.152 I llama_perf_context_print:        load time =     456.29 ms
0.01.077.153 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.077.155 I llama_perf_context_print:        eval time =     612.00 ms /    12 runs   (   51.00 ms per token,    19.61 tokens per second)
0.01.077.157 I llama_perf_context_print:       total time =     620.08 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4322 (4601a8bb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40211.82 ms
main:    total time = 40211.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.171 I build: 4322 (4601a8bb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.372 I main: llama backend init
0.00.000.378 I main: load the model and apply lora adapter, if any
0.00.020.623 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.641 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.652 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.653 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.661 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.663 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.664 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.664 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.665 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.665 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.670 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.671 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.671 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.672 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.379 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.477 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.326 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.333 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.333 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.334 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.335 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.336 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.336 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.339 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.340 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.343 I llama_model_loader: - type  f32:   37 tensors
0.00.131.343 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.344 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.179 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.218 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.878 I llm_load_vocab: special tokens cache size = 5
0.00.274.602 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.620 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.620 I llm_load_print_meta: arch             = gemma
0.00.274.621 I llm_load_print_meta: vocab type       = SPM
0.00.274.622 I llm_load_print_meta: n_vocab          = 256000
0.00.274.623 I llm_load_print_meta: n_merges         = 0
0.00.274.624 I llm_load_print_meta: vocab_only       = 0
0.00.274.624 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.624 I llm_load_print_meta: n_embd           = 2048
0.00.274.624 I llm_load_print_meta: n_layer          = 18
0.00.274.637 I llm_load_print_meta: n_head           = 8
0.00.274.638 I llm_load_print_meta: n_head_kv        = 1
0.00.274.638 I llm_load_print_meta: n_rot            = 256
0.00.274.639 I llm_load_print_meta: n_swa            = 0
0.00.274.639 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.639 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.640 I llm_load_print_meta: n_gqa            = 8
0.00.274.641 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.642 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.643 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.644 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.645 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.645 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.646 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.646 I llm_load_print_meta: n_ff             = 16384
0.00.274.647 I llm_load_print_meta: n_expert         = 0
0.00.274.647 I llm_load_print_meta: n_expert_used    = 0
0.00.274.647 I llm_load_print_meta: causal attn      = 1
0.00.274.647 I llm_load_print_meta: pooling type     = 0
0.00.274.648 I llm_load_print_meta: rope type        = 2
0.00.274.648 I llm_load_print_meta: rope scaling     = linear
0.00.274.649 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.650 I llm_load_print_meta: freq_scale_train = 1
0.00.274.650 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.651 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.651 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.651 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.651 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.652 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.652 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.653 I llm_load_print_meta: model type       = 2B
0.00.274.653 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.654 I llm_load_print_meta: model params     = 2.51 B
0.00.274.655 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.655 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.655 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.656 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.656 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.657 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.657 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.657 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.658 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.658 I llm_load_print_meta: max token length = 93
0.00.332.025 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.337.151 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.158 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.158 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.159 I llama_new_context_with_model: n_batch       = 2048
0.00.337.159 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.160 I llama_new_context_with_model: flash_attn    = 0
0.00.337.163 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.164 I llama_new_context_with_model: freq_scale    = 1
0.00.337.165 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.270 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.286 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.376 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.616 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.623 I llama_new_context_with_model: graph nodes  = 601
0.00.353.624 I llama_new_context_with_model: graph splits = 1
0.00.353.626 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.990 I main: llama threadpool init, n_threads = 4
0.00.429.005 I 
0.00.429.084 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.087 I 
0.00.429.129 I sampler seed: 993034796
0.00.429.140 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.152 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.155 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.156 I 
 seconally.

**Assistant**

I'm not sure I understand. Could you please provide more context or explanation? [end of text]


0.01.738.597 I llama_perf_sampler_print:    sampling time =       4.43 ms /    27 runs   (    0.16 ms per token,  6096.18 tokens per second)
0.01.738.599 I llama_perf_context_print:        load time =     428.59 ms
0.01.738.600 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.738.602 I llama_perf_context_print:        eval time =    1293.40 ms /    26 runs   (   49.75 ms per token,    20.10 tokens per second)
0.01.738.603 I llama_perf_context_print:       total time =    1309.61 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.190s
user	10m19.417s
sys	0m7.152s
