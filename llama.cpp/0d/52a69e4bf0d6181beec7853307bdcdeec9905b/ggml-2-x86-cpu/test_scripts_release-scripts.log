+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.168 I build: 4439 (0d52a69e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.354 I main: llama backend init
0.00.000.360 I main: load the model and apply lora adapter, if any
0.00.029.726 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.738 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.746 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.753 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.754 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.757 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.757 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.758 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.760 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.760 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.761 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.766 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.766 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.767 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.768 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.768 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.249 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.243 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.787 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.799 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.800 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.800 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.801 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.802 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.803 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.805 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.806 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.807 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.808 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.809 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.137.813 I llama_model_loader: - type  f32:   37 tensors
0.00.137.813 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.821 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.828 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.380 I llm_load_vocab: special tokens cache size = 5
0.00.269.533 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.552 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.553 I llm_load_print_meta: arch             = gemma
0.00.269.554 I llm_load_print_meta: vocab type       = SPM
0.00.269.555 I llm_load_print_meta: n_vocab          = 256000
0.00.269.555 I llm_load_print_meta: n_merges         = 0
0.00.269.555 I llm_load_print_meta: vocab_only       = 0
0.00.269.556 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.556 I llm_load_print_meta: n_embd           = 2048
0.00.269.556 I llm_load_print_meta: n_layer          = 18
0.00.269.568 I llm_load_print_meta: n_head           = 8
0.00.269.570 I llm_load_print_meta: n_head_kv        = 1
0.00.269.570 I llm_load_print_meta: n_rot            = 256
0.00.269.571 I llm_load_print_meta: n_swa            = 0
0.00.269.571 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.571 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.573 I llm_load_print_meta: n_gqa            = 8
0.00.269.574 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.576 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.577 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.578 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.579 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.579 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.579 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.581 I llm_load_print_meta: n_ff             = 16384
0.00.269.582 I llm_load_print_meta: n_expert         = 0
0.00.269.582 I llm_load_print_meta: n_expert_used    = 0
0.00.269.582 I llm_load_print_meta: causal attn      = 1
0.00.269.582 I llm_load_print_meta: pooling type     = 0
0.00.269.583 I llm_load_print_meta: rope type        = 2
0.00.269.583 I llm_load_print_meta: rope scaling     = linear
0.00.269.584 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.585 I llm_load_print_meta: freq_scale_train = 1
0.00.269.586 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.586 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.586 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.587 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.587 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.587 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.587 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.589 I llm_load_print_meta: model type       = 2B
0.00.269.590 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.591 I llm_load_print_meta: model params     = 2.51 B
0.00.269.591 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.592 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.592 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.593 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.594 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.594 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.594 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.595 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.595 I llm_load_print_meta: max token length = 93
0.00.371.074 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.371.081 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.371.082 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.371.082 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.371.083 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.371.084 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.470 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.474 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.474 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.475 I llama_new_context_with_model: n_batch       = 2048
0.00.372.475 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.476 I llama_new_context_with_model: flash_attn    = 0
0.00.372.477 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.478 I llama_new_context_with_model: freq_scale    = 1
0.00.372.479 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.497 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.388.104 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.117 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.212 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.058 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.064 I llama_new_context_with_model: graph nodes  = 601
0.00.390.065 I llama_new_context_with_model: graph splits = 1
0.00.390.068 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.068 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.081 I main: llama threadpool init, n_threads = 4
0.00.475.095 I 
0.00.475.170 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.173 I 
0.00.475.206 I sampler seed: 2391528767
0.00.475.216 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.218 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.219 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.220 I 
 increasities, an allegory for the struggle between good and evil.

The play opens with an extended prologue, exploring the setting, characters, and the themes that

0.02.713.807 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6421.48 tokens per second)
0.02.713.809 I llama_perf_context_print:        load time =     474.70 ms
0.02.713.810 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.713.812 I llama_perf_context_print:        eval time =    2220.12 ms /    32 runs   (   69.38 ms per token,    14.41 tokens per second)
0.02.713.812 I llama_perf_context_print:       total time =    2238.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.563 I build: 4439 (0d52a69e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.788 I main: load the model and apply lora adapter, if any
0.00.030.040 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.030.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.062 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.063 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.066 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.068 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.069 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.073 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.074 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.074 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.075 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.076 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.268 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.415 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.796 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.803 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.804 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.804 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.805 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.806 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.806 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.809 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.809 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.810 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.811 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.811 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.136.814 I llama_model_loader: - type  f32:   37 tensors
0.00.136.814 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.225 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.728 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.516 I llm_load_vocab: special tokens cache size = 5
0.00.291.024 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.044 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.046 I llm_load_print_meta: arch             = gemma
0.00.291.047 I llm_load_print_meta: vocab type       = SPM
0.00.291.048 I llm_load_print_meta: n_vocab          = 256000
0.00.291.048 I llm_load_print_meta: n_merges         = 0
0.00.291.049 I llm_load_print_meta: vocab_only       = 0
0.00.291.049 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.049 I llm_load_print_meta: n_embd           = 2048
0.00.291.050 I llm_load_print_meta: n_layer          = 18
0.00.291.061 I llm_load_print_meta: n_head           = 8
0.00.291.063 I llm_load_print_meta: n_head_kv        = 1
0.00.291.063 I llm_load_print_meta: n_rot            = 256
0.00.291.064 I llm_load_print_meta: n_swa            = 0
0.00.291.064 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.066 I llm_load_print_meta: n_gqa            = 8
0.00.291.068 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.069 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.070 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.072 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.072 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.072 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.073 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.074 I llm_load_print_meta: n_ff             = 16384
0.00.291.075 I llm_load_print_meta: n_expert         = 0
0.00.291.075 I llm_load_print_meta: n_expert_used    = 0
0.00.291.075 I llm_load_print_meta: causal attn      = 1
0.00.291.075 I llm_load_print_meta: pooling type     = 0
0.00.291.076 I llm_load_print_meta: rope type        = 2
0.00.291.076 I llm_load_print_meta: rope scaling     = linear
0.00.291.078 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.079 I llm_load_print_meta: freq_scale_train = 1
0.00.291.079 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.079 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.080 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.080 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.080 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.080 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.081 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.082 I llm_load_print_meta: model type       = 2B
0.00.291.083 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.084 I llm_load_print_meta: model params     = 2.51 B
0.00.291.085 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.085 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.085 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.086 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.086 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.087 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.087 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.087 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.088 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.088 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.088 I llm_load_print_meta: max token length = 93
0.00.387.031 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.388.316 I llama_new_context_with_model: n_seq_max     = 1
0.00.388.320 I llama_new_context_with_model: n_ctx         = 4096
0.00.388.321 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.388.321 I llama_new_context_with_model: n_batch       = 2048
0.00.388.322 I llama_new_context_with_model: n_ubatch      = 512
0.00.388.322 I llama_new_context_with_model: flash_attn    = 0
0.00.388.325 I llama_new_context_with_model: freq_base     = 10000.0
0.00.388.325 I llama_new_context_with_model: freq_scale    = 1
0.00.388.326 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.345 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.402.434 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.447 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.546 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.474 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.481 I llama_new_context_with_model: graph nodes  = 601
0.00.404.482 I llama_new_context_with_model: graph splits = 1
0.00.404.485 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.404.486 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.872 I main: llama threadpool init, n_threads = 4
0.00.486.885 I 
0.00.486.970 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.486.975 I 
0.00.487.015 I sampler seed: 102032547
0.00.487.027 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.039 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.043 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.044 I 
 increasities, and other forms of sexual harassment in the workplace.

## Addressing Workplace Harassment

**1. Awareness and Education:**

* Provide comprehensive training programs

0.02.660.259 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6752.61 tokens per second)
0.02.660.262 I llama_perf_context_print:        load time =     486.06 ms
0.02.660.265 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.660.267 I llama_perf_context_print:        eval time =    2154.74 ms /    32 runs   (   67.34 ms per token,    14.85 tokens per second)
0.02.660.268 I llama_perf_context_print:       total time =    2173.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.530 I build: 4439 (0d52a69e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.030.319 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.330 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.338 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.345 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.348 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.350 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.352 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.353 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.354 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.355 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.359 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.360 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.360 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.361 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.362 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.997 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.314 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.706 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.713 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.714 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.714 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.715 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.716 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.717 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.718 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.719 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.720 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.721 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.722 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.137.724 I llama_model_loader: - type  f32:   37 tensors
0.00.137.725 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.619 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.453 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.923 I llm_load_vocab: special tokens cache size = 5
0.00.265.995 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.013 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.014 I llm_load_print_meta: arch             = gemma
0.00.266.015 I llm_load_print_meta: vocab type       = SPM
0.00.266.015 I llm_load_print_meta: n_vocab          = 256000
0.00.266.016 I llm_load_print_meta: n_merges         = 0
0.00.266.016 I llm_load_print_meta: vocab_only       = 0
0.00.266.017 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.017 I llm_load_print_meta: n_embd           = 2048
0.00.266.017 I llm_load_print_meta: n_layer          = 18
0.00.266.029 I llm_load_print_meta: n_head           = 8
0.00.266.031 I llm_load_print_meta: n_head_kv        = 1
0.00.266.032 I llm_load_print_meta: n_rot            = 256
0.00.266.032 I llm_load_print_meta: n_swa            = 0
0.00.266.032 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.032 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.034 I llm_load_print_meta: n_gqa            = 8
0.00.266.036 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.038 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.039 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.040 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.040 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.041 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.041 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.043 I llm_load_print_meta: n_ff             = 16384
0.00.266.043 I llm_load_print_meta: n_expert         = 0
0.00.266.044 I llm_load_print_meta: n_expert_used    = 0
0.00.266.044 I llm_load_print_meta: causal attn      = 1
0.00.266.045 I llm_load_print_meta: pooling type     = 0
0.00.266.045 I llm_load_print_meta: rope type        = 2
0.00.266.045 I llm_load_print_meta: rope scaling     = linear
0.00.266.047 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.047 I llm_load_print_meta: freq_scale_train = 1
0.00.266.048 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.048 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.048 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.048 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.049 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.049 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.049 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.051 I llm_load_print_meta: model type       = 2B
0.00.266.053 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.053 I llm_load_print_meta: model params     = 2.51 B
0.00.266.054 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.055 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.055 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.056 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.056 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.056 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.057 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.057 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.057 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.058 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.058 I llm_load_print_meta: max token length = 93
0.00.343.958 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.343.965 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.966 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.343.966 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.343.967 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.967 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.272 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.276 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.276 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.276 I llama_new_context_with_model: n_batch       = 2048
0.00.345.277 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.277 I llama_new_context_with_model: flash_attn    = 0
0.00.345.279 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.280 I llama_new_context_with_model: freq_scale    = 1
0.00.345.281 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.299 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.359.864 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.877 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.980 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.856 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.863 I llama_new_context_with_model: graph nodes  = 601
0.00.361.863 I llama_new_context_with_model: graph splits = 1
0.00.361.867 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.361.867 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.385 I main: llama threadpool init, n_threads = 4
0.00.448.398 I 
0.00.448.473 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.448.476 I 
0.00.448.509 I sampler seed: 2806983541
0.00.448.519 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.523 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.523 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.524 I 
 increasities for the benefit of the human species, even if it means sacrificing some individual freedoms. 

**Arguments for this view:**

* The well-

0.02.728.034 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6853.58 tokens per second)
0.02.728.037 I llama_perf_context_print:        load time =     447.64 ms
0.02.728.039 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.041 I llama_perf_context_print:        eval time =    2260.73 ms /    32 runs   (   70.65 ms per token,    14.15 tokens per second)
0.02.728.042 I llama_perf_context_print:       total time =    2279.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.551 I build: 4439 (0d52a69e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.029.691 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.029.701 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.029.709 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.715 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.716 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.719 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.720 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.720 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.721 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.721 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.722 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.726 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.727 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.727 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.728 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.729 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.747 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.981 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.344 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.352 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.353 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.353 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.354 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.355 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.356 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.357 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.358 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.359 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.360 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.361 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.136.364 I llama_model_loader: - type  f32:   37 tensors
0.00.136.365 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.297 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.336 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.836 I llm_load_vocab: special tokens cache size = 5
0.00.265.892 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.909 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.910 I llm_load_print_meta: arch             = gemma
0.00.265.911 I llm_load_print_meta: vocab type       = SPM
0.00.265.911 I llm_load_print_meta: n_vocab          = 256000
0.00.265.912 I llm_load_print_meta: n_merges         = 0
0.00.265.912 I llm_load_print_meta: vocab_only       = 0
0.00.265.913 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.913 I llm_load_print_meta: n_embd           = 2048
0.00.265.913 I llm_load_print_meta: n_layer          = 18
0.00.265.924 I llm_load_print_meta: n_head           = 8
0.00.265.926 I llm_load_print_meta: n_head_kv        = 1
0.00.265.926 I llm_load_print_meta: n_rot            = 256
0.00.265.927 I llm_load_print_meta: n_swa            = 0
0.00.265.927 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.927 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.929 I llm_load_print_meta: n_gqa            = 8
0.00.265.931 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.933 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.934 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.935 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.935 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.935 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.936 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.937 I llm_load_print_meta: n_ff             = 16384
0.00.265.938 I llm_load_print_meta: n_expert         = 0
0.00.265.938 I llm_load_print_meta: n_expert_used    = 0
0.00.265.938 I llm_load_print_meta: causal attn      = 1
0.00.265.939 I llm_load_print_meta: pooling type     = 0
0.00.265.939 I llm_load_print_meta: rope type        = 2
0.00.265.939 I llm_load_print_meta: rope scaling     = linear
0.00.265.941 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.941 I llm_load_print_meta: freq_scale_train = 1
0.00.265.942 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.942 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.942 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.942 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.943 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.943 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.943 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.945 I llm_load_print_meta: model type       = 2B
0.00.265.946 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.947 I llm_load_print_meta: model params     = 2.51 B
0.00.265.948 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.948 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.949 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.949 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.950 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.950 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.950 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.951 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.951 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.951 I llm_load_print_meta: max token length = 93
0.00.337.202 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.208 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.338.433 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.437 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.437 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.438 I llama_new_context_with_model: n_batch       = 2048
0.00.338.438 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.439 I llama_new_context_with_model: flash_attn    = 0
0.00.338.440 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.441 I llama_new_context_with_model: freq_scale    = 1
0.00.338.443 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.462 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.352.792 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.804 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.906 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.770 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.777 I llama_new_context_with_model: graph nodes  = 601
0.00.354.777 I llama_new_context_with_model: graph splits = 1
0.00.354.781 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.354.781 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.328 I main: llama threadpool init, n_threads = 4
0.00.446.343 I 
0.00.446.423 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.426 I 
0.00.446.459 I sampler seed: 365276462
0.00.446.469 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.472 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.473 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.475 I 
 increasities of the past.

I am unable to access the provided text, so I am unable to provide a response. [end of text]


0.02.412.006 I llama_perf_sampler_print:    sampling time =       4.09 ms /    27 runs   (    0.15 ms per token,  6598.24 tokens per second)
0.02.412.008 I llama_perf_context_print:        load time =     445.55 ms
0.02.412.009 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.412.011 I llama_perf_context_print:        eval time =    1949.89 ms /    26 runs   (   75.00 ms per token,    13.33 tokens per second)
0.02.412.012 I llama_perf_context_print:       total time =    1965.69 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.053s
user	0m37.703s
sys	0m9.269s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4439 (0d52a69e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40245.79 ms
main:    total time = 40245.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.572 I build: 4439 (0d52a69e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.030.124 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.137 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.147 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.154 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.157 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.158 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.158 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.159 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.159 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.160 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.165 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.165 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.166 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.167 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.057.698 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.444 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.913 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.921 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.922 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.923 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.924 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.925 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.925 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.927 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.928 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.138.929 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.138.929 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.930 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.138.931 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.934 I llama_model_loader: - type  f32:   37 tensors
0.00.138.935 I llama_model_loader: - type q4_K:  108 tensors
0.00.138.936 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.399 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.903 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.360 I llm_load_vocab: special tokens cache size = 5
0.00.266.338 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.356 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.357 I llm_load_print_meta: arch             = gemma
0.00.266.358 I llm_load_print_meta: vocab type       = SPM
0.00.266.358 I llm_load_print_meta: n_vocab          = 256000
0.00.266.359 I llm_load_print_meta: n_merges         = 0
0.00.266.359 I llm_load_print_meta: vocab_only       = 0
0.00.266.359 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.359 I llm_load_print_meta: n_embd           = 2048
0.00.266.360 I llm_load_print_meta: n_layer          = 18
0.00.266.371 I llm_load_print_meta: n_head           = 8
0.00.266.373 I llm_load_print_meta: n_head_kv        = 1
0.00.266.373 I llm_load_print_meta: n_rot            = 256
0.00.266.374 I llm_load_print_meta: n_swa            = 0
0.00.266.374 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.374 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.376 I llm_load_print_meta: n_gqa            = 8
0.00.266.378 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.379 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.380 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.382 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.382 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.382 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.383 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.384 I llm_load_print_meta: n_ff             = 16384
0.00.266.384 I llm_load_print_meta: n_expert         = 0
0.00.266.385 I llm_load_print_meta: n_expert_used    = 0
0.00.266.385 I llm_load_print_meta: causal attn      = 1
0.00.266.385 I llm_load_print_meta: pooling type     = 0
0.00.266.386 I llm_load_print_meta: rope type        = 2
0.00.266.386 I llm_load_print_meta: rope scaling     = linear
0.00.266.387 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.388 I llm_load_print_meta: freq_scale_train = 1
0.00.266.388 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.389 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.389 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.389 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.389 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.389 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.390 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.391 I llm_load_print_meta: model type       = 2B
0.00.266.393 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.393 I llm_load_print_meta: model params     = 2.51 B
0.00.266.394 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.394 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.395 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.395 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.395 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.396 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.396 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.396 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.397 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.397 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.397 I llm_load_print_meta: max token length = 93
0.00.328.086 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.093 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.094 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.095 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.095 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.096 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.329 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.333 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.334 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.334 I llama_new_context_with_model: n_batch       = 2048
0.00.329.335 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.335 I llama_new_context_with_model: flash_attn    = 0
0.00.329.337 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.337 I llama_new_context_with_model: freq_scale    = 1
0.00.329.338 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.329.362 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.343.473 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.485 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.576 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.459 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.466 I llama_new_context_with_model: graph nodes  = 601
0.00.345.466 I llama_new_context_with_model: graph splits = 1
0.00.345.469 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.345.469 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.103 I main: llama threadpool init, n_threads = 4
0.00.423.117 I 
0.00.423.194 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.197 I 
0.00.423.229 I sampler seed: 1279868135
0.00.423.241 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.244 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.244 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.244 I 
 increamically, and carelessly. [end of text]


0.00.767.348 I llama_perf_sampler_print:    sampling time =       1.11 ms /     8 runs   (    0.14 ms per token,  7207.21 tokens per second)
0.00.767.350 I llama_perf_context_print:        load time =     422.31 ms
0.00.767.352 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.767.353 I llama_perf_context_print:        eval time =     339.24 ms /     7 runs   (   48.46 ms per token,    20.63 tokens per second)
0.00.767.354 I llama_perf_context_print:       total time =     344.25 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4439 (0d52a69e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40215.50 ms
main:    total time = 40215.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4439 (0d52a69e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.029.944 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.029.961 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.968 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.969 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.972 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.972 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.973 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.973 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.974 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.975 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.978 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.979 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.979 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.980 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.311 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.650 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.005 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.012 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.012 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.013 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.014 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.015 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.016 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.019 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.019 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.137.020 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.137.025 I llama_model_loader: - type  f32:   37 tensors
0.00.137.026 I llama_model_loader: - type q4_K:  108 tensors
0.00.137.026 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.296 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.806 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.541 I llm_load_vocab: special tokens cache size = 5
0.00.271.920 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.943 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.945 I llm_load_print_meta: arch             = gemma
0.00.271.945 I llm_load_print_meta: vocab type       = SPM
0.00.271.946 I llm_load_print_meta: n_vocab          = 256000
0.00.271.946 I llm_load_print_meta: n_merges         = 0
0.00.271.946 I llm_load_print_meta: vocab_only       = 0
0.00.271.947 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.947 I llm_load_print_meta: n_embd           = 2048
0.00.271.947 I llm_load_print_meta: n_layer          = 18
0.00.271.960 I llm_load_print_meta: n_head           = 8
0.00.271.963 I llm_load_print_meta: n_head_kv        = 1
0.00.271.963 I llm_load_print_meta: n_rot            = 256
0.00.271.969 I llm_load_print_meta: n_swa            = 0
0.00.271.969 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.969 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.972 I llm_load_print_meta: n_gqa            = 8
0.00.271.974 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.975 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.976 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.977 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.978 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.978 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.978 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.980 I llm_load_print_meta: n_ff             = 16384
0.00.271.980 I llm_load_print_meta: n_expert         = 0
0.00.271.981 I llm_load_print_meta: n_expert_used    = 0
0.00.271.981 I llm_load_print_meta: causal attn      = 1
0.00.271.981 I llm_load_print_meta: pooling type     = 0
0.00.271.981 I llm_load_print_meta: rope type        = 2
0.00.271.982 I llm_load_print_meta: rope scaling     = linear
0.00.271.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.984 I llm_load_print_meta: freq_scale_train = 1
0.00.271.985 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.985 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.986 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.986 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.986 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.987 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.988 I llm_load_print_meta: model type       = 2B
0.00.271.990 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.990 I llm_load_print_meta: model params     = 2.51 B
0.00.271.991 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.991 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.992 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.993 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.995 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.995 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.996 I llm_load_print_meta: max token length = 93
0.00.329.970 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.373 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.377 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.378 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.378 I llama_new_context_with_model: n_batch       = 2048
0.00.331.379 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.379 I llama_new_context_with_model: flash_attn    = 0
0.00.331.382 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.382 I llama_new_context_with_model: freq_scale    = 1
0.00.331.383 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.402 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.347.773 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.787 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.884 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.110 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.116 I llama_new_context_with_model: graph nodes  = 601
0.00.350.117 I llama_new_context_with_model: graph splits = 1
0.00.350.135 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.350.139 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.643 I main: llama threadpool init, n_threads = 4
0.00.424.658 I 
0.00.424.741 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.741 I 
0.00.424.774 I sampler seed: 1805027050
0.00.424.783 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.786 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.786 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.786 I 
 maneutables.

The question is about the function of the cerebellum.

The cerebellum is a part of the brain that is responsible for coordinating movement, balance,

0.01.976.256 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6741.57 tokens per second)
0.01.976.259 I llama_perf_context_print:        load time =     423.88 ms
0.01.976.260 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.976.261 I llama_perf_context_print:        eval time =    1533.51 ms /    32 runs   (   47.92 ms per token,    20.87 tokens per second)
0.01.976.261 I llama_perf_context_print:       total time =    1551.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.147s
user	10m18.962s
sys	0m6.893s
