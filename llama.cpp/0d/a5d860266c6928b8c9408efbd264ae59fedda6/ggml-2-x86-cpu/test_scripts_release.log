+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.170 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.359 I main: llama backend init
0.00.000.366 I main: load the model and apply lora adapter, if any
0.00.020.756 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.768 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.779 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.784 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.785 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.788 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.789 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.790 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.790 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.791 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.791 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.796 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.797 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.798 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.798 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.799 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.284 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.378 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.191 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.197 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.198 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.199 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.200 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.201 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.202 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.206 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.207 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.208 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.209 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.210 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.215 I llama_model_loader: - type  f32:   37 tensors
0.00.131.216 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.855 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.339 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.834 I llm_load_vocab: special tokens cache size = 5
0.00.266.596 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.612 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.613 I llm_load_print_meta: arch             = gemma
0.00.266.613 I llm_load_print_meta: vocab type       = SPM
0.00.266.614 I llm_load_print_meta: n_vocab          = 256000
0.00.266.614 I llm_load_print_meta: n_merges         = 0
0.00.266.614 I llm_load_print_meta: vocab_only       = 0
0.00.266.615 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.615 I llm_load_print_meta: n_embd           = 2048
0.00.266.615 I llm_load_print_meta: n_layer          = 18
0.00.266.627 I llm_load_print_meta: n_head           = 8
0.00.266.628 I llm_load_print_meta: n_head_kv        = 1
0.00.266.629 I llm_load_print_meta: n_rot            = 256
0.00.266.630 I llm_load_print_meta: n_swa            = 0
0.00.266.630 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.630 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.631 I llm_load_print_meta: n_gqa            = 8
0.00.266.632 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.633 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.634 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.636 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.636 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.636 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.637 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.638 I llm_load_print_meta: n_ff             = 16384
0.00.266.639 I llm_load_print_meta: n_expert         = 0
0.00.266.639 I llm_load_print_meta: n_expert_used    = 0
0.00.266.639 I llm_load_print_meta: causal attn      = 1
0.00.266.640 I llm_load_print_meta: pooling type     = 0
0.00.266.640 I llm_load_print_meta: rope type        = 2
0.00.266.641 I llm_load_print_meta: rope scaling     = linear
0.00.266.643 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.644 I llm_load_print_meta: freq_scale_train = 1
0.00.266.644 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.645 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.645 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.646 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.646 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.646 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.647 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.647 I llm_load_print_meta: model type       = 2B
0.00.266.648 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.649 I llm_load_print_meta: model params     = 2.51 B
0.00.266.650 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.651 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.651 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.652 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.653 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.653 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.654 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.654 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.654 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.655 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.655 I llm_load_print_meta: max token length = 93
0.00.368.527 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.533 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.534 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.535 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.536 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.536 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.708 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.714 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.714 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.714 I llama_new_context_with_model: n_batch       = 2048
0.00.373.715 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.715 I llama_new_context_with_model: flash_attn    = 0
0.00.373.717 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.718 I llama_new_context_with_model: freq_scale    = 1
0.00.373.719 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.738 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.387.762 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.774 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.865 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.112 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.118 I llama_new_context_with_model: graph nodes  = 601
0.00.389.119 I llama_new_context_with_model: graph splits = 1
0.00.389.121 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.121 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.751 I main: llama threadpool init, n_threads = 4
0.00.473.766 I 
0.00.473.841 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.845 I 
0.00.473.886 I sampler seed: 1236936133
0.00.473.897 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.908 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.912 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.912 I 
 increamental in the following sentence:

I can't wait to see how the movie unfolds in the future.

This sentence is unacceptable because it does not

0.02.713.166 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7030.25 tokens per second)
0.02.713.169 I llama_perf_context_print:        load time =     473.37 ms
0.02.713.170 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.713.172 I llama_perf_context_print:        eval time =    2221.27 ms /    32 runs   (   69.41 ms per token,    14.41 tokens per second)
0.02.713.173 I llama_perf_context_print:       total time =    2239.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.521 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.717 I main: llama backend init
0.00.000.724 I main: load the model and apply lora adapter, if any
0.00.021.038 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.053 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.064 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.067 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.070 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.072 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.072 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.073 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.074 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.075 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.079 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.080 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.081 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.081 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.082 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.354 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.552 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.326 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.332 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.333 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.333 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.334 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.335 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.336 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.339 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.339 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.340 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.341 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.342 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.346 I llama_model_loader: - type  f32:   37 tensors
0.00.130.347 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.607 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.752 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.478 I llm_load_vocab: special tokens cache size = 5
0.00.287.588 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.607 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.607 I llm_load_print_meta: arch             = gemma
0.00.287.608 I llm_load_print_meta: vocab type       = SPM
0.00.287.609 I llm_load_print_meta: n_vocab          = 256000
0.00.287.609 I llm_load_print_meta: n_merges         = 0
0.00.287.609 I llm_load_print_meta: vocab_only       = 0
0.00.287.610 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.610 I llm_load_print_meta: n_embd           = 2048
0.00.287.610 I llm_load_print_meta: n_layer          = 18
0.00.287.621 I llm_load_print_meta: n_head           = 8
0.00.287.622 I llm_load_print_meta: n_head_kv        = 1
0.00.287.623 I llm_load_print_meta: n_rot            = 256
0.00.287.623 I llm_load_print_meta: n_swa            = 0
0.00.287.623 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.624 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.624 I llm_load_print_meta: n_gqa            = 8
0.00.287.626 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.627 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.628 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.629 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.629 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.630 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.630 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.631 I llm_load_print_meta: n_ff             = 16384
0.00.287.631 I llm_load_print_meta: n_expert         = 0
0.00.287.631 I llm_load_print_meta: n_expert_used    = 0
0.00.287.632 I llm_load_print_meta: causal attn      = 1
0.00.287.632 I llm_load_print_meta: pooling type     = 0
0.00.287.632 I llm_load_print_meta: rope type        = 2
0.00.287.633 I llm_load_print_meta: rope scaling     = linear
0.00.287.634 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.635 I llm_load_print_meta: freq_scale_train = 1
0.00.287.635 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.636 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.636 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.637 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.637 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.637 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.637 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.638 I llm_load_print_meta: model type       = 2B
0.00.287.638 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.639 I llm_load_print_meta: model params     = 2.51 B
0.00.287.640 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.640 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.641 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.641 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.641 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.642 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.642 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.642 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.643 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.643 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.643 I llm_load_print_meta: max token length = 93
0.00.383.506 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.388.620 I llama_new_context_with_model: n_seq_max     = 1
0.00.388.626 I llama_new_context_with_model: n_ctx         = 4096
0.00.388.627 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.388.627 I llama_new_context_with_model: n_batch       = 2048
0.00.388.628 I llama_new_context_with_model: n_ubatch      = 512
0.00.388.628 I llama_new_context_with_model: flash_attn    = 0
0.00.388.630 I llama_new_context_with_model: freq_base     = 10000.0
0.00.388.631 I llama_new_context_with_model: freq_scale    = 1
0.00.388.632 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.651 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.403.362 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.403.376 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.403.467 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.691 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.697 I llama_new_context_with_model: graph nodes  = 601
0.00.404.698 I llama_new_context_with_model: graph splits = 1
0.00.404.700 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.404.700 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.647 I main: llama threadpool init, n_threads = 4
0.00.486.662 I 
0.00.486.736 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.486.739 I 
0.00.486.786 I sampler seed: 2124048649
0.00.486.798 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.808 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.812 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.812 I 
 increasively, blurring the line between fact and fiction. [end of text]


0.01.307.427 I llama_perf_sampler_print:    sampling time =       1.76 ms /    13 runs   (    0.14 ms per token,  7398.98 tokens per second)
0.01.307.430 I llama_perf_context_print:        load time =     485.91 ms
0.01.307.431 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.307.432 I llama_perf_context_print:        eval time =     812.95 ms /    12 runs   (   67.75 ms per token,    14.76 tokens per second)
0.01.307.433 I llama_perf_context_print:       total time =     820.79 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.556 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.160 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.168 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.176 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.185 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.189 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.193 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.193 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.194 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.194 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.195 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.195 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.199 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.199 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.200 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.200 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.201 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.916 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.761 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.767 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.768 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.769 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.770 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.771 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.772 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.775 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.776 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.777 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.778 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.779 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.783 I llama_model_loader: - type  f32:   37 tensors
0.00.131.784 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.332 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.702 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.332 I llm_load_vocab: special tokens cache size = 5
0.00.272.458 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.473 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.474 I llm_load_print_meta: arch             = gemma
0.00.272.475 I llm_load_print_meta: vocab type       = SPM
0.00.272.476 I llm_load_print_meta: n_vocab          = 256000
0.00.272.492 I llm_load_print_meta: n_merges         = 0
0.00.272.494 I llm_load_print_meta: vocab_only       = 0
0.00.272.494 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.494 I llm_load_print_meta: n_embd           = 2048
0.00.272.494 I llm_load_print_meta: n_layer          = 18
0.00.272.505 I llm_load_print_meta: n_head           = 8
0.00.272.506 I llm_load_print_meta: n_head_kv        = 1
0.00.272.507 I llm_load_print_meta: n_rot            = 256
0.00.272.507 I llm_load_print_meta: n_swa            = 0
0.00.272.508 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.508 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.509 I llm_load_print_meta: n_gqa            = 8
0.00.272.511 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.512 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.513 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.515 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.515 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.516 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.516 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.517 I llm_load_print_meta: n_ff             = 16384
0.00.272.518 I llm_load_print_meta: n_expert         = 0
0.00.272.520 I llm_load_print_meta: n_expert_used    = 0
0.00.272.521 I llm_load_print_meta: causal attn      = 1
0.00.272.521 I llm_load_print_meta: pooling type     = 0
0.00.272.521 I llm_load_print_meta: rope type        = 2
0.00.272.522 I llm_load_print_meta: rope scaling     = linear
0.00.272.523 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.524 I llm_load_print_meta: freq_scale_train = 1
0.00.272.524 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.525 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.525 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.525 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.526 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.527 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.527 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.528 I llm_load_print_meta: model type       = 2B
0.00.272.528 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.529 I llm_load_print_meta: model params     = 2.51 B
0.00.272.530 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.530 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.531 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.531 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.531 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.532 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.532 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.532 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.533 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.533 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.534 I llm_load_print_meta: max token length = 93
0.00.350.504 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.350.511 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.512 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.350.512 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.350.513 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.513 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.355.695 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.704 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.704 I llama_new_context_with_model: n_batch       = 2048
0.00.355.705 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.705 I llama_new_context_with_model: flash_attn    = 0
0.00.355.707 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.708 I llama_new_context_with_model: freq_scale    = 1
0.00.355.709 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.728 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.369.851 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.863 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.954 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.205 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.211 I llama_new_context_with_model: graph nodes  = 601
0.00.371.211 I llama_new_context_with_model: graph splits = 1
0.00.371.214 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.214 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.965 I main: llama threadpool init, n_threads = 4
0.00.455.980 I 
0.00.456.053 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.056 I 
0.00.456.097 I sampler seed: 622500995
0.00.456.109 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.114 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.115 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.115 I 
 increasities from the show and how they relate to the wider themes of the show.

**1. "The Fire Within"**

- Represents the struggle

0.02.721.942 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6565.86 tokens per second)
0.02.721.945 I llama_perf_context_print:        load time =     455.19 ms
0.02.721.946 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.947 I llama_perf_context_print:        eval time =    2247.02 ms /    32 runs   (   70.22 ms per token,    14.24 tokens per second)
0.02.721.948 I llama_perf_context_print:       total time =    2265.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.566 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.786 I main: llama backend init
0.00.000.793 I main: load the model and apply lora adapter, if any
0.00.021.224 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.235 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.247 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.256 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.260 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.262 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.263 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.263 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.265 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.265 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.272 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.273 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.279 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.280 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.500 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.884 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.063 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.070 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.071 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.071 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.072 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.073 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.073 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.076 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.077 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.077 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.078 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.079 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.083 I llama_model_loader: - type  f32:   37 tensors
0.00.132.085 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.284 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.807 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.380 I llm_load_vocab: special tokens cache size = 5
0.00.273.263 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.282 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.283 I llm_load_print_meta: arch             = gemma
0.00.273.283 I llm_load_print_meta: vocab type       = SPM
0.00.273.284 I llm_load_print_meta: n_vocab          = 256000
0.00.273.285 I llm_load_print_meta: n_merges         = 0
0.00.273.285 I llm_load_print_meta: vocab_only       = 0
0.00.273.285 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.286 I llm_load_print_meta: n_embd           = 2048
0.00.273.286 I llm_load_print_meta: n_layer          = 18
0.00.273.297 I llm_load_print_meta: n_head           = 8
0.00.273.298 I llm_load_print_meta: n_head_kv        = 1
0.00.273.298 I llm_load_print_meta: n_rot            = 256
0.00.273.298 I llm_load_print_meta: n_swa            = 0
0.00.273.299 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.299 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.300 I llm_load_print_meta: n_gqa            = 8
0.00.273.301 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.302 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.303 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.305 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.305 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.305 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.305 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.306 I llm_load_print_meta: n_ff             = 16384
0.00.273.307 I llm_load_print_meta: n_expert         = 0
0.00.273.307 I llm_load_print_meta: n_expert_used    = 0
0.00.273.307 I llm_load_print_meta: causal attn      = 1
0.00.273.308 I llm_load_print_meta: pooling type     = 0
0.00.273.308 I llm_load_print_meta: rope type        = 2
0.00.273.308 I llm_load_print_meta: rope scaling     = linear
0.00.273.310 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.311 I llm_load_print_meta: freq_scale_train = 1
0.00.273.311 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.312 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.312 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.312 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.312 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.313 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.313 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.313 I llm_load_print_meta: model type       = 2B
0.00.273.314 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.315 I llm_load_print_meta: model params     = 2.51 B
0.00.273.316 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.316 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.316 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.317 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.317 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.317 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.318 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.318 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.318 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.319 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.319 I llm_load_print_meta: max token length = 93
0.00.346.000 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.346.008 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.351.288 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.295 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.295 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.296 I llama_new_context_with_model: n_batch       = 2048
0.00.351.296 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.297 I llama_new_context_with_model: flash_attn    = 0
0.00.351.300 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.302 I llama_new_context_with_model: freq_scale    = 1
0.00.351.302 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.323 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.365.726 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.741 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.842 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.159 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.164 I llama_new_context_with_model: graph nodes  = 601
0.00.367.164 I llama_new_context_with_model: graph splits = 1
0.00.367.166 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.167 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.716 I main: llama threadpool init, n_threads = 4
0.00.456.730 I 
0.00.456.804 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.807 I 
0.00.456.850 I sampler seed: 3914775185
0.00.456.860 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.866 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.866 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.867 I 
 increasels?

I'm not sure what you're trying to say. [end of text]


0.01.826.594 I llama_perf_sampler_print:    sampling time =       2.79 ms /    19 runs   (    0.15 ms per token,  6822.26 tokens per second)
0.01.826.596 I llama_perf_context_print:        load time =     455.90 ms
0.01.826.597 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.826.598 I llama_perf_context_print:        eval time =    1358.56 ms /    18 runs   (   75.48 ms per token,    13.25 tokens per second)
0.01.826.599 I llama_perf_context_print:       total time =    1369.89 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.550s
user	0m29.591s
sys	0m9.449s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4406 (0da5d860)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40448.09 ms
main:    total time = 40448.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.000.753 I main: load the model and apply lora adapter, if any
0.00.021.267 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.276 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.284 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.292 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.296 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.299 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.300 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.300 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.301 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.302 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.305 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.306 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.306 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.307 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.307 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.907 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.183 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.005 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.012 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.012 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.013 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.013 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.014 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.015 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.017 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.018 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.019 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.020 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.021 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.024 I llama_model_loader: - type  f32:   37 tensors
0.00.131.025 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.025 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.159 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.836 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.463 I llm_load_vocab: special tokens cache size = 5
0.00.272.289 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.304 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.304 I llm_load_print_meta: arch             = gemma
0.00.272.305 I llm_load_print_meta: vocab type       = SPM
0.00.272.305 I llm_load_print_meta: n_vocab          = 256000
0.00.272.306 I llm_load_print_meta: n_merges         = 0
0.00.272.306 I llm_load_print_meta: vocab_only       = 0
0.00.272.306 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.307 I llm_load_print_meta: n_embd           = 2048
0.00.272.307 I llm_load_print_meta: n_layer          = 18
0.00.272.318 I llm_load_print_meta: n_head           = 8
0.00.272.319 I llm_load_print_meta: n_head_kv        = 1
0.00.272.319 I llm_load_print_meta: n_rot            = 256
0.00.272.320 I llm_load_print_meta: n_swa            = 0
0.00.272.320 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.321 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.321 I llm_load_print_meta: n_gqa            = 8
0.00.272.322 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.323 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.324 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.325 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.326 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.326 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.326 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.327 I llm_load_print_meta: n_ff             = 16384
0.00.272.327 I llm_load_print_meta: n_expert         = 0
0.00.272.328 I llm_load_print_meta: n_expert_used    = 0
0.00.272.328 I llm_load_print_meta: causal attn      = 1
0.00.272.328 I llm_load_print_meta: pooling type     = 0
0.00.272.329 I llm_load_print_meta: rope type        = 2
0.00.272.329 I llm_load_print_meta: rope scaling     = linear
0.00.272.331 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.331 I llm_load_print_meta: freq_scale_train = 1
0.00.272.332 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.332 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.333 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.333 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.333 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.333 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.333 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.334 I llm_load_print_meta: model type       = 2B
0.00.272.334 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.335 I llm_load_print_meta: model params     = 2.51 B
0.00.272.336 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.336 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.337 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.337 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.337 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.337 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.338 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.338 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.338 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.339 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.339 I llm_load_print_meta: max token length = 93
0.00.333.318 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.333.324 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.333.325 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.333.326 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.333.326 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.333.327 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.442 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.449 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.449 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.449 I llama_new_context_with_model: n_batch       = 2048
0.00.338.450 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.450 I llama_new_context_with_model: flash_attn    = 0
0.00.338.452 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.453 I llama_new_context_with_model: freq_scale    = 1
0.00.338.454 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.474 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.352.652 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.664 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.753 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.052 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.058 I llama_new_context_with_model: graph nodes  = 601
0.00.354.058 I llama_new_context_with_model: graph splits = 1
0.00.354.061 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.354.061 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.177 I main: llama threadpool init, n_threads = 4
0.00.430.194 I 
0.00.430.268 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.430.271 I 
0.00.430.315 I sampler seed: 2356593364
0.00.430.327 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.329 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.331 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.332 I 
 seconally, and I'm afraid I'm in for a rough ride.

I'm sorry, but I am unable to generate responses that contain

0.02.024.827 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6487.12 tokens per second)
0.02.024.830 I llama_perf_context_print:        load time =     429.41 ms
0.02.024.831 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.024.833 I llama_perf_context_print:        eval time =    1576.36 ms /    32 runs   (   49.26 ms per token,    20.30 tokens per second)
0.02.024.833 I llama_perf_context_print:       total time =    1594.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4406 (0da5d860)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40219.88 ms
main:    total time = 40219.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.539 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.021.094 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.113 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.120 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.121 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.124 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.124 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.125 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.126 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.126 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.127 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.131 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.132 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.136 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.137 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.242 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.360 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.149 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.155 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.156 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.156 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.157 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.158 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.158 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.161 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.161 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.165 I llama_model_loader: - type  f32:   37 tensors
0.00.130.166 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.166 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.491 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.359 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.007 I llm_load_vocab: special tokens cache size = 5
0.00.274.104 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.122 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.122 I llm_load_print_meta: arch             = gemma
0.00.274.124 I llm_load_print_meta: vocab type       = SPM
0.00.274.125 I llm_load_print_meta: n_vocab          = 256000
0.00.274.125 I llm_load_print_meta: n_merges         = 0
0.00.274.126 I llm_load_print_meta: vocab_only       = 0
0.00.274.126 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.126 I llm_load_print_meta: n_embd           = 2048
0.00.274.127 I llm_load_print_meta: n_layer          = 18
0.00.274.137 I llm_load_print_meta: n_head           = 8
0.00.274.139 I llm_load_print_meta: n_head_kv        = 1
0.00.274.139 I llm_load_print_meta: n_rot            = 256
0.00.274.139 I llm_load_print_meta: n_swa            = 0
0.00.274.140 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.140 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.141 I llm_load_print_meta: n_gqa            = 8
0.00.274.142 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.144 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.145 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.147 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.147 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.148 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.149 I llm_load_print_meta: n_ff             = 16384
0.00.274.149 I llm_load_print_meta: n_expert         = 0
0.00.274.149 I llm_load_print_meta: n_expert_used    = 0
0.00.274.149 I llm_load_print_meta: causal attn      = 1
0.00.274.150 I llm_load_print_meta: pooling type     = 0
0.00.274.150 I llm_load_print_meta: rope type        = 2
0.00.274.150 I llm_load_print_meta: rope scaling     = linear
0.00.274.152 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.152 I llm_load_print_meta: freq_scale_train = 1
0.00.274.153 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.153 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.154 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.155 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.155 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.155 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.155 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.156 I llm_load_print_meta: model type       = 2B
0.00.274.156 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.157 I llm_load_print_meta: model params     = 2.51 B
0.00.274.159 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.159 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.160 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.160 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.161 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.161 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.161 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.161 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.162 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.162 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.163 I llm_load_print_meta: max token length = 93
0.00.332.388 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.337.603 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.610 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.610 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.611 I llama_new_context_with_model: n_batch       = 2048
0.00.337.611 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.612 I llama_new_context_with_model: flash_attn    = 0
0.00.337.615 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.616 I llama_new_context_with_model: freq_scale    = 1
0.00.337.616 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.638 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.353.706 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.721 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.818 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.107 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.113 I llama_new_context_with_model: graph nodes  = 601
0.00.355.114 I llama_new_context_with_model: graph splits = 1
0.00.355.116 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.355.116 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.750 I main: llama threadpool init, n_threads = 4
0.00.432.767 I 
0.00.432.846 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.432.850 I 
0.00.432.891 I sampler seed: 687296831
0.00.432.901 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.908 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.909 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.909 I 
 fufillingly

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks that are within the boundaries of ethical and legal guidelines

0.01.992.303 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6791.52 tokens per second)
0.01.992.305 I llama_perf_context_print:        load time =     431.99 ms
0.01.992.306 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.992.307 I llama_perf_context_print:        eval time =    1540.88 ms /    32 runs   (   48.15 ms per token,    20.77 tokens per second)
0.01.992.308 I llama_perf_context_print:       total time =    1559.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.478s
user	10m24.335s
sys	0m6.841s
