+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.234 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.243 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.329 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.340 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.343 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.351 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.352 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.356 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.357 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.363 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.364 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.366 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.367 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.368 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.249.217 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.350.918 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.375.150 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.375.160 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.375.161 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.375.163 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.375.164 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.375.165 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.375.167 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.375.171 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.375.172 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.375.173 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.375.174 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.375.176 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.375.185 I llama_model_loader: - type  f32:   37 tensors
0.00.375.187 I llama_model_loader: - type q8_0:  127 tensors
0.00.593.817 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.665.335 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.666.423 I llm_load_vocab: special tokens cache size = 5
0.00.888.175 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.888.252 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.888.256 I llm_load_print_meta: arch             = gemma
0.00.888.256 I llm_load_print_meta: vocab type       = SPM
0.00.888.257 I llm_load_print_meta: n_vocab          = 256000
0.00.888.260 I llm_load_print_meta: n_merges         = 0
0.00.888.261 I llm_load_print_meta: vocab_only       = 0
0.00.888.261 I llm_load_print_meta: n_ctx_train      = 8192
0.00.888.262 I llm_load_print_meta: n_embd           = 2048
0.00.888.262 I llm_load_print_meta: n_layer          = 18
0.00.888.330 I llm_load_print_meta: n_head           = 8
0.00.888.340 I llm_load_print_meta: n_head_kv        = 1
0.00.888.341 I llm_load_print_meta: n_rot            = 256
0.00.888.342 I llm_load_print_meta: n_swa            = 0
0.00.888.342 I llm_load_print_meta: n_embd_head_k    = 256
0.00.888.342 I llm_load_print_meta: n_embd_head_v    = 256
0.00.888.347 I llm_load_print_meta: n_gqa            = 8
0.00.888.352 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.888.357 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.888.359 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.888.360 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.888.361 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.888.362 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.888.362 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.888.368 I llm_load_print_meta: n_ff             = 16384
0.00.888.369 I llm_load_print_meta: n_expert         = 0
0.00.888.370 I llm_load_print_meta: n_expert_used    = 0
0.00.888.370 I llm_load_print_meta: causal attn      = 1
0.00.888.370 I llm_load_print_meta: pooling type     = 0
0.00.888.371 I llm_load_print_meta: rope type        = 2
0.00.888.372 I llm_load_print_meta: rope scaling     = linear
0.00.888.373 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.888.373 I llm_load_print_meta: freq_scale_train = 1
0.00.888.375 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.888.375 I llm_load_print_meta: rope_finetuned   = unknown
0.00.888.376 I llm_load_print_meta: ssm_d_conv       = 0
0.00.888.376 I llm_load_print_meta: ssm_d_inner      = 0
0.00.888.376 I llm_load_print_meta: ssm_d_state      = 0
0.00.888.385 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.888.385 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.888.386 I llm_load_print_meta: model type       = 2B
0.00.888.387 I llm_load_print_meta: model ftype      = Q8_0
0.00.888.388 I llm_load_print_meta: model params     = 2.51 B
0.00.888.389 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.888.389 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.888.390 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.888.390 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.888.391 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.888.392 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.888.392 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.888.392 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.888.399 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.888.400 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.888.400 I llm_load_print_meta: max token length = 93
0.00.989.566 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.989.575 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.989.576 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.989.577 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.989.578 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.989.578 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.995.420 I llama_new_context_with_model: n_seq_max     = 1
0.00.995.427 I llama_new_context_with_model: n_ctx         = 4096
0.00.995.427 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.995.427 I llama_new_context_with_model: n_batch       = 2048
0.00.995.428 I llama_new_context_with_model: n_ubatch      = 512
0.00.995.428 I llama_new_context_with_model: flash_attn    = 0
0.00.995.430 I llama_new_context_with_model: freq_base     = 10000.0
0.00.995.431 I llama_new_context_with_model: freq_scale    = 1
0.00.995.432 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.995.521 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.009.713 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.009.756 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.009.873 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.012.535 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.012.539 I llama_new_context_with_model: graph nodes  = 601
0.01.012.539 I llama_new_context_with_model: graph splits = 1
0.01.012.562 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.012.565 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.621.722 I main: llama threadpool init, n_threads = 4
0.01.621.737 I 
0.01.621.863 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.621.867 I 
0.01.622.109 I sampler seed: 1703535721
0.01.622.125 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.622.146 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.622.150 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.622.150 I 
 increably. [end of text]


0.03.308.471 I llama_perf_sampler_print:    sampling time =       6.35 ms /     5 runs   (    1.27 ms per token,   787.15 tokens per second)
0.03.308.474 I llama_perf_context_print:        load time =    1620.78 ms
0.03.308.476 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.308.477 I llama_perf_context_print:        eval time =    1673.89 ms /     4 runs   (  418.47 ms per token,     2.39 tokens per second)
0.03.308.478 I llama_perf_context_print:       total time =    1686.76 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.000.830 I main: load the model and apply lora adapter, if any
0.00.025.797 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.892 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.903 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.905 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.909 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.910 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.911 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.912 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.914 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.915 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.921 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.922 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.923 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.924 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.926 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.512 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.521 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.724 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.734 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.735 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.737 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.738 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.740 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.741 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.745 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.746 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.748 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.749 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.361.750 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.758 I llama_model_loader: - type  f32:   37 tensors
0.00.361.761 I llama_model_loader: - type q8_0:  127 tensors
0.00.576.038 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.029 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.633.890 I llm_load_vocab: special tokens cache size = 5
0.00.840.743 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.840.816 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.840.817 I llm_load_print_meta: arch             = gemma
0.00.840.818 I llm_load_print_meta: vocab type       = SPM
0.00.840.818 I llm_load_print_meta: n_vocab          = 256000
0.00.840.821 I llm_load_print_meta: n_merges         = 0
0.00.840.821 I llm_load_print_meta: vocab_only       = 0
0.00.840.822 I llm_load_print_meta: n_ctx_train      = 8192
0.00.840.822 I llm_load_print_meta: n_embd           = 2048
0.00.840.822 I llm_load_print_meta: n_layer          = 18
0.00.840.888 I llm_load_print_meta: n_head           = 8
0.00.840.895 I llm_load_print_meta: n_head_kv        = 1
0.00.840.896 I llm_load_print_meta: n_rot            = 256
0.00.840.897 I llm_load_print_meta: n_swa            = 0
0.00.840.898 I llm_load_print_meta: n_embd_head_k    = 256
0.00.840.898 I llm_load_print_meta: n_embd_head_v    = 256
0.00.840.903 I llm_load_print_meta: n_gqa            = 8
0.00.840.907 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.840.912 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.840.914 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.840.915 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.840.915 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.840.916 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.840.917 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.840.922 I llm_load_print_meta: n_ff             = 16384
0.00.840.927 I llm_load_print_meta: n_expert         = 0
0.00.840.928 I llm_load_print_meta: n_expert_used    = 0
0.00.840.928 I llm_load_print_meta: causal attn      = 1
0.00.840.928 I llm_load_print_meta: pooling type     = 0
0.00.840.929 I llm_load_print_meta: rope type        = 2
0.00.840.929 I llm_load_print_meta: rope scaling     = linear
0.00.840.932 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.840.933 I llm_load_print_meta: freq_scale_train = 1
0.00.840.933 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.840.945 I llm_load_print_meta: rope_finetuned   = unknown
0.00.840.948 I llm_load_print_meta: ssm_d_conv       = 0
0.00.840.949 I llm_load_print_meta: ssm_d_inner      = 0
0.00.840.949 I llm_load_print_meta: ssm_d_state      = 0
0.00.840.949 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.840.950 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.840.950 I llm_load_print_meta: model type       = 2B
0.00.840.952 I llm_load_print_meta: model ftype      = Q8_0
0.00.840.953 I llm_load_print_meta: model params     = 2.51 B
0.00.840.954 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.840.954 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.840.955 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.840.969 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.840.970 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.840.971 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.840.971 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.840.972 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.840.978 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.840.979 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.840.980 I llm_load_print_meta: max token length = 93
0.00.939.042 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.944.885 I llama_new_context_with_model: n_seq_max     = 1
0.00.944.893 I llama_new_context_with_model: n_ctx         = 4096
0.00.944.893 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.944.893 I llama_new_context_with_model: n_batch       = 2048
0.00.944.894 I llama_new_context_with_model: n_ubatch      = 512
0.00.944.894 I llama_new_context_with_model: flash_attn    = 0
0.00.944.896 I llama_new_context_with_model: freq_base     = 10000.0
0.00.944.897 I llama_new_context_with_model: freq_scale    = 1
0.00.944.897 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.944.985 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.959.785 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.827 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.949 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.962.548 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.962.551 I llama_new_context_with_model: graph nodes  = 601
0.00.962.552 I llama_new_context_with_model: graph splits = 1
0.00.962.575 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.962.578 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.581.637 I main: llama threadpool init, n_threads = 4
0.01.581.653 I 
0.01.581.777 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.581.781 I 
0.01.582.011 I sampler seed: 2089227545
0.01.582.025 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.582.036 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.582.037 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.582.037 I 
 increasities, and other forms of flattery.

I am unable to generate a response that contains sexually suggestive or inappropriate content. [end of text]


0.12.518.607 I llama_perf_sampler_print:    sampling time =      40.41 ms /    27 runs   (    1.50 ms per token,   668.22 tokens per second)
0.12.518.610 I llama_perf_context_print:        load time =    1580.72 ms
0.12.518.611 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.518.612 I llama_perf_context_print:        eval time =   10863.81 ms /    26 runs   (  417.84 ms per token,     2.39 tokens per second)
0.12.518.613 I llama_perf_context_print:       total time =   10936.98 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.617 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.836 I main: load the model and apply lora adapter, if any
0.00.023.129 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.140 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.224 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.236 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.238 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.241 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.245 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.246 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.248 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.249 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.250 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.256 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.257 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.258 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.260 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.647 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.184 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.356 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.365 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.366 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.368 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.369 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.370 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.372 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.375 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.377 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.378 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.379 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.389 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.398 I llama_model_loader: - type  f32:   37 tensors
0.00.351.400 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.198 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.949 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.908 I llm_load_vocab: special tokens cache size = 5
0.00.844.682 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.844.754 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.844.758 I llm_load_print_meta: arch             = gemma
0.00.844.759 I llm_load_print_meta: vocab type       = SPM
0.00.844.760 I llm_load_print_meta: n_vocab          = 256000
0.00.844.762 I llm_load_print_meta: n_merges         = 0
0.00.844.763 I llm_load_print_meta: vocab_only       = 0
0.00.844.763 I llm_load_print_meta: n_ctx_train      = 8192
0.00.844.764 I llm_load_print_meta: n_embd           = 2048
0.00.844.764 I llm_load_print_meta: n_layer          = 18
0.00.844.829 I llm_load_print_meta: n_head           = 8
0.00.844.838 I llm_load_print_meta: n_head_kv        = 1
0.00.844.839 I llm_load_print_meta: n_rot            = 256
0.00.844.840 I llm_load_print_meta: n_swa            = 0
0.00.844.840 I llm_load_print_meta: n_embd_head_k    = 256
0.00.844.841 I llm_load_print_meta: n_embd_head_v    = 256
0.00.844.846 I llm_load_print_meta: n_gqa            = 8
0.00.844.851 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.844.856 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.844.857 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.844.860 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.844.861 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.861 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.863 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.868 I llm_load_print_meta: n_ff             = 16384
0.00.844.868 I llm_load_print_meta: n_expert         = 0
0.00.844.870 I llm_load_print_meta: n_expert_used    = 0
0.00.844.870 I llm_load_print_meta: causal attn      = 1
0.00.844.870 I llm_load_print_meta: pooling type     = 0
0.00.844.871 I llm_load_print_meta: rope type        = 2
0.00.844.872 I llm_load_print_meta: rope scaling     = linear
0.00.844.874 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.875 I llm_load_print_meta: freq_scale_train = 1
0.00.844.875 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.876 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.876 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.877 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.877 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.878 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.878 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.879 I llm_load_print_meta: model type       = 2B
0.00.844.881 I llm_load_print_meta: model ftype      = Q8_0
0.00.844.881 I llm_load_print_meta: model params     = 2.51 B
0.00.844.883 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.844.883 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.884 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.885 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.886 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.886 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.886 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.887 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.893 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.895 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.895 I llm_load_print_meta: max token length = 93
0.00.923.672 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.923.679 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.923.680 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.923.680 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.923.681 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.923.682 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.929.501 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.508 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.508 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.508 I llama_new_context_with_model: n_batch       = 2048
0.00.929.509 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.509 I llama_new_context_with_model: flash_attn    = 0
0.00.929.512 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.512 I llama_new_context_with_model: freq_scale    = 1
0.00.929.513 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.599 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.943.753 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.943.793 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.910 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.514 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.518 I llama_new_context_with_model: graph nodes  = 601
0.00.946.518 I llama_new_context_with_model: graph splits = 1
0.00.946.541 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.946.544 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.556.153 I main: llama threadpool init, n_threads = 4
0.01.556.168 I 
0.01.556.291 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.556.295 I 
0.01.556.536 I sampler seed: 2591041569
0.01.556.551 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.556.561 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.556.562 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.556.562 I 
 increasities and mistakes, and provide guidance on how to handle these situations effectively.

**1. Acknowledge and validate the feelings:**

- Show empathy and understanding

0.15.093.412 I llama_perf_sampler_print:    sampling time =      49.88 ms /    33 runs   (    1.51 ms per token,   661.60 tokens per second)
0.15.093.415 I llama_perf_context_print:        load time =    1555.23 ms
0.15.093.417 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.093.438 I llama_perf_context_print:        eval time =   13446.80 ms /    32 runs   (  420.21 ms per token,     2.38 tokens per second)
0.15.093.440 I llama_perf_context_print:       total time =   13537.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.187 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.196 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.296 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.298 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.303 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.305 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.306 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.308 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.310 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.311 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.320 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.321 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.330 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.332 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.237.096 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.503 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.511 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.512 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.514 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.515 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.517 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.519 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.523 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.525 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.526 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.362.528 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.362.530 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.362.539 I llama_model_loader: - type  f32:   37 tensors
0.00.362.542 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.594 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.774 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.809 I llm_load_vocab: special tokens cache size = 5
0.00.870.421 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.870.488 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.870.489 I llm_load_print_meta: arch             = gemma
0.00.870.490 I llm_load_print_meta: vocab type       = SPM
0.00.870.491 I llm_load_print_meta: n_vocab          = 256000
0.00.870.493 I llm_load_print_meta: n_merges         = 0
0.00.870.493 I llm_load_print_meta: vocab_only       = 0
0.00.870.494 I llm_load_print_meta: n_ctx_train      = 8192
0.00.870.494 I llm_load_print_meta: n_embd           = 2048
0.00.870.495 I llm_load_print_meta: n_layer          = 18
0.00.870.562 I llm_load_print_meta: n_head           = 8
0.00.870.570 I llm_load_print_meta: n_head_kv        = 1
0.00.870.571 I llm_load_print_meta: n_rot            = 256
0.00.870.572 I llm_load_print_meta: n_swa            = 0
0.00.870.573 I llm_load_print_meta: n_embd_head_k    = 256
0.00.870.573 I llm_load_print_meta: n_embd_head_v    = 256
0.00.870.579 I llm_load_print_meta: n_gqa            = 8
0.00.870.584 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.870.592 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.870.594 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.870.596 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.870.597 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.870.600 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.870.601 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.870.606 I llm_load_print_meta: n_ff             = 16384
0.00.870.606 I llm_load_print_meta: n_expert         = 0
0.00.870.607 I llm_load_print_meta: n_expert_used    = 0
0.00.870.607 I llm_load_print_meta: causal attn      = 1
0.00.870.608 I llm_load_print_meta: pooling type     = 0
0.00.870.609 I llm_load_print_meta: rope type        = 2
0.00.870.610 I llm_load_print_meta: rope scaling     = linear
0.00.870.611 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.870.612 I llm_load_print_meta: freq_scale_train = 1
0.00.870.612 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.870.613 I llm_load_print_meta: rope_finetuned   = unknown
0.00.870.614 I llm_load_print_meta: ssm_d_conv       = 0
0.00.870.614 I llm_load_print_meta: ssm_d_inner      = 0
0.00.870.614 I llm_load_print_meta: ssm_d_state      = 0
0.00.870.615 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.870.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.870.617 I llm_load_print_meta: model type       = 2B
0.00.870.617 I llm_load_print_meta: model ftype      = Q8_0
0.00.870.618 I llm_load_print_meta: model params     = 2.51 B
0.00.870.619 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.870.619 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.870.621 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.870.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.870.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.870.622 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.870.623 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.870.624 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.870.629 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.870.631 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.870.631 I llm_load_print_meta: max token length = 93
0.00.943.498 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.943.505 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.949.499 I llama_new_context_with_model: n_seq_max     = 1
0.00.949.506 I llama_new_context_with_model: n_ctx         = 4096
0.00.949.507 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.949.507 I llama_new_context_with_model: n_batch       = 2048
0.00.949.508 I llama_new_context_with_model: n_ubatch      = 512
0.00.949.508 I llama_new_context_with_model: flash_attn    = 0
0.00.949.511 I llama_new_context_with_model: freq_base     = 10000.0
0.00.949.511 I llama_new_context_with_model: freq_scale    = 1
0.00.949.512 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.949.598 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.963.961 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.964.002 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.964.121 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.966.692 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.966.696 I llama_new_context_with_model: graph nodes  = 601
0.00.966.697 I llama_new_context_with_model: graph splits = 1
0.00.966.721 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.966.724 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.754 I main: llama threadpool init, n_threads = 4
0.01.576.772 I 
0.01.576.890 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.894 I 
0.01.577.130 I sampler seed: 2861417095
0.01.577.144 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.577.153 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.577.157 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.577.157 I 
 increamically, a man who had never read a book in his life. He scoffed at the idea of escaping reality through fiction. Yet, when the harsh realities

0.15.089.658 I llama_perf_sampler_print:    sampling time =      49.70 ms /    33 runs   (    1.51 ms per token,   664.02 tokens per second)
0.15.089.675 I llama_perf_context_print:        load time =    1575.83 ms
0.15.089.677 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.089.678 I llama_perf_context_print:        eval time =   13423.10 ms /    32 runs   (  419.47 ms per token,     2.38 tokens per second)
0.15.089.679 I llama_perf_context_print:       total time =   13512.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.648s
user	2m52.410s
sys	0m9.365s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4406 (0da5d860)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186323.37 ms
main:    total time = 186323.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.000.826 I main: load the model and apply lora adapter, if any
0.00.023.269 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.281 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.376 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.389 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.391 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.396 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.400 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.401 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.403 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.404 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.406 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.412 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.413 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.416 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.417 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.419 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.240.551 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.900 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.366.031 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.366.040 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.366.041 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.366.042 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.366.044 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.366.045 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.366.047 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.366.051 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.366.052 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.366.053 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.366.055 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.366.056 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.366.064 I llama_model_loader: - type  f32:   37 tensors
0.00.366.066 I llama_model_loader: - type q4_K:  108 tensors
0.00.366.067 I llama_model_loader: - type q6_K:   19 tensors
0.00.617.765 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.683.513 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.684.492 I llm_load_vocab: special tokens cache size = 5
0.00.900.970 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.901.044 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.901.046 I llm_load_print_meta: arch             = gemma
0.00.901.046 I llm_load_print_meta: vocab type       = SPM
0.00.901.047 I llm_load_print_meta: n_vocab          = 256000
0.00.901.050 I llm_load_print_meta: n_merges         = 0
0.00.901.050 I llm_load_print_meta: vocab_only       = 0
0.00.901.051 I llm_load_print_meta: n_ctx_train      = 8192
0.00.901.051 I llm_load_print_meta: n_embd           = 2048
0.00.901.051 I llm_load_print_meta: n_layer          = 18
0.00.901.118 I llm_load_print_meta: n_head           = 8
0.00.901.125 I llm_load_print_meta: n_head_kv        = 1
0.00.901.126 I llm_load_print_meta: n_rot            = 256
0.00.901.126 I llm_load_print_meta: n_swa            = 0
0.00.901.127 I llm_load_print_meta: n_embd_head_k    = 256
0.00.901.127 I llm_load_print_meta: n_embd_head_v    = 256
0.00.901.132 I llm_load_print_meta: n_gqa            = 8
0.00.901.137 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.901.142 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.901.143 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.901.144 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.901.145 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.901.145 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.901.146 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.901.152 I llm_load_print_meta: n_ff             = 16384
0.00.901.153 I llm_load_print_meta: n_expert         = 0
0.00.901.154 I llm_load_print_meta: n_expert_used    = 0
0.00.901.154 I llm_load_print_meta: causal attn      = 1
0.00.901.154 I llm_load_print_meta: pooling type     = 0
0.00.901.155 I llm_load_print_meta: rope type        = 2
0.00.901.155 I llm_load_print_meta: rope scaling     = linear
0.00.901.156 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.901.157 I llm_load_print_meta: freq_scale_train = 1
0.00.901.157 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.901.157 I llm_load_print_meta: rope_finetuned   = unknown
0.00.901.158 I llm_load_print_meta: ssm_d_conv       = 0
0.00.901.158 I llm_load_print_meta: ssm_d_inner      = 0
0.00.901.158 I llm_load_print_meta: ssm_d_state      = 0
0.00.901.158 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.901.159 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.901.159 I llm_load_print_meta: model type       = 2B
0.00.901.160 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.901.161 I llm_load_print_meta: model params     = 2.51 B
0.00.901.162 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.901.162 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.901.163 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.901.164 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.901.164 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.901.164 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.901.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.901.165 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.901.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.901.173 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.901.173 I llm_load_print_meta: max token length = 93
0.00.965.275 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.965.285 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.965.286 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.965.287 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.965.287 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.965.288 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.971.070 I llama_new_context_with_model: n_seq_max     = 1
0.00.971.077 I llama_new_context_with_model: n_ctx         = 4096
0.00.971.078 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.971.078 I llama_new_context_with_model: n_batch       = 2048
0.00.971.079 I llama_new_context_with_model: n_ubatch      = 512
0.00.971.079 I llama_new_context_with_model: flash_attn    = 0
0.00.971.082 I llama_new_context_with_model: freq_base     = 10000.0
0.00.971.083 I llama_new_context_with_model: freq_scale    = 1
0.00.971.083 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.971.169 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.985.691 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.985.733 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.985.885 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.988.503 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.988.507 I llama_new_context_with_model: graph nodes  = 601
0.00.988.507 I llama_new_context_with_model: graph splits = 1
0.00.988.530 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.988.533 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.568.961 I main: llama threadpool init, n_threads = 4
0.01.568.978 I 
0.01.569.098 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.569.102 I 
0.01.569.342 I sampler seed: 2061324562
0.01.569.356 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.569.367 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.569.368 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.569.368 I 
 squaRED.

I am unable to generate a response because the prompt contains a vulgar word. I am programmed to avoid vulgarity and inappropriate language. [end of text]


0.12.363.108 I llama_perf_sampler_print:    sampling time =      48.13 ms /    32 runs   (    1.50 ms per token,   664.88 tokens per second)
0.12.363.111 I llama_perf_context_print:        load time =    1568.05 ms
0.12.363.113 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.363.115 I llama_perf_context_print:        eval time =   10706.99 ms /    31 runs   (  345.39 ms per token,     2.90 tokens per second)
0.12.363.116 I llama_perf_context_print:       total time =   10794.16 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4406 (0da5d860)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186560.45 ms
main:    total time = 186560.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.609 I build: 4406 (0da5d860) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.196 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.301 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.315 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.320 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.324 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.327 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.329 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.334 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.338 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.340 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.348 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.353 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.356 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.358 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.361 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.772 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.306 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.506 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.516 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.518 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.519 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.521 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.522 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.523 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.528 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.529 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.538 I llama_model_loader: - type  f32:   37 tensors
0.00.358.540 I llama_model_loader: - type q4_K:  108 tensors
0.00.358.541 I llama_model_loader: - type q6_K:   19 tensors
0.00.567.455 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.084 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.004 I llm_load_vocab: special tokens cache size = 5
0.00.837.668 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.743 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.744 I llm_load_print_meta: arch             = gemma
0.00.837.745 I llm_load_print_meta: vocab type       = SPM
0.00.837.745 I llm_load_print_meta: n_vocab          = 256000
0.00.837.748 I llm_load_print_meta: n_merges         = 0
0.00.837.748 I llm_load_print_meta: vocab_only       = 0
0.00.837.748 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.749 I llm_load_print_meta: n_embd           = 2048
0.00.837.749 I llm_load_print_meta: n_layer          = 18
0.00.837.813 I llm_load_print_meta: n_head           = 8
0.00.837.820 I llm_load_print_meta: n_head_kv        = 1
0.00.837.821 I llm_load_print_meta: n_rot            = 256
0.00.837.821 I llm_load_print_meta: n_swa            = 0
0.00.837.822 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.822 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.827 I llm_load_print_meta: n_gqa            = 8
0.00.837.832 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.837 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.838 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.840 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.841 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.841 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.842 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.847 I llm_load_print_meta: n_ff             = 16384
0.00.837.848 I llm_load_print_meta: n_expert         = 0
0.00.837.848 I llm_load_print_meta: n_expert_used    = 0
0.00.837.849 I llm_load_print_meta: causal attn      = 1
0.00.837.850 I llm_load_print_meta: pooling type     = 0
0.00.837.850 I llm_load_print_meta: rope type        = 2
0.00.837.851 I llm_load_print_meta: rope scaling     = linear
0.00.837.853 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.854 I llm_load_print_meta: freq_scale_train = 1
0.00.837.854 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.855 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.856 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.856 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.856 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.857 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.858 I llm_load_print_meta: model type       = 2B
0.00.837.859 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.837.864 I llm_load_print_meta: model params     = 2.51 B
0.00.837.865 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.837.865 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.866 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.866 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.867 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.868 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.868 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.869 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.887 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.890 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.890 I llm_load_print_meta: max token length = 93
0.00.898.225 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.904.412 I llama_new_context_with_model: n_seq_max     = 1
0.00.904.419 I llama_new_context_with_model: n_ctx         = 4096
0.00.904.420 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.904.420 I llama_new_context_with_model: n_batch       = 2048
0.00.904.420 I llama_new_context_with_model: n_ubatch      = 512
0.00.904.421 I llama_new_context_with_model: flash_attn    = 0
0.00.904.423 I llama_new_context_with_model: freq_base     = 10000.0
0.00.904.424 I llama_new_context_with_model: freq_scale    = 1
0.00.904.425 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.904.515 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.919.217 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.919.258 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.919.375 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.921.948 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.921.952 I llama_new_context_with_model: graph nodes  = 601
0.00.921.952 I llama_new_context_with_model: graph splits = 1
0.00.921.975 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.921.979 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.501.461 I main: llama threadpool init, n_threads = 4
0.01.501.478 I 
0.01.501.599 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.501.604 I 
0.01.501.836 I sampler seed: 287678297
0.01.501.850 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.501.860 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.501.861 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.501.862 I 
 increasities. [end of text]


0.02.896.258 I llama_perf_sampler_print:    sampling time =       6.37 ms /     5 runs   (    1.27 ms per token,   785.05 tokens per second)
0.02.896.261 I llama_perf_context_print:        load time =    1500.53 ms
0.02.896.273 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.896.275 I llama_perf_context_print:        eval time =    1382.00 ms /     4 runs   (  345.50 ms per token,     2.89 tokens per second)
0.02.896.276 I llama_perf_context_print:       total time =    1394.81 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m31.004s
user	46m4.236s
sys	0m6.367s
