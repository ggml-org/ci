+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.639 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.027.439 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.027.629 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.027.718 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.736 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.740 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.744 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.745 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.746 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.746 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.748 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.748 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.754 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.755 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.756 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.758 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.759 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.100.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.187.374 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.199.398 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.405 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.406 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.406 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.407 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.408 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.410 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.413 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.414 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.415 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.415 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.199.417 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.424 I llama_model_loader: - type  f32:   37 tensors
0.00.199.428 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.888 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.464.878 I llm_load_vocab: special tokens cache size = 5
0.00.522.585 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.522.637 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.522.641 I llm_load_print_meta: arch             = gemma
0.00.522.642 I llm_load_print_meta: vocab type       = SPM
0.00.522.642 I llm_load_print_meta: n_vocab          = 256000
0.00.522.645 I llm_load_print_meta: n_merges         = 0
0.00.522.645 I llm_load_print_meta: vocab_only       = 0
0.00.522.646 I llm_load_print_meta: n_ctx_train      = 8192
0.00.522.646 I llm_load_print_meta: n_embd           = 2048
0.00.522.646 I llm_load_print_meta: n_layer          = 18
0.00.522.684 I llm_load_print_meta: n_head           = 8
0.00.522.693 I llm_load_print_meta: n_head_kv        = 1
0.00.522.694 I llm_load_print_meta: n_rot            = 256
0.00.522.694 I llm_load_print_meta: n_swa            = 0
0.00.522.694 I llm_load_print_meta: n_embd_head_k    = 256
0.00.522.696 I llm_load_print_meta: n_embd_head_v    = 256
0.00.522.700 I llm_load_print_meta: n_gqa            = 8
0.00.522.705 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.522.709 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.522.713 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.522.714 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.522.715 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.522.715 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.522.715 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.522.720 I llm_load_print_meta: n_ff             = 16384
0.00.522.721 I llm_load_print_meta: n_expert         = 0
0.00.522.721 I llm_load_print_meta: n_expert_used    = 0
0.00.522.721 I llm_load_print_meta: causal attn      = 1
0.00.522.722 I llm_load_print_meta: pooling type     = 0
0.00.522.722 I llm_load_print_meta: rope type        = 2
0.00.522.722 I llm_load_print_meta: rope scaling     = linear
0.00.522.724 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.522.724 I llm_load_print_meta: freq_scale_train = 1
0.00.522.725 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.522.726 I llm_load_print_meta: rope_finetuned   = unknown
0.00.522.726 I llm_load_print_meta: ssm_d_conv       = 0
0.00.522.727 I llm_load_print_meta: ssm_d_inner      = 0
0.00.522.727 I llm_load_print_meta: ssm_d_state      = 0
0.00.522.727 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.522.728 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.522.729 I llm_load_print_meta: model type       = 2B
0.00.522.730 I llm_load_print_meta: model ftype      = Q8_0
0.00.522.731 I llm_load_print_meta: model params     = 2.51 B
0.00.522.732 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.522.733 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.522.734 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.522.734 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.522.735 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.522.735 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.522.736 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.522.736 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.522.737 I llm_load_print_meta: max token length = 93
0.00.522.903 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.622.399 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.622.409 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.622.410 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.622.411 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.622.412 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.622.412 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.628.060 I llama_new_context_with_model: n_ctx      = 8192
0.00.628.067 I llama_new_context_with_model: n_batch    = 2048
0.00.628.067 I llama_new_context_with_model: n_ubatch   = 512
0.00.628.068 I llama_new_context_with_model: flash_attn = 0
0.00.628.070 I llama_new_context_with_model: freq_base  = 10000.0
0.00.628.071 I llama_new_context_with_model: freq_scale = 1
0.00.658.184 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.224 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.335 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.659.725 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.659.731 I llama_new_context_with_model: graph nodes  = 601
0.00.659.731 I llama_new_context_with_model: graph splits = 1
0.00.659.747 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.827 I main: llama threadpool init, n_threads = 4
0.01.274.839 I 
0.01.274.937 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.941 I 
0.01.275.100 I sampler seed: 345803619
0.01.275.111 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.117 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.275.118 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably and with great enthusiasm, expressing the joy of discovering this captivating world of music. [end of text]


0.09.340.321 I llama_perf_sampler_print:    sampling time =      29.38 ms /    20 runs   (    1.47 ms per token,   680.69 tokens per second)
0.09.340.334 I llama_perf_context_print:        load time =    1271.89 ms
0.09.340.336 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.340.339 I llama_perf_context_print:        eval time =    8015.89 ms /    19 runs   (  421.89 ms per token,     2.37 tokens per second)
0.09.340.340 I llama_perf_context_print:       total time =    8065.50 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.619 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.674 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.763 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.777 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.779 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.784 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.785 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.786 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.787 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.787 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.789 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.795 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.799 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.800 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.800 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.801 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.280 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.216 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.217 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.224 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.225 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.226 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.227 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.228 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.229 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.232 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.233 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.234 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.235 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.194.236 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.243 I llama_model_loader: - type  f32:   37 tensors
0.00.194.248 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.226 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.462.192 I llm_load_vocab: special tokens cache size = 5
0.00.519.969 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.520.019 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.520.020 I llm_load_print_meta: arch             = gemma
0.00.520.021 I llm_load_print_meta: vocab type       = SPM
0.00.520.022 I llm_load_print_meta: n_vocab          = 256000
0.00.520.024 I llm_load_print_meta: n_merges         = 0
0.00.520.025 I llm_load_print_meta: vocab_only       = 0
0.00.520.025 I llm_load_print_meta: n_ctx_train      = 8192
0.00.520.026 I llm_load_print_meta: n_embd           = 2048
0.00.520.026 I llm_load_print_meta: n_layer          = 18
0.00.520.056 I llm_load_print_meta: n_head           = 8
0.00.520.062 I llm_load_print_meta: n_head_kv        = 1
0.00.520.063 I llm_load_print_meta: n_rot            = 256
0.00.520.063 I llm_load_print_meta: n_swa            = 0
0.00.520.064 I llm_load_print_meta: n_embd_head_k    = 256
0.00.520.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.520.069 I llm_load_print_meta: n_gqa            = 8
0.00.520.074 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.520.079 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.520.080 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.520.081 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.520.081 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.520.082 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.520.082 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.520.087 I llm_load_print_meta: n_ff             = 16384
0.00.520.088 I llm_load_print_meta: n_expert         = 0
0.00.520.088 I llm_load_print_meta: n_expert_used    = 0
0.00.520.088 I llm_load_print_meta: causal attn      = 1
0.00.520.089 I llm_load_print_meta: pooling type     = 0
0.00.520.089 I llm_load_print_meta: rope type        = 2
0.00.520.090 I llm_load_print_meta: rope scaling     = linear
0.00.520.091 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.520.092 I llm_load_print_meta: freq_scale_train = 1
0.00.520.092 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.520.093 I llm_load_print_meta: rope_finetuned   = unknown
0.00.520.093 I llm_load_print_meta: ssm_d_conv       = 0
0.00.520.093 I llm_load_print_meta: ssm_d_inner      = 0
0.00.520.093 I llm_load_print_meta: ssm_d_state      = 0
0.00.520.094 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.520.100 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.520.101 I llm_load_print_meta: model type       = 2B
0.00.520.102 I llm_load_print_meta: model ftype      = Q8_0
0.00.520.102 I llm_load_print_meta: model params     = 2.51 B
0.00.520.103 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.520.104 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.520.104 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.520.105 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.520.105 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.520.105 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.520.105 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.520.106 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.520.106 I llm_load_print_meta: max token length = 93
0.00.520.278 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.615.384 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.621.079 I llama_new_context_with_model: n_ctx      = 8192
0.00.621.088 I llama_new_context_with_model: n_batch    = 2048
0.00.621.089 I llama_new_context_with_model: n_ubatch   = 512
0.00.621.089 I llama_new_context_with_model: flash_attn = 0
0.00.621.092 I llama_new_context_with_model: freq_base  = 10000.0
0.00.621.093 I llama_new_context_with_model: freq_scale = 1
0.00.651.746 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.651.791 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.651.903 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.653.281 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.653.288 I llama_new_context_with_model: graph nodes  = 601
0.00.653.288 I llama_new_context_with_model: graph splits = 1
0.00.653.304 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.263.770 I main: llama threadpool init, n_threads = 4
0.01.263.781 I 
0.01.263.869 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.263.872 I 
0.01.264.032 I sampler seed: 3112767289
0.01.264.041 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.264.046 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.264.047 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities by creating a new type of chemical reaction that does not require any external energy input.

This hypothetical reaction would utilize a combination of chemical bonds breaking and

0.14.787.664 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.70 tokens per second)
0.14.787.668 I llama_perf_context_print:        load time =    1260.93 ms
0.14.787.681 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.787.683 I llama_perf_context_print:        eval time =   13442.24 ms /    32 runs   (  420.07 ms per token,     2.38 tokens per second)
0.14.787.684 I llama_perf_context_print:       total time =   13523.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.641 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.031.325 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.031.519 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.031.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.626 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.627 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.632 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.637 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.638 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.640 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.641 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.642 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.651 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.653 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.654 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.657 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.103.620 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.191.819 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.203.881 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.203.889 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.203.891 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.203.891 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.203.892 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.203.893 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.203.894 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.203.898 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.203.899 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.203.900 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.203.902 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.203.905 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.203.916 I llama_model_loader: - type  f32:   37 tensors
0.00.203.921 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.031 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.062 I llm_load_vocab: special tokens cache size = 5
0.00.537.931 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.537.992 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.537.992 I llm_load_print_meta: arch             = gemma
0.00.537.993 I llm_load_print_meta: vocab type       = SPM
0.00.537.994 I llm_load_print_meta: n_vocab          = 256000
0.00.537.996 I llm_load_print_meta: n_merges         = 0
0.00.537.997 I llm_load_print_meta: vocab_only       = 0
0.00.537.997 I llm_load_print_meta: n_ctx_train      = 8192
0.00.537.998 I llm_load_print_meta: n_embd           = 2048
0.00.537.998 I llm_load_print_meta: n_layer          = 18
0.00.538.033 I llm_load_print_meta: n_head           = 8
0.00.538.040 I llm_load_print_meta: n_head_kv        = 1
0.00.538.041 I llm_load_print_meta: n_rot            = 256
0.00.538.041 I llm_load_print_meta: n_swa            = 0
0.00.538.042 I llm_load_print_meta: n_embd_head_k    = 256
0.00.538.042 I llm_load_print_meta: n_embd_head_v    = 256
0.00.538.067 I llm_load_print_meta: n_gqa            = 8
0.00.538.076 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.538.083 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.538.085 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.538.087 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.538.089 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.538.090 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.538.091 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.538.097 I llm_load_print_meta: n_ff             = 16384
0.00.538.099 I llm_load_print_meta: n_expert         = 0
0.00.538.099 I llm_load_print_meta: n_expert_used    = 0
0.00.538.100 I llm_load_print_meta: causal attn      = 1
0.00.538.109 I llm_load_print_meta: pooling type     = 0
0.00.538.111 I llm_load_print_meta: rope type        = 2
0.00.538.112 I llm_load_print_meta: rope scaling     = linear
0.00.538.118 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.538.120 I llm_load_print_meta: freq_scale_train = 1
0.00.538.120 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.538.121 I llm_load_print_meta: rope_finetuned   = unknown
0.00.538.121 I llm_load_print_meta: ssm_d_conv       = 0
0.00.538.121 I llm_load_print_meta: ssm_d_inner      = 0
0.00.538.122 I llm_load_print_meta: ssm_d_state      = 0
0.00.538.122 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.538.123 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.538.124 I llm_load_print_meta: model type       = 2B
0.00.538.125 I llm_load_print_meta: model ftype      = Q8_0
0.00.538.130 I llm_load_print_meta: model params     = 2.51 B
0.00.538.132 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.538.133 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.538.133 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.538.134 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.538.135 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.538.136 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.538.137 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.538.138 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.538.139 I llm_load_print_meta: max token length = 93
0.00.538.321 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.613.988 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.613.996 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.613.997 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.613.997 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.613.998 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.613.999 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.619.817 I llama_new_context_with_model: n_ctx      = 8192
0.00.619.822 I llama_new_context_with_model: n_batch    = 2048
0.00.619.823 I llama_new_context_with_model: n_ubatch   = 512
0.00.619.823 I llama_new_context_with_model: flash_attn = 0
0.00.619.826 I llama_new_context_with_model: freq_base  = 10000.0
0.00.619.826 I llama_new_context_with_model: freq_scale = 1
0.00.648.891 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.648.935 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.649.060 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.650.500 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.650.511 I llama_new_context_with_model: graph nodes  = 601
0.00.650.511 I llama_new_context_with_model: graph splits = 1
0.00.650.527 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.450 I main: llama threadpool init, n_threads = 4
0.01.294.460 I 
0.01.294.553 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.556 I 
0.01.294.717 I sampler seed: 3043653255
0.01.294.727 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.732 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.294.732 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and other forms of sexual harassment.

Sexual harassment is a pervasive issue that affects individuals across all genders, ages, and social classes. It can

0.14.887.853 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.87 tokens per second)
0.14.887.856 I llama_perf_context_print:        load time =    1291.56 ms
0.14.887.858 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.887.872 I llama_perf_context_print:        eval time =   13512.27 ms /    32 runs   (  422.26 ms per token,     2.37 tokens per second)
0.14.887.873 I llama_perf_context_print:       total time =   13593.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.632 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.524 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.698 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.780 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.790 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.791 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.804 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.805 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.806 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.814 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.816 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.817 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.833 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.837 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.838 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.839 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.840 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.356 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.691 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.626 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.636 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.636 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.637 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.638 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.643 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.644 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.645 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.646 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.194.647 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.655 I llama_model_loader: - type  f32:   37 tensors
0.00.194.658 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.191 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.208 I llm_load_vocab: special tokens cache size = 5
0.00.531.165 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.227 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.228 I llm_load_print_meta: arch             = gemma
0.00.531.229 I llm_load_print_meta: vocab type       = SPM
0.00.531.230 I llm_load_print_meta: n_vocab          = 256000
0.00.531.233 I llm_load_print_meta: n_merges         = 0
0.00.531.233 I llm_load_print_meta: vocab_only       = 0
0.00.531.234 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.234 I llm_load_print_meta: n_embd           = 2048
0.00.531.235 I llm_load_print_meta: n_layer          = 18
0.00.531.269 I llm_load_print_meta: n_head           = 8
0.00.531.276 I llm_load_print_meta: n_head_kv        = 1
0.00.531.276 I llm_load_print_meta: n_rot            = 256
0.00.531.277 I llm_load_print_meta: n_swa            = 0
0.00.531.277 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.277 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.282 I llm_load_print_meta: n_gqa            = 8
0.00.531.286 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.291 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.292 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.294 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.294 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.295 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.295 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.300 I llm_load_print_meta: n_ff             = 16384
0.00.531.300 I llm_load_print_meta: n_expert         = 0
0.00.531.301 I llm_load_print_meta: n_expert_used    = 0
0.00.531.301 I llm_load_print_meta: causal attn      = 1
0.00.531.302 I llm_load_print_meta: pooling type     = 0
0.00.531.302 I llm_load_print_meta: rope type        = 2
0.00.531.302 I llm_load_print_meta: rope scaling     = linear
0.00.531.304 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.305 I llm_load_print_meta: freq_scale_train = 1
0.00.531.305 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.306 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.327 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.328 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.329 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.329 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.329 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.330 I llm_load_print_meta: model type       = 2B
0.00.531.331 I llm_load_print_meta: model ftype      = Q8_0
0.00.531.331 I llm_load_print_meta: model params     = 2.51 B
0.00.531.332 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.531.333 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.333 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.333 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.334 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.334 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.335 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.335 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.335 I llm_load_print_meta: max token length = 93
0.00.531.513 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.602.573 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.602.582 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.608.260 I llama_new_context_with_model: n_ctx      = 8192
0.00.608.268 I llama_new_context_with_model: n_batch    = 2048
0.00.608.268 I llama_new_context_with_model: n_ubatch   = 512
0.00.608.269 I llama_new_context_with_model: flash_attn = 0
0.00.608.271 I llama_new_context_with_model: freq_base  = 10000.0
0.00.608.271 I llama_new_context_with_model: freq_scale = 1
0.00.638.123 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.638.166 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.638.279 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.639.656 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.639.661 I llama_new_context_with_model: graph nodes  = 601
0.00.639.662 I llama_new_context_with_model: graph splits = 1
0.00.639.677 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.250.884 I main: llama threadpool init, n_threads = 4
0.01.250.896 I 
0.01.250.987 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.250.991 I 
0.01.251.148 I sampler seed: 1121497046
0.01.251.160 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.251.164 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.251.165 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

A. The definition of a chemical bond.
B. The different types of chemical bonds.
C. The factors that affect the strength

0.14.846.872 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   672.02 tokens per second)
0.14.846.875 I llama_perf_context_print:        load time =    1248.03 ms
0.14.846.876 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.846.890 I llama_perf_context_print:        eval time =   13514.28 ms /    32 runs   (  422.32 ms per token,     2.37 tokens per second)
0.14.846.892 I llama_perf_context_print:       total time =   13596.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.838s
user	3m27.498s
sys	0m9.453s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3774 (0d2ec438)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198216.20 ms
main:    total time = 198216.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.625 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.758 I main: load the model and apply lora adapter, if any
0.00.024.598 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.788 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.876 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.887 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.889 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.893 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.894 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.895 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.895 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.896 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.897 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.903 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.904 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.905 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.906 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.907 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.161 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.005 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.030 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.038 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.040 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.041 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.042 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.045 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.046 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.047 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.048 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.049 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.057 I llama_model_loader: - type  f32:   37 tensors
0.00.197.061 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.063 I llama_model_loader: - type q6_K:   19 tensors
0.00.464.044 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.042 I llm_load_vocab: special tokens cache size = 5
0.00.523.001 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.523.053 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.523.057 I llm_load_print_meta: arch             = gemma
0.00.523.058 I llm_load_print_meta: vocab type       = SPM
0.00.523.058 I llm_load_print_meta: n_vocab          = 256000
0.00.523.060 I llm_load_print_meta: n_merges         = 0
0.00.523.061 I llm_load_print_meta: vocab_only       = 0
0.00.523.061 I llm_load_print_meta: n_ctx_train      = 8192
0.00.523.062 I llm_load_print_meta: n_embd           = 2048
0.00.523.062 I llm_load_print_meta: n_layer          = 18
0.00.523.094 I llm_load_print_meta: n_head           = 8
0.00.523.103 I llm_load_print_meta: n_head_kv        = 1
0.00.523.103 I llm_load_print_meta: n_rot            = 256
0.00.523.104 I llm_load_print_meta: n_swa            = 0
0.00.523.104 I llm_load_print_meta: n_embd_head_k    = 256
0.00.523.104 I llm_load_print_meta: n_embd_head_v    = 256
0.00.523.109 I llm_load_print_meta: n_gqa            = 8
0.00.523.113 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.523.118 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.523.119 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.523.120 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.523.122 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.523.123 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.523.123 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.523.129 I llm_load_print_meta: n_ff             = 16384
0.00.523.130 I llm_load_print_meta: n_expert         = 0
0.00.523.130 I llm_load_print_meta: n_expert_used    = 0
0.00.523.130 I llm_load_print_meta: causal attn      = 1
0.00.523.131 I llm_load_print_meta: pooling type     = 0
0.00.523.131 I llm_load_print_meta: rope type        = 2
0.00.523.132 I llm_load_print_meta: rope scaling     = linear
0.00.523.134 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.523.135 I llm_load_print_meta: freq_scale_train = 1
0.00.523.135 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.523.136 I llm_load_print_meta: rope_finetuned   = unknown
0.00.523.136 I llm_load_print_meta: ssm_d_conv       = 0
0.00.523.136 I llm_load_print_meta: ssm_d_inner      = 0
0.00.523.137 I llm_load_print_meta: ssm_d_state      = 0
0.00.523.137 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.523.140 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.523.141 I llm_load_print_meta: model type       = 2B
0.00.523.142 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.523.143 I llm_load_print_meta: model params     = 2.51 B
0.00.523.144 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.523.144 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.523.144 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.523.145 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.523.145 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.523.145 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.523.146 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.523.146 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.523.146 I llm_load_print_meta: max token length = 93
0.00.523.314 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.583.596 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.583.606 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.583.607 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.583.608 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.583.608 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.583.609 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.589.134 I llama_new_context_with_model: n_ctx      = 8192
0.00.589.141 I llama_new_context_with_model: n_batch    = 2048
0.00.589.142 I llama_new_context_with_model: n_ubatch   = 512
0.00.589.142 I llama_new_context_with_model: flash_attn = 0
0.00.589.144 I llama_new_context_with_model: freq_base  = 10000.0
0.00.589.145 I llama_new_context_with_model: freq_scale = 1
0.00.618.601 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.618.642 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.618.759 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.620.168 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.620.174 I llama_new_context_with_model: graph nodes  = 601
0.00.620.175 I llama_new_context_with_model: graph splits = 1
0.00.620.192 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.197.485 I main: llama threadpool init, n_threads = 4
0.01.197.497 I 
0.01.197.588 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.197.592 I 
0.01.197.750 I sampler seed: 3518571855
0.01.197.762 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.197.768 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.197.769 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvled.

**Answer:**

I understand. I will use my knowledge to assist you with any questions or tasks you may have. [end of text]


0.11.421.712 I llama_perf_sampler_print:    sampling time =      46.02 ms /    31 runs   (    1.48 ms per token,   673.56 tokens per second)
0.11.421.715 I llama_perf_context_print:        load time =    1194.65 ms
0.11.421.717 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.421.718 I llama_perf_context_print:        eval time =   10147.79 ms /    30 runs   (  338.26 ms per token,     2.96 tokens per second)
0.11.421.719 I llama_perf_context_print:       total time =   10224.24 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3774 (0d2ec438)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198154.30 ms
main:    total time = 198154.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.628 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.024.842 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.933 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.946 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.947 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.952 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.953 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.954 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.956 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.957 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.962 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.963 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.964 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.965 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.974 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.479 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.157 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.153 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.162 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.163 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.164 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.164 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.165 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.166 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.170 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.171 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.178 I llama_model_loader: - type  f32:   37 tensors
0.00.197.182 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.184 I llama_model_loader: - type q6_K:   19 tensors
0.00.464.437 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.414 I llm_load_vocab: special tokens cache size = 5
0.00.523.461 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.523.516 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.523.518 I llm_load_print_meta: arch             = gemma
0.00.523.518 I llm_load_print_meta: vocab type       = SPM
0.00.523.519 I llm_load_print_meta: n_vocab          = 256000
0.00.523.521 I llm_load_print_meta: n_merges         = 0
0.00.523.522 I llm_load_print_meta: vocab_only       = 0
0.00.523.522 I llm_load_print_meta: n_ctx_train      = 8192
0.00.523.523 I llm_load_print_meta: n_embd           = 2048
0.00.523.523 I llm_load_print_meta: n_layer          = 18
0.00.523.557 I llm_load_print_meta: n_head           = 8
0.00.523.564 I llm_load_print_meta: n_head_kv        = 1
0.00.523.565 I llm_load_print_meta: n_rot            = 256
0.00.523.565 I llm_load_print_meta: n_swa            = 0
0.00.523.566 I llm_load_print_meta: n_embd_head_k    = 256
0.00.523.566 I llm_load_print_meta: n_embd_head_v    = 256
0.00.523.571 I llm_load_print_meta: n_gqa            = 8
0.00.523.576 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.523.580 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.523.581 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.523.583 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.523.583 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.523.583 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.523.584 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.523.588 I llm_load_print_meta: n_ff             = 16384
0.00.523.588 I llm_load_print_meta: n_expert         = 0
0.00.523.589 I llm_load_print_meta: n_expert_used    = 0
0.00.523.589 I llm_load_print_meta: causal attn      = 1
0.00.523.589 I llm_load_print_meta: pooling type     = 0
0.00.523.590 I llm_load_print_meta: rope type        = 2
0.00.523.590 I llm_load_print_meta: rope scaling     = linear
0.00.523.591 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.523.592 I llm_load_print_meta: freq_scale_train = 1
0.00.523.594 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.523.594 I llm_load_print_meta: rope_finetuned   = unknown
0.00.523.594 I llm_load_print_meta: ssm_d_conv       = 0
0.00.523.594 I llm_load_print_meta: ssm_d_inner      = 0
0.00.523.595 I llm_load_print_meta: ssm_d_state      = 0
0.00.523.595 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.523.596 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.523.597 I llm_load_print_meta: model type       = 2B
0.00.523.598 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.523.599 I llm_load_print_meta: model params     = 2.51 B
0.00.523.600 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.523.610 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.523.611 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.523.624 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.523.625 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.523.625 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.523.626 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.523.627 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.523.627 I llm_load_print_meta: max token length = 93
0.00.523.799 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.581.020 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.586.512 I llama_new_context_with_model: n_ctx      = 8192
0.00.586.520 I llama_new_context_with_model: n_batch    = 2048
0.00.586.521 I llama_new_context_with_model: n_ubatch   = 512
0.00.586.521 I llama_new_context_with_model: flash_attn = 0
0.00.586.523 I llama_new_context_with_model: freq_base  = 10000.0
0.00.586.524 I llama_new_context_with_model: freq_scale = 1
0.00.617.576 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.617.622 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.617.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.619.063 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.619.069 I llama_new_context_with_model: graph nodes  = 601
0.00.619.070 I llama_new_context_with_model: graph splits = 1
0.00.619.084 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.195.541 I main: llama threadpool init, n_threads = 4
0.01.195.552 I 
0.01.195.641 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.195.644 I 
0.01.195.802 I sampler seed: 188620376
0.01.195.812 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.195.817 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.195.818 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary in a sentence would be:

a) He has a secondary in business.
b) He has a secondary career.
c) He has

0.12.104.798 I llama_perf_sampler_print:    sampling time =      48.90 ms /    33 runs   (    1.48 ms per token,   674.79 tokens per second)
0.12.104.802 I llama_perf_context_print:        load time =    1192.70 ms
0.12.104.804 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.104.828 I llama_perf_context_print:        eval time =   10828.37 ms /    32 runs   (  338.39 ms per token,     2.96 tokens per second)
0.12.104.831 I llama_perf_context_print:       total time =   10909.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m2.732s
user	50m1.845s
sys	0m6.320s
