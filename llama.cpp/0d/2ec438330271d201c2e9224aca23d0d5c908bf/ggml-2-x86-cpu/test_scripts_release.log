+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.865 I main: load the model and apply lora adapter, if any
0.00.022.477 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.525 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.539 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.547 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.548 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.551 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.552 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.552 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.553 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.553 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.554 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.558 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.558 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.559 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.559 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.560 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.479 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.360 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.365 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.366 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.367 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.367 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.368 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.369 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.371 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.372 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.373 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.373 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.375 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.378 I llama_model_loader: - type  f32:   37 tensors
0.00.132.381 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.069 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.689 I llm_load_vocab: special tokens cache size = 5
0.00.214.811 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.823 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.824 I llm_load_print_meta: arch             = gemma
0.00.214.825 I llm_load_print_meta: vocab type       = SPM
0.00.214.825 I llm_load_print_meta: n_vocab          = 256000
0.00.214.825 I llm_load_print_meta: n_merges         = 0
0.00.214.826 I llm_load_print_meta: vocab_only       = 0
0.00.214.826 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.826 I llm_load_print_meta: n_embd           = 2048
0.00.214.827 I llm_load_print_meta: n_layer          = 18
0.00.214.838 I llm_load_print_meta: n_head           = 8
0.00.214.839 I llm_load_print_meta: n_head_kv        = 1
0.00.214.839 I llm_load_print_meta: n_rot            = 256
0.00.214.840 I llm_load_print_meta: n_swa            = 0
0.00.214.840 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.840 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.841 I llm_load_print_meta: n_gqa            = 8
0.00.214.842 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.843 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.844 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.845 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.845 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.846 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.846 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.847 I llm_load_print_meta: n_ff             = 16384
0.00.214.848 I llm_load_print_meta: n_expert         = 0
0.00.214.848 I llm_load_print_meta: n_expert_used    = 0
0.00.214.848 I llm_load_print_meta: causal attn      = 1
0.00.214.848 I llm_load_print_meta: pooling type     = 0
0.00.214.849 I llm_load_print_meta: rope type        = 2
0.00.214.849 I llm_load_print_meta: rope scaling     = linear
0.00.214.850 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.851 I llm_load_print_meta: freq_scale_train = 1
0.00.214.851 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.852 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.852 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.852 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.852 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.853 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.853 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.854 I llm_load_print_meta: model type       = 2B
0.00.214.854 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.855 I llm_load_print_meta: model params     = 2.51 B
0.00.214.856 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.856 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.857 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.858 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.858 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.858 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.858 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.859 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.859 I llm_load_print_meta: max token length = 93
0.00.214.874 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.312.855 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.312.862 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.312.863 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.312.864 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.312.864 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.312.865 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.317.974 I llama_new_context_with_model: n_ctx      = 8192
0.00.317.980 I llama_new_context_with_model: n_batch    = 2048
0.00.317.981 I llama_new_context_with_model: n_ubatch   = 512
0.00.317.981 I llama_new_context_with_model: flash_attn = 0
0.00.317.983 I llama_new_context_with_model: freq_base  = 10000.0
0.00.317.984 I llama_new_context_with_model: freq_scale = 1
0.00.346.825 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.346.840 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.346.930 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.821 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.347.829 I llama_new_context_with_model: graph nodes  = 601
0.00.347.829 I llama_new_context_with_model: graph splits = 1
0.00.347.831 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.116 I main: llama threadpool init, n_threads = 4
0.00.438.129 I 
0.00.438.201 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.204 I 
0.00.438.241 I sampler seed: 1874964107
0.00.438.250 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.253 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.438.254 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded text. [end of text]


0.00.787.532 I llama_perf_sampler_print:    sampling time =       0.81 ms /     6 runs   (    0.14 ms per token,  7380.07 tokens per second)
0.00.787.535 I llama_perf_context_print:        load time =     436.23 ms
0.00.787.536 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.787.539 I llama_perf_context_print:        eval time =     345.87 ms /     5 runs   (   69.17 ms per token,    14.46 tokens per second)
0.00.787.540 I llama_perf_context_print:       total time =     349.43 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.606 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.811 I main: llama backend init
0.00.001.961 I main: load the model and apply lora adapter, if any
0.00.022.082 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.093 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.100 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.101 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.107 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.108 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.108 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.109 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.110 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.114 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.115 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.115 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.116 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.117 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.910 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.633 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.558 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.564 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.565 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.566 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.566 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.567 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.568 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.571 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.571 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.572 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.573 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.573 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.577 I llama_model_loader: - type  f32:   37 tensors
0.00.132.580 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.865 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.519 I llm_load_vocab: special tokens cache size = 5
0.00.216.695 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.707 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.707 I llm_load_print_meta: arch             = gemma
0.00.216.707 I llm_load_print_meta: vocab type       = SPM
0.00.216.708 I llm_load_print_meta: n_vocab          = 256000
0.00.216.708 I llm_load_print_meta: n_merges         = 0
0.00.216.709 I llm_load_print_meta: vocab_only       = 0
0.00.216.709 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.709 I llm_load_print_meta: n_embd           = 2048
0.00.216.710 I llm_load_print_meta: n_layer          = 18
0.00.216.723 I llm_load_print_meta: n_head           = 8
0.00.216.724 I llm_load_print_meta: n_head_kv        = 1
0.00.216.724 I llm_load_print_meta: n_rot            = 256
0.00.216.724 I llm_load_print_meta: n_swa            = 0
0.00.216.725 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.725 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.726 I llm_load_print_meta: n_gqa            = 8
0.00.216.727 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.728 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.731 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.732 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.732 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.732 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.733 I llm_load_print_meta: n_ff             = 16384
0.00.216.734 I llm_load_print_meta: n_expert         = 0
0.00.216.734 I llm_load_print_meta: n_expert_used    = 0
0.00.216.734 I llm_load_print_meta: causal attn      = 1
0.00.216.735 I llm_load_print_meta: pooling type     = 0
0.00.216.735 I llm_load_print_meta: rope type        = 2
0.00.216.735 I llm_load_print_meta: rope scaling     = linear
0.00.216.736 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.737 I llm_load_print_meta: freq_scale_train = 1
0.00.216.737 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.738 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.738 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.738 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.739 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.739 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.739 I llm_load_print_meta: model type       = 2B
0.00.216.740 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.741 I llm_load_print_meta: model params     = 2.51 B
0.00.216.742 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.742 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.742 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.743 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.743 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.743 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.744 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.744 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.744 I llm_load_print_meta: max token length = 93
0.00.216.766 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.310.383 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.315.400 I llama_new_context_with_model: n_ctx      = 8192
0.00.315.407 I llama_new_context_with_model: n_batch    = 2048
0.00.315.408 I llama_new_context_with_model: n_ubatch   = 512
0.00.315.408 I llama_new_context_with_model: flash_attn = 0
0.00.315.410 I llama_new_context_with_model: freq_base  = 10000.0
0.00.315.411 I llama_new_context_with_model: freq_scale = 1
0.00.344.978 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.344.992 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.345.090 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.967 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.345.975 I llama_new_context_with_model: graph nodes  = 601
0.00.345.975 I llama_new_context_with_model: graph splits = 1
0.00.345.977 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.138 I main: llama threadpool init, n_threads = 4
0.00.433.150 I 
0.00.433.221 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.433.224 I 
0.00.433.252 I sampler seed: 3650589307
0.00.433.261 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.263 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.433.264 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities to create a cohesive narrative, while simultaneously exploring the complexities of human relationships and the nature of self.

This narrative structure offers a rich tapestry of possibilities

0.02.595.729 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6869.28 tokens per second)
0.02.595.731 I llama_perf_context_print:        load time =     431.16 ms
0.02.595.733 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.595.734 I llama_perf_context_print:        eval time =    2144.73 ms /    32 runs   (   67.02 ms per token,    14.92 tokens per second)
0.02.595.735 I llama_perf_context_print:       total time =    2162.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.551 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.834 I main: load the model and apply lora adapter, if any
0.00.021.927 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.976 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.983 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.988 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.989 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.992 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.993 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.995 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.996 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.997 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.997 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.002 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.002 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.003 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.004 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.004 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.430 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.924 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.819 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.825 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.826 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.827 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.827 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.829 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.829 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.832 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.833 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.834 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.834 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.835 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.841 I llama_model_loader: - type  f32:   37 tensors
0.00.131.843 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.651 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.362 I llm_load_vocab: special tokens cache size = 5
0.00.216.646 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.660 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.660 I llm_load_print_meta: arch             = gemma
0.00.216.661 I llm_load_print_meta: vocab type       = SPM
0.00.216.661 I llm_load_print_meta: n_vocab          = 256000
0.00.216.662 I llm_load_print_meta: n_merges         = 0
0.00.216.662 I llm_load_print_meta: vocab_only       = 0
0.00.216.663 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.663 I llm_load_print_meta: n_embd           = 2048
0.00.216.664 I llm_load_print_meta: n_layer          = 18
0.00.216.675 I llm_load_print_meta: n_head           = 8
0.00.216.676 I llm_load_print_meta: n_head_kv        = 1
0.00.216.677 I llm_load_print_meta: n_rot            = 256
0.00.216.677 I llm_load_print_meta: n_swa            = 0
0.00.216.677 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.678 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.679 I llm_load_print_meta: n_gqa            = 8
0.00.216.680 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.681 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.682 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.683 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.684 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.685 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.686 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.687 I llm_load_print_meta: n_ff             = 16384
0.00.216.687 I llm_load_print_meta: n_expert         = 0
0.00.216.688 I llm_load_print_meta: n_expert_used    = 0
0.00.216.689 I llm_load_print_meta: causal attn      = 1
0.00.216.690 I llm_load_print_meta: pooling type     = 0
0.00.216.690 I llm_load_print_meta: rope type        = 2
0.00.216.690 I llm_load_print_meta: rope scaling     = linear
0.00.216.692 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.693 I llm_load_print_meta: freq_scale_train = 1
0.00.216.693 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.694 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.694 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.694 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.695 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.695 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.695 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.697 I llm_load_print_meta: model type       = 2B
0.00.216.697 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.698 I llm_load_print_meta: model params     = 2.51 B
0.00.216.700 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.700 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.701 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.702 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.702 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.702 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.703 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.703 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.704 I llm_load_print_meta: max token length = 93
0.00.216.727 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.290.006 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.290.013 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.014 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.290.015 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.290.015 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.016 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.295.038 I llama_new_context_with_model: n_ctx      = 8192
0.00.295.044 I llama_new_context_with_model: n_batch    = 2048
0.00.295.045 I llama_new_context_with_model: n_ubatch   = 512
0.00.295.045 I llama_new_context_with_model: flash_attn = 0
0.00.295.047 I llama_new_context_with_model: freq_base  = 10000.0
0.00.295.048 I llama_new_context_with_model: freq_scale = 1
0.00.324.308 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.324.321 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.324.413 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.325.281 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.325.289 I llama_new_context_with_model: graph nodes  = 601
0.00.325.289 I llama_new_context_with_model: graph splits = 1
0.00.325.291 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.386 I main: llama threadpool init, n_threads = 4
0.00.416.397 I 
0.00.416.470 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.416.473 I 
0.00.416.502 I sampler seed: 1380709212
0.00.416.510 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.513 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.416.513 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and other forms of sexual harassment. [end of text]


0.01.206.680 I llama_perf_sampler_print:    sampling time =       1.61 ms /    12 runs   (    0.13 ms per token,  7458.05 tokens per second)
0.01.206.683 I llama_perf_context_print:        load time =     414.54 ms
0.01.206.684 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.206.686 I llama_perf_context_print:        eval time =     783.20 ms /    11 runs   (   71.20 ms per token,    14.04 tokens per second)
0.01.206.688 I llama_perf_context_print:       total time =     790.30 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.531 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.812 I main: load the model and apply lora adapter, if any
0.00.021.663 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.708 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.715 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.720 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.721 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.724 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.724 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.725 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.725 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.726 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.726 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.729 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.730 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.731 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.731 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.732 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.168 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.326 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.190 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.197 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.197 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.198 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.199 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.200 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.200 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.203 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.203 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.204 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.205 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.206 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.209 I llama_model_loader: - type  f32:   37 tensors
0.00.131.212 I llama_model_loader: - type q8_0:  127 tensors
0.00.193.690 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.288 I llm_load_vocab: special tokens cache size = 5
0.00.212.425 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.212.437 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.212.438 I llm_load_print_meta: arch             = gemma
0.00.212.439 I llm_load_print_meta: vocab type       = SPM
0.00.212.440 I llm_load_print_meta: n_vocab          = 256000
0.00.212.440 I llm_load_print_meta: n_merges         = 0
0.00.212.440 I llm_load_print_meta: vocab_only       = 0
0.00.212.441 I llm_load_print_meta: n_ctx_train      = 8192
0.00.212.441 I llm_load_print_meta: n_embd           = 2048
0.00.212.441 I llm_load_print_meta: n_layer          = 18
0.00.212.454 I llm_load_print_meta: n_head           = 8
0.00.212.455 I llm_load_print_meta: n_head_kv        = 1
0.00.212.455 I llm_load_print_meta: n_rot            = 256
0.00.212.455 I llm_load_print_meta: n_swa            = 0
0.00.212.456 I llm_load_print_meta: n_embd_head_k    = 256
0.00.212.456 I llm_load_print_meta: n_embd_head_v    = 256
0.00.212.457 I llm_load_print_meta: n_gqa            = 8
0.00.212.458 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.212.459 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.212.460 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.212.461 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.212.462 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.212.462 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.212.463 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.212.464 I llm_load_print_meta: n_ff             = 16384
0.00.212.464 I llm_load_print_meta: n_expert         = 0
0.00.212.464 I llm_load_print_meta: n_expert_used    = 0
0.00.212.465 I llm_load_print_meta: causal attn      = 1
0.00.212.465 I llm_load_print_meta: pooling type     = 0
0.00.212.465 I llm_load_print_meta: rope type        = 2
0.00.212.466 I llm_load_print_meta: rope scaling     = linear
0.00.212.467 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.212.468 I llm_load_print_meta: freq_scale_train = 1
0.00.212.468 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.212.468 I llm_load_print_meta: rope_finetuned   = unknown
0.00.212.468 I llm_load_print_meta: ssm_d_conv       = 0
0.00.212.469 I llm_load_print_meta: ssm_d_inner      = 0
0.00.212.469 I llm_load_print_meta: ssm_d_state      = 0
0.00.212.469 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.212.470 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.212.470 I llm_load_print_meta: model type       = 2B
0.00.212.471 I llm_load_print_meta: model ftype      = Q8_0
0.00.212.471 I llm_load_print_meta: model params     = 2.51 B
0.00.212.472 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.212.473 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.212.473 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.212.473 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.212.474 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.212.474 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.212.474 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.212.475 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.212.475 I llm_load_print_meta: max token length = 93
0.00.212.493 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.282.764 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.282.771 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.287.620 I llama_new_context_with_model: n_ctx      = 8192
0.00.287.626 I llama_new_context_with_model: n_batch    = 2048
0.00.287.626 I llama_new_context_with_model: n_ubatch   = 512
0.00.287.627 I llama_new_context_with_model: flash_attn = 0
0.00.287.629 I llama_new_context_with_model: freq_base  = 10000.0
0.00.287.630 I llama_new_context_with_model: freq_scale = 1
0.00.316.846 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.316.860 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.316.946 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.317.775 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.317.783 I llama_new_context_with_model: graph nodes  = 601
0.00.317.783 I llama_new_context_with_model: graph splits = 1
0.00.317.785 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.412.972 I main: llama threadpool init, n_threads = 4
0.00.412.984 I 
0.00.413.056 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.413.059 I 
0.00.413.087 I sampler seed: 4255778377
0.00.413.096 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.099 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.413.100 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the 1980s and 1990s.

**Discussion Points:**

* How did the music and lyrics of

0.02.812.748 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6942.98 tokens per second)
0.02.812.750 I llama_perf_context_print:        load time =     411.14 ms
0.02.812.751 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.812.765 I llama_perf_context_print:        eval time =    2381.44 ms /    32 runs   (   74.42 ms per token,    13.44 tokens per second)
0.02.812.766 I llama_perf_context_print:       total time =    2399.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.168s
user	0m25.402s
sys	0m9.483s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3774 (0d2ec438)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32023.79 ms
main:    total time = 32023.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.554 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.001.870 I main: load the model and apply lora adapter, if any
0.00.022.053 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.100 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.112 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.117 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.118 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.122 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.123 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.123 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.124 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.124 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.125 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.128 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.128 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.129 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.130 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.130 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.053.943 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.907 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.784 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.790 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.791 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.792 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.793 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.794 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.795 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.799 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.800 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.801 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.802 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.137.803 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.807 I llama_model_loader: - type  f32:   37 tensors
0.00.137.813 I llama_model_loader: - type q4_K:  108 tensors
0.00.137.813 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.351 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.212.069 I llm_load_vocab: special tokens cache size = 5
0.00.230.353 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.230.367 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.230.367 I llm_load_print_meta: arch             = gemma
0.00.230.368 I llm_load_print_meta: vocab type       = SPM
0.00.230.369 I llm_load_print_meta: n_vocab          = 256000
0.00.230.369 I llm_load_print_meta: n_merges         = 0
0.00.230.369 I llm_load_print_meta: vocab_only       = 0
0.00.230.370 I llm_load_print_meta: n_ctx_train      = 8192
0.00.230.370 I llm_load_print_meta: n_embd           = 2048
0.00.230.370 I llm_load_print_meta: n_layer          = 18
0.00.230.384 I llm_load_print_meta: n_head           = 8
0.00.230.385 I llm_load_print_meta: n_head_kv        = 1
0.00.230.385 I llm_load_print_meta: n_rot            = 256
0.00.230.386 I llm_load_print_meta: n_swa            = 0
0.00.230.386 I llm_load_print_meta: n_embd_head_k    = 256
0.00.230.386 I llm_load_print_meta: n_embd_head_v    = 256
0.00.230.387 I llm_load_print_meta: n_gqa            = 8
0.00.230.388 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.230.389 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.230.390 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.230.391 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.230.391 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.230.392 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.230.392 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.230.393 I llm_load_print_meta: n_ff             = 16384
0.00.230.393 I llm_load_print_meta: n_expert         = 0
0.00.230.394 I llm_load_print_meta: n_expert_used    = 0
0.00.230.394 I llm_load_print_meta: causal attn      = 1
0.00.230.394 I llm_load_print_meta: pooling type     = 0
0.00.230.395 I llm_load_print_meta: rope type        = 2
0.00.230.395 I llm_load_print_meta: rope scaling     = linear
0.00.230.396 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.230.397 I llm_load_print_meta: freq_scale_train = 1
0.00.230.397 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.230.397 I llm_load_print_meta: rope_finetuned   = unknown
0.00.230.397 I llm_load_print_meta: ssm_d_conv       = 0
0.00.230.398 I llm_load_print_meta: ssm_d_inner      = 0
0.00.230.398 I llm_load_print_meta: ssm_d_state      = 0
0.00.230.398 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.230.399 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.230.399 I llm_load_print_meta: model type       = 2B
0.00.230.400 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.230.401 I llm_load_print_meta: model params     = 2.51 B
0.00.230.401 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.230.402 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.230.402 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.230.402 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.230.403 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.230.403 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.230.403 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.230.403 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.230.404 I llm_load_print_meta: max token length = 93
0.00.230.421 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.293.332 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.293.336 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.293.337 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.293.337 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.293.338 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.293.338 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.298.264 I llama_new_context_with_model: n_ctx      = 8192
0.00.298.269 I llama_new_context_with_model: n_batch    = 2048
0.00.298.269 I llama_new_context_with_model: n_ubatch   = 512
0.00.298.270 I llama_new_context_with_model: flash_attn = 0
0.00.298.272 I llama_new_context_with_model: freq_base  = 10000.0
0.00.298.273 I llama_new_context_with_model: freq_scale = 1
0.00.326.994 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.327.008 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.327.095 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.327.972 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.327.978 I llama_new_context_with_model: graph nodes  = 601
0.00.327.979 I llama_new_context_with_model: graph splits = 1
0.00.327.981 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.410.352 I main: llama threadpool init, n_threads = 4
0.00.410.363 I 
0.00.410.437 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.410.440 I 
0.00.410.475 I sampler seed: 1452647323
0.00.410.484 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.410.486 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.410.487 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRE

## SQUARE: A framework for analyzing and addressing data quality issues

**SQARE (Software Quality Assurance and Resolution Environment)** is a

0.02.018.668 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7124.35 tokens per second)
0.02.018.671 I llama_perf_context_print:        load time =     408.46 ms
0.02.018.672 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.018.674 I llama_perf_context_print:        eval time =    1590.95 ms /    32 runs   (   49.72 ms per token,    20.11 tokens per second)
0.02.018.674 I llama_perf_context_print:       total time =    1608.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3774 (0d2ec438)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32083.45 ms
main:    total time = 32083.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.612 I build: 3774 (0d2ec438) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.808 I main: llama backend init
0.00.001.941 I main: load the model and apply lora adapter, if any
0.00.022.357 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.370 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.378 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.379 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.384 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.385 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.385 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.387 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.388 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.389 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.393 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.395 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.396 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.397 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.208 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.866 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.756 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.762 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.763 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.763 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.764 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.765 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.765 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.768 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.769 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.772 I llama_model_loader: - type  f32:   37 tensors
0.00.132.775 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.775 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.981 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.651 I llm_load_vocab: special tokens cache size = 5
0.00.214.816 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.828 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.828 I llm_load_print_meta: arch             = gemma
0.00.214.829 I llm_load_print_meta: vocab type       = SPM
0.00.214.830 I llm_load_print_meta: n_vocab          = 256000
0.00.214.830 I llm_load_print_meta: n_merges         = 0
0.00.214.830 I llm_load_print_meta: vocab_only       = 0
0.00.214.831 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.831 I llm_load_print_meta: n_embd           = 2048
0.00.214.831 I llm_load_print_meta: n_layer          = 18
0.00.214.842 I llm_load_print_meta: n_head           = 8
0.00.214.843 I llm_load_print_meta: n_head_kv        = 1
0.00.214.843 I llm_load_print_meta: n_rot            = 256
0.00.214.844 I llm_load_print_meta: n_swa            = 0
0.00.214.844 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.844 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.845 I llm_load_print_meta: n_gqa            = 8
0.00.214.846 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.847 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.848 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.849 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.849 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.850 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.850 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.851 I llm_load_print_meta: n_ff             = 16384
0.00.214.851 I llm_load_print_meta: n_expert         = 0
0.00.214.851 I llm_load_print_meta: n_expert_used    = 0
0.00.214.852 I llm_load_print_meta: causal attn      = 1
0.00.214.852 I llm_load_print_meta: pooling type     = 0
0.00.214.852 I llm_load_print_meta: rope type        = 2
0.00.214.853 I llm_load_print_meta: rope scaling     = linear
0.00.214.854 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.854 I llm_load_print_meta: freq_scale_train = 1
0.00.214.855 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.855 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.855 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.855 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.856 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.856 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.856 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.857 I llm_load_print_meta: model type       = 2B
0.00.214.857 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.858 I llm_load_print_meta: model params     = 2.51 B
0.00.214.859 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.859 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.860 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.860 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.860 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.861 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.861 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.861 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.862 I llm_load_print_meta: max token length = 93
0.00.214.884 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.354.767 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.359.697 I llama_new_context_with_model: n_ctx      = 8192
0.00.359.704 I llama_new_context_with_model: n_batch    = 2048
0.00.359.704 I llama_new_context_with_model: n_ubatch   = 512
0.00.359.705 I llama_new_context_with_model: flash_attn = 0
0.00.359.707 I llama_new_context_with_model: freq_base  = 10000.0
0.00.359.708 I llama_new_context_with_model: freq_scale = 1
0.00.390.051 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.390.068 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.390.159 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.984 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.390.993 I llama_new_context_with_model: graph nodes  = 601
0.00.390.993 I llama_new_context_with_model: graph splits = 1
0.00.390.995 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.551 I main: llama threadpool init, n_threads = 4
0.00.471.564 I 
0.00.471.640 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.643 I 
0.00.471.672 I sampler seed: 3919792804
0.00.471.681 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.684 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.471.684 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED, a company that specializes in cloud storage and data management, announced today the launch of its innovative data governance platform.

**Key features of SQUA

0.02.049.329 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6876.43 tokens per second)
0.02.049.333 I llama_perf_context_print:        load time =     469.59 ms
0.02.049.335 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.049.336 I llama_perf_context_print:        eval time =    1560.41 ms /    32 runs   (   48.76 ms per token,    20.51 tokens per second)
0.02.049.337 I llama_perf_context_print:       total time =    1577.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.909s
user	8m14.137s
sys	0m6.823s
