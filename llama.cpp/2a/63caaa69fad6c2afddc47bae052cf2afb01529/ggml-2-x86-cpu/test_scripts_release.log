+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 3800 (2a63caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.861 I main: load the model and apply lora adapter, if any
0.00.021.870 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.916 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.927 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.932 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.935 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.939 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.940 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.940 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.941 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.942 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.943 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.947 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.948 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.949 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.949 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.950 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.636 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.847 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.098 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.104 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.105 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.105 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.106 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.107 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.107 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.110 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.111 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.112 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.113 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.114 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.120 I llama_model_loader: - type  f32:   37 tensors
0.00.133.123 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.232 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.919 I llm_load_vocab: special tokens cache size = 5
0.00.216.569 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.582 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.582 I llm_load_print_meta: arch             = gemma
0.00.216.583 I llm_load_print_meta: vocab type       = SPM
0.00.216.583 I llm_load_print_meta: n_vocab          = 256000
0.00.216.584 I llm_load_print_meta: n_merges         = 0
0.00.216.584 I llm_load_print_meta: vocab_only       = 0
0.00.216.584 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.585 I llm_load_print_meta: n_embd           = 2048
0.00.216.585 I llm_load_print_meta: n_layer          = 18
0.00.216.596 I llm_load_print_meta: n_head           = 8
0.00.216.597 I llm_load_print_meta: n_head_kv        = 1
0.00.216.598 I llm_load_print_meta: n_rot            = 256
0.00.216.598 I llm_load_print_meta: n_swa            = 0
0.00.216.599 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.599 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.600 I llm_load_print_meta: n_gqa            = 8
0.00.216.601 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.602 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.603 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.604 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.605 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.605 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.606 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.606 I llm_load_print_meta: n_ff             = 16384
0.00.216.607 I llm_load_print_meta: n_expert         = 0
0.00.216.607 I llm_load_print_meta: n_expert_used    = 0
0.00.216.608 I llm_load_print_meta: causal attn      = 1
0.00.216.608 I llm_load_print_meta: pooling type     = 0
0.00.216.608 I llm_load_print_meta: rope type        = 2
0.00.216.609 I llm_load_print_meta: rope scaling     = linear
0.00.216.610 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.611 I llm_load_print_meta: freq_scale_train = 1
0.00.216.611 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.611 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.612 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.612 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.612 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.612 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.613 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.614 I llm_load_print_meta: model type       = 2B
0.00.216.615 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.615 I llm_load_print_meta: model params     = 2.51 B
0.00.216.616 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.617 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.617 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.617 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.618 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.618 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.618 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.618 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.619 I llm_load_print_meta: max token length = 93
0.00.216.633 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.313.969 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.313.977 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.313.978 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.313.979 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.313.979 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.313.980 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.319.122 I llama_new_context_with_model: n_ctx      = 8192
0.00.319.130 I llama_new_context_with_model: n_batch    = 2048
0.00.319.130 I llama_new_context_with_model: n_ubatch   = 512
0.00.319.131 I llama_new_context_with_model: flash_attn = 0
0.00.319.134 I llama_new_context_with_model: freq_base  = 10000.0
0.00.319.135 I llama_new_context_with_model: freq_scale = 1
0.00.347.883 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.347.898 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.347.993 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.853 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.348.861 I llama_new_context_with_model: graph nodes  = 601
0.00.348.861 I llama_new_context_with_model: graph splits = 1
0.00.348.864 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.674 I main: llama threadpool init, n_threads = 4
0.00.438.685 I 
0.00.438.757 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.760 I 
0.00.438.794 I sampler seed: 2361393225
0.00.438.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.807 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.438.807 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels is a biological clock that regulates various physiological processes including metabolism, growth, and reproduction.

**What are some examples of how increasels can regulate physiological

0.02.672.029 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6942.98 tokens per second)
0.02.672.032 I llama_perf_context_print:        load time =     436.80 ms
0.02.672.033 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.672.034 I llama_perf_context_print:        eval time =    2214.47 ms /    32 runs   (   69.20 ms per token,    14.45 tokens per second)
0.02.672.035 I llama_perf_context_print:       total time =    2233.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.544 I build: 3800 (2a63caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.833 I main: load the model and apply lora adapter, if any
0.00.022.034 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.048 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.055 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.056 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.060 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.061 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.062 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.062 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.063 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.063 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.067 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.068 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.069 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.070 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.070 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.738 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.920 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.777 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.783 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.783 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.784 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.785 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.786 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.786 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.788 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.789 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.790 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.791 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.792 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.795 I llama_model_loader: - type  f32:   37 tensors
0.00.131.798 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.232 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.911 I llm_load_vocab: special tokens cache size = 5
0.00.215.390 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.401 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.402 I llm_load_print_meta: arch             = gemma
0.00.215.402 I llm_load_print_meta: vocab type       = SPM
0.00.215.403 I llm_load_print_meta: n_vocab          = 256000
0.00.215.404 I llm_load_print_meta: n_merges         = 0
0.00.215.405 I llm_load_print_meta: vocab_only       = 0
0.00.215.405 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.405 I llm_load_print_meta: n_embd           = 2048
0.00.215.406 I llm_load_print_meta: n_layer          = 18
0.00.215.418 I llm_load_print_meta: n_head           = 8
0.00.215.418 I llm_load_print_meta: n_head_kv        = 1
0.00.215.419 I llm_load_print_meta: n_rot            = 256
0.00.215.419 I llm_load_print_meta: n_swa            = 0
0.00.215.420 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.420 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.421 I llm_load_print_meta: n_gqa            = 8
0.00.215.422 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.423 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.424 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.425 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.425 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.426 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.427 I llm_load_print_meta: n_ff             = 16384
0.00.215.428 I llm_load_print_meta: n_expert         = 0
0.00.215.428 I llm_load_print_meta: n_expert_used    = 0
0.00.215.428 I llm_load_print_meta: causal attn      = 1
0.00.215.429 I llm_load_print_meta: pooling type     = 0
0.00.215.429 I llm_load_print_meta: rope type        = 2
0.00.215.429 I llm_load_print_meta: rope scaling     = linear
0.00.215.431 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.432 I llm_load_print_meta: freq_scale_train = 1
0.00.215.432 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.432 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.433 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.433 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.433 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.434 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.435 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.435 I llm_load_print_meta: model type       = 2B
0.00.215.436 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.441 I llm_load_print_meta: model params     = 2.51 B
0.00.215.442 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.443 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.444 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.444 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.446 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.447 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.447 I llm_load_print_meta: max token length = 93
0.00.215.464 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.308.093 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.313.226 I llama_new_context_with_model: n_ctx      = 8192
0.00.313.232 I llama_new_context_with_model: n_batch    = 2048
0.00.313.233 I llama_new_context_with_model: n_ubatch   = 512
0.00.313.233 I llama_new_context_with_model: flash_attn = 0
0.00.313.237 I llama_new_context_with_model: freq_base  = 10000.0
0.00.313.237 I llama_new_context_with_model: freq_scale = 1
0.00.343.066 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.080 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.179 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.067 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.075 I llama_new_context_with_model: graph nodes  = 601
0.00.344.075 I llama_new_context_with_model: graph splits = 1
0.00.344.077 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.717 I main: llama threadpool init, n_threads = 4
0.00.431.728 I 
0.00.431.799 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.803 I 
0.00.431.841 I sampler seed: 3103212365
0.00.431.851 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.853 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.854 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.704.141 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8333.33 tokens per second)
0.00.704.144 I llama_perf_context_print:        load time =     429.87 ms
0.00.704.145 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.704.146 I llama_perf_context_print:        eval time =     269.06 ms /     4 runs   (   67.27 ms per token,    14.87 tokens per second)
0.00.704.147 I llama_perf_context_print:       total time =     272.43 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.524 I build: 3800 (2a63caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.001.812 I main: load the model and apply lora adapter, if any
0.00.021.590 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.639 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.653 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.659 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.662 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.667 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.668 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.669 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.669 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.669 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.670 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.675 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.676 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.676 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.677 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.677 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.611 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.592 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.599 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.600 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.600 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.601 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.602 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.602 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.605 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.607 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.608 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.608 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.609 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.613 I llama_model_loader: - type  f32:   37 tensors
0.00.132.617 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.323 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.031 I llm_load_vocab: special tokens cache size = 5
0.00.217.613 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.627 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.627 I llm_load_print_meta: arch             = gemma
0.00.217.628 I llm_load_print_meta: vocab type       = SPM
0.00.217.628 I llm_load_print_meta: n_vocab          = 256000
0.00.217.629 I llm_load_print_meta: n_merges         = 0
0.00.217.629 I llm_load_print_meta: vocab_only       = 0
0.00.217.630 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.630 I llm_load_print_meta: n_embd           = 2048
0.00.217.630 I llm_load_print_meta: n_layer          = 18
0.00.217.643 I llm_load_print_meta: n_head           = 8
0.00.217.644 I llm_load_print_meta: n_head_kv        = 1
0.00.217.645 I llm_load_print_meta: n_rot            = 256
0.00.217.645 I llm_load_print_meta: n_swa            = 0
0.00.217.645 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.646 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.647 I llm_load_print_meta: n_gqa            = 8
0.00.217.648 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.649 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.649 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.651 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.651 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.652 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.653 I llm_load_print_meta: n_ff             = 16384
0.00.217.653 I llm_load_print_meta: n_expert         = 0
0.00.217.654 I llm_load_print_meta: n_expert_used    = 0
0.00.217.654 I llm_load_print_meta: causal attn      = 1
0.00.217.654 I llm_load_print_meta: pooling type     = 0
0.00.217.655 I llm_load_print_meta: rope type        = 2
0.00.217.656 I llm_load_print_meta: rope scaling     = linear
0.00.217.658 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.659 I llm_load_print_meta: freq_scale_train = 1
0.00.217.659 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.660 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.661 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.661 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.661 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.661 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.662 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.662 I llm_load_print_meta: model type       = 2B
0.00.217.663 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.664 I llm_load_print_meta: model params     = 2.51 B
0.00.217.665 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.666 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.667 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.667 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.676 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.677 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.678 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.678 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.679 I llm_load_print_meta: max token length = 93
0.00.217.696 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.392 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.292.399 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.292.400 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.292.400 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.292.401 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.292.402 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.297.555 I llama_new_context_with_model: n_ctx      = 8192
0.00.297.561 I llama_new_context_with_model: n_batch    = 2048
0.00.297.561 I llama_new_context_with_model: n_ubatch   = 512
0.00.297.562 I llama_new_context_with_model: flash_attn = 0
0.00.297.564 I llama_new_context_with_model: freq_base  = 10000.0
0.00.297.565 I llama_new_context_with_model: freq_scale = 1
0.00.326.895 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.326.910 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.327.001 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.327.904 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.327.912 I llama_new_context_with_model: graph nodes  = 601
0.00.327.913 I llama_new_context_with_model: graph splits = 1
0.00.327.915 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.388 I main: llama threadpool init, n_threads = 4
0.00.418.401 I 
0.00.418.513 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.513 I 
0.00.418.549 I sampler seed: 1420514538
0.00.418.567 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.570 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.418.571 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably and the other villagers with laughter and glee.

**Explanation:**
The provided text describes a joyful and festive atmosphere, highlighting the collective joy and excitement

0.02.702.833 I llama_perf_sampler_print:    sampling time =       5.78 ms /    33 runs   (    0.18 ms per token,  5705.39 tokens per second)
0.02.702.836 I llama_perf_context_print:        load time =     416.56 ms
0.02.702.837 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.702.839 I llama_perf_context_print:        eval time =    2265.00 ms /    32 runs   (   70.78 ms per token,    14.13 tokens per second)
0.02.702.839 I llama_perf_context_print:       total time =    2284.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.532 I build: 3800 (2a63caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.887 I main: load the model and apply lora adapter, if any
0.00.021.558 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.611 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.621 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.626 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.635 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.643 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.644 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.645 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.646 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.647 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.648 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.653 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.654 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.655 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.656 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.215 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.980 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.958 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.965 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.965 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.966 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.967 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.968 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.971 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.971 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.972 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.973 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.974 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.978 I llama_model_loader: - type  f32:   37 tensors
0.00.131.981 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.864 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.585 I llm_load_vocab: special tokens cache size = 5
0.00.215.112 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.125 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.126 I llm_load_print_meta: arch             = gemma
0.00.215.126 I llm_load_print_meta: vocab type       = SPM
0.00.215.127 I llm_load_print_meta: n_vocab          = 256000
0.00.215.127 I llm_load_print_meta: n_merges         = 0
0.00.215.128 I llm_load_print_meta: vocab_only       = 0
0.00.215.128 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.128 I llm_load_print_meta: n_embd           = 2048
0.00.215.129 I llm_load_print_meta: n_layer          = 18
0.00.215.140 I llm_load_print_meta: n_head           = 8
0.00.215.141 I llm_load_print_meta: n_head_kv        = 1
0.00.215.141 I llm_load_print_meta: n_rot            = 256
0.00.215.142 I llm_load_print_meta: n_swa            = 0
0.00.215.142 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.142 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.143 I llm_load_print_meta: n_gqa            = 8
0.00.215.144 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.145 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.146 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.148 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.148 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.149 I llm_load_print_meta: n_ff             = 16384
0.00.215.150 I llm_load_print_meta: n_expert         = 0
0.00.215.150 I llm_load_print_meta: n_expert_used    = 0
0.00.215.150 I llm_load_print_meta: causal attn      = 1
0.00.215.151 I llm_load_print_meta: pooling type     = 0
0.00.215.151 I llm_load_print_meta: rope type        = 2
0.00.215.151 I llm_load_print_meta: rope scaling     = linear
0.00.215.153 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.153 I llm_load_print_meta: freq_scale_train = 1
0.00.215.153 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.154 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.154 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.154 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.154 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.155 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.155 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.156 I llm_load_print_meta: model type       = 2B
0.00.215.157 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.157 I llm_load_print_meta: model params     = 2.51 B
0.00.215.158 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.159 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.159 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.159 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.160 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.160 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.160 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.160 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.161 I llm_load_print_meta: max token length = 93
0.00.215.177 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.285.968 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.285.975 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.290.969 I llama_new_context_with_model: n_ctx      = 8192
0.00.290.975 I llama_new_context_with_model: n_batch    = 2048
0.00.290.975 I llama_new_context_with_model: n_ubatch   = 512
0.00.290.976 I llama_new_context_with_model: flash_attn = 0
0.00.290.978 I llama_new_context_with_model: freq_base  = 10000.0
0.00.290.979 I llama_new_context_with_model: freq_scale = 1
0.00.319.905 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.319.921 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.320.012 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.320.868 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.320.876 I llama_new_context_with_model: graph nodes  = 601
0.00.320.877 I llama_new_context_with_model: graph splits = 1
0.00.320.879 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.042 I main: llama threadpool init, n_threads = 4
0.00.416.054 I 
0.00.416.137 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.416.141 I 
0.00.416.176 I sampler seed: 4235916395
0.00.416.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.210 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.416.212 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities

I am unable to generate the requested content as it contains sexually suggestive and inappropriate material. [end of text]


0.02.008.325 I llama_perf_sampler_print:    sampling time =       3.30 ms /    22 runs   (    0.15 ms per token,  6670.71 tokens per second)
0.02.008.328 I llama_perf_context_print:        load time =     414.14 ms
0.02.008.329 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.008.330 I llama_perf_context_print:        eval time =    1579.89 ms /    21 runs   (   75.23 ms per token,    13.29 tokens per second)
0.02.008.331 I llama_perf_context_print:       total time =    1592.29 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.803s
user	0m28.179s
sys	0m9.481s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3800 (2a63caaa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32365.20 ms
main:    total time = 32365.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 3800 (2a63caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.001.828 I main: load the model and apply lora adapter, if any
0.00.022.194 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.242 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.250 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.259 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.263 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.265 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.270 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.271 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.272 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.273 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.046 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.488 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.398 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.404 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.405 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.406 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.407 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.408 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.409 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.412 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.413 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.414 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.415 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.416 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.419 I llama_model_loader: - type  f32:   37 tensors
0.00.132.422 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.423 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.390 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.062 I llm_load_vocab: special tokens cache size = 5
0.00.215.464 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.478 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.478 I llm_load_print_meta: arch             = gemma
0.00.215.479 I llm_load_print_meta: vocab type       = SPM
0.00.215.479 I llm_load_print_meta: n_vocab          = 256000
0.00.215.480 I llm_load_print_meta: n_merges         = 0
0.00.215.480 I llm_load_print_meta: vocab_only       = 0
0.00.215.480 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.481 I llm_load_print_meta: n_embd           = 2048
0.00.215.481 I llm_load_print_meta: n_layer          = 18
0.00.215.493 I llm_load_print_meta: n_head           = 8
0.00.215.494 I llm_load_print_meta: n_head_kv        = 1
0.00.215.494 I llm_load_print_meta: n_rot            = 256
0.00.215.494 I llm_load_print_meta: n_swa            = 0
0.00.215.495 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.495 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.496 I llm_load_print_meta: n_gqa            = 8
0.00.215.497 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.498 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.499 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.500 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.500 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.501 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.501 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.502 I llm_load_print_meta: n_ff             = 16384
0.00.215.503 I llm_load_print_meta: n_expert         = 0
0.00.215.503 I llm_load_print_meta: n_expert_used    = 0
0.00.215.504 I llm_load_print_meta: causal attn      = 1
0.00.215.504 I llm_load_print_meta: pooling type     = 0
0.00.215.504 I llm_load_print_meta: rope type        = 2
0.00.215.505 I llm_load_print_meta: rope scaling     = linear
0.00.215.506 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.507 I llm_load_print_meta: freq_scale_train = 1
0.00.215.507 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.508 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.508 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.509 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.509 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.510 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.511 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.511 I llm_load_print_meta: model type       = 2B
0.00.215.512 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.513 I llm_load_print_meta: model params     = 2.51 B
0.00.215.514 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.515 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.516 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.517 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.517 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.518 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.518 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.519 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.519 I llm_load_print_meta: max token length = 93
0.00.215.551 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.272.760 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.272.767 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.272.768 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.272.769 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.272.769 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.272.770 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.277.847 I llama_new_context_with_model: n_ctx      = 8192
0.00.277.853 I llama_new_context_with_model: n_batch    = 2048
0.00.277.854 I llama_new_context_with_model: n_ubatch   = 512
0.00.277.854 I llama_new_context_with_model: flash_attn = 0
0.00.277.856 I llama_new_context_with_model: freq_base  = 10000.0
0.00.277.857 I llama_new_context_with_model: freq_scale = 1
0.00.306.495 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.306.510 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.306.600 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.307.437 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.307.444 I llama_new_context_with_model: graph nodes  = 601
0.00.307.445 I llama_new_context_with_model: graph splits = 1
0.00.307.447 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.388.519 I main: llama threadpool init, n_threads = 4
0.00.388.531 I 
0.00.388.605 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.388.608 I 
0.00.388.636 I sampler seed: 3963580024
0.00.388.646 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.388.657 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.388.658 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded information and data from the context of the question.

**Question:**

A company is considering investing in a new project. The project is expected to

0.01.986.665 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6622.52 tokens per second)
0.01.986.668 I llama_perf_context_print:        load time =     386.67 ms
0.01.986.669 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.986.670 I llama_perf_context_print:        eval time =    1580.17 ms /    32 runs   (   49.38 ms per token,    20.25 tokens per second)
0.01.986.671 I llama_perf_context_print:       total time =    1598.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3800 (2a63caaa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32010.85 ms
main:    total time = 32010.85 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.545 I build: 3800 (2a63caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.001.843 I main: load the model and apply lora adapter, if any
0.00.021.952 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.970 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.976 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.980 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.983 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.984 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.985 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.985 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.986 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.987 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.990 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.991 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.991 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.992 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.993 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.191 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.713 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.667 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.674 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.675 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.675 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.676 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.677 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.677 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.680 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.681 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.684 I llama_model_loader: - type  f32:   37 tensors
0.00.132.687 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.687 I llama_model_loader: - type q6_K:   19 tensors
0.00.194.456 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.044 I llm_load_vocab: special tokens cache size = 5
0.00.213.306 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.319 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.320 I llm_load_print_meta: arch             = gemma
0.00.213.320 I llm_load_print_meta: vocab type       = SPM
0.00.213.321 I llm_load_print_meta: n_vocab          = 256000
0.00.213.321 I llm_load_print_meta: n_merges         = 0
0.00.213.322 I llm_load_print_meta: vocab_only       = 0
0.00.213.322 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.322 I llm_load_print_meta: n_embd           = 2048
0.00.213.323 I llm_load_print_meta: n_layer          = 18
0.00.213.335 I llm_load_print_meta: n_head           = 8
0.00.213.336 I llm_load_print_meta: n_head_kv        = 1
0.00.213.336 I llm_load_print_meta: n_rot            = 256
0.00.213.337 I llm_load_print_meta: n_swa            = 0
0.00.213.337 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.338 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.339 I llm_load_print_meta: n_gqa            = 8
0.00.213.340 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.342 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.345 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.346 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.346 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.347 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.347 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.348 I llm_load_print_meta: n_ff             = 16384
0.00.213.349 I llm_load_print_meta: n_expert         = 0
0.00.213.351 I llm_load_print_meta: n_expert_used    = 0
0.00.213.352 I llm_load_print_meta: causal attn      = 1
0.00.213.352 I llm_load_print_meta: pooling type     = 0
0.00.213.352 I llm_load_print_meta: rope type        = 2
0.00.213.352 I llm_load_print_meta: rope scaling     = linear
0.00.213.355 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.367 I llm_load_print_meta: freq_scale_train = 1
0.00.213.368 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.373 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.373 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.374 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.374 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.375 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.375 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.376 I llm_load_print_meta: model type       = 2B
0.00.213.377 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.213.378 I llm_load_print_meta: model params     = 2.51 B
0.00.213.379 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.213.379 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.380 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.380 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.381 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.381 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.382 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.382 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.382 I llm_load_print_meta: max token length = 93
0.00.213.398 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.270.725 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.275.783 I llama_new_context_with_model: n_ctx      = 8192
0.00.275.789 I llama_new_context_with_model: n_batch    = 2048
0.00.275.789 I llama_new_context_with_model: n_ubatch   = 512
0.00.275.790 I llama_new_context_with_model: flash_attn = 0
0.00.275.792 I llama_new_context_with_model: freq_base  = 10000.0
0.00.275.793 I llama_new_context_with_model: freq_scale = 1
0.00.304.782 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.304.798 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.304.890 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.305.730 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.305.736 I llama_new_context_with_model: graph nodes  = 601
0.00.305.737 I llama_new_context_with_model: graph splits = 1
0.00.305.739 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.386.588 I main: llama threadpool init, n_threads = 4
0.00.386.599 I 
0.00.386.674 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.386.677 I 
0.00.386.714 I sampler seed: 3284793576
0.00.386.723 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.386.726 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.386.726 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 fufilling my dreams!

This is a song that captures the essence of my childhood and the joy I felt when I was young. It's a reminder

0.01.978.804 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6760.91 tokens per second)
0.01.978.806 I llama_perf_context_print:        load time =     384.73 ms
0.01.978.807 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.978.808 I llama_perf_context_print:        eval time =    1574.23 ms /    32 runs   (   49.19 ms per token,    20.33 tokens per second)
0.01.978.809 I llama_perf_context_print:       total time =    1592.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.568s
user	8m14.146s
sys	0m6.954s
