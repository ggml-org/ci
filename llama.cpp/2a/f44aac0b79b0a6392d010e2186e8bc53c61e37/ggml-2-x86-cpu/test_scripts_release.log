+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 4227 (2af44aac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.728 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.737 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.745 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.750 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.751 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.755 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.756 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.756 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.757 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.758 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.759 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.763 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.764 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.764 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.765 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.766 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.315 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.962 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.819 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.826 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.826 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.827 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.828 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.829 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.830 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.832 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.832 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.834 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.835 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.836 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.840 I llama_model_loader: - type  f32:   37 tensors
0.00.130.841 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.276 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.632 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.188 I llm_load_vocab: special tokens cache size = 5
0.00.282.292 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.310 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.311 I llm_load_print_meta: arch             = gemma
0.00.282.312 I llm_load_print_meta: vocab type       = SPM
0.00.282.312 I llm_load_print_meta: n_vocab          = 256000
0.00.282.313 I llm_load_print_meta: n_merges         = 0
0.00.282.313 I llm_load_print_meta: vocab_only       = 0
0.00.282.313 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.314 I llm_load_print_meta: n_embd           = 2048
0.00.282.314 I llm_load_print_meta: n_layer          = 18
0.00.282.325 I llm_load_print_meta: n_head           = 8
0.00.282.326 I llm_load_print_meta: n_head_kv        = 1
0.00.282.327 I llm_load_print_meta: n_rot            = 256
0.00.282.327 I llm_load_print_meta: n_swa            = 0
0.00.282.327 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.328 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.329 I llm_load_print_meta: n_gqa            = 8
0.00.282.329 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.330 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.331 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.333 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.333 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.333 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.334 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.335 I llm_load_print_meta: n_ff             = 16384
0.00.282.335 I llm_load_print_meta: n_expert         = 0
0.00.282.336 I llm_load_print_meta: n_expert_used    = 0
0.00.282.336 I llm_load_print_meta: causal attn      = 1
0.00.282.336 I llm_load_print_meta: pooling type     = 0
0.00.282.337 I llm_load_print_meta: rope type        = 2
0.00.282.337 I llm_load_print_meta: rope scaling     = linear
0.00.282.338 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.339 I llm_load_print_meta: freq_scale_train = 1
0.00.282.339 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.340 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.340 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.340 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.340 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.341 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.341 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.341 I llm_load_print_meta: model type       = 2B
0.00.282.342 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.343 I llm_load_print_meta: model params     = 2.51 B
0.00.282.344 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.344 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.345 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.345 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.345 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.346 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.346 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.346 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.347 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.347 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.348 I llm_load_print_meta: max token length = 93
0.00.383.070 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.383.078 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.383.079 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.383.079 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.383.080 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.383.080 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.388.371 I llama_new_context_with_model: n_seq_max     = 1
0.00.388.378 I llama_new_context_with_model: n_ctx         = 4096
0.00.388.378 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.388.379 I llama_new_context_with_model: n_batch       = 2048
0.00.388.380 I llama_new_context_with_model: n_ubatch      = 512
0.00.388.380 I llama_new_context_with_model: flash_attn    = 0
0.00.388.382 I llama_new_context_with_model: freq_base     = 10000.0
0.00.388.383 I llama_new_context_with_model: freq_scale    = 1
0.00.388.384 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.707 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.721 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.812 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.083 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.091 I llama_new_context_with_model: graph nodes  = 601
0.00.404.091 I llama_new_context_with_model: graph splits = 1
0.00.404.093 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.063 I main: llama threadpool init, n_threads = 4
0.00.489.078 I 
0.00.489.151 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.489.154 I 
0.00.489.202 I sampler seed: 2675089529
0.00.489.213 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.225 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.228 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.229 I 
 increasements, but the narrator avoids repetition and maintains a distinct narrative flow. [end of text]


0.01.606.592 I llama_perf_sampler_print:    sampling time =       2.39 ms /    17 runs   (    0.14 ms per token,  7121.91 tokens per second)
0.01.606.595 I llama_perf_context_print:        load time =     488.28 ms
0.01.606.597 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.606.599 I llama_perf_context_print:        eval time =    1107.81 ms /    16 runs   (   69.24 ms per token,    14.44 tokens per second)
0.01.606.600 I llama_perf_context_print:       total time =    1117.54 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.545 I build: 4227 (2af44aac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.182 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.193 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.204 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.208 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.212 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.212 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.214 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.214 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.215 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.215 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.220 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.221 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.481 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.284 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.103 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.110 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.111 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.112 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.113 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.113 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.116 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.116 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.118 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.119 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.120 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.124 I llama_model_loader: - type  f32:   37 tensors
0.00.130.125 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.247 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.067 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.631 I llm_load_vocab: special tokens cache size = 5
0.00.263.863 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.879 I llm_load_print_meta: arch             = gemma
0.00.263.880 I llm_load_print_meta: vocab type       = SPM
0.00.263.880 I llm_load_print_meta: n_vocab          = 256000
0.00.263.881 I llm_load_print_meta: n_merges         = 0
0.00.263.881 I llm_load_print_meta: vocab_only       = 0
0.00.263.881 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.882 I llm_load_print_meta: n_embd           = 2048
0.00.263.882 I llm_load_print_meta: n_layer          = 18
0.00.263.893 I llm_load_print_meta: n_head           = 8
0.00.263.894 I llm_load_print_meta: n_head_kv        = 1
0.00.263.895 I llm_load_print_meta: n_rot            = 256
0.00.263.895 I llm_load_print_meta: n_swa            = 0
0.00.263.895 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.895 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.896 I llm_load_print_meta: n_gqa            = 8
0.00.263.897 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.898 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.899 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.900 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.901 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.901 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.901 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.902 I llm_load_print_meta: n_ff             = 16384
0.00.263.903 I llm_load_print_meta: n_expert         = 0
0.00.263.903 I llm_load_print_meta: n_expert_used    = 0
0.00.263.903 I llm_load_print_meta: causal attn      = 1
0.00.263.904 I llm_load_print_meta: pooling type     = 0
0.00.263.904 I llm_load_print_meta: rope type        = 2
0.00.263.904 I llm_load_print_meta: rope scaling     = linear
0.00.263.905 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.906 I llm_load_print_meta: freq_scale_train = 1
0.00.263.906 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.906 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.907 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.907 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.907 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.907 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.908 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.908 I llm_load_print_meta: model type       = 2B
0.00.263.909 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.909 I llm_load_print_meta: model params     = 2.51 B
0.00.263.910 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.910 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.911 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.911 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.912 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.912 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.912 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.912 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.913 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.913 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.914 I llm_load_print_meta: max token length = 93
0.00.360.275 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.498 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.504 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.504 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.505 I llama_new_context_with_model: n_batch       = 2048
0.00.365.505 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.506 I llama_new_context_with_model: flash_attn    = 0
0.00.365.508 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.509 I llama_new_context_with_model: freq_scale    = 1
0.00.365.510 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.215 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.229 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.322 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.590 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.596 I llama_new_context_with_model: graph nodes  = 601
0.00.381.596 I llama_new_context_with_model: graph splits = 1
0.00.381.598 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.206 I main: llama threadpool init, n_threads = 4
0.00.464.222 I 
0.00.464.294 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.297 I 
0.00.464.338 I sampler seed: 2297820639
0.00.464.349 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.360 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.364 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.364 I 
 increasities

**Assistant**

I am unable to access or provide information related to sexually explicit or inappropriate content. My purpose is to assist with tasks and questions

0.02.641.435 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6610.58 tokens per second)
0.02.641.438 I llama_perf_context_print:        load time =     463.44 ms
0.02.641.439 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.641.440 I llama_perf_context_print:        eval time =    2157.92 ms /    32 runs   (   67.43 ms per token,    14.83 tokens per second)
0.02.641.442 I llama_perf_context_print:       total time =    2177.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.565 I build: 4227 (2af44aac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.020.785 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.796 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.803 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.812 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.813 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.818 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.821 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.822 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.822 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.823 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.823 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.828 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.828 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.829 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.831 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.831 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.212 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.762 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.609 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.616 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.617 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.618 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.618 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.620 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.620 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.623 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.624 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.625 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.625 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.626 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.630 I llama_model_loader: - type  f32:   37 tensors
0.00.130.631 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.605 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.589 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.188 I llm_load_vocab: special tokens cache size = 5
0.00.269.533 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.547 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.548 I llm_load_print_meta: arch             = gemma
0.00.269.549 I llm_load_print_meta: vocab type       = SPM
0.00.269.549 I llm_load_print_meta: n_vocab          = 256000
0.00.269.550 I llm_load_print_meta: n_merges         = 0
0.00.269.550 I llm_load_print_meta: vocab_only       = 0
0.00.269.550 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.551 I llm_load_print_meta: n_embd           = 2048
0.00.269.551 I llm_load_print_meta: n_layer          = 18
0.00.269.562 I llm_load_print_meta: n_head           = 8
0.00.269.563 I llm_load_print_meta: n_head_kv        = 1
0.00.269.563 I llm_load_print_meta: n_rot            = 256
0.00.269.563 I llm_load_print_meta: n_swa            = 0
0.00.269.563 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.564 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.565 I llm_load_print_meta: n_gqa            = 8
0.00.269.565 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.566 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.567 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.568 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.569 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.569 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.570 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.570 I llm_load_print_meta: n_ff             = 16384
0.00.269.571 I llm_load_print_meta: n_expert         = 0
0.00.269.571 I llm_load_print_meta: n_expert_used    = 0
0.00.269.572 I llm_load_print_meta: causal attn      = 1
0.00.269.572 I llm_load_print_meta: pooling type     = 0
0.00.269.572 I llm_load_print_meta: rope type        = 2
0.00.269.573 I llm_load_print_meta: rope scaling     = linear
0.00.269.574 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.574 I llm_load_print_meta: freq_scale_train = 1
0.00.269.575 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.575 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.576 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.576 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.576 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.576 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.577 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.577 I llm_load_print_meta: model type       = 2B
0.00.269.578 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.579 I llm_load_print_meta: model params     = 2.51 B
0.00.269.579 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.580 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.580 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.580 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.581 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.581 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.581 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.581 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.582 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.582 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.583 I llm_load_print_meta: max token length = 93
0.00.344.019 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.344.026 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.027 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.344.027 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.344.028 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.029 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.349.215 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.221 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.222 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.222 I llama_new_context_with_model: n_batch       = 2048
0.00.349.223 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.223 I llama_new_context_with_model: flash_attn    = 0
0.00.349.226 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.227 I llama_new_context_with_model: freq_scale    = 1
0.00.349.228 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.565 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.580 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.672 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.982 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.986 I llama_new_context_with_model: graph nodes  = 601
0.00.364.986 I llama_new_context_with_model: graph splits = 1
0.00.364.989 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.442 I main: llama threadpool init, n_threads = 4
0.00.450.458 I 
0.00.450.527 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.450.532 I 
0.00.450.574 I sampler seed: 2950648482
0.00.450.585 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.587 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.588 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.588 I 
 increably in the past year.

It's time to embrace the future and redefine what it means to be innovative.

**What does it mean to

0.02.747.569 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6883.60 tokens per second)
0.02.747.572 I llama_perf_context_print:        load time =     449.67 ms
0.02.747.574 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.747.576 I llama_perf_context_print:        eval time =    2277.77 ms /    32 runs   (   71.18 ms per token,    14.05 tokens per second)
0.02.747.577 I llama_perf_context_print:       total time =    2297.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.565 I build: 4227 (2af44aac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.774 I main: load the model and apply lora adapter, if any
0.00.021.616 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.628 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.636 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.642 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.643 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.647 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.647 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.648 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.649 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.649 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.651 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.656 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.657 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.658 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.658 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.659 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.628 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.772 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.608 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.614 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.615 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.616 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.616 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.617 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.618 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.620 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.622 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.623 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.623 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.624 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.628 I llama_model_loader: - type  f32:   37 tensors
0.00.131.629 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.218 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.726 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.219 I llm_load_vocab: special tokens cache size = 5
0.00.262.051 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.066 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.067 I llm_load_print_meta: arch             = gemma
0.00.262.068 I llm_load_print_meta: vocab type       = SPM
0.00.262.068 I llm_load_print_meta: n_vocab          = 256000
0.00.262.069 I llm_load_print_meta: n_merges         = 0
0.00.262.069 I llm_load_print_meta: vocab_only       = 0
0.00.262.069 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.070 I llm_load_print_meta: n_embd           = 2048
0.00.262.070 I llm_load_print_meta: n_layer          = 18
0.00.262.082 I llm_load_print_meta: n_head           = 8
0.00.262.083 I llm_load_print_meta: n_head_kv        = 1
0.00.262.084 I llm_load_print_meta: n_rot            = 256
0.00.262.084 I llm_load_print_meta: n_swa            = 0
0.00.262.084 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.085 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.085 I llm_load_print_meta: n_gqa            = 8
0.00.262.086 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.087 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.088 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.090 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.090 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.091 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.091 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.092 I llm_load_print_meta: n_ff             = 16384
0.00.262.092 I llm_load_print_meta: n_expert         = 0
0.00.262.093 I llm_load_print_meta: n_expert_used    = 0
0.00.262.093 I llm_load_print_meta: causal attn      = 1
0.00.262.093 I llm_load_print_meta: pooling type     = 0
0.00.262.093 I llm_load_print_meta: rope type        = 2
0.00.262.094 I llm_load_print_meta: rope scaling     = linear
0.00.262.095 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.096 I llm_load_print_meta: freq_scale_train = 1
0.00.262.096 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.097 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.097 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.097 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.097 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.098 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.098 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.098 I llm_load_print_meta: model type       = 2B
0.00.262.099 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.100 I llm_load_print_meta: model params     = 2.51 B
0.00.262.101 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.101 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.101 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.102 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.102 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.102 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.103 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.103 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.103 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.104 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.104 I llm_load_print_meta: max token length = 93
0.00.333.857 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.333.864 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.339.028 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.033 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.034 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.034 I llama_new_context_with_model: n_batch       = 2048
0.00.339.034 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.035 I llama_new_context_with_model: flash_attn    = 0
0.00.339.036 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.037 I llama_new_context_with_model: freq_scale    = 1
0.00.339.038 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.283 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.297 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.387 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.627 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.630 I llama_new_context_with_model: graph nodes  = 601
0.00.354.631 I llama_new_context_with_model: graph splits = 1
0.00.354.632 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.909 I main: llama threadpool init, n_threads = 4
0.00.442.926 I 
0.00.442.999 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.443.003 I 
0.00.443.044 I sampler seed: 1328939459
0.00.443.056 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.063 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.066 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.066 I 
 increasities by providing a comprehensive guide.

## **Comprehensive Guide to Sexual Assault Recovery**

**I. Understanding the Process**

* **Stages of Recovery

0.02.856.827 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6027.40 tokens per second)
0.02.856.830 I llama_perf_context_print:        load time =     442.12 ms
0.02.856.832 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.856.834 I llama_perf_context_print:        eval time =    2393.33 ms /    32 runs   (   74.79 ms per token,    13.37 tokens per second)
0.02.856.836 I llama_perf_context_print:       total time =    2413.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.317s
user	0m34.879s
sys	0m9.338s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4227 (2af44aac)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40198.71 ms
main:    total time = 40198.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.179 I build: 4227 (2af44aac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.394 I main: llama backend init
0.00.000.401 I main: load the model and apply lora adapter, if any
0.00.020.792 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.802 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.811 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.819 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.822 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.826 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.827 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.828 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.828 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.829 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.829 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.833 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.834 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.835 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.836 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.836 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.208 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.918 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.784 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.791 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.791 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.792 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.793 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.793 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.794 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.797 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.798 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.799 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.800 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.801 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.804 I llama_model_loader: - type  f32:   37 tensors
0.00.130.806 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.807 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.647 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.609 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.182 I llm_load_vocab: special tokens cache size = 5
0.00.266.298 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.316 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.316 I llm_load_print_meta: arch             = gemma
0.00.266.317 I llm_load_print_meta: vocab type       = SPM
0.00.266.317 I llm_load_print_meta: n_vocab          = 256000
0.00.266.318 I llm_load_print_meta: n_merges         = 0
0.00.266.318 I llm_load_print_meta: vocab_only       = 0
0.00.266.318 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.319 I llm_load_print_meta: n_embd           = 2048
0.00.266.319 I llm_load_print_meta: n_layer          = 18
0.00.266.331 I llm_load_print_meta: n_head           = 8
0.00.266.332 I llm_load_print_meta: n_head_kv        = 1
0.00.266.332 I llm_load_print_meta: n_rot            = 256
0.00.266.332 I llm_load_print_meta: n_swa            = 0
0.00.266.333 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.333 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.334 I llm_load_print_meta: n_gqa            = 8
0.00.266.335 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.336 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.337 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.339 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.339 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.340 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.340 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.341 I llm_load_print_meta: n_ff             = 16384
0.00.266.342 I llm_load_print_meta: n_expert         = 0
0.00.266.342 I llm_load_print_meta: n_expert_used    = 0
0.00.266.342 I llm_load_print_meta: causal attn      = 1
0.00.266.343 I llm_load_print_meta: pooling type     = 0
0.00.266.343 I llm_load_print_meta: rope type        = 2
0.00.266.344 I llm_load_print_meta: rope scaling     = linear
0.00.266.345 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.345 I llm_load_print_meta: freq_scale_train = 1
0.00.266.346 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.347 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.347 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.347 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.347 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.348 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.348 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.349 I llm_load_print_meta: model type       = 2B
0.00.266.349 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.350 I llm_load_print_meta: model params     = 2.51 B
0.00.266.351 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.351 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.352 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.352 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.353 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.353 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.353 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.354 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.354 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.355 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.355 I llm_load_print_meta: max token length = 93
0.00.326.677 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.684 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.685 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.685 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.686 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.686 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.744 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.750 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.750 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.751 I llama_new_context_with_model: n_batch       = 2048
0.00.331.751 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.752 I llama_new_context_with_model: flash_attn    = 0
0.00.331.754 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.755 I llama_new_context_with_model: freq_scale    = 1
0.00.331.756 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.060 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.074 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.165 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.426 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.433 I llama_new_context_with_model: graph nodes  = 601
0.00.347.433 I llama_new_context_with_model: graph splits = 1
0.00.347.435 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.642 I main: llama threadpool init, n_threads = 4
0.00.422.657 I 
0.00.422.729 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.422.732 I 
0.00.422.776 I sampler seed: 1159549474
0.00.422.787 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.799 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.803 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.803 I 
 maneupherously, wielding words as weapons.

The room erupted in chaos. The knights, clad in shining armor, parried and parried, their blades

0.02.015.466 I llama_perf_sampler_print:    sampling time =       5.44 ms /    33 runs   (    0.16 ms per token,  6061.72 tokens per second)
0.02.015.468 I llama_perf_context_print:        load time =     422.22 ms
0.02.015.469 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.015.470 I llama_perf_context_print:        eval time =    1573.39 ms /    32 runs   (   49.17 ms per token,    20.34 tokens per second)
0.02.015.471 I llama_perf_context_print:       total time =    1592.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4227 (2af44aac)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40167.79 ms
main:    total time = 40167.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.531 I build: 4227 (2af44aac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.021.235 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.249 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.258 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.261 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.262 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.263 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.263 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.264 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.264 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.268 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.269 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.269 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.270 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.271 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.480 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.514 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.456 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.463 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.464 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.464 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.465 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.465 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.466 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.468 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.469 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.473 I llama_model_loader: - type  f32:   37 tensors
0.00.130.474 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.475 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.173 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.002 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.583 I llm_load_vocab: special tokens cache size = 5
0.00.266.556 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.572 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.572 I llm_load_print_meta: arch             = gemma
0.00.266.573 I llm_load_print_meta: vocab type       = SPM
0.00.266.573 I llm_load_print_meta: n_vocab          = 256000
0.00.266.574 I llm_load_print_meta: n_merges         = 0
0.00.266.574 I llm_load_print_meta: vocab_only       = 0
0.00.266.574 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.575 I llm_load_print_meta: n_embd           = 2048
0.00.266.575 I llm_load_print_meta: n_layer          = 18
0.00.266.586 I llm_load_print_meta: n_head           = 8
0.00.266.587 I llm_load_print_meta: n_head_kv        = 1
0.00.266.588 I llm_load_print_meta: n_rot            = 256
0.00.266.588 I llm_load_print_meta: n_swa            = 0
0.00.266.588 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.589 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.590 I llm_load_print_meta: n_gqa            = 8
0.00.266.591 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.592 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.592 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.594 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.594 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.594 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.595 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.596 I llm_load_print_meta: n_ff             = 16384
0.00.266.596 I llm_load_print_meta: n_expert         = 0
0.00.266.596 I llm_load_print_meta: n_expert_used    = 0
0.00.266.597 I llm_load_print_meta: causal attn      = 1
0.00.266.597 I llm_load_print_meta: pooling type     = 0
0.00.266.597 I llm_load_print_meta: rope type        = 2
0.00.266.598 I llm_load_print_meta: rope scaling     = linear
0.00.266.599 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.599 I llm_load_print_meta: freq_scale_train = 1
0.00.266.600 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.600 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.600 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.601 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.601 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.601 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.602 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.602 I llm_load_print_meta: model type       = 2B
0.00.266.603 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.604 I llm_load_print_meta: model params     = 2.51 B
0.00.266.604 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.605 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.605 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.605 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.606 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.606 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.606 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.607 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.607 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.607 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.608 I llm_load_print_meta: max token length = 93
0.00.322.979 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.052 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.058 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.058 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.058 I llama_new_context_with_model: n_batch       = 2048
0.00.328.059 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.059 I llama_new_context_with_model: flash_attn    = 0
0.00.328.061 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.062 I llama_new_context_with_model: freq_scale    = 1
0.00.328.063 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.661 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.675 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.766 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.978 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.984 I llama_new_context_with_model: graph nodes  = 601
0.00.343.984 I llama_new_context_with_model: graph splits = 1
0.00.343.986 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.309 I main: llama threadpool init, n_threads = 4
0.00.418.327 I 
0.00.418.407 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.418.410 I 
0.00.418.455 I sampler seed: 1564513364
0.00.418.468 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.476 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.480 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.480 I 
 increasities in the comments section of the article. [end of text]


0.00.956.672 I llama_perf_sampler_print:    sampling time =       1.73 ms /    12 runs   (    0.14 ms per token,  6928.41 tokens per second)
0.00.956.675 I llama_perf_context_print:        load time =     417.55 ms
0.00.956.677 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.956.679 I llama_perf_context_print:        eval time =     531.05 ms /    11 runs   (   48.28 ms per token,    20.71 tokens per second)
0.00.956.679 I llama_perf_context_print:       total time =     538.37 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.112s
user	10m20.091s
sys	0m6.796s
