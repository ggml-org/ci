+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.169 I build: 4364 (2a5510ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.370 I main: llama backend init
0.00.000.376 I main: load the model and apply lora adapter, if any
0.00.021.789 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.800 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.808 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.812 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.813 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.817 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.818 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.818 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.820 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.820 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.821 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.825 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.826 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.826 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.827 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.828 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.337 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.004 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.948 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.955 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.956 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.957 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.957 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.958 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.959 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.961 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.962 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.963 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.964 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.969 I llama_model_loader: - type  f32:   37 tensors
0.00.131.970 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.728 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.750 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.317 I llm_load_vocab: special tokens cache size = 5
0.00.264.409 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.424 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.424 I llm_load_print_meta: arch             = gemma
0.00.264.425 I llm_load_print_meta: vocab type       = SPM
0.00.264.426 I llm_load_print_meta: n_vocab          = 256000
0.00.264.426 I llm_load_print_meta: n_merges         = 0
0.00.264.426 I llm_load_print_meta: vocab_only       = 0
0.00.264.427 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.427 I llm_load_print_meta: n_embd           = 2048
0.00.264.427 I llm_load_print_meta: n_layer          = 18
0.00.264.438 I llm_load_print_meta: n_head           = 8
0.00.264.439 I llm_load_print_meta: n_head_kv        = 1
0.00.264.440 I llm_load_print_meta: n_rot            = 256
0.00.264.440 I llm_load_print_meta: n_swa            = 0
0.00.264.440 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.441 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.441 I llm_load_print_meta: n_gqa            = 8
0.00.264.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.443 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.444 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.445 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.446 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.446 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.447 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.448 I llm_load_print_meta: n_ff             = 16384
0.00.264.448 I llm_load_print_meta: n_expert         = 0
0.00.264.448 I llm_load_print_meta: n_expert_used    = 0
0.00.264.448 I llm_load_print_meta: causal attn      = 1
0.00.264.449 I llm_load_print_meta: pooling type     = 0
0.00.264.449 I llm_load_print_meta: rope type        = 2
0.00.264.449 I llm_load_print_meta: rope scaling     = linear
0.00.264.451 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.451 I llm_load_print_meta: freq_scale_train = 1
0.00.264.452 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.452 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.452 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.453 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.453 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.453 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.453 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.454 I llm_load_print_meta: model type       = 2B
0.00.264.454 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.455 I llm_load_print_meta: model params     = 2.51 B
0.00.264.456 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.456 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.457 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.457 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.457 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.457 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.458 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.458 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.458 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.459 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.459 I llm_load_print_meta: max token length = 93
0.00.364.455 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.462 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.462 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.463 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.464 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.464 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.620 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.626 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.627 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.627 I llama_new_context_with_model: n_batch       = 2048
0.00.369.628 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.628 I llama_new_context_with_model: flash_attn    = 0
0.00.369.630 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.631 I llama_new_context_with_model: freq_scale    = 1
0.00.369.633 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.848 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.861 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.959 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.285 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.292 I llama_new_context_with_model: graph nodes  = 601
0.00.385.292 I llama_new_context_with_model: graph splits = 1
0.00.385.295 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.295 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.189 I main: llama threadpool init, n_threads = 4
0.00.473.206 I 
0.00.473.283 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.286 I 
0.00.473.333 I sampler seed: 3489330010
0.00.473.344 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.346 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.347 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.347 I 
 increasements of the Earth's crust and mantle.

**a) Describe the geological processes involved in the formation of these increasements.**

**b)

0.02.719.440 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6401.55 tokens per second)
0.02.719.442 I llama_perf_context_print:        load time =     472.80 ms
0.02.719.443 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.719.445 I llama_perf_context_print:        eval time =    2226.84 ms /    32 runs   (   69.59 ms per token,    14.37 tokens per second)
0.02.719.445 I llama_perf_context_print:       total time =    2246.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.532 I build: 4364 (2a5510ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.020.740 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.756 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.766 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.770 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.774 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.775 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.775 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.776 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.776 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.777 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.781 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.782 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.783 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.783 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.784 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.113 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.600 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.531 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.537 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.537 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.538 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.539 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.539 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.540 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.542 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.543 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.543 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.544 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.545 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.548 I llama_model_loader: - type  f32:   37 tensors
0.00.130.549 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.638 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.884 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.461 I llm_load_vocab: special tokens cache size = 5
0.00.262.760 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.775 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.775 I llm_load_print_meta: arch             = gemma
0.00.262.776 I llm_load_print_meta: vocab type       = SPM
0.00.262.777 I llm_load_print_meta: n_vocab          = 256000
0.00.262.777 I llm_load_print_meta: n_merges         = 0
0.00.262.778 I llm_load_print_meta: vocab_only       = 0
0.00.262.778 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.779 I llm_load_print_meta: n_embd           = 2048
0.00.262.779 I llm_load_print_meta: n_layer          = 18
0.00.262.790 I llm_load_print_meta: n_head           = 8
0.00.262.791 I llm_load_print_meta: n_head_kv        = 1
0.00.262.791 I llm_load_print_meta: n_rot            = 256
0.00.262.792 I llm_load_print_meta: n_swa            = 0
0.00.262.792 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.792 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.793 I llm_load_print_meta: n_gqa            = 8
0.00.262.794 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.795 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.795 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.797 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.797 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.798 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.798 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.799 I llm_load_print_meta: n_ff             = 16384
0.00.262.799 I llm_load_print_meta: n_expert         = 0
0.00.262.800 I llm_load_print_meta: n_expert_used    = 0
0.00.262.800 I llm_load_print_meta: causal attn      = 1
0.00.262.800 I llm_load_print_meta: pooling type     = 0
0.00.262.800 I llm_load_print_meta: rope type        = 2
0.00.262.801 I llm_load_print_meta: rope scaling     = linear
0.00.262.802 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.802 I llm_load_print_meta: freq_scale_train = 1
0.00.262.803 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.803 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.803 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.804 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.804 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.805 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.805 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.805 I llm_load_print_meta: model type       = 2B
0.00.262.806 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.807 I llm_load_print_meta: model params     = 2.51 B
0.00.262.807 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.808 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.808 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.809 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.809 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.809 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.810 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.810 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.811 I llm_load_print_meta: max token length = 93
0.00.358.795 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.844 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.850 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.851 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.851 I llama_new_context_with_model: n_batch       = 2048
0.00.363.851 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.852 I llama_new_context_with_model: flash_attn    = 0
0.00.363.854 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.855 I llama_new_context_with_model: freq_scale    = 1
0.00.363.856 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.398 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.412 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.520 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.805 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.811 I llama_new_context_with_model: graph nodes  = 601
0.00.379.812 I llama_new_context_with_model: graph splits = 1
0.00.379.814 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.379.814 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.769 I main: llama threadpool init, n_threads = 4
0.00.461.785 I 
0.00.461.858 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.861 I 
0.00.461.900 I sampler seed: 3327100398
0.00.461.911 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.922 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.926 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.926 I 
 increasities with the knowledge and skills required to provide a comprehensive and professional accounting service.

**Responsibilities:**

* Provide accounting services to small businesses, including financial

0.02.635.656 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6913.89 tokens per second)
0.02.635.659 I llama_perf_context_print:        load time =     461.01 ms
0.02.635.661 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.635.662 I llama_perf_context_print:        eval time =    2155.57 ms /    32 runs   (   67.36 ms per token,    14.85 tokens per second)
0.02.635.663 I llama_perf_context_print:       total time =    2173.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.200 I build: 4364 (2a5510ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.416 I main: llama backend init
0.00.000.423 I main: load the model and apply lora adapter, if any
0.00.020.919 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.931 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.942 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.954 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.954 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.955 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.956 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.956 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.957 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.962 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.963 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.964 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.965 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.966 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.182 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.466 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.433 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.439 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.440 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.441 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.442 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.443 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.443 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.446 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.447 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.448 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.448 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.449 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.453 I llama_model_loader: - type  f32:   37 tensors
0.00.132.454 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.331 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.937 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.438 I llm_load_vocab: special tokens cache size = 5
0.00.265.599 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.615 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.616 I llm_load_print_meta: arch             = gemma
0.00.265.616 I llm_load_print_meta: vocab type       = SPM
0.00.265.617 I llm_load_print_meta: n_vocab          = 256000
0.00.265.617 I llm_load_print_meta: n_merges         = 0
0.00.265.617 I llm_load_print_meta: vocab_only       = 0
0.00.265.618 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.618 I llm_load_print_meta: n_embd           = 2048
0.00.265.619 I llm_load_print_meta: n_layer          = 18
0.00.265.629 I llm_load_print_meta: n_head           = 8
0.00.265.630 I llm_load_print_meta: n_head_kv        = 1
0.00.265.631 I llm_load_print_meta: n_rot            = 256
0.00.265.631 I llm_load_print_meta: n_swa            = 0
0.00.265.631 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.631 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.632 I llm_load_print_meta: n_gqa            = 8
0.00.265.634 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.635 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.635 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.636 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.637 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.638 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.638 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.639 I llm_load_print_meta: n_ff             = 16384
0.00.265.639 I llm_load_print_meta: n_expert         = 0
0.00.265.640 I llm_load_print_meta: n_expert_used    = 0
0.00.265.640 I llm_load_print_meta: causal attn      = 1
0.00.265.640 I llm_load_print_meta: pooling type     = 0
0.00.265.640 I llm_load_print_meta: rope type        = 2
0.00.265.641 I llm_load_print_meta: rope scaling     = linear
0.00.265.642 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.642 I llm_load_print_meta: freq_scale_train = 1
0.00.265.643 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.643 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.643 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.644 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.644 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.644 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.645 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.645 I llm_load_print_meta: model type       = 2B
0.00.265.646 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.646 I llm_load_print_meta: model params     = 2.51 B
0.00.265.647 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.647 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.648 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.648 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.648 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.648 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.649 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.649 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.650 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.650 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.650 I llm_load_print_meta: max token length = 93
0.00.343.357 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.343.363 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.363 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.343.364 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.343.365 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.365 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.348.459 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.465 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.465 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.466 I llama_new_context_with_model: n_batch       = 2048
0.00.348.466 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.467 I llama_new_context_with_model: flash_attn    = 0
0.00.348.469 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.470 I llama_new_context_with_model: freq_scale    = 1
0.00.348.471 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.975 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.990 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.079 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.355 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.360 I llama_new_context_with_model: graph nodes  = 601
0.00.364.360 I llama_new_context_with_model: graph splits = 1
0.00.364.362 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.363 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.099 I main: llama threadpool init, n_threads = 4
0.00.450.116 I 
0.00.450.188 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.191 I 
0.00.450.231 I sampler seed: 3015380961
0.00.450.242 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.249 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.253 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.253 I 
 increadibly, and can you provide insight into how he used his power?

Zeus, the king of the gods, wielded immense power that extended beyond his divine

0.02.727.578 I llama_perf_sampler_print:    sampling time =       5.34 ms /    33 runs   (    0.16 ms per token,  6180.93 tokens per second)
0.02.727.581 I llama_perf_context_print:        load time =     449.66 ms
0.02.727.582 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.727.583 I llama_perf_context_print:        eval time =    2257.79 ms /    32 runs   (   70.56 ms per token,    14.17 tokens per second)
0.02.727.584 I llama_perf_context_print:       total time =    2277.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.563 I build: 4364 (2a5510ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.870 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.023.026 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.036 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.043 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.052 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.053 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.058 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.058 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.059 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.059 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.060 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.060 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.065 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.065 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.066 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.067 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.068 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.975 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.339 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.255 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.262 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.262 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.263 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.264 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.264 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.265 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.267 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.268 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.269 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.270 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.137.270 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.273 I llama_model_loader: - type  f32:   37 tensors
0.00.137.274 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.495 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.011 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.757 I llm_load_vocab: special tokens cache size = 5
0.00.285.249 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.270 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.271 I llm_load_print_meta: arch             = gemma
0.00.285.271 I llm_load_print_meta: vocab type       = SPM
0.00.285.272 I llm_load_print_meta: n_vocab          = 256000
0.00.285.272 I llm_load_print_meta: n_merges         = 0
0.00.285.273 I llm_load_print_meta: vocab_only       = 0
0.00.285.273 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.273 I llm_load_print_meta: n_embd           = 2048
0.00.285.274 I llm_load_print_meta: n_layer          = 18
0.00.285.287 I llm_load_print_meta: n_head           = 8
0.00.285.288 I llm_load_print_meta: n_head_kv        = 1
0.00.285.288 I llm_load_print_meta: n_rot            = 256
0.00.285.288 I llm_load_print_meta: n_swa            = 0
0.00.285.289 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.289 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.290 I llm_load_print_meta: n_gqa            = 8
0.00.285.291 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.292 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.293 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.294 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.294 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.295 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.295 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.296 I llm_load_print_meta: n_ff             = 16384
0.00.285.296 I llm_load_print_meta: n_expert         = 0
0.00.285.296 I llm_load_print_meta: n_expert_used    = 0
0.00.285.297 I llm_load_print_meta: causal attn      = 1
0.00.285.297 I llm_load_print_meta: pooling type     = 0
0.00.285.297 I llm_load_print_meta: rope type        = 2
0.00.285.298 I llm_load_print_meta: rope scaling     = linear
0.00.285.299 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.299 I llm_load_print_meta: freq_scale_train = 1
0.00.285.299 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.300 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.300 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.300 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.301 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.301 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.301 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.302 I llm_load_print_meta: model type       = 2B
0.00.285.302 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.303 I llm_load_print_meta: model params     = 2.51 B
0.00.285.304 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.304 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.305 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.305 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.305 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.305 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.306 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.306 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.307 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.308 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.308 I llm_load_print_meta: max token length = 93
0.00.358.524 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.358.534 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.363.839 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.846 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.846 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.847 I llama_new_context_with_model: n_batch       = 2048
0.00.363.847 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.848 I llama_new_context_with_model: flash_attn    = 0
0.00.363.851 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.852 I llama_new_context_with_model: freq_scale    = 1
0.00.363.853 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.266 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.279 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.383 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.635 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.641 I llama_new_context_with_model: graph nodes  = 601
0.00.379.641 I llama_new_context_with_model: graph splits = 1
0.00.379.644 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.379.644 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.648 I main: llama threadpool init, n_threads = 4
0.00.467.662 I 
0.00.467.748 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.751 I 
0.00.467.798 I sampler seed: 2193435216
0.00.467.809 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.813 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.813 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.813 I 
 increasities, and their effect on the environment.

**Introduction**

The interaction between urbanization, climate change, and biodiversity loss poses a significant threat to the

0.02.889.165 I llama_perf_sampler_print:    sampling time =       5.15 ms /    33 runs   (    0.16 ms per token,  6406.52 tokens per second)
0.02.889.168 I llama_perf_context_print:        load time =     466.74 ms
0.02.889.169 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.889.172 I llama_perf_context_print:        eval time =    2401.50 ms /    32 runs   (   75.05 ms per token,    13.33 tokens per second)
0.02.889.173 I llama_perf_context_print:       total time =    2421.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.432s
user	0m39.302s
sys	0m9.382s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4364 (2a5510ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40245.10 ms
main:    total time = 40245.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.176 I build: 4364 (2a5510ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.402 I main: llama backend init
0.00.000.408 I main: load the model and apply lora adapter, if any
0.00.020.602 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.612 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.624 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.632 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.636 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.640 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.640 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.641 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.641 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.642 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.642 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.645 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.646 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.647 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.647 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.648 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.946 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.079 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.989 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.995 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.995 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.996 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.997 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.998 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.999 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.001 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.001 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.002 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.003 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.004 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.007 I llama_model_loader: - type  f32:   37 tensors
0.00.130.008 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.008 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.828 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.275 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.902 I llm_load_vocab: special tokens cache size = 5
0.00.284.438 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.453 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.454 I llm_load_print_meta: arch             = gemma
0.00.284.455 I llm_load_print_meta: vocab type       = SPM
0.00.284.455 I llm_load_print_meta: n_vocab          = 256000
0.00.284.455 I llm_load_print_meta: n_merges         = 0
0.00.284.456 I llm_load_print_meta: vocab_only       = 0
0.00.284.456 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.456 I llm_load_print_meta: n_embd           = 2048
0.00.284.457 I llm_load_print_meta: n_layer          = 18
0.00.284.467 I llm_load_print_meta: n_head           = 8
0.00.284.468 I llm_load_print_meta: n_head_kv        = 1
0.00.284.468 I llm_load_print_meta: n_rot            = 256
0.00.284.468 I llm_load_print_meta: n_swa            = 0
0.00.284.469 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.469 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.470 I llm_load_print_meta: n_gqa            = 8
0.00.284.471 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.472 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.472 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.474 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.474 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.475 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.476 I llm_load_print_meta: n_ff             = 16384
0.00.284.476 I llm_load_print_meta: n_expert         = 0
0.00.284.476 I llm_load_print_meta: n_expert_used    = 0
0.00.284.476 I llm_load_print_meta: causal attn      = 1
0.00.284.477 I llm_load_print_meta: pooling type     = 0
0.00.284.477 I llm_load_print_meta: rope type        = 2
0.00.284.477 I llm_load_print_meta: rope scaling     = linear
0.00.284.479 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.479 I llm_load_print_meta: freq_scale_train = 1
0.00.284.479 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.480 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.480 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.481 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.481 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.481 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.481 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.482 I llm_load_print_meta: model type       = 2B
0.00.284.482 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.284.483 I llm_load_print_meta: model params     = 2.51 B
0.00.284.484 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.284.484 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.484 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.485 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.485 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.485 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.486 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.486 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.487 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.487 I llm_load_print_meta: max token length = 93
0.00.345.218 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.345.224 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.345.225 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.345.225 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.345.225 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.345.226 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.350.270 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.276 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.277 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.277 I llama_new_context_with_model: n_batch       = 2048
0.00.350.278 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.278 I llama_new_context_with_model: flash_attn    = 0
0.00.350.280 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.281 I llama_new_context_with_model: freq_scale    = 1
0.00.350.282 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.642 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.655 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.747 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.072 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.078 I llama_new_context_with_model: graph nodes  = 601
0.00.366.078 I llama_new_context_with_model: graph splits = 1
0.00.366.080 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.080 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.865 I main: llama threadpool init, n_threads = 4
0.00.440.882 I 
0.00.440.953 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.440.957 I 
0.00.440.996 I sampler seed: 2127128180
0.00.441.006 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.008 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.009 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.009 I 
 seconally after the question is answered.

**Question:** Discuss the differences between a recursive function and an iterative function.

**Recursive Function:**

- A

0.02.026.650 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6512.73 tokens per second)
0.02.026.654 I llama_perf_context_print:        load time =     440.44 ms
0.02.026.656 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.026.658 I llama_perf_context_print:        eval time =    1566.87 ms /    32 runs   (   48.96 ms per token,    20.42 tokens per second)
0.02.026.659 I llama_perf_context_print:       total time =    1585.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4364 (2a5510ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40217.17 ms
main:    total time = 40217.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4364 (2a5510ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.273 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.292 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.304 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.307 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.311 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.312 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.313 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.314 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.314 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.315 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.319 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.320 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.322 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.789 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.218 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.212 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.219 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.220 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.220 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.221 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.222 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.224 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.225 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.229 I llama_model_loader: - type  f32:   37 tensors
0.00.131.230 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.231 I llama_model_loader: - type q6_K:   19 tensors
0.00.219.608 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.643 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.139 I llm_load_vocab: special tokens cache size = 5
0.00.285.199 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.216 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.216 I llm_load_print_meta: arch             = gemma
0.00.285.217 I llm_load_print_meta: vocab type       = SPM
0.00.285.218 I llm_load_print_meta: n_vocab          = 256000
0.00.285.218 I llm_load_print_meta: n_merges         = 0
0.00.285.218 I llm_load_print_meta: vocab_only       = 0
0.00.285.219 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.219 I llm_load_print_meta: n_embd           = 2048
0.00.285.219 I llm_load_print_meta: n_layer          = 18
0.00.285.230 I llm_load_print_meta: n_head           = 8
0.00.285.231 I llm_load_print_meta: n_head_kv        = 1
0.00.285.232 I llm_load_print_meta: n_rot            = 256
0.00.285.232 I llm_load_print_meta: n_swa            = 0
0.00.285.232 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.232 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.233 I llm_load_print_meta: n_gqa            = 8
0.00.285.234 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.235 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.236 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.237 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.238 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.238 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.238 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.239 I llm_load_print_meta: n_ff             = 16384
0.00.285.240 I llm_load_print_meta: n_expert         = 0
0.00.285.240 I llm_load_print_meta: n_expert_used    = 0
0.00.285.240 I llm_load_print_meta: causal attn      = 1
0.00.285.241 I llm_load_print_meta: pooling type     = 0
0.00.285.241 I llm_load_print_meta: rope type        = 2
0.00.285.241 I llm_load_print_meta: rope scaling     = linear
0.00.285.242 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.243 I llm_load_print_meta: freq_scale_train = 1
0.00.285.243 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.244 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.244 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.244 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.244 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.245 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.245 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.245 I llm_load_print_meta: model type       = 2B
0.00.285.246 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.247 I llm_load_print_meta: model params     = 2.51 B
0.00.285.248 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.249 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.249 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.250 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.250 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.250 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.250 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.250 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.251 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.251 I llm_load_print_meta: max token length = 93
0.00.343.479 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.348.763 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.770 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.770 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.771 I llama_new_context_with_model: n_batch       = 2048
0.00.348.771 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.772 I llama_new_context_with_model: flash_attn    = 0
0.00.348.774 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.775 I llama_new_context_with_model: freq_scale    = 1
0.00.348.776 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.571 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.586 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.679 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.941 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.947 I llama_new_context_with_model: graph nodes  = 601
0.00.365.948 I llama_new_context_with_model: graph splits = 1
0.00.365.951 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.365.951 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.317 I main: llama threadpool init, n_threads = 4
0.00.440.331 I 
0.00.440.405 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.440.408 I 
0.00.440.451 I sampler seed: 2703564016
0.00.440.461 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.464 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.464 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.464 I 
 increasities!

I am unable to generate responses that include sexually suggestive or inappropriate content. [end of text]


0.01.368.912 I llama_perf_sampler_print:    sampling time =       3.05 ms /    20 runs   (    0.15 ms per token,  6553.08 tokens per second)
0.01.368.915 I llama_perf_context_print:        load time =     439.53 ms
0.01.368.916 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.368.917 I llama_perf_context_print:        eval time =     916.77 ms /    19 runs   (   48.25 ms per token,    20.72 tokens per second)
0.01.368.918 I llama_perf_context_print:       total time =     928.60 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.663s
user	10m21.297s
sys	0m6.904s
