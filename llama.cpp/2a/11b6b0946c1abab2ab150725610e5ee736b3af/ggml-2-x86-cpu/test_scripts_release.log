+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.669 I build: 4133 (2a11b6b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.883 I main: llama backend init
0.00.000.891 I main: load the model and apply lora adapter, if any
0.00.022.017 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.028 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.036 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.046 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.047 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.052 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.052 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.053 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.054 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.054 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.055 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.060 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.061 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.062 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.062 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.063 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.623 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.958 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.871 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.878 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.879 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.880 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.880 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.881 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.882 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.884 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.885 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.886 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.886 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.888 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.891 I llama_model_loader: - type  f32:   37 tensors
0.00.131.892 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.226 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.500 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.114 I llm_load_vocab: special tokens cache size = 5
0.00.285.992 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.010 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.011 I llm_load_print_meta: arch             = gemma
0.00.286.011 I llm_load_print_meta: vocab type       = SPM
0.00.286.012 I llm_load_print_meta: n_vocab          = 256000
0.00.286.013 I llm_load_print_meta: n_merges         = 0
0.00.286.013 I llm_load_print_meta: vocab_only       = 0
0.00.286.013 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.014 I llm_load_print_meta: n_embd           = 2048
0.00.286.014 I llm_load_print_meta: n_layer          = 18
0.00.286.025 I llm_load_print_meta: n_head           = 8
0.00.286.026 I llm_load_print_meta: n_head_kv        = 1
0.00.286.026 I llm_load_print_meta: n_rot            = 256
0.00.286.027 I llm_load_print_meta: n_swa            = 0
0.00.286.027 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.027 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.028 I llm_load_print_meta: n_gqa            = 8
0.00.286.029 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.030 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.031 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.032 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.032 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.033 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.033 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.034 I llm_load_print_meta: n_ff             = 16384
0.00.286.034 I llm_load_print_meta: n_expert         = 0
0.00.286.034 I llm_load_print_meta: n_expert_used    = 0
0.00.286.035 I llm_load_print_meta: causal attn      = 1
0.00.286.035 I llm_load_print_meta: pooling type     = 0
0.00.286.036 I llm_load_print_meta: rope type        = 2
0.00.286.036 I llm_load_print_meta: rope scaling     = linear
0.00.286.037 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.038 I llm_load_print_meta: freq_scale_train = 1
0.00.286.038 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.038 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.038 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.039 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.039 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.039 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.040 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.040 I llm_load_print_meta: model type       = 2B
0.00.286.041 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.042 I llm_load_print_meta: model params     = 2.51 B
0.00.286.043 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.043 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.043 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.044 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.044 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.044 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.045 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.045 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.045 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.046 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.046 I llm_load_print_meta: max token length = 93
0.00.384.977 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.384.986 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.384.987 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.384.988 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.384.988 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.384.989 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.390.263 I llama_new_context_with_model: n_seq_max     = 1
0.00.390.268 I llama_new_context_with_model: n_ctx         = 4096
0.00.390.268 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.390.269 I llama_new_context_with_model: n_batch       = 2048
0.00.390.269 I llama_new_context_with_model: n_ubatch      = 512
0.00.390.270 I llama_new_context_with_model: flash_attn    = 0
0.00.390.273 I llama_new_context_with_model: freq_base     = 10000.0
0.00.390.274 I llama_new_context_with_model: freq_scale    = 1
0.00.390.275 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.233 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.249 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.343 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.662 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.668 I llama_new_context_with_model: graph nodes  = 601
0.00.406.668 I llama_new_context_with_model: graph splits = 1
0.00.406.670 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.493.503 I main: llama threadpool init, n_threads = 4
0.00.493.517 I 
0.00.493.596 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.493.599 I 
0.00.493.640 I sampler seed: 2470953852
0.00.493.651 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.655 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.656 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.656 I 
 increasities are common in patients with chronic kidney disease (CKD), and they can lead to complications and accelerated disease progression.

**Question:** What are the

0.02.838.239 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6856.43 tokens per second)
0.02.838.242 I llama_perf_context_print:        load time =     492.59 ms
0.02.838.245 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.838.246 I llama_perf_context_print:        eval time =    2325.03 ms /    32 runs   (   72.66 ms per token,    13.76 tokens per second)
0.02.838.247 I llama_perf_context_print:       total time =    2344.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.580 I build: 4133 (2a11b6b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.776 I main: llama backend init
0.00.000.783 I main: load the model and apply lora adapter, if any
0.00.021.510 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.527 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.540 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.544 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.550 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.551 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.552 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.552 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.553 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.553 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.559 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.560 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.561 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.561 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.563 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.746 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.041 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.915 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.921 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.922 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.923 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.923 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.924 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.925 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.927 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.928 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.929 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.929 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.930 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.933 I llama_model_loader: - type  f32:   37 tensors
0.00.130.934 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.616 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.329 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.923 I llm_load_vocab: special tokens cache size = 5
0.00.277.969 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.986 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.986 I llm_load_print_meta: arch             = gemma
0.00.277.987 I llm_load_print_meta: vocab type       = SPM
0.00.277.988 I llm_load_print_meta: n_vocab          = 256000
0.00.277.988 I llm_load_print_meta: n_merges         = 0
0.00.277.988 I llm_load_print_meta: vocab_only       = 0
0.00.277.989 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.989 I llm_load_print_meta: n_embd           = 2048
0.00.277.989 I llm_load_print_meta: n_layer          = 18
0.00.278.002 I llm_load_print_meta: n_head           = 8
0.00.278.003 I llm_load_print_meta: n_head_kv        = 1
0.00.278.003 I llm_load_print_meta: n_rot            = 256
0.00.278.004 I llm_load_print_meta: n_swa            = 0
0.00.278.004 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.004 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.005 I llm_load_print_meta: n_gqa            = 8
0.00.278.006 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.007 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.008 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.009 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.009 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.010 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.010 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.011 I llm_load_print_meta: n_ff             = 16384
0.00.278.012 I llm_load_print_meta: n_expert         = 0
0.00.278.012 I llm_load_print_meta: n_expert_used    = 0
0.00.278.012 I llm_load_print_meta: causal attn      = 1
0.00.278.012 I llm_load_print_meta: pooling type     = 0
0.00.278.013 I llm_load_print_meta: rope type        = 2
0.00.278.013 I llm_load_print_meta: rope scaling     = linear
0.00.278.015 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.015 I llm_load_print_meta: freq_scale_train = 1
0.00.278.015 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.016 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.016 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.016 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.017 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.017 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.017 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.018 I llm_load_print_meta: model type       = 2B
0.00.278.018 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.019 I llm_load_print_meta: model params     = 2.51 B
0.00.278.020 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.020 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.021 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.022 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.022 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.022 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.023 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.023 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.023 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.024 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.024 I llm_load_print_meta: max token length = 93
0.00.371.476 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.377.603 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.611 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.612 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.612 I llama_new_context_with_model: n_batch       = 2048
0.00.377.613 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.613 I llama_new_context_with_model: flash_attn    = 0
0.00.377.617 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.618 I llama_new_context_with_model: freq_scale    = 1
0.00.377.619 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.922 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.937 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.033 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.285 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.291 I llama_new_context_with_model: graph nodes  = 601
0.00.394.292 I llama_new_context_with_model: graph splits = 1
0.00.394.294 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.350 I main: llama threadpool init, n_threads = 4
0.00.477.363 I 
0.00.477.442 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.445 I 
0.00.477.488 I sampler seed: 814693402
0.00.477.500 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.502 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.503 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.503 I 
 increasities with the enchanting melodies of the lute.

The passage describes a beautiful scene with a lute player serenading a lady. The imagery is vivid, creating

0.02.706.405 I llama_perf_sampler_print:    sampling time =       4.74 ms /    33 runs   (    0.14 ms per token,  6960.56 tokens per second)
0.02.706.408 I llama_perf_context_print:        load time =     476.55 ms
0.02.706.409 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.706.411 I llama_perf_context_print:        eval time =    2209.77 ms /    32 runs   (   69.06 ms per token,    14.48 tokens per second)
0.02.706.412 I llama_perf_context_print:       total time =    2229.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 4133 (2a11b6b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.233 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.241 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.249 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.260 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.261 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.261 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.262 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.262 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.262 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.267 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.268 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.268 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.269 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.269 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.488 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.799 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.673 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.681 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.682 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.683 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.685 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.686 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.686 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.687 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.689 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.693 I llama_model_loader: - type  f32:   37 tensors
0.00.130.694 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.808 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.109 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.705 I llm_load_vocab: special tokens cache size = 5
0.00.279.769 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.785 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.786 I llm_load_print_meta: arch             = gemma
0.00.279.786 I llm_load_print_meta: vocab type       = SPM
0.00.279.787 I llm_load_print_meta: n_vocab          = 256000
0.00.279.788 I llm_load_print_meta: n_merges         = 0
0.00.279.788 I llm_load_print_meta: vocab_only       = 0
0.00.279.789 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.789 I llm_load_print_meta: n_embd           = 2048
0.00.279.789 I llm_load_print_meta: n_layer          = 18
0.00.279.802 I llm_load_print_meta: n_head           = 8
0.00.279.803 I llm_load_print_meta: n_head_kv        = 1
0.00.279.803 I llm_load_print_meta: n_rot            = 256
0.00.279.803 I llm_load_print_meta: n_swa            = 0
0.00.279.804 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.804 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.805 I llm_load_print_meta: n_gqa            = 8
0.00.279.806 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.807 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.808 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.809 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.809 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.810 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.810 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.811 I llm_load_print_meta: n_ff             = 16384
0.00.279.812 I llm_load_print_meta: n_expert         = 0
0.00.279.812 I llm_load_print_meta: n_expert_used    = 0
0.00.279.812 I llm_load_print_meta: causal attn      = 1
0.00.279.812 I llm_load_print_meta: pooling type     = 0
0.00.279.813 I llm_load_print_meta: rope type        = 2
0.00.279.813 I llm_load_print_meta: rope scaling     = linear
0.00.279.815 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.816 I llm_load_print_meta: freq_scale_train = 1
0.00.279.816 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.816 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.817 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.817 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.817 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.818 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.818 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.818 I llm_load_print_meta: model type       = 2B
0.00.279.819 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.820 I llm_load_print_meta: model params     = 2.51 B
0.00.279.821 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.821 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.821 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.822 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.822 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.822 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.822 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.823 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.823 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.823 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.824 I llm_load_print_meta: max token length = 93
0.00.354.269 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.276 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.276 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.277 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.277 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.278 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.490 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.496 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.496 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.497 I llama_new_context_with_model: n_batch       = 2048
0.00.359.497 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.497 I llama_new_context_with_model: flash_attn    = 0
0.00.359.500 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.501 I llama_new_context_with_model: freq_scale    = 1
0.00.359.502 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.030 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.043 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.135 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.348 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.354 I llama_new_context_with_model: graph nodes  = 601
0.00.375.355 I llama_new_context_with_model: graph splits = 1
0.00.375.357 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.415 I main: llama threadpool init, n_threads = 4
0.00.462.428 I 
0.00.462.502 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.506 I 
0.00.462.549 I sampler seed: 3246495008
0.00.462.560 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.564 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.564 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.565 I 
 increably. [end of text]


0.00.754.821 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8156.61 tokens per second)
0.00.754.823 I llama_perf_context_print:        load time =     461.62 ms
0.00.754.825 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.754.827 I llama_perf_context_print:        eval time =     288.84 ms /     4 runs   (   72.21 ms per token,    13.85 tokens per second)
0.00.754.828 I llama_perf_context_print:       total time =     292.42 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.575 I build: 4133 (2a11b6b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.781 I main: load the model and apply lora adapter, if any
0.00.021.517 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.530 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.545 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.546 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.551 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.551 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.552 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.553 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.553 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.554 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.560 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.560 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.561 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.561 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.562 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.844 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.888 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.770 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.777 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.778 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.778 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.779 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.780 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.781 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.783 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.784 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.785 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.786 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.787 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.791 I llama_model_loader: - type  f32:   37 tensors
0.00.130.792 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.710 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.830 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.523 I llm_load_vocab: special tokens cache size = 5
0.00.285.730 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.749 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.750 I llm_load_print_meta: arch             = gemma
0.00.285.750 I llm_load_print_meta: vocab type       = SPM
0.00.285.751 I llm_load_print_meta: n_vocab          = 256000
0.00.285.752 I llm_load_print_meta: n_merges         = 0
0.00.285.752 I llm_load_print_meta: vocab_only       = 0
0.00.285.752 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.753 I llm_load_print_meta: n_embd           = 2048
0.00.285.753 I llm_load_print_meta: n_layer          = 18
0.00.285.766 I llm_load_print_meta: n_head           = 8
0.00.285.767 I llm_load_print_meta: n_head_kv        = 1
0.00.285.768 I llm_load_print_meta: n_rot            = 256
0.00.285.768 I llm_load_print_meta: n_swa            = 0
0.00.285.768 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.769 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.770 I llm_load_print_meta: n_gqa            = 8
0.00.285.771 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.772 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.773 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.774 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.775 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.775 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.776 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.779 I llm_load_print_meta: n_ff             = 16384
0.00.285.780 I llm_load_print_meta: n_expert         = 0
0.00.285.780 I llm_load_print_meta: n_expert_used    = 0
0.00.285.780 I llm_load_print_meta: causal attn      = 1
0.00.285.780 I llm_load_print_meta: pooling type     = 0
0.00.285.781 I llm_load_print_meta: rope type        = 2
0.00.285.781 I llm_load_print_meta: rope scaling     = linear
0.00.285.783 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.783 I llm_load_print_meta: freq_scale_train = 1
0.00.285.784 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.784 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.784 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.784 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.785 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.785 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.785 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.786 I llm_load_print_meta: model type       = 2B
0.00.285.786 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.787 I llm_load_print_meta: model params     = 2.51 B
0.00.285.788 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.789 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.789 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.789 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.790 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.790 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.791 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.791 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.792 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.792 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.793 I llm_load_print_meta: max token length = 93
0.00.356.758 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.356.766 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.361.936 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.942 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.943 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.943 I llama_new_context_with_model: n_batch       = 2048
0.00.361.944 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.944 I llama_new_context_with_model: flash_attn    = 0
0.00.361.946 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.947 I llama_new_context_with_model: freq_scale    = 1
0.00.361.948 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.777 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.791 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.883 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.135 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.140 I llama_new_context_with_model: graph nodes  = 601
0.00.378.141 I llama_new_context_with_model: graph splits = 1
0.00.378.143 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.866 I main: llama threadpool init, n_threads = 4
0.00.465.881 I 
0.00.465.956 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.959 I 
0.00.466.004 I sampler seed: 3261775202
0.00.466.016 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.019 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.020 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.021 I 
 increasities.

I'm not sure what you're trying to say. [end of text]


0.01.848.590 I llama_perf_sampler_print:    sampling time =       2.79 ms /    19 runs   (    0.15 ms per token,  6805.16 tokens per second)
0.01.848.593 I llama_perf_context_print:        load time =     465.06 ms
0.01.848.594 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.848.595 I llama_perf_context_print:        eval time =    1371.44 ms /    18 runs   (   76.19 ms per token,    13.12 tokens per second)
0.01.848.596 I llama_perf_context_print:       total time =    1382.73 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.128s
user	0m27.952s
sys	0m9.567s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4133 (2a11b6b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40387.22 ms
main:    total time = 40387.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.581 I build: 4133 (2a11b6b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.778 I main: load the model and apply lora adapter, if any
0.00.021.407 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.422 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.432 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.438 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.439 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.444 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.447 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.447 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.448 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.449 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.449 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.455 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.455 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.456 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.456 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.356 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.323 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.329 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.330 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.330 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.331 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.332 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.333 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.336 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.337 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.337 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.338 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.339 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.342 I llama_model_loader: - type  f32:   37 tensors
0.00.131.343 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.343 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.306 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.337 I llm_load_vocab: special tokens cache size = 5
0.00.281.424 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.442 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.443 I llm_load_print_meta: arch             = gemma
0.00.281.444 I llm_load_print_meta: vocab type       = SPM
0.00.281.446 I llm_load_print_meta: n_vocab          = 256000
0.00.281.446 I llm_load_print_meta: n_merges         = 0
0.00.281.447 I llm_load_print_meta: vocab_only       = 0
0.00.281.447 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.447 I llm_load_print_meta: n_embd           = 2048
0.00.281.448 I llm_load_print_meta: n_layer          = 18
0.00.281.460 I llm_load_print_meta: n_head           = 8
0.00.281.462 I llm_load_print_meta: n_head_kv        = 1
0.00.281.463 I llm_load_print_meta: n_rot            = 256
0.00.281.463 I llm_load_print_meta: n_swa            = 0
0.00.281.463 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.464 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.465 I llm_load_print_meta: n_gqa            = 8
0.00.281.466 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.467 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.468 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.469 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.470 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.473 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.473 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.474 I llm_load_print_meta: n_ff             = 16384
0.00.281.475 I llm_load_print_meta: n_expert         = 0
0.00.281.475 I llm_load_print_meta: n_expert_used    = 0
0.00.281.475 I llm_load_print_meta: causal attn      = 1
0.00.281.475 I llm_load_print_meta: pooling type     = 0
0.00.281.476 I llm_load_print_meta: rope type        = 2
0.00.281.476 I llm_load_print_meta: rope scaling     = linear
0.00.281.477 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.478 I llm_load_print_meta: freq_scale_train = 1
0.00.281.479 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.479 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.480 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.480 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.480 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.481 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.481 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.482 I llm_load_print_meta: model type       = 2B
0.00.281.483 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.484 I llm_load_print_meta: model params     = 2.51 B
0.00.281.485 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.485 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.486 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.486 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.487 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.487 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.487 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.488 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.488 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.489 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.489 I llm_load_print_meta: max token length = 93
0.00.341.843 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.341.851 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.341.851 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.341.852 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.341.852 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.341.853 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.347.076 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.082 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.083 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.083 I llama_new_context_with_model: n_batch       = 2048
0.00.347.084 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.084 I llama_new_context_with_model: flash_attn    = 0
0.00.347.087 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.088 I llama_new_context_with_model: freq_scale    = 1
0.00.347.089 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.705 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.719 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.810 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.109 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.115 I llama_new_context_with_model: graph nodes  = 601
0.00.363.116 I llama_new_context_with_model: graph splits = 1
0.00.363.118 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.271 I main: llama threadpool init, n_threads = 4
0.00.440.285 I 
0.00.440.362 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.365 I 
0.00.440.410 I sampler seed: 3163013637
0.00.440.421 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.425 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.425 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.426 I 
 seconally, it is the most dangerous time of the year for marine mammals in the Southern Ocean.

**Causes of the Dangerous Time:**

* **Ocean

0.02.130.923 I llama_perf_sampler_print:    sampling time =       5.44 ms /    33 runs   (    0.16 ms per token,  6065.06 tokens per second)
0.02.130.926 I llama_perf_context_print:        load time =     439.48 ms
0.02.130.927 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.130.928 I llama_perf_context_print:        eval time =    1670.82 ms /    32 runs   (   52.21 ms per token,    19.15 tokens per second)
0.02.130.929 I llama_perf_context_print:       total time =    1690.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4133 (2a11b6b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40252.89 ms
main:    total time = 40252.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.614 I build: 4133 (2a11b6b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.812 I main: llama backend init
0.00.000.819 I main: load the model and apply lora adapter, if any
0.00.021.196 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.212 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.220 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.221 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.225 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.226 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.226 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.227 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.227 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.228 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.234 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.234 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.235 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.235 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.236 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.526 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.019 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.961 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.969 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.970 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.970 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.971 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.972 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.973 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.976 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.976 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.980 I llama_model_loader: - type  f32:   37 tensors
0.00.130.981 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.981 I llama_model_loader: - type q6_K:   19 tensors
0.00.215.230 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.485 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.248 I llm_load_vocab: special tokens cache size = 5
0.00.291.377 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.399 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.399 I llm_load_print_meta: arch             = gemma
0.00.291.400 I llm_load_print_meta: vocab type       = SPM
0.00.291.400 I llm_load_print_meta: n_vocab          = 256000
0.00.291.401 I llm_load_print_meta: n_merges         = 0
0.00.291.401 I llm_load_print_meta: vocab_only       = 0
0.00.291.402 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.402 I llm_load_print_meta: n_embd           = 2048
0.00.291.402 I llm_load_print_meta: n_layer          = 18
0.00.291.414 I llm_load_print_meta: n_head           = 8
0.00.291.415 I llm_load_print_meta: n_head_kv        = 1
0.00.291.416 I llm_load_print_meta: n_rot            = 256
0.00.291.416 I llm_load_print_meta: n_swa            = 0
0.00.291.416 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.417 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.418 I llm_load_print_meta: n_gqa            = 8
0.00.291.419 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.420 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.420 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.422 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.422 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.422 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.422 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.423 I llm_load_print_meta: n_ff             = 16384
0.00.291.424 I llm_load_print_meta: n_expert         = 0
0.00.291.424 I llm_load_print_meta: n_expert_used    = 0
0.00.291.424 I llm_load_print_meta: causal attn      = 1
0.00.291.425 I llm_load_print_meta: pooling type     = 0
0.00.291.425 I llm_load_print_meta: rope type        = 2
0.00.291.425 I llm_load_print_meta: rope scaling     = linear
0.00.291.427 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.427 I llm_load_print_meta: freq_scale_train = 1
0.00.291.428 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.428 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.428 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.428 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.429 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.429 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.429 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.430 I llm_load_print_meta: model type       = 2B
0.00.291.430 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.291.431 I llm_load_print_meta: model params     = 2.51 B
0.00.291.432 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.291.432 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.433 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.433 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.433 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.434 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.434 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.435 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.435 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.435 I llm_load_print_meta: max token length = 93
0.00.345.964 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.351.358 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.368 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.369 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.369 I llama_new_context_with_model: n_batch       = 2048
0.00.351.370 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.370 I llama_new_context_with_model: flash_attn    = 0
0.00.351.373 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.374 I llama_new_context_with_model: freq_scale    = 1
0.00.351.375 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.158 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.173 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.269 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.563 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.570 I llama_new_context_with_model: graph nodes  = 601
0.00.368.571 I llama_new_context_with_model: graph splits = 1
0.00.368.573 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.787 I main: llama threadpool init, n_threads = 4
0.00.446.803 I 
0.00.446.888 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.891 I 
0.00.446.942 I sampler seed: 904097603
0.00.446.955 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.961 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.962 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.962 I 
 encompate and analyze the key differences between the two concepts.

**Accomplishment**

- Represents the successful achievement of a specific goal or objective.


0.02.138.406 I llama_perf_sampler_print:    sampling time =       5.68 ms /    33 runs   (    0.17 ms per token,  5812.93 tokens per second)
0.02.138.409 I llama_perf_context_print:        load time =     445.95 ms
0.02.138.410 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.138.412 I llama_perf_context_print:        eval time =    1671.47 ms /    32 runs   (   52.23 ms per token,    19.14 tokens per second)
0.02.138.413 I llama_perf_context_print:       total time =    1691.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.768s
user	10m25.249s
sys	0m7.244s
