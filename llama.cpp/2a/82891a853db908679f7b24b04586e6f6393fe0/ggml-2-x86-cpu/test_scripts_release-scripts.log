+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 4078 (2a82891a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.021.502 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.512 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.519 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.524 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.526 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.529 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.533 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.533 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.534 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.534 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.535 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.539 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.540 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.540 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.541 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.541 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.227 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.749 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.571 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.577 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.578 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.578 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.579 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.580 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.580 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.583 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.583 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.584 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.584 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.586 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.590 I llama_model_loader: - type  f32:   37 tensors
0.00.131.591 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.100 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.052 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.566 I llm_load_vocab: special tokens cache size = 5
0.00.264.137 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.154 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.155 I llm_load_print_meta: arch             = gemma
0.00.264.155 I llm_load_print_meta: vocab type       = SPM
0.00.264.156 I llm_load_print_meta: n_vocab          = 256000
0.00.264.156 I llm_load_print_meta: n_merges         = 0
0.00.264.156 I llm_load_print_meta: vocab_only       = 0
0.00.264.157 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.157 I llm_load_print_meta: n_embd           = 2048
0.00.264.157 I llm_load_print_meta: n_layer          = 18
0.00.264.169 I llm_load_print_meta: n_head           = 8
0.00.264.170 I llm_load_print_meta: n_head_kv        = 1
0.00.264.171 I llm_load_print_meta: n_rot            = 256
0.00.264.171 I llm_load_print_meta: n_swa            = 0
0.00.264.171 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.172 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.173 I llm_load_print_meta: n_gqa            = 8
0.00.264.174 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.175 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.176 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.177 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.178 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.178 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.178 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.179 I llm_load_print_meta: n_ff             = 16384
0.00.264.180 I llm_load_print_meta: n_expert         = 0
0.00.264.180 I llm_load_print_meta: n_expert_used    = 0
0.00.264.180 I llm_load_print_meta: causal attn      = 1
0.00.264.181 I llm_load_print_meta: pooling type     = 0
0.00.264.181 I llm_load_print_meta: rope type        = 2
0.00.264.181 I llm_load_print_meta: rope scaling     = linear
0.00.264.183 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.183 I llm_load_print_meta: freq_scale_train = 1
0.00.264.184 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.184 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.184 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.185 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.185 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.185 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.185 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.186 I llm_load_print_meta: model type       = 2B
0.00.264.186 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.187 I llm_load_print_meta: model params     = 2.51 B
0.00.264.188 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.188 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.189 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.189 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.190 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.190 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.190 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.191 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.191 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.191 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.192 I llm_load_print_meta: max token length = 93
0.00.365.001 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.009 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.010 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.010 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.011 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.012 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.308 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.315 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.315 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.316 I llama_new_context_with_model: n_batch       = 2048
0.00.370.316 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.317 I llama_new_context_with_model: flash_attn    = 0
0.00.370.319 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.319 I llama_new_context_with_model: freq_scale    = 1
0.00.370.321 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.490 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.503 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.591 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.835 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.840 I llama_new_context_with_model: graph nodes  = 601
0.00.386.840 I llama_new_context_with_model: graph splits = 1
0.00.386.842 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.420 I main: llama threadpool init, n_threads = 4
0.00.471.433 I 
0.00.471.511 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.514 I 
0.00.471.554 I sampler seed: 2418359496
0.00.471.566 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.569 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.570 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.571 I 
 increasities. [end of text]


0.00.752.058 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8064.52 tokens per second)
0.00.752.061 I llama_perf_context_print:        load time =     470.51 ms
0.00.752.062 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.752.064 I llama_perf_context_print:        eval time =     277.45 ms /     4 runs   (   69.36 ms per token,    14.42 tokens per second)
0.00.752.065 I llama_perf_context_print:       total time =     280.65 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 4078 (2a82891a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.021.289 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.302 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.308 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.309 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.313 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.315 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.316 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.317 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.317 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.318 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.323 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.323 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.324 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.324 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.325 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.075 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.938 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.766 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.772 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.773 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.774 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.774 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.775 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.776 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.779 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.780 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.781 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.781 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.782 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.786 I llama_model_loader: - type  f32:   37 tensors
0.00.131.787 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.805 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.061 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.659 I llm_load_vocab: special tokens cache size = 5
0.00.271.264 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.281 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.281 I llm_load_print_meta: arch             = gemma
0.00.271.282 I llm_load_print_meta: vocab type       = SPM
0.00.271.283 I llm_load_print_meta: n_vocab          = 256000
0.00.271.283 I llm_load_print_meta: n_merges         = 0
0.00.271.284 I llm_load_print_meta: vocab_only       = 0
0.00.271.284 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.284 I llm_load_print_meta: n_embd           = 2048
0.00.271.285 I llm_load_print_meta: n_layer          = 18
0.00.271.296 I llm_load_print_meta: n_head           = 8
0.00.271.297 I llm_load_print_meta: n_head_kv        = 1
0.00.271.297 I llm_load_print_meta: n_rot            = 256
0.00.271.297 I llm_load_print_meta: n_swa            = 0
0.00.271.298 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.298 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.299 I llm_load_print_meta: n_gqa            = 8
0.00.271.300 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.301 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.302 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.303 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.304 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.304 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.304 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.305 I llm_load_print_meta: n_ff             = 16384
0.00.271.306 I llm_load_print_meta: n_expert         = 0
0.00.271.306 I llm_load_print_meta: n_expert_used    = 0
0.00.271.306 I llm_load_print_meta: causal attn      = 1
0.00.271.307 I llm_load_print_meta: pooling type     = 0
0.00.271.307 I llm_load_print_meta: rope type        = 2
0.00.271.307 I llm_load_print_meta: rope scaling     = linear
0.00.271.309 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.309 I llm_load_print_meta: freq_scale_train = 1
0.00.271.310 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.310 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.310 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.310 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.311 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.311 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.311 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.312 I llm_load_print_meta: model type       = 2B
0.00.271.313 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.313 I llm_load_print_meta: model params     = 2.51 B
0.00.271.314 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.314 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.315 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.315 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.316 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.316 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.316 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.317 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.317 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.318 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.318 I llm_load_print_meta: max token length = 93
0.00.366.642 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.896 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.903 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.903 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.903 I llama_new_context_with_model: n_batch       = 2048
0.00.371.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.904 I llama_new_context_with_model: flash_attn    = 0
0.00.371.907 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.908 I llama_new_context_with_model: freq_scale    = 1
0.00.371.909 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.524 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.539 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.629 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.860 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.866 I llama_new_context_with_model: graph nodes  = 601
0.00.388.866 I llama_new_context_with_model: graph splits = 1
0.00.388.868 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.193 I main: llama threadpool init, n_threads = 4
0.00.471.206 I 
0.00.471.287 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.290 I 
0.00.471.337 I sampler seed: 279558945
0.00.471.347 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.352 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.353 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.353 I 
 increasities, it is imperative to understand the nature of the relationship between the two entities.

The nature of the relationship between the two entities is multifaceted and can

0.02.651.449 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6718.24 tokens per second)
0.02.651.452 I llama_perf_context_print:        load time =     470.30 ms
0.02.651.454 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.651.456 I llama_perf_context_print:        eval time =    2160.52 ms /    32 runs   (   67.52 ms per token,    14.81 tokens per second)
0.02.651.457 I llama_perf_context_print:       total time =    2180.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.559 I build: 4078 (2a82891a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.786 I main: llama backend init
0.00.000.915 I main: load the model and apply lora adapter, if any
0.00.021.231 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.241 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.248 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.253 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.254 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.257 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.258 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.259 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.259 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.260 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.260 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.263 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.264 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.265 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.266 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.853 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.021 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.888 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.894 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.895 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.895 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.896 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.897 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.898 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.900 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.900 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.901 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.902 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.903 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.906 I llama_model_loader: - type  f32:   37 tensors
0.00.130.907 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.007 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.499 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.071 I llm_load_vocab: special tokens cache size = 5
0.00.279.694 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.710 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.711 I llm_load_print_meta: arch             = gemma
0.00.279.712 I llm_load_print_meta: vocab type       = SPM
0.00.279.716 I llm_load_print_meta: n_vocab          = 256000
0.00.279.716 I llm_load_print_meta: n_merges         = 0
0.00.279.716 I llm_load_print_meta: vocab_only       = 0
0.00.279.717 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.717 I llm_load_print_meta: n_embd           = 2048
0.00.279.717 I llm_load_print_meta: n_layer          = 18
0.00.279.730 I llm_load_print_meta: n_head           = 8
0.00.279.731 I llm_load_print_meta: n_head_kv        = 1
0.00.279.731 I llm_load_print_meta: n_rot            = 256
0.00.279.732 I llm_load_print_meta: n_swa            = 0
0.00.279.732 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.732 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.733 I llm_load_print_meta: n_gqa            = 8
0.00.279.735 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.736 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.737 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.738 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.739 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.739 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.740 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.741 I llm_load_print_meta: n_ff             = 16384
0.00.279.742 I llm_load_print_meta: n_expert         = 0
0.00.279.742 I llm_load_print_meta: n_expert_used    = 0
0.00.279.742 I llm_load_print_meta: causal attn      = 1
0.00.279.745 I llm_load_print_meta: pooling type     = 0
0.00.279.746 I llm_load_print_meta: rope type        = 2
0.00.279.746 I llm_load_print_meta: rope scaling     = linear
0.00.279.748 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.748 I llm_load_print_meta: freq_scale_train = 1
0.00.279.748 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.749 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.749 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.749 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.749 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.750 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.750 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.750 I llm_load_print_meta: model type       = 2B
0.00.279.751 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.752 I llm_load_print_meta: model params     = 2.51 B
0.00.279.753 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.754 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.755 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.755 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.756 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.756 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.756 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.757 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.757 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.758 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.758 I llm_load_print_meta: max token length = 93
0.00.359.806 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.359.813 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.814 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.359.814 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.359.815 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.816 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.365.078 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.083 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.084 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.084 I llama_new_context_with_model: n_batch       = 2048
0.00.365.085 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.085 I llama_new_context_with_model: flash_attn    = 0
0.00.365.087 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.088 I llama_new_context_with_model: freq_scale    = 1
0.00.365.089 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.522 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.537 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.643 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.842 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.849 I llama_new_context_with_model: graph nodes  = 601
0.00.381.849 I llama_new_context_with_model: graph splits = 1
0.00.381.851 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.772 I main: llama threadpool init, n_threads = 4
0.00.466.786 I 
0.00.466.870 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.466.875 I 
0.00.466.928 I sampler seed: 732595592
0.00.466.939 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.942 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.942 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.942 I 
 increably, his eyes gleaming mischievously.

"I am the master of shadows, the weaver of illusions, the architect of mystery."

Is there

0.02.676.721 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6344.93 tokens per second)
0.02.676.724 I llama_perf_context_print:        load time =     465.84 ms
0.02.676.726 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.676.729 I llama_perf_context_print:        eval time =    2190.03 ms /    32 runs   (   68.44 ms per token,    14.61 tokens per second)
0.02.676.730 I llama_perf_context_print:       total time =    2209.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.537 I build: 4078 (2a82891a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.020.993 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.001 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.009 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.014 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.017 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.018 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.019 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.019 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.019 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.020 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.023 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.024 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.025 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.025 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.026 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.649 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.460 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.232 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.239 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.240 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.240 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.241 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.241 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.242 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.244 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.245 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.246 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.246 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.247 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.250 I llama_model_loader: - type  f32:   37 tensors
0.00.130.251 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.144 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.663 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.119 I llm_load_vocab: special tokens cache size = 5
0.00.257.579 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.257.595 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.257.596 I llm_load_print_meta: arch             = gemma
0.00.257.596 I llm_load_print_meta: vocab type       = SPM
0.00.257.597 I llm_load_print_meta: n_vocab          = 256000
0.00.257.597 I llm_load_print_meta: n_merges         = 0
0.00.257.598 I llm_load_print_meta: vocab_only       = 0
0.00.257.598 I llm_load_print_meta: n_ctx_train      = 8192
0.00.257.598 I llm_load_print_meta: n_embd           = 2048
0.00.257.599 I llm_load_print_meta: n_layer          = 18
0.00.257.610 I llm_load_print_meta: n_head           = 8
0.00.257.611 I llm_load_print_meta: n_head_kv        = 1
0.00.257.611 I llm_load_print_meta: n_rot            = 256
0.00.257.611 I llm_load_print_meta: n_swa            = 0
0.00.257.612 I llm_load_print_meta: n_embd_head_k    = 256
0.00.257.612 I llm_load_print_meta: n_embd_head_v    = 256
0.00.257.613 I llm_load_print_meta: n_gqa            = 8
0.00.257.614 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.257.615 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.257.616 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.257.617 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.257.618 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.257.618 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.257.618 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.257.619 I llm_load_print_meta: n_ff             = 16384
0.00.257.619 I llm_load_print_meta: n_expert         = 0
0.00.257.620 I llm_load_print_meta: n_expert_used    = 0
0.00.257.620 I llm_load_print_meta: causal attn      = 1
0.00.257.620 I llm_load_print_meta: pooling type     = 0
0.00.257.621 I llm_load_print_meta: rope type        = 2
0.00.257.621 I llm_load_print_meta: rope scaling     = linear
0.00.257.622 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.257.623 I llm_load_print_meta: freq_scale_train = 1
0.00.257.623 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.257.624 I llm_load_print_meta: rope_finetuned   = unknown
0.00.257.624 I llm_load_print_meta: ssm_d_conv       = 0
0.00.257.624 I llm_load_print_meta: ssm_d_inner      = 0
0.00.257.625 I llm_load_print_meta: ssm_d_state      = 0
0.00.257.625 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.257.625 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.257.626 I llm_load_print_meta: model type       = 2B
0.00.257.626 I llm_load_print_meta: model ftype      = Q8_0
0.00.257.627 I llm_load_print_meta: model params     = 2.51 B
0.00.257.628 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.257.628 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.257.628 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.257.629 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.257.629 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.257.630 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.257.630 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.257.630 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.257.631 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.257.632 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.257.632 I llm_load_print_meta: max token length = 93
0.00.329.043 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.329.050 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.334.106 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.113 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.113 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.114 I llama_new_context_with_model: n_batch       = 2048
0.00.334.114 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.115 I llama_new_context_with_model: flash_attn    = 0
0.00.334.117 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.118 I llama_new_context_with_model: freq_scale    = 1
0.00.334.118 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.746 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.759 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.848 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.081 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.087 I llama_new_context_with_model: graph nodes  = 601
0.00.351.087 I llama_new_context_with_model: graph splits = 1
0.00.351.089 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.325 I main: llama threadpool init, n_threads = 4
0.00.438.339 I 
0.00.438.414 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.418 I 
0.00.438.457 I sampler seed: 2991034605
0.00.438.469 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.472 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.473 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.473 I 
 increasels, and a pair of boots.

What is the meaning of this riddle?

This riddle is a playful way of describing something that is out of

0.02.869.452 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6558.03 tokens per second)
0.02.869.454 I llama_perf_context_print:        load time =     437.45 ms
0.02.869.456 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.869.457 I llama_perf_context_print:        eval time =    2411.69 ms /    32 runs   (   75.37 ms per token,    13.27 tokens per second)
0.02.869.458 I llama_perf_context_print:       total time =    2431.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.622s
user	0m31.254s
sys	0m9.306s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4078 (2a82891a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31989.49 ms
main:    total time = 31989.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 4078 (2a82891a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.021.741 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.751 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.759 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.764 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.765 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.769 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.769 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.770 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.771 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.771 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.772 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.775 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.775 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.776 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.776 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.777 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.237 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.978 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.825 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.832 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.833 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.834 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.834 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.836 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.836 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.840 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.841 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.842 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.843 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.844 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.848 I llama_model_loader: - type  f32:   37 tensors
0.00.131.849 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.850 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.381 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.427 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.968 I llm_load_vocab: special tokens cache size = 5
0.00.264.067 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.082 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.083 I llm_load_print_meta: arch             = gemma
0.00.264.083 I llm_load_print_meta: vocab type       = SPM
0.00.264.084 I llm_load_print_meta: n_vocab          = 256000
0.00.264.084 I llm_load_print_meta: n_merges         = 0
0.00.264.085 I llm_load_print_meta: vocab_only       = 0
0.00.264.085 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.085 I llm_load_print_meta: n_embd           = 2048
0.00.264.086 I llm_load_print_meta: n_layer          = 18
0.00.264.097 I llm_load_print_meta: n_head           = 8
0.00.264.098 I llm_load_print_meta: n_head_kv        = 1
0.00.264.098 I llm_load_print_meta: n_rot            = 256
0.00.264.098 I llm_load_print_meta: n_swa            = 0
0.00.264.099 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.099 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.100 I llm_load_print_meta: n_gqa            = 8
0.00.264.101 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.102 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.103 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.104 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.105 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.105 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.105 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.106 I llm_load_print_meta: n_ff             = 16384
0.00.264.106 I llm_load_print_meta: n_expert         = 0
0.00.264.107 I llm_load_print_meta: n_expert_used    = 0
0.00.264.107 I llm_load_print_meta: causal attn      = 1
0.00.264.107 I llm_load_print_meta: pooling type     = 0
0.00.264.108 I llm_load_print_meta: rope type        = 2
0.00.264.108 I llm_load_print_meta: rope scaling     = linear
0.00.264.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.110 I llm_load_print_meta: freq_scale_train = 1
0.00.264.110 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.111 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.111 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.111 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.112 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.112 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.112 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.113 I llm_load_print_meta: model type       = 2B
0.00.264.113 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.114 I llm_load_print_meta: model params     = 2.51 B
0.00.264.114 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.115 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.115 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.116 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.116 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.116 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.116 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.117 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.117 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.118 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.118 I llm_load_print_meta: max token length = 93
0.00.324.539 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.547 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.548 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.548 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.549 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.549 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.745 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.751 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.751 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.751 I llama_new_context_with_model: n_batch       = 2048
0.00.329.752 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.752 I llama_new_context_with_model: flash_attn    = 0
0.00.329.754 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.756 I llama_new_context_with_model: freq_scale    = 1
0.00.329.757 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.011 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.101 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.317 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.324 I llama_new_context_with_model: graph nodes  = 601
0.00.346.324 I llama_new_context_with_model: graph splits = 1
0.00.346.326 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.739 I main: llama threadpool init, n_threads = 4
0.00.421.754 I 
0.00.421.835 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.838 I 
0.00.421.881 I sampler seed: 3930889058
0.00.421.892 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.896 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.905 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.906 I 
 increamically. [end of text]


0.00.628.909 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7961.78 tokens per second)
0.00.628.911 I llama_perf_context_print:        load time =     420.85 ms
0.00.628.912 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.628.913 I llama_perf_context_print:        eval time =     203.88 ms /     4 runs   (   50.97 ms per token,    19.62 tokens per second)
0.00.628.914 I llama_perf_context_print:       total time =     207.18 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4078 (2a82891a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32215.47 ms
main:    total time = 32215.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.549 I build: 4078 (2a82891a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.021.686 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.703 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.713 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.717 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.717 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.718 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.719 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.719 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.720 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.725 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.725 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.726 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.727 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.728 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.734 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.481 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.488 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.489 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.490 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.491 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.492 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.493 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.497 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.497 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.501 I llama_model_loader: - type  f32:   37 tensors
0.00.132.503 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.504 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.281 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.445 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.937 I llm_load_vocab: special tokens cache size = 5
0.00.261.562 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.577 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.578 I llm_load_print_meta: arch             = gemma
0.00.261.579 I llm_load_print_meta: vocab type       = SPM
0.00.261.579 I llm_load_print_meta: n_vocab          = 256000
0.00.261.580 I llm_load_print_meta: n_merges         = 0
0.00.261.580 I llm_load_print_meta: vocab_only       = 0
0.00.261.580 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.581 I llm_load_print_meta: n_embd           = 2048
0.00.261.581 I llm_load_print_meta: n_layer          = 18
0.00.261.593 I llm_load_print_meta: n_head           = 8
0.00.261.594 I llm_load_print_meta: n_head_kv        = 1
0.00.261.595 I llm_load_print_meta: n_rot            = 256
0.00.261.595 I llm_load_print_meta: n_swa            = 0
0.00.261.595 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.596 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.597 I llm_load_print_meta: n_gqa            = 8
0.00.261.598 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.599 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.600 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.601 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.601 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.602 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.602 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.603 I llm_load_print_meta: n_ff             = 16384
0.00.261.603 I llm_load_print_meta: n_expert         = 0
0.00.261.603 I llm_load_print_meta: n_expert_used    = 0
0.00.261.604 I llm_load_print_meta: causal attn      = 1
0.00.261.604 I llm_load_print_meta: pooling type     = 0
0.00.261.604 I llm_load_print_meta: rope type        = 2
0.00.261.605 I llm_load_print_meta: rope scaling     = linear
0.00.261.606 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.607 I llm_load_print_meta: freq_scale_train = 1
0.00.261.607 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.607 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.608 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.608 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.608 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.608 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.609 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.609 I llm_load_print_meta: model type       = 2B
0.00.261.610 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.611 I llm_load_print_meta: model params     = 2.51 B
0.00.261.611 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.612 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.612 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.612 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.613 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.613 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.614 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.614 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.614 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.615 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.615 I llm_load_print_meta: max token length = 93
0.00.320.091 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.325.386 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.392 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.393 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.393 I llama_new_context_with_model: n_batch       = 2048
0.00.325.394 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.394 I llama_new_context_with_model: flash_attn    = 0
0.00.325.396 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.397 I llama_new_context_with_model: freq_scale    = 1
0.00.325.398 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.919 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.935 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.031 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.332 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.338 I llama_new_context_with_model: graph nodes  = 601
0.00.343.338 I llama_new_context_with_model: graph splits = 1
0.00.343.340 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.464 I main: llama threadpool init, n_threads = 4
0.00.417.477 I 
0.00.417.562 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.417.565 I 
0.00.417.615 I sampler seed: 2444960190
0.00.417.628 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.632 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.642 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.645 I 
 encompassing the entire range of a concept.

In the context of marketing, a concept can be defined as a distinct idea or proposition that is intended to create

0.01.989.721 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6843.63 tokens per second)
0.01.989.723 I llama_perf_context_print:        load time =     416.57 ms
0.01.989.724 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.989.726 I llama_perf_context_print:        eval time =    1553.23 ms /    32 runs   (   48.54 ms per token,    20.60 tokens per second)
0.01.989.726 I llama_perf_context_print:       total time =    1572.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m9.942s
user	8m9.016s
sys	0m6.687s
