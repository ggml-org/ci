Looking in indexes: https://pypi.org/simple, https://download.pytorch.org/whl/cpu, https://download.pytorch.org/whl/cpu, https://download.pytorch.org/whl/cpu, https://download.pytorch.org/whl/cpu
Requirement already satisfied: numpy~=1.26.4 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 1)) (1.26.4)
Requirement already satisfied: sentencepiece~=0.2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 2)) (0.2.0)
Requirement already satisfied: transformers<5.0.0,>=4.40.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (4.40.1)
Requirement already satisfied: gguf>=0.1.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 4)) (0.10.0)
Requirement already satisfied: protobuf<5.0.0,>=4.21.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 5)) (4.25.3)
Requirement already satisfied: torch~=2.2.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.2.2)
Requirement already satisfied: filelock in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (3.13.1)
Requirement already satisfied: tokenizers<0.20,>=0.19 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (0.19.1)
Requirement already satisfied: packaging>=20.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (23.2)
Requirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (0.20.3)
Requirement already satisfied: pyyaml>=5.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (6.0.1)
Requirement already satisfied: requests in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2.31.0)
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (4.66.2)
Requirement already satisfied: regex!=2019.12.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2023.12.25)
Requirement already satisfied: safetensors>=0.4.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (0.4.2)
Requirement already satisfied: sympy in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (1.12)
Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.3.1)
Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (8.9.2.26)
Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.0.106)
Requirement already satisfied: triton==2.2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.2.0)
Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (10.3.2.106)
Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (11.0.2.54)
Requirement already satisfied: networkx in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (3.2.1)
Requirement already satisfied: nvidia-nccl-cu12==2.19.3 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.19.3)
Requirement already satisfied: fsspec in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2024.2.0)
Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (11.4.5.107)
Requirement already satisfied: typing-extensions>=4.8.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (4.9.0)
Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: jinja2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (3.1.3)
Requirement already satisfied: nvidia-nvjitlink-cu12 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from nvidia-cusolver-cu12==11.4.5.107->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.3.101)
Requirement already satisfied: MarkupSafe>=2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from jinja2->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.1.5)
Requirement already satisfied: charset-normalizer<4,>=2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (3.6)
Requirement already satisfied: urllib3<3,>=1.21.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2.2.1)
Requirement already satisfied: certifi>=2017.4.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.40.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2024.2.2)
Requirement already satisfied: mpmath>=0.19 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from sympy->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (1.3.0)
Obtaining file:///home/ggml/work/llama.cpp/gguf-py
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.10.0) (1.26.4)
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.10.0) (4.66.2)
Requirement already satisfied: pyyaml>=5.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.10.0) (6.0.1)
Requirement already satisfied: sentencepiece<=0.2.0,>=0.1.98 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.10.0) (0.2.0)
Building wheels for collected packages: gguf
  Building editable for gguf (pyproject.toml): started
  Building editable for gguf (pyproject.toml): finished with status 'done'
  Created wheel for gguf: filename=gguf-0.10.0-py3-none-any.whl size=3392 sha256=a245fd15bdae85fdb14bb4f3728938359d35d3e13fb8d11e50d9aa667d2f8568
  Stored in directory: /tmp/pip-ephem-wheel-cache-vhol4dse/wheels/a3/4c/52/c5934ad001d1a70ca5434f11ddc622cad9c0a484e9bf6feda3
Successfully built gguf
Installing collected packages: gguf
  Attempting uninstall: gguf
    Found existing installation: gguf 0.10.0
    Uninstalling gguf-0.10.0:
      Successfully uninstalled gguf-0.10.0
Successfully installed gguf-0.10.0
+ gg_run_ctest_debug
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_debug.log
+ rm -rf build-ci-debug
+ mkdir build-ci-debug
+ cd build-ci-debug
+ set -e
+ gg_check_build_requirements
+ command -v cmake
+ command -v make
+ command -v ctest
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_debug-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Debug -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- OpenMP found
-- Using llamafile
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- x86 detected
-- Configuring done (9.3s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-debug

real	0m9.565s
user	0m7.505s
sys	0m2.071s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_debug-make.log
++ nproc
+ make -j6
[  0%] Generating build details from Git
[  0%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  1%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
-- Found Git: /usr/bin/git (found version "2.34.1") 
[  2%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml.c.o
[  3%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-alloc.c.o
[  3%] Built target sha256
[  3%] Built target sha1
[  3%] Built target xxhash
[  4%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-quants.c.o
[  4%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-backend.c.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/acc.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/arange.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/argsort.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/binbcast.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/clamp.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/concat.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/conv-transpose-1d.cu.o
[  6%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cpy.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cross-entropy-loss.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/convert.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/diagmask.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/dmmv.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f16.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f32.cu.o
[  9%] Built target build_info
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/getrows.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/im2col.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmq.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmvq.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/norm.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pool2d.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/quantize.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pad.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/rope.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/scale.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/softmax.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sum.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/tsembd.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sumrows.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/unary.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/upscale.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq1_s.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_s.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_xs.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_xxs.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq3_s.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq3_xxs.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq4_nl.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq4_xs.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q2_k.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q3_k.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_1.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_k.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_0.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_1.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_k.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q6_k.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q8_0.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 28%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 28%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 30%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 30%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 31%] Building CXX object ggml/src/CMakeFiles/ggml.dir/llamafile/sgemm.cpp.o
[ 31%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-aarch64.c.o
[ 31%] Linking CXX shared library libggml.so
[ 31%] Built target ggml
[ 31%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 32%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 32%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 33%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 33%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 33%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 35%] Linking CXX executable ../../bin/llama-gguf-hash
[ 35%] Linking CXX executable ../../bin/llama-gguf
[ 35%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 36%] Linking CXX shared library libllama.so
[ 36%] Built target llama-gguf-hash
[ 36%] Built target llama-gguf
[ 36%] Built target llama
[ 37%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 37%] Building CXX object examples/benchmark/CMakeFiles/llama-bench-matmult.dir/benchmark-matmult.cpp.o
[ 37%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 38%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 38%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 39%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 39%] Linking C executable ../bin/test-c
[ 39%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 39%] Linking CXX executable ../../bin/llama-bench-matmult
[ 40%] Linking CXX executable ../../bin/llama-quantize-stats
[ 40%] Built target llava
[ 40%] Linking CXX static library libllava_static.a
[ 40%] Built target test-c
[ 41%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 41%] Linking CXX shared library libllava_shared.so
[ 41%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 41%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 41%] Built target llama-bench-matmult
[ 42%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 42%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 42%] Built target llava_static
[ 43%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 43%] Built target llama-quantize-stats
[ 43%] Built target llava_shared
[ 43%] Linking CXX static library libcommon.a
[ 43%] Built target common
[ 43%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 48%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 48%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 48%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 48%] Linking CXX executable ../bin/test-tokenizer-0
[ 48%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 49%] Linking CXX executable ../bin/test-log
[ 49%] Linking CXX executable ../bin/test-quantize-fns
[ 49%] Linking CXX executable ../bin/test-arg-parser
[ 49%] Built target test-quantize-fns
[ 49%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 49%] Built target test-log
[ 50%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 51%] Linking CXX executable ../bin/test-quantize-perf
[ 51%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 52%] Linking CXX executable ../bin/test-sampling
[ 52%] Built target test-quantize-perf
[ 52%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 53%] Linking CXX executable ../bin/test-chat-template
[ 53%] Built target test-tokenizer-1-spm
[ 53%] Built target test-tokenizer-1-bpe
[ 53%] Built target test-tokenizer-0
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 55%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 56%] Linking CXX executable ../bin/test-grammar-parser
[ 56%] Built target test-sampling
[ 56%] Linking CXX executable ../bin/test-llama-grammar
[ 56%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 57%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 58%] Linking CXX executable ../bin/test-grammar-integration
[ 58%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-grad0
[ 58%] Built target test-grad0
[ 58%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 59%] Linking CXX executable ../bin/test-barrier
[ 59%] Built target test-grammar-parser
[ 59%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 60%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 60%] Built target test-llama-grammar
[ 60%] Linking CXX executable ../bin/test-backend-ops
[ 61%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 61%] Linking CXX executable ../bin/test-rope
[ 61%] Built target test-chat-template
[ 61%] Built target test-barrier
[ 61%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 62%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 62%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 62%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 63%] Linking CXX executable ../bin/test-model-load-cancel
[ 64%] Linking CXX executable ../bin/test-autorelease
[ 64%] Built target test-rope
[ 64%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 64%] Built target test-arg-parser
[ 64%] Built target test-backend-ops
[ 64%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 65%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 66%] Building CXX object examples/baby-llama/CMakeFiles/llama-baby-llama.dir/baby-llama.cpp.o
[ 66%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 67%] Linking CXX executable ../../bin/llama-baby-llama
[ 67%] Linking CXX executable ../../bin/llama-cvector-generator
[ 67%] Built target test-model-load-cancel
[ 67%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 67%] Built target test-autorelease
[ 68%] Linking CXX executable ../../bin/llama-batched-bench
[ 68%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 68%] Built target test-grammar-integration
[ 69%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 70%] Linking CXX executable ../../bin/llama-batched
[ 70%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 70%] Built target llama-baby-llama
[ 70%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 71%] Linking CXX executable ../../bin/llama-embedding
[ 71%] Built target llama-convert-llama2c-to-ggml
[ 71%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 71%] Linking CXX executable ../../bin/llama-eval-callback
[ 71%] Built target test-json-schema-to-grammar
[ 72%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 72%] Linking CXX executable ../../bin/llama-export-lora
[ 72%] Built target llama-cvector-generator
[ 73%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 73%] Built target llama-batched-bench
[ 73%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 73%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 73%] Built target llama-batched
[ 73%] Linking CXX executable ../../bin/llama-gguf-split
[ 74%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-gritlm
[ 74%] Built target llama-gbnf-validator
[ 75%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 75%] Built target llama-gguf-split
[ 75%] Linking CXX executable ../../bin/llama-imatrix
[ 76%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 76%] Linking CXX executable ../../bin/llama-infill
[ 76%] Built target llama-embedding
[ 76%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 77%] Built target llama-eval-callback
[ 77%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 78%] Linking CXX executable ../../bin/llama-llava-cli
[ 78%] Built target llama-export-lora
[ 78%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 79%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 79%] Built target llama-gritlm
[ 79%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-lookahead
[ 80%] Built target llama-bench
[ 80%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-lookup
[ 80%] Built target llama-infill
[ 81%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 81%] Built target llama-imatrix
[ 82%] Linking CXX executable ../../bin/llama-lookup-create
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-lookup-merge
[ 82%] Built target llama-lookup-merge
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 83%] Linking CXX executable ../../bin/llama-lookup-stats
[ 83%] Built target llama-llava-cli
[ 84%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-cli
[ 84%] Built target llama-minicpmv-cli
[ 84%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-parallel
[ 84%] Built target llama-lookahead
[ 85%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 85%] Linking CXX executable ../../bin/llama-passkey
[ 85%] Built target llama-lookup
[ 86%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-perplexity
[ 86%] Built target llama-lookup-create
[ 86%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-quantize
[ 87%] Built target llama-lookup-stats
[ 87%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-retrieval
[ 87%] Built target llama-cli
[ 87%] Generating theme-snowstorm.css.hpp
[ 88%] Generating colorthemes.css.hpp
[ 88%] Generating completion.js.hpp
[ 88%] Generating index-new.html.hpp
[ 88%] Built target llama-parallel
[ 88%] Built target llama-quantize
[ 89%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 89%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 89%] Linking CXX executable ../../bin/llama-save-load-state
[ 89%] Linking CXX executable ../../bin/llama-simple
[ 90%] Generating index.html.hpp
[ 90%] Built target llama-passkey
[ 91%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 92%] Generating index.js.hpp
[ 92%] Linking CXX executable ../../bin/llama-speculative
[ 92%] Generating json-schema-to-grammar.mjs.hpp
[ 92%] Built target llama-perplexity
[ 93%] Generating loading.html.hpp
[ 94%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 95%] Generating prompt-formats.js.hpp
[ 95%] Linking CXX executable ../../bin/llama-tokenize
[ 95%] Generating style.css.hpp
[ 95%] Generating system-prompts.js.hpp
[ 95%] Generating theme-beeninorder.css.hpp
[ 96%] Generating theme-ketivah.css.hpp
[ 96%] Generating theme-mangotango.css.hpp
[ 97%] Generating theme-playground.css.hpp
[ 97%] Generating theme-polarnight.css.hpp
[ 97%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[ 97%] Built target llama-retrieval
[ 97%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-vdot
[ 98%] Built target llama-tokenize
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 99%] Linking CXX executable ../../bin/llama-q8dot
[ 99%] Built target llama-vdot
[ 99%] Built target llama-simple
[ 99%] Built target llama-save-load-state
[ 99%] Built target llama-q8dot
[ 99%] Built target llama-speculative
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m15.306s
user	0m32.624s
sys	0m6.350s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_debug-ctest.log
+ ctest --output-on-failure -L main -E test-opt
Test project /home/ggml/work/llama.cpp/build-ci-debug
      Start  1: test-tokenizer-0-bert-bge
 1/28 Test  #1: test-tokenizer-0-bert-bge .........   Passed    0.16 sec
      Start  2: test-tokenizer-0-command-r
 2/28 Test  #2: test-tokenizer-0-command-r ........   Passed    3.18 sec
      Start  3: test-tokenizer-0-deepseek-coder
 3/28 Test  #3: test-tokenizer-0-deepseek-coder ...   Passed    0.41 sec
      Start  4: test-tokenizer-0-deepseek-llm
 4/28 Test  #4: test-tokenizer-0-deepseek-llm .....   Passed    1.08 sec
      Start  5: test-tokenizer-0-falcon
 5/28 Test  #5: test-tokenizer-0-falcon ...........   Passed    0.68 sec
      Start  6: test-tokenizer-0-gpt-2
 6/28 Test  #6: test-tokenizer-0-gpt-2 ............   Passed    0.57 sec
      Start  7: test-tokenizer-0-llama-bpe
 7/28 Test  #7: test-tokenizer-0-llama-bpe ........   Passed    2.12 sec
      Start  8: test-tokenizer-0-llama-spm
 8/28 Test  #8: test-tokenizer-0-llama-spm ........   Passed    0.16 sec
      Start  9: test-tokenizer-0-mpt
 9/28 Test  #9: test-tokenizer-0-mpt ..............   Passed    0.53 sec
      Start 10: test-tokenizer-0-phi-3
10/28 Test #10: test-tokenizer-0-phi-3 ............   Passed    0.18 sec
      Start 11: test-tokenizer-0-qwen2
11/28 Test #11: test-tokenizer-0-qwen2 ............   Passed    1.76 sec
      Start 12: test-tokenizer-0-refact
12/28 Test #12: test-tokenizer-0-refact ...........   Passed    0.53 sec
      Start 13: test-tokenizer-0-starcoder
13/28 Test #13: test-tokenizer-0-starcoder ........   Passed    0.54 sec
      Start 14: test-tokenizer-1-llama-spm
14/28 Test #14: test-tokenizer-1-llama-spm ........   Passed    1.59 sec
      Start 15: test-log
15/28 Test #15: test-log ..........................   Passed    0.03 sec
      Start 16: test-arg-parser
16/28 Test #16: test-arg-parser ...................   Passed    0.06 sec
      Start 17: test-quantize-fns
17/28 Test #17: test-quantize-fns .................   Passed   35.93 sec
      Start 18: test-quantize-perf
18/28 Test #18: test-quantize-perf ................   Passed   11.06 sec
      Start 19: test-sampling
19/28 Test #19: test-sampling .....................   Passed    0.08 sec
      Start 20: test-chat-template
20/28 Test #20: test-chat-template ................   Passed    0.04 sec
      Start 21: test-grammar-parser
21/28 Test #21: test-grammar-parser ...............   Passed    0.05 sec
      Start 22: test-llama-grammar
22/28 Test #22: test-llama-grammar ................   Passed    0.04 sec
      Start 23: test-grammar-integration
23/28 Test #23: test-grammar-integration ..........   Passed    0.09 sec
      Start 24: test-grad0
24/28 Test #24: test-grad0 ........................   Passed    0.80 sec
      Start 25: test-barrier
25/28 Test #25: test-barrier ......................   Passed    2.70 sec
      Start 26: test-backend-ops
26/28 Test #26: test-backend-ops ..................   Passed  253.57 sec
      Start 27: test-rope
27/28 Test #27: test-rope .........................   Passed    0.11 sec
      Start 30: test-json-schema-to-grammar
28/28 Test #30: test-json-schema-to-grammar .......   Passed    2.73 sec

100% tests passed, 0 tests failed out of 28

Label Time Summary:
main    = 320.78 sec*proc (28 tests)

Total Test time (real) = 320.79 sec

real	5m20.827s
user	9m33.267s
sys	0m5.695s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_release
+ tee /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_release.log
+ cd /home/ggml/work/llama.cpp
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ gg_check_build_requirements
+ command -v cmake
+ command -v make
+ command -v ctest
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_release-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- OpenMP found
-- Using llamafile
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- x86 detected
-- Configuring done (9.4s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.644s
user	0m7.643s
sys	0m2.005s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_release-make.log
++ nproc
+ make -j6
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  2%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  3%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-alloc.c.o
[  3%] Built target sha1
[  3%] Built target xxhash
[  3%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-backend.c.o
[  4%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-quants.c.o
[  4%] Built target sha256
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/arange.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/acc.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/argsort.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/binbcast.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/clamp.cu.o
[  6%] Built target build_info
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/concat.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/conv-transpose-1d.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/convert.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cpy.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cross-entropy-loss.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/diagmask.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/dmmv.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f16.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f32.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/getrows.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/im2col.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmq.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmvq.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/norm.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pad.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pool2d.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/quantize.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/rope.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/scale.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/softmax.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sum.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sumrows.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/tsembd.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/unary.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/upscale.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq1_s.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_s.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_xs.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_xxs.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq3_s.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq3_xxs.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq4_nl.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq4_xs.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q2_k.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q3_k.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_1.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_k.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_0.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_1.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_k.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q6_k.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q8_0.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 28%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 28%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 30%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 30%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 31%] Building CXX object ggml/src/CMakeFiles/ggml.dir/llamafile/sgemm.cpp.o
[ 31%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-aarch64.c.o
[ 31%] Linking CXX shared library libggml.so
[ 31%] Built target ggml
[ 31%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 32%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 32%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 32%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 32%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 33%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 34%] Linking CXX executable ../../bin/llama-gguf
[ 35%] Linking CXX executable ../../bin/llama-gguf-hash
[ 35%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 36%] Linking CXX shared library libllama.so
[ 36%] Built target llama-gguf-hash
[ 36%] Built target llama-gguf
[ 36%] Built target llama
[ 37%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 38%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 38%] Building CXX object examples/benchmark/CMakeFiles/llama-bench-matmult.dir/benchmark-matmult.cpp.o
[ 38%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 38%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 38%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 38%] Linking C executable ../bin/test-c
[ 39%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 39%] Linking CXX executable ../../bin/llama-bench-matmult
[ 40%] Linking CXX executable ../../bin/llama-quantize-stats
[ 41%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 41%] Built target llava
[ 41%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 41%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 42%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 42%] Built target test-c
[ 42%] Linking CXX static library libllava_static.a
[ 42%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 43%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 43%] Linking CXX shared library libllava_shared.so
[ 43%] Built target llava_static
[ 43%] Built target llama-bench-matmult
[ 43%] Built target llama-quantize-stats
[ 43%] Built target llava_shared
[ 43%] Linking CXX static library libcommon.a
[ 43%] Built target common
[ 43%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 47%] Linking CXX executable ../bin/test-tokenizer-0
[ 48%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 48%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 48%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 48%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 49%] Linking CXX executable ../bin/test-log
[ 49%] Linking CXX executable ../bin/test-quantize-fns
[ 49%] Linking CXX executable ../bin/test-arg-parser
[ 49%] Built target test-log
[ 49%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 50%] Built target test-tokenizer-1-spm
[ 50%] Built target test-tokenizer-1-bpe
[ 50%] Built target test-tokenizer-0
[ 50%] Linking CXX executable ../bin/test-quantize-perf
[ 51%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 51%] Built target test-quantize-fns
[ 51%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 53%] Linking CXX executable ../bin/test-sampling
[ 53%] Linking CXX executable ../bin/test-chat-template
[ 54%] Linking CXX executable ../bin/test-grammar-parser
[ 55%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 55%] Built target test-arg-parser
[ 56%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 56%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 56%] Built target test-quantize-perf
[ 57%] Linking CXX executable ../bin/test-grammar-integration
[ 58%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-grad0
[ 58%] Built target test-grammar-parser
[ 58%] Built target test-sampling
[ 58%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 58%] Built target test-chat-template
[ 58%] Built target test-llama-grammar
[ 58%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 60%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 60%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 60%] Linking CXX executable ../bin/test-barrier
[ 60%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 61%] Linking CXX executable ../bin/test-backend-ops
[ 61%] Linking CXX executable ../bin/test-rope
[ 62%] Linking CXX executable ../bin/test-model-load-cancel
[ 62%] Built target test-grad0
[ 62%] Built target test-grammar-integration
[ 63%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 63%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 63%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 64%] Linking CXX executable ../bin/test-autorelease
[ 65%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 65%] Built target test-barrier
[ 65%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 65%] Built target test-model-load-cancel
[ 65%] Built target test-rope
[ 66%] Building CXX object examples/baby-llama/CMakeFiles/llama-baby-llama.dir/baby-llama.cpp.o
[ 66%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 66%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 66%] Linking CXX executable ../../bin/llama-baby-llama
[ 66%] Built target test-backend-ops
[ 67%] Linking CXX executable ../../bin/llama-batched-bench
[ 67%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 68%] Linking CXX executable ../../bin/llama-cvector-generator
[ 69%] Linking CXX executable ../../bin/llama-batched
[ 69%] Built target test-autorelease
[ 70%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 70%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 70%] Built target test-json-schema-to-grammar
[ 70%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 70%] Built target llama-baby-llama
[ 71%] Linking CXX executable ../../bin/llama-embedding
[ 71%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 71%] Linking CXX executable ../../bin/llama-eval-callback
[ 71%] Built target llama-batched-bench
[ 72%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 72%] Built target llama-cvector-generator
[ 72%] Built target llama-batched
[ 73%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 73%] Linking CXX executable ../../bin/llama-export-lora
[ 73%] Built target llama-convert-llama2c-to-ggml
[ 73%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 73%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 74%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-gguf-split
[ 74%] Linking CXX executable ../../bin/llama-gritlm
[ 74%] Built target llama-embedding
[ 75%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 75%] Built target llama-eval-callback
[ 75%] Linking CXX executable ../../bin/llama-imatrix
[ 76%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 76%] Linking CXX executable ../../bin/llama-infill
[ 76%] Built target llama-gbnf-validator
[ 76%] Built target llama-gguf-split
[ 76%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 76%] Built target llama-export-lora
[ 76%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 77%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 78%] Linking CXX executable ../../bin/llama-llava-cli
[ 79%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 79%] Built target llama-gritlm
[ 79%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-lookahead
[ 80%] Built target llama-imatrix
[ 80%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 80%] Built target llama-infill
[ 80%] Linking CXX executable ../../bin/llama-lookup
[ 81%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-lookup-create
[ 81%] Built target llama-bench
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 82%] Built target llama-llava-cli
[ 82%] Linking CXX executable ../../bin/llama-lookup-merge
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 82%] Built target llama-minicpmv-cli
[ 83%] Linking CXX executable ../../bin/llama-lookup-stats
[ 84%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 84%] Built target llama-lookahead
[ 84%] Linking CXX executable ../../bin/llama-cli
[ 84%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-parallel
[ 84%] Built target llama-lookup-merge
[ 84%] Built target llama-lookup
[ 85%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 86%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-passkey
[ 86%] Built target llama-lookup-create
[ 86%] Linking CXX executable ../../bin/llama-perplexity
[ 86%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 86%] Built target llama-lookup-stats
[ 87%] Linking CXX executable ../../bin/llama-quantize
[ 87%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-retrieval
[ 87%] Built target llama-cli
[ 87%] Generating theme-snowstorm.css.hpp
[ 87%] Built target llama-parallel
[ 88%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 89%] Generating colorthemes.css.hpp
[ 89%] Linking CXX executable ../../bin/llama-save-load-state
[ 89%] Generating completion.js.hpp
[ 89%] Built target llama-passkey
[ 89%] Generating index-new.html.hpp
[ 89%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 89%] Built target llama-perplexity
[ 89%] Built target llama-quantize
[ 89%] Linking CXX executable ../../bin/llama-simple
[ 90%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 91%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 91%] Linking CXX executable ../../bin/llama-speculative
[ 91%] Linking CXX executable ../../bin/llama-tokenize
[ 91%] Built target llama-retrieval
[ 91%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-vdot
[ 92%] Built target llama-save-load-state
[ 93%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 94%] Generating index.html.hpp
[ 94%] Linking CXX executable ../../bin/llama-q8dot
[ 94%] Built target llama-tokenize
[ 95%] Generating index.js.hpp
[ 95%] Built target llama-simple
[ 95%] Generating json-schema-to-grammar.mjs.hpp
[ 95%] Built target llama-speculative
[ 96%] Generating loading.html.hpp
[ 96%] Built target llama-vdot
[ 97%] Generating prompt-formats.js.hpp
[ 97%] Generating style.css.hpp
[ 97%] Generating system-prompts.js.hpp
[ 97%] Built target llama-q8dot
[ 97%] Generating theme-beeninorder.css.hpp
[ 98%] Generating theme-ketivah.css.hpp
[ 98%] Generating theme-mangotango.css.hpp
[ 99%] Generating theme-playground.css.hpp
[ 99%] Generating theme-polarnight.css.hpp
[ 99%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m15.695s
user	0m20.905s
sys	0m3.298s
+ '[' -z ']'
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_release-ctest.log
+ ctest --output-on-failure -L main
Test project /home/ggml/work/llama.cpp/build-ci-release
      Start  1: test-tokenizer-0-bert-bge
 1/28 Test  #1: test-tokenizer-0-bert-bge .........   Passed    0.07 sec
      Start  2: test-tokenizer-0-command-r
 2/28 Test  #2: test-tokenizer-0-command-r ........   Passed    0.86 sec
      Start  3: test-tokenizer-0-deepseek-coder
 3/28 Test  #3: test-tokenizer-0-deepseek-coder ...   Passed    0.14 sec
      Start  4: test-tokenizer-0-deepseek-llm
 4/28 Test  #4: test-tokenizer-0-deepseek-llm .....   Passed    0.35 sec
      Start  5: test-tokenizer-0-falcon
 5/28 Test  #5: test-tokenizer-0-falcon ...........   Passed    0.21 sec
      Start  6: test-tokenizer-0-gpt-2
 6/28 Test  #6: test-tokenizer-0-gpt-2 ............   Passed    0.17 sec
      Start  7: test-tokenizer-0-llama-bpe
 7/28 Test  #7: test-tokenizer-0-llama-bpe ........   Passed    0.60 sec
      Start  8: test-tokenizer-0-llama-spm
 8/28 Test  #8: test-tokenizer-0-llama-spm ........   Passed    0.09 sec
      Start  9: test-tokenizer-0-mpt
 9/28 Test  #9: test-tokenizer-0-mpt ..............   Passed    0.17 sec
      Start 10: test-tokenizer-0-phi-3
10/28 Test #10: test-tokenizer-0-phi-3 ............   Passed    0.09 sec
      Start 11: test-tokenizer-0-qwen2
11/28 Test #11: test-tokenizer-0-qwen2 ............   Passed    0.49 sec
      Start 12: test-tokenizer-0-refact
12/28 Test #12: test-tokenizer-0-refact ...........   Passed    0.16 sec
      Start 13: test-tokenizer-0-starcoder
13/28 Test #13: test-tokenizer-0-starcoder ........   Passed    0.16 sec
      Start 14: test-tokenizer-1-llama-spm
14/28 Test #14: test-tokenizer-1-llama-spm ........   Passed    0.33 sec
      Start 15: test-log
15/28 Test #15: test-log ..........................   Passed    0.02 sec
      Start 16: test-arg-parser
16/28 Test #16: test-arg-parser ...................   Passed    0.05 sec
      Start 17: test-quantize-fns
17/28 Test #17: test-quantize-fns .................   Passed   20.50 sec
      Start 18: test-quantize-perf
18/28 Test #18: test-quantize-perf ................   Passed    6.02 sec
      Start 19: test-sampling
19/28 Test #19: test-sampling .....................   Passed    0.05 sec
      Start 20: test-chat-template
20/28 Test #20: test-chat-template ................   Passed    0.04 sec
      Start 21: test-grammar-parser
21/28 Test #21: test-grammar-parser ...............   Passed    0.04 sec
      Start 22: test-llama-grammar
22/28 Test #22: test-llama-grammar ................   Passed    0.04 sec
      Start 23: test-grammar-integration
23/28 Test #23: test-grammar-integration ..........   Passed    0.04 sec
      Start 24: test-grad0
24/28 Test #24: test-grad0 ........................   Passed    0.54 sec
      Start 25: test-barrier
25/28 Test #25: test-barrier ......................   Passed    0.47 sec
      Start 26: test-backend-ops
26/28 Test #26: test-backend-ops ..................   Passed   57.57 sec
      Start 27: test-rope
27/28 Test #27: test-rope .........................   Passed    0.09 sec
      Start 30: test-json-schema-to-grammar
28/28 Test #30: test-json-schema-to-grammar .......   Passed    2.67 sec

100% tests passed, 0 tests failed out of 28

Label Time Summary:
main    =  92.04 sec*proc (28 tests)

Total Test time (real) =  92.05 sec

real	1m32.091s
user	1m36.450s
sys	0m6.376s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_embd_bge_small
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/embd_bge_small.log
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:43:45 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:43:46 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json [711396/711396] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:43:46 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json [366/366] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:43:46 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json [125/125] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:43:47 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json [52/52] -> "sentence_bert_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:43:47 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt [231508/231508] -> "vocab.txt" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:43:47 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json [349/349] -> "modules.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:43:47 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/1_Pooling https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
+ local out=models-mnt/bge-small/1_Pooling
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/1_Pooling
+ cd models-mnt/bge-small/1_Pooling
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:43:48 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json [190/190] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ path_models=../models-mnt/bge-small
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/embd_bge_small-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- OpenMP found
-- Using llamafile
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- x86 detected
-- Configuring done (9.3s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.510s
user	0m7.534s
sys	0m1.981s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/embd_bge_small-make.log
++ nproc
+ make -j6
[  1%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  1%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  1%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  2%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml.c.o
[  3%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-alloc.c.o
[  3%] Built target build_info
[  3%] Built target sha256
[  3%] Built target xxhash
[  3%] Built target sha1
[  3%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-backend.c.o
[  4%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-quants.c.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/acc.cu.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/arange.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/argsort.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/binbcast.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/clamp.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/concat.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/conv-transpose-1d.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cpy.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/convert.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cross-entropy-loss.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/diagmask.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/dmmv.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f16.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f32.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/getrows.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmq.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/im2col.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmvq.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pad.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/norm.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pool2d.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/quantize.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/rope.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/softmax.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/scale.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sum.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sumrows.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/tsembd.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/unary.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/upscale.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq1_s.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_s.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_xs.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_xxs.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq3_s.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq3_xxs.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq4_nl.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq4_xs.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q2_k.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q3_k.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_1.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_k.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_0.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_1.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_k.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q6_k.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q8_0.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 28%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 28%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 30%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 30%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 31%] Building CXX object ggml/src/CMakeFiles/ggml.dir/llamafile/sgemm.cpp.o
[ 31%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-aarch64.c.o
[ 31%] Linking CXX shared library libggml.so
[ 31%] Built target ggml
[ 32%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 32%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 32%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 32%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 33%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 33%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 34%] Linking CXX executable ../../bin/llama-gguf
[ 35%] Linking CXX executable ../../bin/llama-gguf-hash
[ 35%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 36%] Linking CXX shared library libllama.so
[ 36%] Built target llama-gguf
[ 36%] Built target llama-gguf-hash
[ 36%] Built target llama
[ 37%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 38%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 38%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 38%] Building CXX object examples/benchmark/CMakeFiles/llama-bench-matmult.dir/benchmark-matmult.cpp.o
[ 38%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 38%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 38%] Linking C executable ../bin/test-c
[ 39%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 39%] Linking CXX executable ../../bin/llama-bench-matmult
[ 40%] Linking CXX executable ../../bin/llama-quantize-stats
[ 41%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 41%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 41%] Built target llava
[ 41%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 42%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 42%] Built target test-c
[ 42%] Linking CXX static library libllava_static.a
[ 42%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 42%] Linking CXX shared library libllava_shared.so
[ 43%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 43%] Linking CXX static library libcommon.a
[ 43%] Built target llava_static
[ 43%] Built target common
[ 43%] Built target llama-bench-matmult
[ 43%] Built target llama-quantize-stats
[ 43%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 47%] Built target llava_shared
[ 47%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 47%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 47%] Linking CXX executable ../bin/test-tokenizer-0
[ 47%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 48%] Linking CXX executable ../bin/test-log
[ 48%] Linking CXX executable ../bin/test-arg-parser
[ 48%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 49%] Linking CXX executable ../bin/test-quantize-fns
[ 49%] Built target test-log
[ 49%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 49%] Built target test-tokenizer-0
[ 49%] Built target test-tokenizer-1-bpe
[ 49%] Built target test-tokenizer-1-spm
[ 50%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 51%] Linking CXX executable ../bin/test-quantize-perf
[ 51%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 52%] Built target test-quantize-fns
[ 52%] Linking CXX executable ../bin/test-chat-template
[ 53%] Linking CXX executable ../bin/test-sampling
[ 54%] Linking CXX executable ../bin/test-grammar-parser
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 54%] Built target test-arg-parser
[ 55%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 56%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 56%] Linking CXX executable ../bin/test-llama-grammar
[ 56%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 57%] Linking CXX executable ../bin/test-grammar-integration
[ 57%] Built target test-quantize-perf
[ 58%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 58%] Built target test-grammar-parser
[ 58%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 58%] Built target test-sampling
[ 58%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 58%] Linking CXX executable ../bin/test-grad0
[ 58%] Built target test-chat-template
[ 58%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 59%] Built target test-llama-grammar
[ 60%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 60%] Linking CXX executable ../bin/test-barrier
[ 60%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 61%] Linking CXX executable ../bin/test-backend-ops
[ 61%] Linking CXX executable ../bin/test-rope
[ 62%] Linking CXX executable ../bin/test-model-load-cancel
[ 62%] Built target test-grammar-integration
[ 63%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 63%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 64%] Linking CXX executable ../bin/test-autorelease
[ 64%] Built target test-grad0
[ 64%] Built target test-barrier
[ 64%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 64%] Built target test-rope
[ 64%] Built target test-model-load-cancel
[ 64%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 65%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 66%] Building CXX object examples/baby-llama/CMakeFiles/llama-baby-llama.dir/baby-llama.cpp.o
[ 66%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 66%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 67%] Linking CXX executable ../../bin/llama-cvector-generator
[ 67%] Built target test-backend-ops
[ 68%] Linking CXX executable ../../bin/llama-batched-bench
[ 68%] Linking CXX executable ../../bin/llama-baby-llama
[ 68%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 69%] Linking CXX executable ../../bin/llama-batched
[ 69%] Built target test-autorelease
[ 70%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 70%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 70%] Built target test-json-schema-to-grammar
[ 70%] Built target llama-baby-llama
[ 70%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 70%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 70%] Built target llama-cvector-generator
[ 71%] Linking CXX executable ../../bin/llama-embedding
[ 71%] Linking CXX executable ../../bin/llama-eval-callback
[ 71%] Built target llama-batched-bench
[ 72%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 73%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 73%] Built target llama-convert-llama2c-to-ggml
[ 73%] Linking CXX executable ../../bin/llama-export-lora
[ 73%] Built target llama-batched
[ 73%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 73%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 74%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-gguf-split
[ 74%] Linking CXX executable ../../bin/llama-gritlm
[ 74%] Built target llama-gbnf-validator
[ 74%] Built target llama-gguf-split
[ 74%] Built target llama-eval-callback
[ 75%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 75%] Built target llama-embedding
[ 76%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 76%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 76%] Linking CXX executable ../../bin/llama-imatrix
[ 76%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 76%] Linking CXX executable ../../bin/llama-infill
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 78%] Linking CXX executable ../../bin/llama-llava-cli
[ 78%] Built target llama-export-lora
[ 78%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 78%] Built target llama-gritlm
[ 79%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 79%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-lookahead
[ 80%] Built target llama-bench
[ 80%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 80%] Built target llama-imatrix
[ 80%] Built target llama-infill
[ 81%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-lookup
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-lookup-create
[ 82%] Built target llama-llava-cli
[ 82%] Linking CXX executable ../../bin/llama-lookup-merge
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 82%] Built target llama-minicpmv-cli
[ 83%] Linking CXX executable ../../bin/llama-lookup-stats
[ 83%] Built target llama-lookahead
[ 84%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 84%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-cli
[ 84%] Linking CXX executable ../../bin/llama-parallel
[ 84%] Built target llama-lookup-merge
[ 85%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 85%] Linking CXX executable ../../bin/llama-passkey
[ 85%] Built target llama-lookup-create
[ 86%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 86%] Built target llama-lookup
[ 86%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-perplexity
[ 86%] Built target llama-lookup-stats
[ 87%] Linking CXX executable ../../bin/llama-quantize
[ 87%] Built target llama-parallel
[ 87%] Built target llama-cli
[ 87%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 87%] Generating theme-snowstorm.css.hpp
[ 87%] Linking CXX executable ../../bin/llama-retrieval
[ 88%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-save-load-state
[ 89%] Generating colorthemes.css.hpp
[ 89%] Generating completion.js.hpp
[ 89%] Generating index-new.html.hpp
[ 89%] Built target llama-passkey
[ 89%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 89%] Linking CXX executable ../../bin/llama-simple
[ 89%] Built target llama-quantize
[ 89%] Built target llama-perplexity
[ 90%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-speculative
[ 90%] Built target llama-retrieval
[ 91%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 91%] Built target llama-save-load-state
[ 91%] Linking CXX executable ../../bin/llama-tokenize
[ 92%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-q8dot
[ 92%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 93%] Generating index.html.hpp
[ 94%] Linking CXX executable ../../bin/llama-vdot
[ 94%] Built target llama-simple
[ 95%] Generating index.js.hpp
[ 95%] Built target llama-tokenize
[ 95%] Generating json-schema-to-grammar.mjs.hpp
[ 96%] Generating loading.html.hpp
[ 96%] Built target llama-q8dot
[ 96%] Built target llama-speculative
[ 97%] Generating prompt-formats.js.hpp
[ 97%] Generating style.css.hpp
[ 97%] Generating system-prompts.js.hpp
[ 97%] Generating theme-beeninorder.css.hpp
[ 97%] Built target llama-vdot
[ 98%] Generating theme-ketivah.css.hpp
[ 98%] Generating theme-mangotango.css.hpp
[ 99%] Generating theme-playground.css.hpp
[ 99%] Generating theme-polarnight.css.hpp
[ 99%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m2.590s
user	0m8.308s
sys	0m2.920s
+ python3 ../convert_hf_to_gguf.py ../models-mnt/bge-small --outfile ../models-mnt/bge-small/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: bge-small
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,               torch.float32 --> F16, shape = {384, 30522}
INFO:hf-to-gguf:position_embd.weight,            torch.float32 --> F32, shape = {384, 512}
INFO:hf-to-gguf:token_types.weight,              torch.float32 --> F32, shape = {384, 2}
INFO:hf-to-gguf:token_embd_norm.weight,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:token_embd_norm.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.0.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.0.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.0.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.1.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.1.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.1.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.2.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.2.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.2.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.3.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.3.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.3.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.4.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.4.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.4.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.5.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.5.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.5.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.6.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.6.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.6.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.7.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.7.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.7.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.8.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.8.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.8.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.9.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.9.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.9.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_q.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_q.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_k.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_k.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_v.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_v.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output.weight,       torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_output.bias,         torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.ffn_up.weight,            torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.10.ffn_up.bias,              torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.10.ffn_down.weight,          torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.10.ffn_down.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.layer_output_norm.weight, torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.layer_output_norm.bias,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_q.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_q.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_k.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_k.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_v.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_v.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output.weight,       torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_output.bias,         torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.ffn_up.weight,            torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.11.ffn_up.bias,              torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.11.ffn_down.weight,          torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.11.ffn_down.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.layer_output_norm.weight, torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.layer_output_norm.bias,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:Set meta model
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:gguf: context length = 512
INFO:hf-to-gguf:gguf: embedding length = 384
INFO:hf-to-gguf:gguf: feed forward length = 1536
INFO:hf-to-gguf:gguf: head count = 12
INFO:hf-to-gguf:gguf: layer norm epsilon = 1e-12
INFO:hf-to-gguf:gguf: file type = 1
INFO:hf-to-gguf:Set model tokenizer
INFO:gguf.vocab:Setting special token type unk to 100
INFO:gguf.vocab:Setting special token type sep to 102
INFO:gguf.vocab:Setting special token type pad to 0
INFO:gguf.vocab:Setting special token type cls to 101
INFO:gguf.vocab:Setting special token type mask to 103
INFO:hf-to-gguf:Set model quantization version
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/bge-small/ggml-model-f16.gguf: n_tensors = 197, total_size = 66.9M
Writing:   0%|          | 0.00/66.9M [00:00<?, ?byte/s]Writing:  45%|████▌     | 30.2M/66.9M [00:00<00:00, 298Mbyte/s]Writing:  90%|████████▉ | 60.1M/66.9M [00:00<00:00, 293Mbyte/s]Writing: 100%|██████████| 66.9M/66.9M [00:00<00:00, 289Mbyte/s]
INFO:hf-to-gguf:Model successfully exported to ../models-mnt/bge-small/ggml-model-f16.gguf
+ model_f16=../models-mnt/bge-small/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/bge-small/ggml-model-q8_0.gguf
+ ./bin/llama-quantize ../models-mnt/bge-small/ggml-model-f16.gguf ../models-mnt/bge-small/ggml-model-q8_0.gguf q8_0
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/bge-small/ggml-model-f16.gguf' to '../models-mnt/bge-small/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 25 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = Bge Small
llama_model_loader: - kv   3:                           general.basename str              = bge
llama_model_loader: - kv   4:                         general.size_label str              = small
llama_model_loader: - kv   5:                           bert.block_count u32              = 12
llama_model_loader: - kv   6:                        bert.context_length u32              = 512
llama_model_loader: - kv   7:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   8:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   9:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv  10:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 1
llama_model_loader: - kv  12:                      bert.attention.causal bool             = false
llama_model_loader: - kv  13:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  14:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  15:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  16:                         tokenizer.ggml.pre str              = jina-v2-en
llama_model_loader: - kv  17:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  18:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  19:            tokenizer.ggml.unknown_token_id u32              = 100
llama_model_loader: - kv  20:          tokenizer.ggml.seperator_token_id u32              = 102
llama_model_loader: - kv  21:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  22:                tokenizer.ggml.cls_token_id u32              = 101
llama_model_loader: - kv  23:               tokenizer.ggml.mask_token_id u32              = 103
llama_model_loader: - kv  24:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  124 tensors
llama_model_loader: - type  f16:   73 tensors
[   1/ 197]                    token_embd.weight - [  384, 30522,     1,     1], type =    f16, converting to q8_0 .. size =    22.35 MiB ->    11.88 MiB
[   2/ 197]                 position_embd.weight - [  384,   512,     1,     1], type =    f32, size =    0.750 MB
[   3/ 197]                   token_types.weight - [  384,     2,     1,     1], type =    f32, size =    0.003 MB
[   4/ 197]               token_embd_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   5/ 197]                 token_embd_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   6/ 197]                  blk.0.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[   7/ 197]                    blk.0.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   8/ 197]                  blk.0.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[   9/ 197]                    blk.0.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  10/ 197]                  blk.0.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  11/ 197]                    blk.0.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  12/ 197]             blk.0.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  13/ 197]               blk.0.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  14/ 197]        blk.0.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  15/ 197]          blk.0.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  16/ 197]                  blk.0.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  17/ 197]                    blk.0.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  18/ 197]                blk.0.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  19/ 197]                  blk.0.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  20/ 197]       blk.0.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  21/ 197]         blk.0.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  22/ 197]                  blk.1.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  23/ 197]                    blk.1.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  24/ 197]                  blk.1.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  25/ 197]                    blk.1.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  26/ 197]                  blk.1.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  27/ 197]                    blk.1.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  28/ 197]             blk.1.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  29/ 197]               blk.1.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  30/ 197]        blk.1.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  31/ 197]          blk.1.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  32/ 197]                  blk.1.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  33/ 197]                    blk.1.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  34/ 197]                blk.1.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  35/ 197]                  blk.1.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  36/ 197]       blk.1.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  37/ 197]         blk.1.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  38/ 197]                  blk.2.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  39/ 197]                    blk.2.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  40/ 197]                  blk.2.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  41/ 197]                    blk.2.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  42/ 197]                  blk.2.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  43/ 197]                    blk.2.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  44/ 197]             blk.2.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  45/ 197]               blk.2.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  46/ 197]        blk.2.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  47/ 197]          blk.2.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  48/ 197]                  blk.2.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  49/ 197]                    blk.2.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  50/ 197]                blk.2.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  51/ 197]                  blk.2.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  52/ 197]       blk.2.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  53/ 197]         blk.2.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  54/ 197]                  blk.3.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  55/ 197]                    blk.3.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  56/ 197]                  blk.3.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  57/ 197]                    blk.3.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  58/ 197]                  blk.3.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  59/ 197]                    blk.3.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  60/ 197]             blk.3.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  61/ 197]               blk.3.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  62/ 197]        blk.3.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  63/ 197]          blk.3.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  64/ 197]                  blk.3.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  65/ 197]                    blk.3.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  66/ 197]                blk.3.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  67/ 197]                  blk.3.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  68/ 197]       blk.3.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  69/ 197]         blk.3.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  70/ 197]                  blk.4.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  71/ 197]                    blk.4.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  72/ 197]                  blk.4.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  73/ 197]                    blk.4.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  74/ 197]                  blk.4.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  75/ 197]                    blk.4.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  76/ 197]             blk.4.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  77/ 197]               blk.4.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  78/ 197]        blk.4.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  79/ 197]          blk.4.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  80/ 197]                  blk.4.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  81/ 197]                    blk.4.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  82/ 197]                blk.4.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  83/ 197]                  blk.4.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  84/ 197]       blk.4.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  85/ 197]         blk.4.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  86/ 197]                  blk.5.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  87/ 197]                    blk.5.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  88/ 197]                  blk.5.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  89/ 197]                    blk.5.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  90/ 197]                  blk.5.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  91/ 197]                    blk.5.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  92/ 197]             blk.5.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  93/ 197]               blk.5.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  94/ 197]        blk.5.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  95/ 197]          blk.5.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  96/ 197]                  blk.5.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  97/ 197]                    blk.5.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  98/ 197]                blk.5.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  99/ 197]                  blk.5.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 100/ 197]       blk.5.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 101/ 197]         blk.5.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 102/ 197]                  blk.6.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 103/ 197]                    blk.6.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 104/ 197]                  blk.6.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 105/ 197]                    blk.6.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 106/ 197]                  blk.6.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 107/ 197]                    blk.6.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 108/ 197]             blk.6.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 109/ 197]               blk.6.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 110/ 197]        blk.6.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 111/ 197]          blk.6.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 112/ 197]                  blk.6.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 113/ 197]                    blk.6.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 114/ 197]                blk.6.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 115/ 197]                  blk.6.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 116/ 197]       blk.6.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 117/ 197]         blk.6.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 118/ 197]                  blk.7.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 119/ 197]                    blk.7.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 120/ 197]                  blk.7.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 121/ 197]                    blk.7.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 122/ 197]                  blk.7.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 123/ 197]                    blk.7.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 124/ 197]             blk.7.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 125/ 197]               blk.7.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 126/ 197]        blk.7.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 127/ 197]          blk.7.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 128/ 197]                  blk.7.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 129/ 197]                    blk.7.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 130/ 197]                blk.7.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 131/ 197]                  blk.7.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 132/ 197]       blk.7.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 133/ 197]         blk.7.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 134/ 197]                  blk.8.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 135/ 197]                    blk.8.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 136/ 197]                  blk.8.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 137/ 197]                    blk.8.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 138/ 197]                  blk.8.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 139/ 197]                    blk.8.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 140/ 197]             blk.8.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 141/ 197]               blk.8.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 142/ 197]        blk.8.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 143/ 197]          blk.8.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 144/ 197]                  blk.8.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 145/ 197]                    blk.8.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 146/ 197]                blk.8.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 147/ 197]                  blk.8.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 148/ 197]       blk.8.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 149/ 197]         blk.8.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 150/ 197]                  blk.9.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 151/ 197]                    blk.9.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 152/ 197]                  blk.9.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 153/ 197]                    blk.9.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 154/ 197]                  blk.9.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 155/ 197]                    blk.9.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 156/ 197]             blk.9.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 157/ 197]               blk.9.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 158/ 197]        blk.9.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 159/ 197]          blk.9.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 160/ 197]                  blk.9.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 161/ 197]                    blk.9.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 162/ 197]                blk.9.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 163/ 197]                  blk.9.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 164/ 197]       blk.9.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 165/ 197]         blk.9.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 166/ 197]                 blk.10.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 167/ 197]                   blk.10.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 168/ 197]                 blk.10.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 169/ 197]                   blk.10.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 170/ 197]                 blk.10.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 171/ 197]                   blk.10.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 172/ 197]            blk.10.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 173/ 197]              blk.10.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 174/ 197]       blk.10.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 175/ 197]         blk.10.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 176/ 197]                 blk.10.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 177/ 197]                   blk.10.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 178/ 197]               blk.10.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 179/ 197]                 blk.10.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 180/ 197]      blk.10.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 181/ 197]        blk.10.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 182/ 197]                 blk.11.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 183/ 197]                   blk.11.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 184/ 197]                 blk.11.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 185/ 197]                   blk.11.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 186/ 197]                 blk.11.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 187/ 197]                   blk.11.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 188/ 197]            blk.11.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 189/ 197]              blk.11.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 190/ 197]       blk.11.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 191/ 197]         blk.11.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 192/ 197]                 blk.11.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 193/ 197]                   blk.11.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 194/ 197]               blk.11.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 195/ 197]                 blk.11.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 196/ 197]      blk.11.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 197/ 197]        blk.11.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
llama_model_quantize_internal: model size  =    63.84 MB
llama_model_quantize_internal: quant size  =    34.38 MB

main: quantize time =   162.80 ms
main:    total time =   162.80 ms
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/embd_bge_small-tg-f16.log
+ ./bin/llama-embedding --model ../models-mnt/bge-small/ggml-model-f16.gguf -p 'I believe the meaning of life is'
0.00.000.862 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.006.713 I llama_model_loader: loaded meta data with 25 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.006.727 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.006.736 I llama_model_loader: - kv   0:                       general.architecture str              = bert
0.00.006.737 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.006.738 I llama_model_loader: - kv   2:                               general.name str              = Bge Small
0.00.006.739 I llama_model_loader: - kv   3:                           general.basename str              = bge
0.00.006.739 I llama_model_loader: - kv   4:                         general.size_label str              = small
0.00.006.744 I llama_model_loader: - kv   5:                           bert.block_count u32              = 12
0.00.006.744 I llama_model_loader: - kv   6:                        bert.context_length u32              = 512
0.00.006.745 I llama_model_loader: - kv   7:                      bert.embedding_length u32              = 384
0.00.006.746 I llama_model_loader: - kv   8:                   bert.feed_forward_length u32              = 1536
0.00.006.747 I llama_model_loader: - kv   9:                  bert.attention.head_count u32              = 12
0.00.006.750 I llama_model_loader: - kv  10:          bert.attention.layer_norm_epsilon f32              = 0.000000
0.00.006.751 I llama_model_loader: - kv  11:                          general.file_type u32              = 1
0.00.006.752 I llama_model_loader: - kv  12:                      bert.attention.causal bool             = false
0.00.006.752 I llama_model_loader: - kv  13:                          bert.pooling_type u32              = 2
0.00.006.753 I llama_model_loader: - kv  14:            tokenizer.ggml.token_type_count u32              = 2
0.00.006.754 I llama_model_loader: - kv  15:                       tokenizer.ggml.model str              = bert
0.00.006.754 I llama_model_loader: - kv  16:                         tokenizer.ggml.pre str              = jina-v2-en
0.00.011.591 I llama_model_loader: - kv  17:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
0.00.012.713 I llama_model_loader: - kv  18:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.012.719 I llama_model_loader: - kv  19:            tokenizer.ggml.unknown_token_id u32              = 100
0.00.012.719 I llama_model_loader: - kv  20:          tokenizer.ggml.seperator_token_id u32              = 102
0.00.012.720 I llama_model_loader: - kv  21:            tokenizer.ggml.padding_token_id u32              = 0
0.00.012.721 I llama_model_loader: - kv  22:                tokenizer.ggml.cls_token_id u32              = 101
0.00.012.721 I llama_model_loader: - kv  23:               tokenizer.ggml.mask_token_id u32              = 103
0.00.012.722 I llama_model_loader: - kv  24:               general.quantization_version u32              = 2
0.00.012.724 I llama_model_loader: - type  f32:  124 tensors
0.00.012.726 I llama_model_loader: - type  f16:   73 tensors
0.00.023.158 I llm_load_vocab: special tokens cache size = 5
0.00.027.589 I llm_load_vocab: token to piece cache size = 0.2032 MB
0.00.027.605 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.027.606 I llm_load_print_meta: arch             = bert
0.00.027.610 I llm_load_print_meta: vocab type       = WPM
0.00.027.611 I llm_load_print_meta: n_vocab          = 30522
0.00.027.612 I llm_load_print_meta: n_merges         = 0
0.00.027.612 I llm_load_print_meta: vocab_only       = 0
0.00.027.613 I llm_load_print_meta: n_ctx_train      = 512
0.00.027.613 I llm_load_print_meta: n_embd           = 384
0.00.027.614 I llm_load_print_meta: n_layer          = 12
0.00.027.623 I llm_load_print_meta: n_head           = 12
0.00.027.625 I llm_load_print_meta: n_head_kv        = 12
0.00.027.625 I llm_load_print_meta: n_rot            = 32
0.00.027.626 I llm_load_print_meta: n_swa            = 0
0.00.027.626 I llm_load_print_meta: n_embd_head_k    = 32
0.00.027.626 I llm_load_print_meta: n_embd_head_v    = 32
0.00.027.627 I llm_load_print_meta: n_gqa            = 1
0.00.027.628 I llm_load_print_meta: n_embd_k_gqa     = 384
0.00.027.630 I llm_load_print_meta: n_embd_v_gqa     = 384
0.00.027.632 I llm_load_print_meta: f_norm_eps       = 1.0e-12
0.00.027.632 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.027.633 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.027.633 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.027.634 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.027.635 I llm_load_print_meta: n_ff             = 1536
0.00.027.636 I llm_load_print_meta: n_expert         = 0
0.00.027.636 I llm_load_print_meta: n_expert_used    = 0
0.00.027.637 I llm_load_print_meta: causal attn      = 0
0.00.027.637 I llm_load_print_meta: pooling type     = 2
0.00.027.638 I llm_load_print_meta: rope type        = 2
0.00.027.639 I llm_load_print_meta: rope scaling     = linear
0.00.027.640 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.027.641 I llm_load_print_meta: freq_scale_train = 1
0.00.027.642 I llm_load_print_meta: n_ctx_orig_yarn  = 512
0.00.027.642 I llm_load_print_meta: rope_finetuned   = unknown
0.00.027.644 I llm_load_print_meta: ssm_d_conv       = 0
0.00.027.644 I llm_load_print_meta: ssm_d_inner      = 0
0.00.027.644 I llm_load_print_meta: ssm_d_state      = 0
0.00.027.646 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.027.646 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.027.647 I llm_load_print_meta: model type       = 33M
0.00.027.648 I llm_load_print_meta: model ftype      = F16
0.00.027.650 I llm_load_print_meta: model params     = 33.21 M
0.00.027.652 I llm_load_print_meta: model size       = 63.84 MiB (16.12 BPW) 
0.00.027.652 I llm_load_print_meta: general.name     = Bge Small
0.00.027.656 I llm_load_print_meta: UNK token        = 100 '[UNK]'
0.00.027.657 I llm_load_print_meta: SEP token        = 102 '[SEP]'
0.00.027.658 I llm_load_print_meta: PAD token        = 0 '[PAD]'
0.00.027.660 I llm_load_print_meta: CLS token        = 101 '[CLS]'
0.00.027.661 I llm_load_print_meta: MASK token       = 103 '[MASK]'
0.00.027.661 I llm_load_print_meta: LF token         = 0 '[PAD]'
0.00.027.661 I llm_load_print_meta: max token length = 21
0.00.136.369 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.136.377 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.136.377 I ggml_cuda_init: found 1 CUDA devices:
0.00.136.481 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.444.837 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.449.844 I llm_load_tensors: offloading 0 repeating layers to GPU
0.00.449.853 I llm_load_tensors: offloaded 0/13 layers to GPU
0.00.449.857 I llm_load_tensors:        CPU buffer size =    63.84 MiB
...............................................
0.00.450.984 I llama_new_context_with_model: n_ctx      = 512
0.00.450.990 I llama_new_context_with_model: n_batch    = 2048
0.00.450.990 I llama_new_context_with_model: n_ubatch   = 2048
0.00.450.991 I llama_new_context_with_model: flash_attn = 0
0.00.450.993 I llama_new_context_with_model: freq_base  = 10000.0
0.00.450.994 I llama_new_context_with_model: freq_scale = 1
0.00.456.675 I llama_kv_cache_init:  CUDA_Host KV buffer size =     9.00 MiB
0.00.456.686 I llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
0.00.456.695 I llama_new_context_with_model:        CPU  output buffer size =     0.00 MiB
0.00.462.099 I llama_new_context_with_model:      CUDA0 compute buffer size =    16.28 MiB
0.00.462.108 I llama_new_context_with_model:  CUDA_Host compute buffer size =     2.51 MiB
0.00.462.110 I llama_new_context_with_model: graph nodes  = 429
0.00.462.111 I llama_new_context_with_model: graph splits = 196
0.00.462.113 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.734 I 
0.00.468.947 I system_info: n_threads = 6 (n_threads_batch = 6) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.473.346 I batch_decode: n_tokens = 9, n_seq = 1

embedding 0: -0.043971 -0.019887  0.007663 -0.000824  0.001372 -0.037041  0.109431  0.042579  0.092050 -0.015921  0.006796 -0.035682 -0.017892  0.015058  0.018117  0.015870 -0.011307  0.010421 -0.085232 -0.008456  0.091377 -0.017067 -0.060337 -0.024495  0.027518  0.076072  0.027974 -0.014562  0.017653 -0.033285 -0.037865 -0.019007  0.068672 -0.009835 -0.025036  0.072342 -0.046554  0.011027 -0.050256  0.047714  0.032397 -0.011750  0.022052  0.049647  0.010470  0.005795 -0.028867  0.008937 -0.018510 -0.051475 -0.046052  0.030481 -0.035416  0.054213 -0.069654  0.044246  0.029789  0.046301  0.073410 -0.042580  0.076097  0.038863 -0.181172  0.082497  0.042278 -0.064545 -0.060106 -0.017856  0.006471  0.005889  0.017175 -0.026632  0.064571  0.112595  0.035141 -0.067417  0.027090 -0.067273 -0.033473 -0.033230  0.033242  0.013526 -0.003331 -0.037474 -0.052065  0.055143 -0.001984 -0.038295  0.064454  0.028827 -0.043337 -0.029241 -0.039464  0.036320  0.008383 -0.015458 -0.036589  0.018140  0.028600  0.342822 -0.044477  0.056102  0.017634 -0.020864 -0.066809  0.000154 -0.037905 -0.030073 -0.008543 -0.021586  0.000541 -0.003217  0.004011  0.018914 -0.008555  0.025829  0.049449  0.000081  0.050945 -0.042485 -0.031907  0.023605  0.030692 -0.023156 -0.046272 -0.079275  0.115182  0.046762  0.027836 -0.040734  0.067783 -0.022958  0.010323 -0.032946 -0.018314  0.043840  0.024255  0.052406  0.007480  0.008893  0.011244 -0.074651 -0.065568 -0.026751 -0.041200 -0.023880  0.026733  0.006902  0.027742  0.052874 -0.036661  0.057705 -0.000184  0.031742 -0.019777 -0.022070  0.041034 -0.058905  0.019605  0.043142  0.043589  0.041584 -0.022513  0.027057 -0.021825  0.005437 -0.041311 -0.001238  0.024444  0.002093  0.044337 -0.022741  0.043659  0.064765  0.055427  0.037071 -0.000925  0.046119  0.045812 -0.008494  0.063036 -0.073246 -0.011939  0.032116  0.023947  0.014722 -0.033678  0.001097 -0.015835 -0.019013  0.047876  0.110832  0.028430  0.031357 -0.013289 -0.057524  0.006646  0.005143 -0.012263 -0.051455 -0.000979 -0.017652 -0.019425 -0.040925  0.009179 -0.057956  0.050957  0.052340 -0.009602 -0.040253 -0.014084 -0.024886 -0.017274  0.006299  0.006589 -0.026932  0.015615  0.030755  0.002572  0.023215 -0.022197 -0.098550 -0.051096 -0.278021 -0.014996 -0.061568 -0.027221  0.017664 -0.010950 -0.017082  0.035070  0.046994 -0.015423  0.015225 -0.025470  0.047855 -0.005946 -0.000738 -0.061018 -0.068947 -0.060381 -0.035951  0.043324 -0.055042  0.015084  0.000538 -0.058191 -0.010447  0.012633  0.151499  0.127104 -0.013609  0.042008 -0.025671  0.014024 -0.001044 -0.150460  0.044855  0.005313 -0.036279 -0.029804 -0.020186 -0.034881  0.010230  0.033543 -0.048173 -0.051793 -0.017468 -0.023487  0.047365  0.052072 -0.016783 -0.055454  0.025828 -0.005707  0.010721  0.038705  0.008205 -0.009767 -0.105785 -0.027439 -0.096108  0.025063 -0.011246  0.092368  0.056099  0.003770  0.027797  0.002083 -0.051086 -0.039897 -0.013538 -0.044971 -0.015324  0.002920 -0.043506 -0.077937  0.065218 -0.006821 -0.001601 -0.014660  0.071550  0.023712 -0.037178  0.009176  0.001552 -0.032268  0.015464  0.037877  0.000362 -0.053205  0.021316 -0.039832  0.000026  0.013399  0.019805 -0.057878  0.006469 -0.049538 -0.267840  0.039152 -0.067975  0.038245 -0.012331  0.041494 -0.016127  0.052387 -0.071354  0.011362  0.024713 -0.007220  0.082106  0.028553 -0.021513  0.040503 -0.004554 -0.074587 -0.014753  0.020038  0.002303  0.023149  0.197202 -0.043238 -0.025992 -0.004957 -0.019292  0.074261  0.001716 -0.031988 -0.036595 -0.045076  0.000545 -0.011566  0.018119 -0.029467 -0.008452  0.006423  0.050808 -0.014955  0.006184  0.026096 -0.030803  0.048055  0.114093 -0.040820 -0.011463  0.005396 -0.003588  0.025159 -0.059132  0.013757 -0.010400  0.038709  0.051460  0.035404  0.035044 -0.017036  0.026371 -0.014494 -0.050020  0.003220  0.054129  0.039730 -0.039134 

0.00.480.520 I llama_perf_context_print:        load time =     466.30 ms
0.00.480.522 I llama_perf_context_print: prompt eval time =       5.15 ms /     9 tokens (    0.57 ms per token,  1747.23 tokens per second)
0.00.480.524 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.00.480.526 I llama_perf_context_print:       total time =      11.79 ms /    10 tokens

real	0m0.642s
user	0m0.126s
sys	0m0.542s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/embd_bge_small-tg-q8_0.log
+ ./bin/llama-embedding --model ../models-mnt/bge-small/ggml-model-q8_0.gguf -p 'I believe the meaning of life is'
0.00.000.822 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.006.856 I llama_model_loader: loaded meta data with 25 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-q8_0.gguf (version GGUF V3 (latest))
0.00.006.878 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.006.885 I llama_model_loader: - kv   0:                       general.architecture str              = bert
0.00.006.887 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.006.887 I llama_model_loader: - kv   2:                               general.name str              = Bge Small
0.00.006.888 I llama_model_loader: - kv   3:                           general.basename str              = bge
0.00.006.889 I llama_model_loader: - kv   4:                         general.size_label str              = small
0.00.006.893 I llama_model_loader: - kv   5:                           bert.block_count u32              = 12
0.00.006.894 I llama_model_loader: - kv   6:                        bert.context_length u32              = 512
0.00.006.895 I llama_model_loader: - kv   7:                      bert.embedding_length u32              = 384
0.00.006.895 I llama_model_loader: - kv   8:                   bert.feed_forward_length u32              = 1536
0.00.006.896 I llama_model_loader: - kv   9:                  bert.attention.head_count u32              = 12
0.00.006.899 I llama_model_loader: - kv  10:          bert.attention.layer_norm_epsilon f32              = 0.000000
0.00.006.900 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.006.901 I llama_model_loader: - kv  12:                      bert.attention.causal bool             = false
0.00.006.901 I llama_model_loader: - kv  13:                          bert.pooling_type u32              = 2
0.00.006.902 I llama_model_loader: - kv  14:            tokenizer.ggml.token_type_count u32              = 2
0.00.006.903 I llama_model_loader: - kv  15:                       tokenizer.ggml.model str              = bert
0.00.006.905 I llama_model_loader: - kv  16:                         tokenizer.ggml.pre str              = jina-v2-en
0.00.011.645 I llama_model_loader: - kv  17:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
0.00.012.812 I llama_model_loader: - kv  18:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.012.820 I llama_model_loader: - kv  19:            tokenizer.ggml.unknown_token_id u32              = 100
0.00.012.820 I llama_model_loader: - kv  20:          tokenizer.ggml.seperator_token_id u32              = 102
0.00.012.821 I llama_model_loader: - kv  21:            tokenizer.ggml.padding_token_id u32              = 0
0.00.012.822 I llama_model_loader: - kv  22:                tokenizer.ggml.cls_token_id u32              = 101
0.00.012.822 I llama_model_loader: - kv  23:               tokenizer.ggml.mask_token_id u32              = 103
0.00.012.823 I llama_model_loader: - kv  24:               general.quantization_version u32              = 2
0.00.012.825 I llama_model_loader: - type  f32:  124 tensors
0.00.012.827 I llama_model_loader: - type q8_0:   73 tensors
0.00.023.814 I llm_load_vocab: special tokens cache size = 5
0.00.027.162 I llm_load_vocab: token to piece cache size = 0.2032 MB
0.00.027.175 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.027.175 I llm_load_print_meta: arch             = bert
0.00.027.176 I llm_load_print_meta: vocab type       = WPM
0.00.027.178 I llm_load_print_meta: n_vocab          = 30522
0.00.027.178 I llm_load_print_meta: n_merges         = 0
0.00.027.178 I llm_load_print_meta: vocab_only       = 0
0.00.027.179 I llm_load_print_meta: n_ctx_train      = 512
0.00.027.179 I llm_load_print_meta: n_embd           = 384
0.00.027.179 I llm_load_print_meta: n_layer          = 12
0.00.027.186 I llm_load_print_meta: n_head           = 12
0.00.027.187 I llm_load_print_meta: n_head_kv        = 12
0.00.027.188 I llm_load_print_meta: n_rot            = 32
0.00.027.188 I llm_load_print_meta: n_swa            = 0
0.00.027.188 I llm_load_print_meta: n_embd_head_k    = 32
0.00.027.189 I llm_load_print_meta: n_embd_head_v    = 32
0.00.027.190 I llm_load_print_meta: n_gqa            = 1
0.00.027.191 I llm_load_print_meta: n_embd_k_gqa     = 384
0.00.027.192 I llm_load_print_meta: n_embd_v_gqa     = 384
0.00.027.193 I llm_load_print_meta: f_norm_eps       = 1.0e-12
0.00.027.194 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.027.194 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.027.194 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.027.195 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.027.196 I llm_load_print_meta: n_ff             = 1536
0.00.027.196 I llm_load_print_meta: n_expert         = 0
0.00.027.196 I llm_load_print_meta: n_expert_used    = 0
0.00.027.197 I llm_load_print_meta: causal attn      = 0
0.00.027.197 I llm_load_print_meta: pooling type     = 2
0.00.027.197 I llm_load_print_meta: rope type        = 2
0.00.027.198 I llm_load_print_meta: rope scaling     = linear
0.00.027.199 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.027.200 I llm_load_print_meta: freq_scale_train = 1
0.00.027.201 I llm_load_print_meta: n_ctx_orig_yarn  = 512
0.00.027.201 I llm_load_print_meta: rope_finetuned   = unknown
0.00.027.201 I llm_load_print_meta: ssm_d_conv       = 0
0.00.027.201 I llm_load_print_meta: ssm_d_inner      = 0
0.00.027.202 I llm_load_print_meta: ssm_d_state      = 0
0.00.027.202 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.027.202 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.027.203 I llm_load_print_meta: model type       = 33M
0.00.027.204 I llm_load_print_meta: model ftype      = Q8_0
0.00.027.205 I llm_load_print_meta: model params     = 33.21 M
0.00.027.206 I llm_load_print_meta: model size       = 34.38 MiB (8.68 BPW) 
0.00.027.207 I llm_load_print_meta: general.name     = Bge Small
0.00.027.207 I llm_load_print_meta: UNK token        = 100 '[UNK]'
0.00.027.207 I llm_load_print_meta: SEP token        = 102 '[SEP]'
0.00.027.208 I llm_load_print_meta: PAD token        = 0 '[PAD]'
0.00.027.208 I llm_load_print_meta: CLS token        = 101 '[CLS]'
0.00.027.209 I llm_load_print_meta: MASK token       = 103 '[MASK]'
0.00.027.209 I llm_load_print_meta: LF token         = 0 '[PAD]'
0.00.027.209 I llm_load_print_meta: max token length = 21
0.00.131.452 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.131.459 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.131.460 I ggml_cuda_init: found 1 CUDA devices:
0.00.131.564 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.411.632 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.414.405 I llm_load_tensors: offloading 0 repeating layers to GPU
0.00.414.413 I llm_load_tensors: offloaded 0/13 layers to GPU
0.00.414.418 I llm_load_tensors:        CPU buffer size =    34.38 MiB
.................................................
0.00.415.608 I llama_new_context_with_model: n_ctx      = 512
0.00.415.615 I llama_new_context_with_model: n_batch    = 2048
0.00.415.615 I llama_new_context_with_model: n_ubatch   = 2048
0.00.415.616 I llama_new_context_with_model: flash_attn = 0
0.00.415.618 I llama_new_context_with_model: freq_base  = 10000.0
0.00.415.619 I llama_new_context_with_model: freq_scale = 1
0.00.420.851 I llama_kv_cache_init:  CUDA_Host KV buffer size =     9.00 MiB
0.00.420.865 I llama_new_context_with_model: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
0.00.420.875 I llama_new_context_with_model:        CPU  output buffer size =     0.00 MiB
0.00.425.863 I llama_new_context_with_model:      CUDA0 compute buffer size =    16.90 MiB
0.00.425.872 I llama_new_context_with_model:  CUDA_Host compute buffer size =     2.51 MiB
0.00.425.874 I llama_new_context_with_model: graph nodes  = 429
0.00.425.874 I llama_new_context_with_model: graph splits = 196
0.00.425.877 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.303 I 
0.00.430.403 I system_info: n_threads = 6 (n_threads_batch = 6) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.432.568 I batch_decode: n_tokens = 9, n_seq = 1

embedding 0: -0.044922 -0.019413  0.009515 -0.002102  0.002819 -0.037346  0.108884  0.042320  0.092050 -0.015802  0.006203 -0.037483 -0.019315  0.014838  0.017312  0.014293 -0.014406  0.012199 -0.084337 -0.007969  0.092391 -0.017228 -0.062058 -0.024418  0.027417  0.077134  0.028219 -0.014623  0.017895 -0.035334 -0.038133 -0.018044  0.068934 -0.010808 -0.024000  0.071910 -0.045750  0.011734 -0.050866  0.050023  0.032255 -0.012384  0.022736  0.051037  0.009457  0.005324 -0.028037  0.007784 -0.019140 -0.054168 -0.047119  0.029088 -0.036035  0.053016 -0.067690  0.044014  0.029616  0.047229  0.073648 -0.043168  0.075918  0.037900 -0.183180  0.081508  0.042762 -0.066165 -0.059699 -0.017308  0.007110  0.005047  0.016962 -0.027730  0.064833  0.111964  0.034996 -0.068446  0.026829 -0.066310 -0.034038 -0.035547  0.032486  0.014914 -0.004339 -0.037040 -0.051606  0.053873 -0.002577 -0.037109  0.062467  0.029008 -0.041969 -0.029640 -0.039698  0.037257  0.007866 -0.014732 -0.036933  0.018711  0.029345  0.345662 -0.043828  0.055518  0.015965 -0.021585 -0.062967  0.000030 -0.037829 -0.031117 -0.008600 -0.019632  0.000917 -0.003949  0.004752  0.017646 -0.010475  0.024866  0.048859 -0.001073  0.050841 -0.042711 -0.029936  0.023056  0.031158 -0.023216 -0.044477 -0.079865  0.114434  0.046968  0.027606 -0.040895  0.067793 -0.022368  0.009769 -0.034681 -0.016154  0.044193  0.022540  0.051639  0.007797  0.007391  0.010083 -0.074316 -0.064372 -0.025101 -0.041340 -0.024550  0.027224  0.005440  0.026617  0.051940 -0.036700  0.058742  0.001461  0.032451 -0.020921 -0.021366  0.040976 -0.059863  0.019722  0.043085  0.042850  0.040582 -0.022107  0.029685 -0.022324  0.007497 -0.040081  0.000397  0.023739  0.002122  0.044315 -0.022987  0.043469  0.064731  0.056117  0.038352  0.000367  0.048953  0.045241 -0.009339  0.060821 -0.073344 -0.011166  0.032674  0.022647  0.014999 -0.033428  0.000347 -0.015448 -0.018743  0.048620  0.110470  0.029597  0.030962 -0.011328 -0.056829  0.006497  0.004694 -0.012985 -0.051779 -0.003150 -0.017702 -0.019727 -0.040388  0.009924 -0.059078  0.050095  0.052471 -0.010575 -0.039471 -0.015563 -0.023734 -0.016019  0.005706  0.007087 -0.027253  0.016754  0.030656  0.001635  0.023381 -0.021934 -0.097271 -0.050370 -0.277306 -0.014223 -0.061428 -0.027445  0.017050 -0.009608 -0.017319  0.033824  0.048471 -0.016368  0.016177 -0.022949  0.049435 -0.005335  0.000750 -0.060800 -0.068838 -0.059804 -0.036057  0.042588 -0.054961  0.014508 -0.000423 -0.059416 -0.009816  0.010768  0.150426  0.126644 -0.011118  0.042668 -0.025554  0.015019 -0.000210 -0.150502  0.042745  0.005784 -0.036606 -0.029014 -0.019236 -0.034275  0.009913  0.034990 -0.049935 -0.053754 -0.017105 -0.024232  0.048749  0.050670 -0.016684 -0.056609  0.023764 -0.005639  0.011582  0.038581  0.006578 -0.008041 -0.106921 -0.027615 -0.097465  0.025000 -0.011210  0.092479  0.055639  0.005293  0.026939  0.001806 -0.051768 -0.038913 -0.013483 -0.046246 -0.014757  0.001830 -0.044614 -0.077737  0.066446 -0.006428 -0.000018 -0.014871  0.071112  0.024387 -0.036434  0.008250  0.001929 -0.033247  0.017147  0.038480  0.001671 -0.051957  0.021081 -0.038685  0.000496  0.012745  0.021241 -0.057647  0.004903 -0.049491 -0.267161  0.038997 -0.067915  0.037074 -0.011075  0.043293 -0.015534  0.050443 -0.070772  0.012405  0.024955 -0.006946  0.082643  0.029026 -0.022356  0.042367 -0.003229 -0.074061 -0.015830  0.020035  0.002637  0.023772  0.196120 -0.044049 -0.024944 -0.004666 -0.017908  0.073222  0.001813 -0.031931 -0.035815 -0.044377 -0.000573 -0.011445  0.018698 -0.027002 -0.010099  0.005813  0.048950 -0.014805  0.006814  0.027005 -0.030880  0.048526  0.111968 -0.039582 -0.012955  0.004347 -0.002677  0.025424 -0.060709  0.014993 -0.008847  0.037792  0.050273  0.035482  0.036962 -0.017363  0.025554 -0.016189 -0.050841  0.003358  0.054623  0.039363 -0.039516 

0.00.438.679 I llama_perf_context_print:        load time =     427.88 ms
0.00.438.681 I llama_perf_context_print: prompt eval time =       4.47 ms /     9 tokens (    0.50 ms per token,  2012.97 tokens per second)
0.00.438.682 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.00.438.683 I llama_perf_context_print:       total time =       8.38 ms /    10 tokens

real	0m0.586s
user	0m0.113s
sys	0m0.518s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_pythia_2_8b
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
+ tee /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b.log
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:44:04 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json [571/571] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:44:04 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json [2113710/2113710] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:44:04 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json [396/396] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2024-09-17 13:44:04 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json [99/99] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/wikitext/ https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ local out=models-mnt/wikitext/
+ local url=https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/wikitext/
+ cd models-mnt/wikitext/
+ wget -nv -N https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ cd /home/ggml/work/llama.cpp
+ unzip -o models-mnt/wikitext/wikitext-2-raw-v1.zip -d models-mnt/wikitext/
Archive:  models-mnt/wikitext/wikitext-2-raw-v1.zip
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.test.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.valid.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.train.raw  
+ path_models=../models-mnt/pythia/2.8B
+ path_wiki=../models-mnt/wikitext/wikitext-2-raw
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- OpenMP found
-- Using llamafile
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- x86 detected
-- Configuring done (9.1s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.309s
user	0m7.409s
sys	0m1.911s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-make.log
++ nproc
+ make -j6
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  0%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  1%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  2%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml.c.o
[  3%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-alloc.c.o
[  3%] Built target build_info
[  3%] Built target sha256
[  3%] Built target xxhash
[  3%] Built target sha1
[  3%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-backend.c.o
[  3%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/acc.cu.o
[  4%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-quants.c.o
[  4%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/arange.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/argsort.cu.o
[  5%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/binbcast.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/clamp.cu.o
[  6%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/concat.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/convert.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/conv-transpose-1d.cu.o
[  7%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cpy.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/cross-entropy-loss.cu.o
[  8%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/diagmask.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/dmmv.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f32.cu.o
[  9%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn-tile-f16.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/fattn.cu.o
[ 10%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/getrows.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/im2col.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmvq.cu.o
[ 11%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/mmq.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/norm.cu.o
[ 12%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pad.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/pool2d.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/quantize.cu.o
[ 13%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/rope.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/scale.cu.o
[ 14%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/softmax.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sum.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/sumrows.cu.o
[ 15%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/tsembd.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/unary.cu.o
[ 16%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/upscale.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda.cu.o
[ 17%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb16.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqfloat-cpb32.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb16.cu.o
[ 18%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb32.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-wmma-f16-instance-kqhalf-cpb8.cu.o
[ 19%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq1_s.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_xs.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_s.cu.o
[ 20%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq2_xxs.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq3_s.cu.o
[ 21%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq3_xxs.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq4_nl.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-iq4_xs.cu.o
[ 22%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q2_k.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q3_k.cu.o
[ 23%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_0.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_1.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q4_k.cu.o
[ 24%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_0.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_1.cu.o
[ 25%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q5_k.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q6_k.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/mmq-instance-q8_0.cu.o
[ 26%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 27%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 28%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 28%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 29%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 30%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 30%] Building CUDA object ggml/src/CMakeFiles/ggml.dir/ggml-cuda/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 31%] Building CXX object ggml/src/CMakeFiles/ggml.dir/llamafile/sgemm.cpp.o
[ 31%] Building C object ggml/src/CMakeFiles/ggml.dir/ggml-aarch64.c.o
[ 31%] Linking CXX shared library libggml.so
[ 31%] Built target ggml
[ 32%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 32%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 32%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 32%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 33%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 33%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 34%] Linking CXX executable ../../bin/llama-gguf
[ 35%] Linking CXX executable ../../bin/llama-gguf-hash
[ 35%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 36%] Linking CXX shared library libllama.so
[ 36%] Built target llama-gguf
[ 36%] Built target llama-gguf-hash
[ 36%] Built target llama
[ 37%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 38%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 38%] Building CXX object examples/benchmark/CMakeFiles/llama-bench-matmult.dir/benchmark-matmult.cpp.o
[ 38%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 38%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 38%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 38%] Linking C executable ../bin/test-c
[ 39%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 39%] Linking CXX executable ../../bin/llama-bench-matmult
[ 40%] Linking CXX executable ../../bin/llama-quantize-stats
[ 40%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 41%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 41%] Built target llava
[ 41%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 42%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 42%] Built target test-c
[ 42%] Linking CXX static library libllava_static.a
[ 42%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 42%] Linking CXX shared library libllava_shared.so
[ 43%] Building CXX object common/CMakeFiles/common.dir/train.cpp.o
[ 43%] Built target llava_static
[ 43%] Linking CXX static library libcommon.a
[ 43%] Built target llama-bench-matmult
[ 43%] Built target common
[ 43%] Built target llama-quantize-stats
[ 43%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 44%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 45%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 46%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 47%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 47%] Linking CXX executable ../bin/test-tokenizer-0
[ 47%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 47%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 47%] Built target llava_shared
[ 47%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 48%] Linking CXX executable ../bin/test-log
[ 48%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 49%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 49%] Linking CXX executable ../bin/test-quantize-fns
[ 49%] Linking CXX executable ../bin/test-arg-parser
[ 49%] Built target test-log
[ 49%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 49%] Built target test-tokenizer-0
[ 49%] Built target test-tokenizer-1-bpe
[ 50%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 50%] Built target test-tokenizer-1-spm
[ 51%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 51%] Linking CXX executable ../bin/test-quantize-perf
[ 51%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 51%] Built target test-quantize-fns
[ 51%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 53%] Linking CXX executable ../bin/test-sampling
[ 54%] Linking CXX executable ../bin/test-grammar-parser
[ 54%] Linking CXX executable ../bin/test-chat-template
[ 55%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 55%] Built target test-arg-parser
[ 56%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 56%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 57%] Linking CXX executable ../bin/test-grammar-integration
[ 57%] Built target test-quantize-perf
[ 58%] Building CXX object tests/CMakeFiles/test-grad0.dir/test-grad0.cpp.o
[ 58%] Built target test-grammar-parser
[ 58%] Building CXX object tests/CMakeFiles/test-grad0.dir/get-model.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 58%] Built target test-llama-grammar
[ 58%] Linking CXX executable ../bin/test-grad0
[ 59%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 59%] Built target test-chat-template
[ 59%] Linking CXX executable ../bin/test-barrier
[ 60%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 60%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 60%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 60%] Built target test-sampling
[ 60%] Linking CXX executable ../bin/test-rope
[ 60%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 61%] Linking CXX executable ../bin/test-backend-ops
[ 62%] Linking CXX executable ../bin/test-model-load-cancel
[ 62%] Built target test-grammar-integration
[ 63%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 63%] Built target test-grad0
[ 63%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 63%] Built target test-barrier
[ 63%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 64%] Linking CXX executable ../bin/test-autorelease
[ 64%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 65%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../../bin/llama-cvector-generator
[ 66%] Built target test-rope
[ 66%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 67%] Building CXX object examples/baby-llama/CMakeFiles/llama-baby-llama.dir/baby-llama.cpp.o
[ 67%] Built target test-model-load-cancel
[ 67%] Linking CXX executable ../../bin/llama-baby-llama
[ 67%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 67%] Built target test-backend-ops
[ 68%] Linking CXX executable ../../bin/llama-batched-bench
[ 68%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 69%] Linking CXX executable ../../bin/llama-batched
[ 69%] Built target test-autorelease
[ 70%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 70%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 70%] Built target test-json-schema-to-grammar
[ 70%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 70%] Built target llama-baby-llama
[ 70%] Built target llama-cvector-generator
[ 70%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 71%] Linking CXX executable ../../bin/llama-embedding
[ 72%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 72%] Linking CXX executable ../../bin/llama-eval-callback
[ 72%] Linking CXX executable ../../bin/llama-export-lora
[ 72%] Built target llama-batched-bench
[ 73%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 73%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 73%] Built target llama-batched
[ 73%] Built target llama-convert-llama2c-to-ggml
[ 73%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 74%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-gritlm
[ 74%] Linking CXX executable ../../bin/llama-gguf-split
[ 74%] Built target llama-embedding
[ 75%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 75%] Built target llama-gbnf-validator
[ 76%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 76%] Built target llama-eval-callback
[ 76%] Built target llama-export-lora
[ 76%] Linking CXX executable ../../bin/llama-imatrix
[ 76%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 76%] Linking CXX executable ../../bin/llama-infill
[ 76%] Built target llama-gguf-split
[ 76%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 76%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 78%] Linking CXX executable ../../bin/llama-llava-cli
[ 79%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 79%] Built target llama-gritlm
[ 79%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-lookahead
[ 80%] Built target llama-imatrix
[ 80%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 80%] Built target llama-infill
[ 80%] Linking CXX executable ../../bin/llama-lookup
[ 81%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 81%] Built target llama-bench
[ 81%] Linking CXX executable ../../bin/llama-lookup-create
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 82%] Built target llama-llava-cli
[ 82%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-lookup-merge
[ 82%] Built target llama-minicpmv-cli
[ 83%] Linking CXX executable ../../bin/llama-lookup-stats
[ 84%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-cli
[ 84%] Built target llama-lookahead
[ 84%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-parallel
[ 84%] Built target llama-lookup-merge
[ 85%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 85%] Built target llama-lookup
[ 85%] Linking CXX executable ../../bin/llama-passkey
[ 86%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 86%] Built target llama-lookup-create
[ 86%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-perplexity
[ 87%] Linking CXX executable ../../bin/llama-quantize
[ 87%] Built target llama-lookup-stats
[ 87%] Built target llama-cli
[ 87%] Generating theme-snowstorm.css.hpp
[ 87%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-retrieval
[ 88%] Generating colorthemes.css.hpp
[ 88%] Built target llama-parallel
[ 89%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 89%] Generating completion.js.hpp
[ 89%] Linking CXX executable ../../bin/llama-save-load-state
[ 89%] Generating index-new.html.hpp
[ 89%] Built target llama-passkey
[ 89%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 89%] Linking CXX executable ../../bin/llama-simple
[ 89%] Built target llama-perplexity
[ 89%] Built target llama-quantize
[ 90%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 91%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 91%] Linking CXX executable ../../bin/llama-speculative
[ 91%] Linking CXX executable ../../bin/llama-tokenize
[ 91%] Built target llama-retrieval
[ 91%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 92%] Generating index.html.hpp
[ 93%] Linking CXX executable ../../bin/llama-vdot
[ 93%] Built target llama-save-load-state
[ 94%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-q8dot
[ 94%] Built target llama-simple
[ 94%] Built target llama-tokenize
[ 95%] Generating index.js.hpp
[ 95%] Generating json-schema-to-grammar.mjs.hpp
[ 96%] Generating loading.html.hpp
[ 96%] Built target llama-vdot
[ 97%] Generating prompt-formats.js.hpp
[ 97%] Generating style.css.hpp
[ 97%] Built target llama-speculative
[ 97%] Generating system-prompts.js.hpp
[ 97%] Generating theme-beeninorder.css.hpp
[ 98%] Generating theme-ketivah.css.hpp
[ 98%] Generating theme-mangotango.css.hpp
[ 98%] Built target llama-q8dot
[ 99%] Generating theme-playground.css.hpp
[ 99%] Generating theme-polarnight.css.hpp
[ 99%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m2.560s
user	0m8.196s
sys	0m2.856s
+ python3 ../convert_hf_to_gguf.py ../models-mnt/pythia/2.8B --outfile ../models-mnt/pythia/2.8B/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: 2.8B
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,         torch.float16 --> F16, shape = {2560, 50304}
INFO:hf-to-gguf:blk.0.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.0.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.0.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.0.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.0.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.0.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.0.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.0.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.1.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.1.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.1.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.1.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.1.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.1.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.1.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.2.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.2.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.2.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.2.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.2.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.2.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.2.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.3.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.3.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.3.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.3.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.3.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.3.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.3.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.4.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.4.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.4.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.4.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.4.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.4.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.4.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.5.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.5.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.5.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.5.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.5.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.5.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.5.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.6.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.6.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.6.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.6.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.6.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.6.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.6.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.7.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.7.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.7.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.7.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.7.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.7.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.7.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.8.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.8.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.8.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.8.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.8.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.8.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.8.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.9.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.9.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.9.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.9.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.9.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.9.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.9.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.10.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.10.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.10.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.10.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.10.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.10.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.10.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.11.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.11.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.11.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.11.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.11.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.11.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.11.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.12.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.12.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.12.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.12.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.12.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.12.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.12.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.13.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.13.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.13.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.13.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.13.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.13.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.13.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.14.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.14.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.14.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.14.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.14.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.14.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.14.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.15.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.15.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.15.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.15.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.15.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.15.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.15.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.16.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.16.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.16.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.16.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.16.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.16.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.16.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.17.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.17.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.17.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.17.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.17.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.17.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.17.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.18.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.18.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.18.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.18.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.18.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.18.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.18.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.19.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.19.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.19.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.19.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.19.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.19.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.19.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.20.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.20.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.20.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.20.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.20.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.20.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.20.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.21.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.21.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.21.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.21.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.21.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.21.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.21.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.22.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.22.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.22.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.22.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.22.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.22.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.22.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.23.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.23.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.23.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.23.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.23.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.23.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.23.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.24.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.24.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.24.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.24.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.24.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.24.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.24.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.25.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.25.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.25.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.25.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.25.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.25.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.25.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.26.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.26.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.26.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.26.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.26.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.26.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.26.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.27.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.27.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.27.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.27.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.27.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.27.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.27.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.28.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.28.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.28.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.28.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.28.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.28.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.28.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.29.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.29.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.29.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.29.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.29.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.29.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.29.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.30.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.30.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.30.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.30.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.30.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.30.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.30.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.31.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.31.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.31.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.31.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.31.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.31.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.31.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output_norm.weight,        torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output_norm.bias,          torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output.weight,             torch.float16 --> F16, shape = {2560, 50304}
INFO:hf-to-gguf:Set meta model
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:Set model tokenizer
Special tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained.
INFO:gguf.vocab:Adding 50009 merge(s).
INFO:gguf.vocab:Setting special token type bos to 0
INFO:gguf.vocab:Setting special token type eos to 0
INFO:gguf.vocab:Setting special token type unk to 0
INFO:hf-to-gguf:Set model quantization version
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/pythia/2.8B/ggml-model-f16.gguf: n_tensors = 388, total_size = 5.6G
Writing:   0%|          | 0.00/5.55G [00:00<?, ?byte/s]Writing:   5%|▍         | 258M/5.55G [00:00<00:04, 1.12Gbyte/s]Writing:   7%|▋         | 415M/5.55G [00:00<00:04, 1.09Gbyte/s]Writing:  10%|█         | 572M/5.55G [00:00<00:04, 1.05Gbyte/s]Writing:  12%|█▏        | 677M/5.55G [00:00<00:04, 1.04Gbyte/s]Writing:  14%|█▍        | 782M/5.55G [00:00<00:04, 1.03Gbyte/s]Writing:  17%|█▋        | 927M/5.55G [00:00<00:04, 1.04Gbyte/s]Writing:  19%|█▉        | 1.04G/5.55G [00:00<00:04, 1.06Gbyte/s]Writing:  22%|██▏       | 1.20G/5.55G [00:01<00:04, 1.04Gbyte/s]Writing:  24%|██▎       | 1.31G/5.55G [00:01<00:04, 1.00Gbyte/s]Writing:  25%|██▌       | 1.41G/5.55G [00:01<00:04, 1.00Gbyte/s]Writing:  28%|██▊       | 1.56G/5.55G [00:01<00:03, 1.02Gbyte/s]Writing:  30%|███       | 1.67G/5.55G [00:01<00:03, 1.05Gbyte/s]Writing:  33%|███▎      | 1.83G/5.55G [00:01<00:03, 1.06Gbyte/s]Writing:  36%|███▌      | 1.99G/5.55G [00:01<00:03, 1.06Gbyte/s]Writing:  39%|███▊      | 2.15G/5.55G [00:02<00:03, 1.05Gbyte/s]Writing:  41%|████▏     | 2.30G/5.55G [00:02<00:03, 1.05Gbyte/s]Writing:  44%|████▍     | 2.46G/5.55G [00:02<00:02, 1.05Gbyte/s]Writing:  46%|████▌     | 2.57G/5.55G [00:02<00:02, 1.04Gbyte/s]Writing:  48%|████▊     | 2.67G/5.55G [00:02<00:02, 1.04Gbyte/s]Writing:  51%|█████     | 2.82G/5.55G [00:02<00:02, 1.05Gbyte/s]Writing:  53%|█████▎    | 2.93G/5.55G [00:02<00:02, 1.07Gbyte/s]Writing:  56%|█████▌    | 3.09G/5.55G [00:02<00:02, 1.01Gbyte/s]Writing:  58%|█████▊    | 3.20G/5.55G [00:03<00:02, 1.01Gbyte/s]Writing:  59%|█████▉    | 3.30G/5.55G [00:03<00:02, 1.02Gbyte/s]Writing:  62%|██████▏   | 3.45G/5.55G [00:03<00:02, 1.03Gbyte/s]Writing:  64%|██████▍   | 3.56G/5.55G [00:03<00:01, 1.04Gbyte/s]Writing:  66%|██████▌   | 3.67G/5.55G [00:03<00:01, 1.04Gbyte/s]Writing:  68%|██████▊   | 3.77G/5.55G [00:03<00:01, 1.04Gbyte/s]Writing:  71%|███████   | 3.92G/5.55G [00:03<00:01, 1.05Gbyte/s]Writing:  73%|███████▎  | 4.04G/5.55G [00:03<00:01, 1.07Gbyte/s]Writing:  76%|███████▌  | 4.19G/5.55G [00:04<00:01, 1.07Gbyte/s]Writing:  78%|███████▊  | 4.35G/5.55G [00:04<00:01, 1.06Gbyte/s]Writing:  81%|████████  | 4.51G/5.55G [00:04<00:00, 1.06Gbyte/s]Writing:  84%|████████▍ | 4.67G/5.55G [00:04<00:00, 1.06Gbyte/s]Writing:  87%|████████▋ | 4.82G/5.55G [00:04<00:00, 1.05Gbyte/s]Writing:  90%|████████▉ | 4.98G/5.55G [00:04<00:00, 1.05Gbyte/s]Writing:  92%|█████████▏| 5.09G/5.55G [00:04<00:00, 1.02Gbyte/s]Writing:  93%|█████████▎| 5.19G/5.55G [00:04<00:00, 1.00Gbyte/s]Writing: 100%|██████████| 5.55G/5.55G [00:05<00:00, 1.05Gbyte/s]Writing: 100%|██████████| 5.55G/5.55G [00:05<00:00, 1.02Gbyte/s]
INFO:hf-to-gguf:Model successfully exported to ../models-mnt/pythia/2.8B/ggml-model-f16.gguf
+ model_f16=../models-mnt/pythia/2.8B/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf
+ model_q4_0=../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
+ model_q4_1=../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf
+ model_q5_0=../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf
+ model_q5_1=../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf
+ model_q2_k=../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf
+ model_q3_k=../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf
+ model_q4_k=../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf
+ model_q5_k=../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf
+ model_q6_k=../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf
+ wiki_test=../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf q8_0
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q8_0 .. size =   245.62 MiB ->   130.49 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q8_0 .. size =   245.62 MiB ->   130.49 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  2815.06 MB

main: quantize time = 21164.83 ms
main:    total time = 21164.83 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf q4_0
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf' as Q4_0
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_0 .. size =   245.62 MiB ->    69.08 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1523.91 MB

main: quantize time = 12623.65 ms
main:    total time = 12623.65 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf q4_1
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf' as Q4_1
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_1 .. size =   245.62 MiB ->    76.76 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1681.58 MB

main: quantize time = 12824.69 ms
main:    total time = 12824.69 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf q5_0
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf' as Q5_0
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_0 .. size =   245.62 MiB ->    84.43 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1839.26 MB

main: quantize time = 14321.01 ms
main:    total time = 14321.01 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf q5_1
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf' as Q5_1
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_1 .. size =   245.62 MiB ->    92.11 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1996.94 MB

main: quantize time = 14958.54 ms
main:    total time = 14958.54 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf q2_k
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf' as Q2_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q2_K .. size =   245.62 MiB ->    40.30 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1034.19 MB

main: quantize time = 33539.79 ms
main:    total time = 33539.79 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf q3_k
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf' as Q3_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q3_K .. size =   245.62 MiB ->    52.77 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1407.60 MB

main: quantize time = 41705.50 ms
main:    total time = 41705.51 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf q4_k
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf' as Q4_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_K .. size =   245.62 MiB ->    69.08 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1702.03 MB

main: quantize time = 51241.79 ms
main:    total time = 51241.79 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf q5_k
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf' as Q5_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_K .. size =   245.62 MiB ->    84.43 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  1972.07 MB

main: quantize time = 44482.46 ms
main:    total time = 44482.46 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf q6_k
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf' as Q6_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
[   1/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   5/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[   7/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[   9/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  10/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  11/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  16/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  17/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  19/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  21/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  22/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  23/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  28/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  29/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  31/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  33/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  34/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  35/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  40/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  41/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  43/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  45/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  46/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  47/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  52/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  53/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  55/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  57/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  58/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  59/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  61/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  64/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  65/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  67/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  69/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  70/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  71/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  73/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  76/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  77/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  79/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  81/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  82/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  83/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  88/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  89/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  91/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  93/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  94/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  95/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  97/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 100/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 101/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 103/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 105/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 106/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 107/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 109/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 112/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 113/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 115/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 117/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 118/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 119/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 124/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 125/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 127/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 129/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 130/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 131/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 133/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 136/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 137/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 139/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 141/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 142/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 143/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 145/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 148/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 149/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 151/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 153/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 154/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 155/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 160/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 161/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 163/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 165/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 166/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 167/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 169/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 172/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 173/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 175/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 177/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 178/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 179/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 181/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 184/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 185/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 187/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 189/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 190/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 191/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 196/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 197/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 199/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 201/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 202/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 203/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 205/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 208/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 209/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 211/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 213/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 214/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 215/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 217/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 220/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 221/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 223/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 225/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 226/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 227/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 232/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 233/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 235/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 237/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 238/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 239/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 241/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 244/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 245/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 247/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 249/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 250/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 251/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 253/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 256/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 257/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 259/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 261/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 262/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 263/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 268/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 269/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 271/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 273/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 274/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 275/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 277/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 280/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 281/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 283/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 285/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 286/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 287/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 289/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 292/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 293/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 295/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 297/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 298/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 299/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 304/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 305/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 307/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 309/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 310/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 311/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 313/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 316/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 317/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 319/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 321/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 322/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 323/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 325/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 328/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 329/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 331/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 333/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 334/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 335/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 340/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 341/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 343/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 345/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 346/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 347/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 352/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 353/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 355/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 357/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 358/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 359/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 364/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 365/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 367/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 369/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 370/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 371/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 376/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 377/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 379/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 381/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 382/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 383/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 388/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
llama_model_quantize_internal: model size  =  5295.33 MB
llama_model_quantize_internal: quant size  =  2174.32 MB

main: quantize time = 32370.89 ms
main:    total time = 32370.89 ms
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.704 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.033 I main: llama backend init
0.00.002.537 I main: load the model and apply lora adapter, if any
0.00.016.531 I llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.016.548 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.016.557 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.016.558 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.016.559 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.016.559 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.016.560 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.016.568 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.016.569 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.016.570 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.016.570 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.016.571 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.016.572 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.016.573 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.016.577 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.016.578 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.016.579 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.024.489 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.026.367 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.033.692 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.033.701 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.033.702 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.033.702 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.033.703 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.033.705 I llama_model_loader: - type  f32:  258 tensors
0.00.033.708 I llama_model_loader: - type  f16:  130 tensors
0.00.091.860 I llm_load_vocab: special tokens cache size = 25
0.00.113.993 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.114.009 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.114.009 I llm_load_print_meta: arch             = gptneox
0.00.114.010 I llm_load_print_meta: vocab type       = BPE
0.00.114.011 I llm_load_print_meta: n_vocab          = 50304
0.00.114.011 I llm_load_print_meta: n_merges         = 50009
0.00.114.012 I llm_load_print_meta: vocab_only       = 0
0.00.114.014 I llm_load_print_meta: n_ctx_train      = 2048
0.00.114.015 I llm_load_print_meta: n_embd           = 2560
0.00.114.016 I llm_load_print_meta: n_layer          = 32
0.00.114.030 I llm_load_print_meta: n_head           = 32
0.00.114.031 I llm_load_print_meta: n_head_kv        = 32
0.00.114.032 I llm_load_print_meta: n_rot            = 20
0.00.114.032 I llm_load_print_meta: n_swa            = 0
0.00.114.034 I llm_load_print_meta: n_embd_head_k    = 80
0.00.114.035 I llm_load_print_meta: n_embd_head_v    = 80
0.00.114.037 I llm_load_print_meta: n_gqa            = 1
0.00.114.039 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.114.041 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.114.043 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.114.043 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.114.044 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.114.045 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.114.046 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.114.047 I llm_load_print_meta: n_ff             = 10240
0.00.114.047 I llm_load_print_meta: n_expert         = 0
0.00.114.047 I llm_load_print_meta: n_expert_used    = 0
0.00.114.048 I llm_load_print_meta: causal attn      = 1
0.00.114.049 I llm_load_print_meta: pooling type     = 0
0.00.114.049 I llm_load_print_meta: rope type        = 2
0.00.114.050 I llm_load_print_meta: rope scaling     = linear
0.00.114.051 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.114.052 I llm_load_print_meta: freq_scale_train = 1
0.00.114.053 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.114.053 I llm_load_print_meta: rope_finetuned   = unknown
0.00.114.054 I llm_load_print_meta: ssm_d_conv       = 0
0.00.114.054 I llm_load_print_meta: ssm_d_inner      = 0
0.00.114.054 I llm_load_print_meta: ssm_d_state      = 0
0.00.114.055 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.114.056 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.114.057 I llm_load_print_meta: model type       = 2.8B
0.00.114.058 I llm_load_print_meta: model ftype      = all F32 (guessed)
0.00.114.059 I llm_load_print_meta: model params     = 2.78 B
0.00.114.060 I llm_load_print_meta: model size       = 5.17 GiB (16.01 BPW) 
0.00.114.061 I llm_load_print_meta: general.name     = 2.8B
0.00.114.062 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.114.063 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.114.063 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.114.064 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.114.065 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.114.065 I llm_load_print_meta: max token length = 1024
0.00.222.073 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.222.081 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.222.082 I ggml_cuda_init: found 1 CUDA devices:
0.00.222.186 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.549.473 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.892.567 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.892.584 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.892.585 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.892.595 I llm_load_tensors:        CPU buffer size =   245.62 MiB
0.00.892.596 I llm_load_tensors:      CUDA0 buffer size =  5049.71 MiB
.............................................................................................
0.02.114.506 I llama_new_context_with_model: n_ctx      = 2048
0.02.114.512 I llama_new_context_with_model: n_batch    = 2048
0.02.114.513 I llama_new_context_with_model: n_ubatch   = 512
0.02.114.514 I llama_new_context_with_model: flash_attn = 0
0.02.114.519 I llama_new_context_with_model: freq_base  = 10000.0
0.02.114.520 I llama_new_context_with_model: freq_scale = 1
0.02.115.792 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.02.115.805 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.02.116.866 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.02.125.739 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.02.125.749 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.02.125.752 I llama_new_context_with_model: graph nodes  = 1287
0.02.125.752 I llama_new_context_with_model: graph splits = 2
0.02.125.756 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.02.200.047 I main: llama threadpool init, n_threads = 1
0.02.200.062 I 
0.02.200.164 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.02.200.169 I 
0.02.200.315 I sampler seed: 1234
0.02.200.329 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.02.200.333 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.02.200.334 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live

0.05.021.828 I llama_perf_sampler_print:    sampling time =      11.39 ms /   263 runs   (    0.04 ms per token, 23094.49 tokens per second)
0.05.021.831 I llama_perf_context_print:        load time =    2197.49 ms
0.05.021.833 I llama_perf_context_print: prompt eval time =      14.28 ms /     7 tokens (    2.04 ms per token,   490.37 tokens per second)
0.05.021.835 I llama_perf_context_print:        eval time =    2771.76 ms /   255 runs   (   10.87 ms per token,    92.00 tokens per second)
0.05.021.839 I llama_perf_context_print:       total time =    2821.79 ms /   262 tokens

real	0m5.207s
user	0m3.992s
sys	0m1.214s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.705 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.038 I main: llama backend init
0.00.002.676 I main: load the model and apply lora adapter, if any
0.00.017.838 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf (version GGUF V3 (latest))
0.00.017.857 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.017.867 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.017.868 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.017.868 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.017.869 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.017.870 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.017.875 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.017.875 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.017.876 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.017.877 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.017.878 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.017.878 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.017.879 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.017.885 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.017.886 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.017.887 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.025.818 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.027.709 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.034.691 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.034.699 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.034.700 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.034.701 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.034.701 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.034.702 I llama_model_loader: - kv  22:                          general.file_type u32              = 7
0.00.034.704 I llama_model_loader: - type  f32:  258 tensors
0.00.034.706 I llama_model_loader: - type q8_0:  130 tensors
0.00.088.097 I llm_load_vocab: special tokens cache size = 25
0.00.110.786 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.110.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.110.802 I llm_load_print_meta: arch             = gptneox
0.00.110.803 I llm_load_print_meta: vocab type       = BPE
0.00.110.804 I llm_load_print_meta: n_vocab          = 50304
0.00.110.804 I llm_load_print_meta: n_merges         = 50009
0.00.110.805 I llm_load_print_meta: vocab_only       = 0
0.00.110.806 I llm_load_print_meta: n_ctx_train      = 2048
0.00.110.806 I llm_load_print_meta: n_embd           = 2560
0.00.110.807 I llm_load_print_meta: n_layer          = 32
0.00.110.819 I llm_load_print_meta: n_head           = 32
0.00.110.820 I llm_load_print_meta: n_head_kv        = 32
0.00.110.820 I llm_load_print_meta: n_rot            = 20
0.00.110.821 I llm_load_print_meta: n_swa            = 0
0.00.110.821 I llm_load_print_meta: n_embd_head_k    = 80
0.00.110.823 I llm_load_print_meta: n_embd_head_v    = 80
0.00.110.825 I llm_load_print_meta: n_gqa            = 1
0.00.110.828 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.110.829 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.110.831 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.110.832 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.110.832 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.110.833 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.110.834 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.110.835 I llm_load_print_meta: n_ff             = 10240
0.00.110.839 I llm_load_print_meta: n_expert         = 0
0.00.110.840 I llm_load_print_meta: n_expert_used    = 0
0.00.110.840 I llm_load_print_meta: causal attn      = 1
0.00.110.841 I llm_load_print_meta: pooling type     = 0
0.00.110.842 I llm_load_print_meta: rope type        = 2
0.00.110.843 I llm_load_print_meta: rope scaling     = linear
0.00.110.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.110.846 I llm_load_print_meta: freq_scale_train = 1
0.00.110.846 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.110.847 I llm_load_print_meta: rope_finetuned   = unknown
0.00.110.848 I llm_load_print_meta: ssm_d_conv       = 0
0.00.110.848 I llm_load_print_meta: ssm_d_inner      = 0
0.00.110.849 I llm_load_print_meta: ssm_d_state      = 0
0.00.110.849 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.110.850 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.110.850 I llm_load_print_meta: model type       = 2.8B
0.00.110.852 I llm_load_print_meta: model ftype      = Q8_0
0.00.110.853 I llm_load_print_meta: model params     = 2.78 B
0.00.110.854 I llm_load_print_meta: model size       = 2.75 GiB (8.51 BPW) 
0.00.110.854 I llm_load_print_meta: general.name     = 2.8B
0.00.110.855 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.110.855 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.110.856 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.110.856 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.110.860 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.110.860 I llm_load_print_meta: max token length = 1024
0.00.217.846 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.217.853 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.217.853 I ggml_cuda_init: found 1 CUDA devices:
0.00.217.957 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.524.299 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.718.214 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.718.225 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.718.226 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.718.235 I llm_load_tensors:        CPU buffer size =   130.49 MiB
0.00.718.237 I llm_load_tensors:      CUDA0 buffer size =  2684.57 MiB
.............................................................................................
0.01.295.664 I llama_new_context_with_model: n_ctx      = 2048
0.01.295.672 I llama_new_context_with_model: n_batch    = 2048
0.01.295.672 I llama_new_context_with_model: n_ubatch   = 512
0.01.295.673 I llama_new_context_with_model: flash_attn = 0
0.01.295.679 I llama_new_context_with_model: freq_base  = 10000.0
0.01.295.680 I llama_new_context_with_model: freq_scale = 1
0.01.296.956 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.296.970 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.298.230 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.307.242 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.307.251 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.307.254 I llama_new_context_with_model: graph nodes  = 1287
0.01.307.255 I llama_new_context_with_model: graph splits = 2
0.01.307.260 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.379.359 I main: llama threadpool init, n_threads = 1
0.01.379.377 I 
0.01.379.473 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.379.479 I 
0.01.379.638 I sampler seed: 1234
0.01.379.651 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.379.654 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.379.655 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to help people
<mneptok> h00k: i'm not a Christian. i'm a humanist. and you're a humanist, so you can help people.
<h00k> mneptok, I'm also a Christian
<h00k> mneptok, I just have a different perspective on things
<mneptok> h00k: and i know how to help people, so i'm happy to help people.
<h00k> mneptok, I'm sure that you're very busy, so I'll give you the chance to help people :)
<mneptok> h00k: i'll be here.
<mneptok> h00k: i think you and i are on the same side of the issue. i'm not going to make a decision on the issue for you, though.
<h00k> mneptok, I know, I just figured that you'd be more likely to help me out than the people who aren't there
<mneptok> h00k: i don't know how to help you.
<mneptok> h00k: i don

0.03.469.076 I llama_perf_sampler_print:    sampling time =      11.69 ms /   263 runs   (    0.04 ms per token, 22490.17 tokens per second)
0.03.469.080 I llama_perf_context_print:        load time =    1376.66 ms
0.03.469.081 I llama_perf_context_print: prompt eval time =      11.06 ms /     7 tokens (    1.58 ms per token,   632.68 tokens per second)
0.03.469.083 I llama_perf_context_print:        eval time =    2041.08 ms /   255 runs   (    8.00 ms per token,   124.93 tokens per second)
0.03.469.085 I llama_perf_context_print:       total time =    2089.72 ms /   262 tokens

real	0m3.659s
user	0m2.740s
sys	0m0.925s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.710 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.062 I main: llama backend init
0.00.002.543 I main: load the model and apply lora adapter, if any
0.00.016.053 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
0.00.016.077 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.016.085 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.016.086 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.016.087 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.016.088 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.016.088 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.016.092 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.016.093 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.016.094 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.016.095 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.016.096 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.016.096 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.016.097 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.016.101 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.016.102 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.016.106 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.024.078 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.025.960 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.033.020 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.033.027 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.033.028 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.033.029 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.033.029 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.033.030 I llama_model_loader: - kv  22:                          general.file_type u32              = 2
0.00.033.032 I llama_model_loader: - type  f32:  258 tensors
0.00.033.034 I llama_model_loader: - type q4_0:  129 tensors
0.00.033.034 I llama_model_loader: - type q6_K:    1 tensors
0.00.087.372 I llm_load_vocab: special tokens cache size = 25
0.00.109.613 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.109.630 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.109.630 I llm_load_print_meta: arch             = gptneox
0.00.109.631 I llm_load_print_meta: vocab type       = BPE
0.00.109.632 I llm_load_print_meta: n_vocab          = 50304
0.00.109.632 I llm_load_print_meta: n_merges         = 50009
0.00.109.633 I llm_load_print_meta: vocab_only       = 0
0.00.109.633 I llm_load_print_meta: n_ctx_train      = 2048
0.00.109.634 I llm_load_print_meta: n_embd           = 2560
0.00.109.634 I llm_load_print_meta: n_layer          = 32
0.00.109.649 I llm_load_print_meta: n_head           = 32
0.00.109.650 I llm_load_print_meta: n_head_kv        = 32
0.00.109.651 I llm_load_print_meta: n_rot            = 20
0.00.109.651 I llm_load_print_meta: n_swa            = 0
0.00.109.651 I llm_load_print_meta: n_embd_head_k    = 80
0.00.109.652 I llm_load_print_meta: n_embd_head_v    = 80
0.00.109.653 I llm_load_print_meta: n_gqa            = 1
0.00.109.655 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.109.656 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.109.658 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.109.664 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.109.665 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.109.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.109.666 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.109.668 I llm_load_print_meta: n_ff             = 10240
0.00.109.669 I llm_load_print_meta: n_expert         = 0
0.00.109.669 I llm_load_print_meta: n_expert_used    = 0
0.00.109.670 I llm_load_print_meta: causal attn      = 1
0.00.109.670 I llm_load_print_meta: pooling type     = 0
0.00.109.670 I llm_load_print_meta: rope type        = 2
0.00.109.672 I llm_load_print_meta: rope scaling     = linear
0.00.109.674 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.109.676 I llm_load_print_meta: freq_scale_train = 1
0.00.109.677 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.109.677 I llm_load_print_meta: rope_finetuned   = unknown
0.00.109.678 I llm_load_print_meta: ssm_d_conv       = 0
0.00.109.679 I llm_load_print_meta: ssm_d_inner      = 0
0.00.109.679 I llm_load_print_meta: ssm_d_state      = 0
0.00.109.680 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.109.680 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.109.681 I llm_load_print_meta: model type       = 2.8B
0.00.109.682 I llm_load_print_meta: model ftype      = Q4_0
0.00.109.685 I llm_load_print_meta: model params     = 2.78 B
0.00.109.686 I llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
0.00.109.688 I llm_load_print_meta: general.name     = 2.8B
0.00.109.689 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.109.689 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.109.690 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.109.691 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.109.691 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.109.692 I llm_load_print_meta: max token length = 1024
0.00.213.497 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.213.504 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.213.505 I ggml_cuda_init: found 1 CUDA devices:
0.00.213.608 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.503.044 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.608.401 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.608.412 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.608.413 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.608.422 I llm_load_tensors:        CPU buffer size =    69.08 MiB
0.00.608.424 I llm_load_tensors:      CUDA0 buffer size =  1454.83 MiB
...........................................................................................
0.00.912.244 I llama_new_context_with_model: n_ctx      = 2048
0.00.912.251 I llama_new_context_with_model: n_batch    = 2048
0.00.912.252 I llama_new_context_with_model: n_ubatch   = 512
0.00.912.253 I llama_new_context_with_model: flash_attn = 0
0.00.912.259 I llama_new_context_with_model: freq_base  = 10000.0
0.00.912.260 I llama_new_context_with_model: freq_scale = 1
0.00.913.534 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.913.544 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.914.563 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.922.983 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.922.993 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.922.996 I llama_new_context_with_model: graph nodes  = 1287
0.00.922.997 I llama_new_context_with_model: graph splits = 2
0.00.923.001 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.989.081 I main: llama threadpool init, n_threads = 1
0.00.989.099 I 
0.00.989.198 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.989.204 I 
0.00.989.350 I sampler seed: 1234
0.00.989.372 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.989.380 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.989.380 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to strive for perfection."

"Why?"

"I don't know. It's just something I've always felt, whether it's true or not."

"What do you want to do when you grow up?"

"I don't know. I suppose I'd like to work on my own, but I don't know what I'd do. I don't know anything about anything. But I have a feeling that if I find the right thing, I can work out all the kinks in it. I feel I can get a handle on it."

"What are your hobbies?"

"I don

t have any."

"Do you want to be an inventor?"

"No. Not really."

"What would you like to do with your life?"

"I don

t know. I don

t know anything. I don

t know where to go. I don

t know what I want to do."

"What about your family? Do you want to be a doctor or a lawyer or anything like that?"

"I don

t know. I don

t know anything. I don


0.02.615.275 I llama_perf_sampler_print:    sampling time =      11.21 ms /   263 runs   (    0.04 ms per token, 23461.20 tokens per second)
0.02.615.282 I llama_perf_context_print:        load time =     986.52 ms
0.02.615.286 I llama_perf_context_print: prompt eval time =       9.37 ms /     7 tokens (    1.34 ms per token,   746.99 tokens per second)
0.02.615.288 I llama_perf_context_print:        eval time =    1581.04 ms /   255 runs   (    6.20 ms per token,   161.29 tokens per second)
0.02.615.289 I llama_perf_context_print:       total time =    1626.20 ms /   262 tokens

real	0m2.791s
user	0m2.036s
sys	0m0.758s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.693 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.005 I main: llama backend init
0.00.002.599 I main: load the model and apply lora adapter, if any
0.00.016.146 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf (version GGUF V3 (latest))
0.00.016.164 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.016.172 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.016.173 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.016.174 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.016.175 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.016.175 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.016.179 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.016.180 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.016.181 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.016.181 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.016.182 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.016.184 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.016.185 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.016.189 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.016.189 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.016.191 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.024.005 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.025.893 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.032.915 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.032.925 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.032.925 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.032.926 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.032.926 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.032.927 I llama_model_loader: - kv  22:                          general.file_type u32              = 3
0.00.032.930 I llama_model_loader: - type  f32:  258 tensors
0.00.032.932 I llama_model_loader: - type q4_1:  129 tensors
0.00.032.932 I llama_model_loader: - type q6_K:    1 tensors
0.00.088.049 I llm_load_vocab: special tokens cache size = 25
0.00.110.221 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.110.237 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.110.238 I llm_load_print_meta: arch             = gptneox
0.00.110.238 I llm_load_print_meta: vocab type       = BPE
0.00.110.239 I llm_load_print_meta: n_vocab          = 50304
0.00.110.240 I llm_load_print_meta: n_merges         = 50009
0.00.110.240 I llm_load_print_meta: vocab_only       = 0
0.00.110.241 I llm_load_print_meta: n_ctx_train      = 2048
0.00.110.241 I llm_load_print_meta: n_embd           = 2560
0.00.110.242 I llm_load_print_meta: n_layer          = 32
0.00.110.257 I llm_load_print_meta: n_head           = 32
0.00.110.258 I llm_load_print_meta: n_head_kv        = 32
0.00.110.259 I llm_load_print_meta: n_rot            = 20
0.00.110.259 I llm_load_print_meta: n_swa            = 0
0.00.110.260 I llm_load_print_meta: n_embd_head_k    = 80
0.00.110.260 I llm_load_print_meta: n_embd_head_v    = 80
0.00.110.263 I llm_load_print_meta: n_gqa            = 1
0.00.110.264 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.110.265 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.110.267 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.110.268 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.110.269 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.110.269 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.110.270 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.110.272 I llm_load_print_meta: n_ff             = 10240
0.00.110.272 I llm_load_print_meta: n_expert         = 0
0.00.110.273 I llm_load_print_meta: n_expert_used    = 0
0.00.110.273 I llm_load_print_meta: causal attn      = 1
0.00.110.273 I llm_load_print_meta: pooling type     = 0
0.00.110.275 I llm_load_print_meta: rope type        = 2
0.00.110.275 I llm_load_print_meta: rope scaling     = linear
0.00.110.277 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.110.278 I llm_load_print_meta: freq_scale_train = 1
0.00.110.278 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.110.279 I llm_load_print_meta: rope_finetuned   = unknown
0.00.110.279 I llm_load_print_meta: ssm_d_conv       = 0
0.00.110.280 I llm_load_print_meta: ssm_d_inner      = 0
0.00.110.280 I llm_load_print_meta: ssm_d_state      = 0
0.00.110.281 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.110.282 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.110.282 I llm_load_print_meta: model type       = 2.8B
0.00.110.283 I llm_load_print_meta: model ftype      = Q4_1
0.00.110.284 I llm_load_print_meta: model params     = 2.78 B
0.00.110.285 I llm_load_print_meta: model size       = 1.64 GiB (5.08 BPW) 
0.00.110.285 I llm_load_print_meta: general.name     = 2.8B
0.00.110.286 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.110.286 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.110.287 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.110.287 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.110.288 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.110.289 I llm_load_print_meta: max token length = 1024
0.00.213.519 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.213.527 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.213.528 I ggml_cuda_init: found 1 CUDA devices:
0.00.213.630 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.490.176 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.602.570 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.602.582 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.602.583 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.602.592 I llm_load_tensors:        CPU buffer size =    76.76 MiB
0.00.602.594 I llm_load_tensors:      CUDA0 buffer size =  1604.83 MiB
............................................................................................
0.00.930.639 I llama_new_context_with_model: n_ctx      = 2048
0.00.930.647 I llama_new_context_with_model: n_batch    = 2048
0.00.930.648 I llama_new_context_with_model: n_ubatch   = 512
0.00.930.649 I llama_new_context_with_model: flash_attn = 0
0.00.930.654 I llama_new_context_with_model: freq_base  = 10000.0
0.00.930.655 I llama_new_context_with_model: freq_scale = 1
0.00.931.915 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.931.929 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.932.964 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.942.195 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.942.204 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.942.207 I llama_new_context_with_model: graph nodes  = 1287
0.00.942.208 I llama_new_context_with_model: graph splits = 2
0.00.942.213 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.012.513 I main: llama threadpool init, n_threads = 1
0.01.012.528 I 
0.01.012.623 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.012.629 I 
0.01.012.773 I sampler seed: 1234
0.01.012.787 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.012.791 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.012.793 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to help people live more fulfilling lives, and to help people live their lives to the fullest.

I believe the most important thing we can do as individuals is to make conscious decisions that help us live a life that's more meaningful to ourselves.

I believe we all have the power to make a difference in the world, but we have to put our full effort into making those positive changes.

I believe that the key to solving our social problems lies in solving the problems in our own neighborhoods.

I believe that the key to solving our social problems lies in solving the problems in our own neighborhoods.

I believe that the most important thing we can do for the environment is to make conscious choices that help us reduce our personal carbon footprints.

I believe that the most important thing we can do for the environment is to make conscious choices that help us reduce our personal carbon footprints.

I believe that we need to take care of the people we love.

I believe we need to take care of the people we love.

I believe that we need to take care of our families.

I believe that we need to take care of our families.

I believe that the key to solving the problems

0.02.718.511 I llama_perf_sampler_print:    sampling time =      12.42 ms /   263 runs   (    0.05 ms per token, 21182.35 tokens per second)
0.02.718.514 I llama_perf_context_print:        load time =    1009.89 ms
0.02.718.516 I llama_perf_context_print: prompt eval time =       9.54 ms /     7 tokens (    1.36 ms per token,   733.52 tokens per second)
0.02.718.517 I llama_perf_context_print:        eval time =    1655.49 ms /   255 runs   (    6.49 ms per token,   154.03 tokens per second)
0.02.718.518 I llama_perf_context_print:       total time =    1706.00 ms /   262 tokens

real	0m2.908s
user	0m2.164s
sys	0m0.745s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.695 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.056 I main: llama backend init
0.00.002.559 I main: load the model and apply lora adapter, if any
0.00.017.166 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf (version GGUF V3 (latest))
0.00.017.182 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.017.192 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.017.193 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.017.194 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.017.194 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.017.195 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.017.200 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.017.200 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.017.201 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.017.202 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.017.203 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.017.204 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.017.205 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.017.210 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.017.210 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.017.211 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.025.163 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.027.037 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.035.066 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.035.074 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.035.075 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.035.076 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.035.076 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.035.077 I llama_model_loader: - kv  22:                          general.file_type u32              = 8
0.00.035.080 I llama_model_loader: - type  f32:  258 tensors
0.00.035.082 I llama_model_loader: - type q5_0:  129 tensors
0.00.035.083 I llama_model_loader: - type q6_K:    1 tensors
0.00.088.948 I llm_load_vocab: special tokens cache size = 25
0.00.111.165 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.111.181 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.111.181 I llm_load_print_meta: arch             = gptneox
0.00.111.182 I llm_load_print_meta: vocab type       = BPE
0.00.111.183 I llm_load_print_meta: n_vocab          = 50304
0.00.111.183 I llm_load_print_meta: n_merges         = 50009
0.00.111.184 I llm_load_print_meta: vocab_only       = 0
0.00.111.184 I llm_load_print_meta: n_ctx_train      = 2048
0.00.111.185 I llm_load_print_meta: n_embd           = 2560
0.00.111.185 I llm_load_print_meta: n_layer          = 32
0.00.111.197 I llm_load_print_meta: n_head           = 32
0.00.111.199 I llm_load_print_meta: n_head_kv        = 32
0.00.111.199 I llm_load_print_meta: n_rot            = 20
0.00.111.200 I llm_load_print_meta: n_swa            = 0
0.00.111.200 I llm_load_print_meta: n_embd_head_k    = 80
0.00.111.200 I llm_load_print_meta: n_embd_head_v    = 80
0.00.111.202 I llm_load_print_meta: n_gqa            = 1
0.00.111.204 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.111.205 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.111.207 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.111.207 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.111.208 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.111.208 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.111.209 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.111.211 I llm_load_print_meta: n_ff             = 10240
0.00.111.211 I llm_load_print_meta: n_expert         = 0
0.00.111.213 I llm_load_print_meta: n_expert_used    = 0
0.00.111.213 I llm_load_print_meta: causal attn      = 1
0.00.111.213 I llm_load_print_meta: pooling type     = 0
0.00.111.214 I llm_load_print_meta: rope type        = 2
0.00.111.214 I llm_load_print_meta: rope scaling     = linear
0.00.111.216 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.111.217 I llm_load_print_meta: freq_scale_train = 1
0.00.111.217 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.111.218 I llm_load_print_meta: rope_finetuned   = unknown
0.00.111.218 I llm_load_print_meta: ssm_d_conv       = 0
0.00.111.219 I llm_load_print_meta: ssm_d_inner      = 0
0.00.111.220 I llm_load_print_meta: ssm_d_state      = 0
0.00.111.220 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.111.221 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.111.221 I llm_load_print_meta: model type       = 2.8B
0.00.111.222 I llm_load_print_meta: model ftype      = Q5_0
0.00.111.223 I llm_load_print_meta: model params     = 2.78 B
0.00.111.224 I llm_load_print_meta: model size       = 1.80 GiB (5.56 BPW) 
0.00.111.225 I llm_load_print_meta: general.name     = 2.8B
0.00.111.225 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.111.226 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.111.227 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.111.228 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.111.228 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.111.229 I llm_load_print_meta: max token length = 1024
0.00.223.315 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.223.322 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.223.323 I ggml_cuda_init: found 1 CUDA devices:
0.00.223.426 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.504.149 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.623.283 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.623.296 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.623.297 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.623.306 I llm_load_tensors:        CPU buffer size =    84.43 MiB
0.00.623.308 I llm_load_tensors:      CUDA0 buffer size =  1754.83 MiB
............................................................................................
0.00.980.094 I llama_new_context_with_model: n_ctx      = 2048
0.00.980.101 I llama_new_context_with_model: n_batch    = 2048
0.00.980.101 I llama_new_context_with_model: n_ubatch   = 512
0.00.980.102 I llama_new_context_with_model: flash_attn = 0
0.00.980.108 I llama_new_context_with_model: freq_base  = 10000.0
0.00.980.110 I llama_new_context_with_model: freq_scale = 1
0.00.981.422 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.981.435 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.982.456 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.991.850 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.991.860 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.991.863 I llama_new_context_with_model: graph nodes  = 1287
0.00.991.864 I llama_new_context_with_model: graph splits = 2
0.00.991.869 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.058.896 I main: llama threadpool init, n_threads = 1
0.01.058.913 I 
0.01.059.010 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.059.015 I 
0.01.059.162 I sampler seed: 1234
0.01.059.175 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.059.178 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.059.180 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to have an unencumbered mind.

I believe the meaning of life is to

0.02.816.404 I llama_perf_sampler_print:    sampling time =      10.88 ms /   263 runs   (    0.04 ms per token, 24170.57 tokens per second)
0.02.816.407 I llama_perf_context_print:        load time =    1056.32 ms
0.02.816.409 I llama_perf_context_print: prompt eval time =       9.82 ms /     7 tokens (    1.40 ms per token,   712.98 tokens per second)
0.02.816.410 I llama_perf_context_print:        eval time =    1711.83 ms /   255 runs   (    6.71 ms per token,   148.96 tokens per second)
0.02.816.411 I llama_perf_context_print:       total time =    1757.51 ms /   262 tokens

real	0m2.995s
user	0m2.212s
sys	0m0.787s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.716 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.063 I main: llama backend init
0.00.002.661 I main: load the model and apply lora adapter, if any
0.00.016.289 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf (version GGUF V3 (latest))
0.00.016.307 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.016.315 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.016.320 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.016.321 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.016.322 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.016.322 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.016.326 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.016.327 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.016.328 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.016.328 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.016.329 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.016.330 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.016.331 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.016.334 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.016.335 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.016.336 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.024.344 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.026.233 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.033.350 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.033.358 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.033.359 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.033.359 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.033.360 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.033.361 I llama_model_loader: - kv  22:                          general.file_type u32              = 9
0.00.033.363 I llama_model_loader: - type  f32:  258 tensors
0.00.033.365 I llama_model_loader: - type q5_1:  129 tensors
0.00.033.365 I llama_model_loader: - type q6_K:    1 tensors
0.00.086.892 I llm_load_vocab: special tokens cache size = 25
0.00.109.662 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.109.680 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.109.680 I llm_load_print_meta: arch             = gptneox
0.00.109.681 I llm_load_print_meta: vocab type       = BPE
0.00.109.682 I llm_load_print_meta: n_vocab          = 50304
0.00.109.684 I llm_load_print_meta: n_merges         = 50009
0.00.109.685 I llm_load_print_meta: vocab_only       = 0
0.00.109.686 I llm_load_print_meta: n_ctx_train      = 2048
0.00.109.687 I llm_load_print_meta: n_embd           = 2560
0.00.109.687 I llm_load_print_meta: n_layer          = 32
0.00.109.699 I llm_load_print_meta: n_head           = 32
0.00.109.700 I llm_load_print_meta: n_head_kv        = 32
0.00.109.702 I llm_load_print_meta: n_rot            = 20
0.00.109.705 I llm_load_print_meta: n_swa            = 0
0.00.109.706 I llm_load_print_meta: n_embd_head_k    = 80
0.00.109.706 I llm_load_print_meta: n_embd_head_v    = 80
0.00.109.708 I llm_load_print_meta: n_gqa            = 1
0.00.109.709 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.109.711 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.109.712 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.109.713 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.109.714 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.109.715 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.109.716 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.109.717 I llm_load_print_meta: n_ff             = 10240
0.00.109.718 I llm_load_print_meta: n_expert         = 0
0.00.109.721 I llm_load_print_meta: n_expert_used    = 0
0.00.109.721 I llm_load_print_meta: causal attn      = 1
0.00.109.722 I llm_load_print_meta: pooling type     = 0
0.00.109.722 I llm_load_print_meta: rope type        = 2
0.00.109.723 I llm_load_print_meta: rope scaling     = linear
0.00.109.724 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.109.726 I llm_load_print_meta: freq_scale_train = 1
0.00.109.726 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.109.726 I llm_load_print_meta: rope_finetuned   = unknown
0.00.109.727 I llm_load_print_meta: ssm_d_conv       = 0
0.00.109.727 I llm_load_print_meta: ssm_d_inner      = 0
0.00.109.729 I llm_load_print_meta: ssm_d_state      = 0
0.00.109.729 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.109.729 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.109.730 I llm_load_print_meta: model type       = 2.8B
0.00.109.731 I llm_load_print_meta: model ftype      = Q5_1
0.00.109.732 I llm_load_print_meta: model params     = 2.78 B
0.00.109.733 I llm_load_print_meta: model size       = 1.95 GiB (6.04 BPW) 
0.00.109.734 I llm_load_print_meta: general.name     = 2.8B
0.00.109.734 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.109.735 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.109.735 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.109.736 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.109.737 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.109.737 I llm_load_print_meta: max token length = 1024
0.00.216.769 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.216.775 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.216.776 I ggml_cuda_init: found 1 CUDA devices:
0.00.216.881 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.491.811 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.623.114 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.623.125 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.623.125 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.623.134 I llm_load_tensors:        CPU buffer size =    92.11 MiB
0.00.623.136 I llm_load_tensors:      CUDA0 buffer size =  1904.83 MiB
.............................................................................................
0.01.001.023 I llama_new_context_with_model: n_ctx      = 2048
0.01.001.028 I llama_new_context_with_model: n_batch    = 2048
0.01.001.029 I llama_new_context_with_model: n_ubatch   = 512
0.01.001.030 I llama_new_context_with_model: flash_attn = 0
0.01.001.036 I llama_new_context_with_model: freq_base  = 10000.0
0.01.001.037 I llama_new_context_with_model: freq_scale = 1
0.01.002.302 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.002.315 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.003.308 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.011.710 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.011.719 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.011.722 I llama_new_context_with_model: graph nodes  = 1287
0.01.011.723 I llama_new_context_with_model: graph splits = 2
0.01.011.727 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.077.864 I main: llama threadpool init, n_threads = 1
0.01.077.879 I 
0.01.077.978 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.077.984 I 
0.01.078.130 I sampler seed: 1234
0.01.078.144 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.078.148 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.078.149 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to love people. It's not a competition. It's not a game. It's not a competition. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game. It's not a game.

0.02.841.878 I llama_perf_sampler_print:    sampling time =      10.91 ms /   263 runs   (    0.04 ms per token, 24099.70 tokens per second)
0.02.841.881 I llama_perf_context_print:        load time =    1075.18 ms
0.02.841.883 I llama_perf_context_print: prompt eval time =       9.79 ms /     7 tokens (    1.40 ms per token,   714.80 tokens per second)
0.02.841.887 I llama_perf_context_print:        eval time =    1719.62 ms /   255 runs   (    6.74 ms per token,   148.29 tokens per second)
0.02.841.889 I llama_perf_context_print:       total time =    1764.02 ms /   262 tokens

real	0m3.022s
user	0m2.238s
sys	0m0.785s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q2_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.712 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.058 I main: llama backend init
0.00.002.582 I main: load the model and apply lora adapter, if any
0.00.016.207 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf (version GGUF V3 (latest))
0.00.016.224 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.016.233 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.016.235 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.016.235 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.016.236 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.016.237 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.016.241 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.016.242 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.016.242 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.016.243 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.016.244 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.016.245 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.016.246 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.016.251 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.016.251 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.016.252 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.024.149 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.026.073 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.033.172 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.033.180 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.033.181 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.033.182 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.033.182 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.033.184 I llama_model_loader: - kv  22:                          general.file_type u32              = 10
0.00.033.186 I llama_model_loader: - type  f32:  258 tensors
0.00.033.188 I llama_model_loader: - type q2_K:   65 tensors
0.00.033.189 I llama_model_loader: - type q3_K:   64 tensors
0.00.033.189 I llama_model_loader: - type q6_K:    1 tensors
0.00.087.244 I llm_load_vocab: special tokens cache size = 25
0.00.109.450 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.109.469 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.109.469 I llm_load_print_meta: arch             = gptneox
0.00.109.470 I llm_load_print_meta: vocab type       = BPE
0.00.109.471 I llm_load_print_meta: n_vocab          = 50304
0.00.109.471 I llm_load_print_meta: n_merges         = 50009
0.00.109.472 I llm_load_print_meta: vocab_only       = 0
0.00.109.473 I llm_load_print_meta: n_ctx_train      = 2048
0.00.109.484 I llm_load_print_meta: n_embd           = 2560
0.00.109.485 I llm_load_print_meta: n_layer          = 32
0.00.109.499 I llm_load_print_meta: n_head           = 32
0.00.109.501 I llm_load_print_meta: n_head_kv        = 32
0.00.109.502 I llm_load_print_meta: n_rot            = 20
0.00.109.503 I llm_load_print_meta: n_swa            = 0
0.00.109.503 I llm_load_print_meta: n_embd_head_k    = 80
0.00.109.504 I llm_load_print_meta: n_embd_head_v    = 80
0.00.109.506 I llm_load_print_meta: n_gqa            = 1
0.00.109.507 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.109.508 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.109.510 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.109.511 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.109.511 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.109.512 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.109.512 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.109.514 I llm_load_print_meta: n_ff             = 10240
0.00.109.526 I llm_load_print_meta: n_expert         = 0
0.00.109.527 I llm_load_print_meta: n_expert_used    = 0
0.00.109.528 I llm_load_print_meta: causal attn      = 1
0.00.109.528 I llm_load_print_meta: pooling type     = 0
0.00.109.529 I llm_load_print_meta: rope type        = 2
0.00.109.530 I llm_load_print_meta: rope scaling     = linear
0.00.109.532 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.109.533 I llm_load_print_meta: freq_scale_train = 1
0.00.109.533 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.109.534 I llm_load_print_meta: rope_finetuned   = unknown
0.00.109.534 I llm_load_print_meta: ssm_d_conv       = 0
0.00.109.536 I llm_load_print_meta: ssm_d_inner      = 0
0.00.109.536 I llm_load_print_meta: ssm_d_state      = 0
0.00.109.537 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.109.538 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.109.538 I llm_load_print_meta: model type       = 2.8B
0.00.109.539 I llm_load_print_meta: model ftype      = Q2_K - Medium
0.00.109.540 I llm_load_print_meta: model params     = 2.78 B
0.00.109.541 I llm_load_print_meta: model size       = 1.01 GiB (3.13 BPW) 
0.00.109.541 I llm_load_print_meta: general.name     = 2.8B
0.00.109.542 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.109.543 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.109.543 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.109.545 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.109.545 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.109.546 I llm_load_print_meta: max token length = 1024
0.00.214.682 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.214.690 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.214.690 I ggml_cuda_init: found 1 CUDA devices:
0.00.214.855 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.491.255 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.558.184 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.558.196 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.558.197 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.558.205 I llm_load_tensors:        CPU buffer size =    40.30 MiB
0.00.558.206 I llm_load_tensors:      CUDA0 buffer size =   993.89 MiB
......................................................................................
0.00.766.944 I llama_new_context_with_model: n_ctx      = 2048
0.00.766.951 I llama_new_context_with_model: n_batch    = 2048
0.00.766.951 I llama_new_context_with_model: n_ubatch   = 512
0.00.766.953 I llama_new_context_with_model: flash_attn = 0
0.00.766.959 I llama_new_context_with_model: freq_base  = 10000.0
0.00.766.960 I llama_new_context_with_model: freq_scale = 1
0.00.768.212 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.768.226 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.769.250 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.778.172 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.778.183 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.778.186 I llama_new_context_with_model: graph nodes  = 1287
0.00.778.186 I llama_new_context_with_model: graph splits = 2
0.00.778.191 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.848.589 I main: llama threadpool init, n_threads = 1
0.00.848.607 I 
0.00.848.703 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.848.709 I 
0.00.848.858 I sampler seed: 1234
0.00.848.871 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.848.876 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.848.878 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is the following: (here, here, and here).


 I. The life of the individual is the total and most important form of life in the here-there-here of the present and the life of the individual here, it is the life of the individual, the life of the individual.

 II. The life of the individual is the life of the individual, the life of the individual.

 III. The life of the individual is the life of the individual, the life of the individual.

 O. The life of the individual is the life of the individual, the life of the individual.

 a) The most important factor in the life of the individual is the life of the individual, the life of the individual.

 b) The life of the individual is the life of the individual, the life of the individual.

 c) The life of the individual is the life of the individual, the life of the individual.

 d) The most important factor in the life of the individual is the most important factor in the life of the individual, the most important factor in the life of the individual.

 d) The life of the individual is the life of the individual, the life of the

0.02.684.169 I llama_perf_sampler_print:    sampling time =      10.95 ms /   263 runs   (    0.04 ms per token, 24024.85 tokens per second)
0.02.684.172 I llama_perf_context_print:        load time =     845.99 ms
0.02.684.174 I llama_perf_context_print: prompt eval time =      14.22 ms /     7 tokens (    2.03 ms per token,   492.37 tokens per second)
0.02.684.176 I llama_perf_context_print:        eval time =    1786.49 ms /   255 runs   (    7.01 ms per token,   142.74 tokens per second)
0.02.684.177 I llama_perf_context_print:       total time =    1835.58 ms /   262 tokens

real	0m2.862s
user	0m2.223s
sys	0m0.634s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.783 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.103 I main: llama backend init
0.00.002.681 I main: load the model and apply lora adapter, if any
0.00.016.490 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf (version GGUF V3 (latest))
0.00.016.511 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.016.523 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.016.528 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.016.528 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.016.529 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.016.529 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.016.534 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.016.534 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.016.535 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.016.536 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.016.536 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.016.537 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.016.538 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.016.542 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.016.542 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.016.543 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.024.662 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.026.539 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.033.615 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.033.624 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.033.624 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.033.625 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.033.625 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.033.626 I llama_model_loader: - kv  22:                          general.file_type u32              = 12
0.00.033.629 I llama_model_loader: - type  f32:  258 tensors
0.00.033.631 I llama_model_loader: - type q3_K:   33 tensors
0.00.033.631 I llama_model_loader: - type q4_K:   94 tensors
0.00.033.631 I llama_model_loader: - type q5_K:    2 tensors
0.00.033.632 I llama_model_loader: - type q6_K:    1 tensors
0.00.087.439 I llm_load_vocab: special tokens cache size = 25
0.00.109.815 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.109.834 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.109.835 I llm_load_print_meta: arch             = gptneox
0.00.109.836 I llm_load_print_meta: vocab type       = BPE
0.00.109.836 I llm_load_print_meta: n_vocab          = 50304
0.00.109.837 I llm_load_print_meta: n_merges         = 50009
0.00.109.838 I llm_load_print_meta: vocab_only       = 0
0.00.109.838 I llm_load_print_meta: n_ctx_train      = 2048
0.00.109.839 I llm_load_print_meta: n_embd           = 2560
0.00.109.839 I llm_load_print_meta: n_layer          = 32
0.00.109.852 I llm_load_print_meta: n_head           = 32
0.00.109.854 I llm_load_print_meta: n_head_kv        = 32
0.00.109.854 I llm_load_print_meta: n_rot            = 20
0.00.109.855 I llm_load_print_meta: n_swa            = 0
0.00.109.858 I llm_load_print_meta: n_embd_head_k    = 80
0.00.109.859 I llm_load_print_meta: n_embd_head_v    = 80
0.00.109.860 I llm_load_print_meta: n_gqa            = 1
0.00.109.862 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.109.863 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.109.865 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.109.866 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.109.866 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.109.867 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.109.868 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.109.869 I llm_load_print_meta: n_ff             = 10240
0.00.109.869 I llm_load_print_meta: n_expert         = 0
0.00.109.870 I llm_load_print_meta: n_expert_used    = 0
0.00.109.871 I llm_load_print_meta: causal attn      = 1
0.00.109.871 I llm_load_print_meta: pooling type     = 0
0.00.109.872 I llm_load_print_meta: rope type        = 2
0.00.109.873 I llm_load_print_meta: rope scaling     = linear
0.00.109.875 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.109.876 I llm_load_print_meta: freq_scale_train = 1
0.00.109.876 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.109.877 I llm_load_print_meta: rope_finetuned   = unknown
0.00.109.877 I llm_load_print_meta: ssm_d_conv       = 0
0.00.109.878 I llm_load_print_meta: ssm_d_inner      = 0
0.00.109.878 I llm_load_print_meta: ssm_d_state      = 0
0.00.109.878 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.109.879 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.109.880 I llm_load_print_meta: model type       = 2.8B
0.00.109.881 I llm_load_print_meta: model ftype      = Q3_K - Medium
0.00.109.882 I llm_load_print_meta: model params     = 2.78 B
0.00.109.883 I llm_load_print_meta: model size       = 1.37 GiB (4.25 BPW) 
0.00.109.884 I llm_load_print_meta: general.name     = 2.8B
0.00.109.884 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.109.885 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.109.885 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.109.886 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.109.887 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.109.887 I llm_load_print_meta: max token length = 1024
0.00.216.994 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.217.001 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.217.001 I ggml_cuda_init: found 1 CUDA devices:
0.00.217.105 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.493.726 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.583.986 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.583.999 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.584.000 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.584.026 I llm_load_tensors:        CPU buffer size =    52.77 MiB
0.00.584.028 I llm_load_tensors:      CUDA0 buffer size =  1354.83 MiB
..........................................................................................
0.00.864.255 I llama_new_context_with_model: n_ctx      = 2048
0.00.864.262 I llama_new_context_with_model: n_batch    = 2048
0.00.864.262 I llama_new_context_with_model: n_ubatch   = 512
0.00.864.263 I llama_new_context_with_model: flash_attn = 0
0.00.864.268 I llama_new_context_with_model: freq_base  = 10000.0
0.00.864.270 I llama_new_context_with_model: freq_scale = 1
0.00.865.547 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.865.561 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.866.624 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.875.778 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.875.787 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.875.790 I llama_new_context_with_model: graph nodes  = 1287
0.00.875.791 I llama_new_context_with_model: graph splits = 2
0.00.875.795 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.941.728 I main: llama threadpool init, n_threads = 1
0.00.941.743 I 
0.00.941.839 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.941.844 I 
0.00.941.989 I sampler seed: 1234
0.00.942.003 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.942.006 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.942.008 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to get out of your house and go out and do something."

The next day, I was back at my apartment, trying to get the kinks out of my neck from the long day of standing up, and thinking about all that was going on.

"I can't believe I'm here," I said to the air.

I'd just gotten back from my shift at the hospital, where I was taking the temperature and pulse of every patient who walked through the door. I was a little worried that I was going to be put on an overnight rotation. I was sure it was just a coincidence that the night I was at the hospital, I had received a call from my boss.

"You'll be fine," he said. "Just keep going."

My shift had gone well. I had been able to get a lot of patients without too much trouble.

"I'm just going to be a little more careful with them," I said to myself as I made my way to the patient room.

The room was a mess.

"I hope I'm not here long," I said.

The room was full of people.

"I'll be back in a minute," I

0.02.793.592 I llama_perf_sampler_print:    sampling time =      11.54 ms /   263 runs   (    0.04 ms per token, 22788.32 tokens per second)
0.02.793.595 I llama_perf_context_print:        load time =     939.03 ms
0.02.793.597 I llama_perf_context_print: prompt eval time =      12.68 ms /     7 tokens (    1.81 ms per token,   551.92 tokens per second)
0.02.793.599 I llama_perf_context_print:        eval time =    1802.87 ms /   255 runs   (    7.07 ms per token,   141.44 tokens per second)
0.02.793.600 I llama_perf_context_print:       total time =    1851.87 ms /   262 tokens

real	0m2.971s
user	0m2.247s
sys	0m0.725s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.735 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.096 I main: llama backend init
0.00.002.637 I main: load the model and apply lora adapter, if any
0.00.016.585 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf (version GGUF V3 (latest))
0.00.016.601 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.016.610 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.016.611 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.016.612 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.016.612 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.016.614 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.016.620 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.016.621 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.016.621 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.016.623 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.016.624 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.016.624 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.016.625 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.016.629 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.016.630 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.016.631 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.024.497 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.026.370 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.033.650 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.033.658 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.033.659 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.033.660 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.033.661 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.033.662 I llama_model_loader: - kv  22:                          general.file_type u32              = 15
0.00.033.665 I llama_model_loader: - type  f32:  258 tensors
0.00.033.667 I llama_model_loader: - type q4_K:   81 tensors
0.00.033.667 I llama_model_loader: - type q5_K:   32 tensors
0.00.033.669 I llama_model_loader: - type q6_K:   17 tensors
0.00.086.772 I llm_load_vocab: special tokens cache size = 25
0.00.108.997 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.109.012 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.109.013 I llm_load_print_meta: arch             = gptneox
0.00.109.014 I llm_load_print_meta: vocab type       = BPE
0.00.109.015 I llm_load_print_meta: n_vocab          = 50304
0.00.109.017 I llm_load_print_meta: n_merges         = 50009
0.00.109.018 I llm_load_print_meta: vocab_only       = 0
0.00.109.018 I llm_load_print_meta: n_ctx_train      = 2048
0.00.109.019 I llm_load_print_meta: n_embd           = 2560
0.00.109.019 I llm_load_print_meta: n_layer          = 32
0.00.109.031 I llm_load_print_meta: n_head           = 32
0.00.109.032 I llm_load_print_meta: n_head_kv        = 32
0.00.109.033 I llm_load_print_meta: n_rot            = 20
0.00.109.033 I llm_load_print_meta: n_swa            = 0
0.00.109.034 I llm_load_print_meta: n_embd_head_k    = 80
0.00.109.034 I llm_load_print_meta: n_embd_head_v    = 80
0.00.109.036 I llm_load_print_meta: n_gqa            = 1
0.00.109.037 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.109.039 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.109.040 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.109.041 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.109.042 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.109.042 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.109.042 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.109.044 I llm_load_print_meta: n_ff             = 10240
0.00.109.044 I llm_load_print_meta: n_expert         = 0
0.00.109.044 I llm_load_print_meta: n_expert_used    = 0
0.00.109.045 I llm_load_print_meta: causal attn      = 1
0.00.109.045 I llm_load_print_meta: pooling type     = 0
0.00.109.045 I llm_load_print_meta: rope type        = 2
0.00.109.047 I llm_load_print_meta: rope scaling     = linear
0.00.109.048 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.109.049 I llm_load_print_meta: freq_scale_train = 1
0.00.109.050 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.109.050 I llm_load_print_meta: rope_finetuned   = unknown
0.00.109.050 I llm_load_print_meta: ssm_d_conv       = 0
0.00.109.051 I llm_load_print_meta: ssm_d_inner      = 0
0.00.109.051 I llm_load_print_meta: ssm_d_state      = 0
0.00.109.052 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.109.052 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.109.053 I llm_load_print_meta: model type       = 2.8B
0.00.109.054 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.109.055 I llm_load_print_meta: model params     = 2.78 B
0.00.109.056 I llm_load_print_meta: model size       = 1.66 GiB (5.14 BPW) 
0.00.109.056 I llm_load_print_meta: general.name     = 2.8B
0.00.109.057 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.109.057 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.109.058 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.109.059 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.109.059 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.109.061 I llm_load_print_meta: max token length = 1024
0.00.212.546 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.212.553 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.212.554 I ggml_cuda_init: found 1 CUDA devices:
0.00.212.657 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.490.702 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.601.192 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.601.206 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.601.206 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.601.216 I llm_load_tensors:        CPU buffer size =    69.08 MiB
0.00.601.218 I llm_load_tensors:      CUDA0 buffer size =  1632.95 MiB
...................................................................................
0.00.934.502 I llama_new_context_with_model: n_ctx      = 2048
0.00.934.509 I llama_new_context_with_model: n_batch    = 2048
0.00.934.510 I llama_new_context_with_model: n_ubatch   = 512
0.00.934.511 I llama_new_context_with_model: flash_attn = 0
0.00.934.518 I llama_new_context_with_model: freq_base  = 10000.0
0.00.934.520 I llama_new_context_with_model: freq_scale = 1
0.00.935.775 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.935.789 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.936.871 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.945.381 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.945.392 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.945.395 I llama_new_context_with_model: graph nodes  = 1287
0.00.945.395 I llama_new_context_with_model: graph splits = 2
0.00.945.400 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.013.570 I main: llama threadpool init, n_threads = 1
0.01.013.586 I 
0.01.013.683 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.013.689 I 
0.01.013.842 I sampler seed: 1234
0.01.013.856 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.013.861 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.013.865 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to create the life we want to live.

I believe that when we know what we want, we can achieve it. I believe that when we love what we want, we find it. I believe that when we believe what we want, we get what we want.

I believe we must trust our dreams and that the universe will support us in achieving them.

I believe that no matter what we choose, we will always be free.

I believe that we are responsible for ourselves. I believe that you are responsible for yourself.

I believe that you must take responsibility for your life.

I believe that you must take responsibility for your world.

I believe that the universe has your back. I believe that you have your back.

I believe that we must take responsibility for the things we can do.

I believe that we must take responsibility for the things we cannot do.

I believe that we can choose to be happy. I believe that we can choose to be unhappy.

I believe that we must have the courage to be ourselves. I believe that we must have the courage to be different.

I believe that we must choose to be happy. I believe that we must choose

0.02.747.095 I llama_perf_sampler_print:    sampling time =      11.27 ms /   263 runs   (    0.04 ms per token, 23332.15 tokens per second)
0.02.747.098 I llama_perf_context_print:        load time =    1010.91 ms
0.02.747.100 I llama_perf_context_print: prompt eval time =      12.33 ms /     7 tokens (    1.76 ms per token,   567.95 tokens per second)
0.02.747.101 I llama_perf_context_print:        eval time =    1683.97 ms /   255 runs   (    6.60 ms per token,   151.43 tokens per second)
0.02.747.102 I llama_perf_context_print:       total time =    1733.53 ms /   262 tokens

real	0m2.933s
user	0m2.193s
sys	0m0.744s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.712 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.023 I main: llama backend init
0.00.002.502 I main: load the model and apply lora adapter, if any
0.00.016.043 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf (version GGUF V3 (latest))
0.00.016.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.016.074 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.016.079 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.016.080 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.016.080 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.016.081 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.016.085 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.016.086 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.016.087 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.016.088 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.016.088 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.016.089 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.016.090 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.016.095 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.016.097 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.016.098 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.024.131 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.026.086 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.033.203 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.033.211 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.033.212 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.033.212 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.033.213 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.033.214 I llama_model_loader: - kv  22:                          general.file_type u32              = 17
0.00.033.216 I llama_model_loader: - type  f32:  258 tensors
0.00.033.218 I llama_model_loader: - type q5_K:   81 tensors
0.00.033.218 I llama_model_loader: - type q6_K:   49 tensors
0.00.086.625 I llm_load_vocab: special tokens cache size = 25
0.00.108.750 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.108.767 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.108.768 I llm_load_print_meta: arch             = gptneox
0.00.108.769 I llm_load_print_meta: vocab type       = BPE
0.00.108.770 I llm_load_print_meta: n_vocab          = 50304
0.00.108.770 I llm_load_print_meta: n_merges         = 50009
0.00.108.771 I llm_load_print_meta: vocab_only       = 0
0.00.108.771 I llm_load_print_meta: n_ctx_train      = 2048
0.00.108.772 I llm_load_print_meta: n_embd           = 2560
0.00.108.772 I llm_load_print_meta: n_layer          = 32
0.00.108.786 I llm_load_print_meta: n_head           = 32
0.00.108.787 I llm_load_print_meta: n_head_kv        = 32
0.00.108.788 I llm_load_print_meta: n_rot            = 20
0.00.108.789 I llm_load_print_meta: n_swa            = 0
0.00.108.790 I llm_load_print_meta: n_embd_head_k    = 80
0.00.108.790 I llm_load_print_meta: n_embd_head_v    = 80
0.00.108.792 I llm_load_print_meta: n_gqa            = 1
0.00.108.793 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.108.794 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.108.796 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.108.797 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.108.798 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.108.798 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.108.800 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.108.801 I llm_load_print_meta: n_ff             = 10240
0.00.108.801 I llm_load_print_meta: n_expert         = 0
0.00.108.802 I llm_load_print_meta: n_expert_used    = 0
0.00.108.802 I llm_load_print_meta: causal attn      = 1
0.00.108.803 I llm_load_print_meta: pooling type     = 0
0.00.108.803 I llm_load_print_meta: rope type        = 2
0.00.108.804 I llm_load_print_meta: rope scaling     = linear
0.00.108.805 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.108.807 I llm_load_print_meta: freq_scale_train = 1
0.00.108.807 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.108.808 I llm_load_print_meta: rope_finetuned   = unknown
0.00.108.808 I llm_load_print_meta: ssm_d_conv       = 0
0.00.108.809 I llm_load_print_meta: ssm_d_inner      = 0
0.00.108.810 I llm_load_print_meta: ssm_d_state      = 0
0.00.108.810 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.108.811 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.108.811 I llm_load_print_meta: model type       = 2.8B
0.00.108.812 I llm_load_print_meta: model ftype      = Q5_K - Medium
0.00.108.813 I llm_load_print_meta: model params     = 2.78 B
0.00.108.814 I llm_load_print_meta: model size       = 1.93 GiB (5.96 BPW) 
0.00.108.815 I llm_load_print_meta: general.name     = 2.8B
0.00.108.816 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.108.816 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.108.817 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.108.817 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.108.818 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.108.818 I llm_load_print_meta: max token length = 1024
0.00.211.557 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.211.564 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.211.565 I ggml_cuda_init: found 1 CUDA devices:
0.00.211.668 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.487.595 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.612.599 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.612.611 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.612.612 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.612.621 I llm_load_tensors:        CPU buffer size =    84.43 MiB
0.00.612.623 I llm_load_tensors:      CUDA0 buffer size =  1887.64 MiB
............................................................................................
0.01.016.287 I llama_new_context_with_model: n_ctx      = 2048
0.01.016.294 I llama_new_context_with_model: n_batch    = 2048
0.01.016.294 I llama_new_context_with_model: n_ubatch   = 512
0.01.016.295 I llama_new_context_with_model: flash_attn = 0
0.01.016.302 I llama_new_context_with_model: freq_base  = 10000.0
0.01.016.303 I llama_new_context_with_model: freq_scale = 1
0.01.017.611 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.017.625 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.018.644 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.028.670 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.028.679 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.028.682 I llama_new_context_with_model: graph nodes  = 1287
0.01.028.683 I llama_new_context_with_model: graph splits = 2
0.01.028.687 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.102.702 I main: llama threadpool init, n_threads = 1
0.01.102.719 I 
0.01.103.010 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.103.018 I 
0.01.103.164 I sampler seed: 1234
0.01.103.188 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.103.191 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.103.194 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to create the life that you want to live." "I want to be a good father." "I want to be a good friend." "I want to be a good son." "I want to be a good person." "I want to be a good friend." "I want to be a good son." "And I want to be a good father." "That's a lot of things to want." "You know, I don't know if I'll ever be able to accomplish them all." "But I have to try." "I have to try, and if I'm not able to do everything," "I want to be able to do everything." "I don't want to be a failure at anything, because..." "I don't want to fail." "I don't want to fail at anything." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail." "I don't want to fail."

0.02.998.493 I llama_perf_sampler_print:    sampling time =      12.04 ms /   263 runs   (    0.05 ms per token, 21836.60 tokens per second)
0.02.998.495 I llama_perf_context_print:        load time =    1100.18 ms
0.02.998.497 I llama_perf_context_print: prompt eval time =      12.75 ms /     7 tokens (    1.82 ms per token,   548.93 tokens per second)
0.02.998.499 I llama_perf_context_print:        eval time =    1837.64 ms /   255 runs   (    7.21 ms per token,   138.77 tokens per second)
0.02.998.500 I llama_perf_context_print:       total time =    1895.80 ms /   262 tokens

real	0m3.208s
user	0m2.412s
sys	0m0.790s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
+ ./bin/llama-cli --model ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf -t 1 -ngl 999 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
0.00.000.710 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.084 I main: llama backend init
0.00.002.756 I main: load the model and apply lora adapter, if any
0.00.017.398 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf (version GGUF V3 (latest))
0.00.017.416 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.017.425 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.017.427 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.017.427 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.017.428 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.017.428 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.017.434 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.017.434 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.017.435 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.017.436 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.017.437 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.017.437 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.017.438 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.017.444 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.017.444 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.017.445 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.026.034 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.027.907 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.035.505 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.035.514 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.035.515 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.035.515 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.035.516 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.035.517 I llama_model_loader: - kv  22:                          general.file_type u32              = 18
0.00.035.520 I llama_model_loader: - type  f32:  258 tensors
0.00.035.522 I llama_model_loader: - type q6_K:  130 tensors
0.00.093.484 I llm_load_vocab: special tokens cache size = 25
0.00.117.137 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.117.156 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.117.156 I llm_load_print_meta: arch             = gptneox
0.00.117.157 I llm_load_print_meta: vocab type       = BPE
0.00.117.158 I llm_load_print_meta: n_vocab          = 50304
0.00.117.158 I llm_load_print_meta: n_merges         = 50009
0.00.117.159 I llm_load_print_meta: vocab_only       = 0
0.00.117.159 I llm_load_print_meta: n_ctx_train      = 2048
0.00.117.160 I llm_load_print_meta: n_embd           = 2560
0.00.117.162 I llm_load_print_meta: n_layer          = 32
0.00.117.177 I llm_load_print_meta: n_head           = 32
0.00.117.179 I llm_load_print_meta: n_head_kv        = 32
0.00.117.180 I llm_load_print_meta: n_rot            = 20
0.00.117.180 I llm_load_print_meta: n_swa            = 0
0.00.117.181 I llm_load_print_meta: n_embd_head_k    = 80
0.00.117.181 I llm_load_print_meta: n_embd_head_v    = 80
0.00.117.184 I llm_load_print_meta: n_gqa            = 1
0.00.117.185 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.117.187 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.117.189 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.117.189 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.117.190 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.117.191 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.117.191 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.117.193 I llm_load_print_meta: n_ff             = 10240
0.00.117.193 I llm_load_print_meta: n_expert         = 0
0.00.117.193 I llm_load_print_meta: n_expert_used    = 0
0.00.117.194 I llm_load_print_meta: causal attn      = 1
0.00.117.194 I llm_load_print_meta: pooling type     = 0
0.00.117.195 I llm_load_print_meta: rope type        = 2
0.00.117.196 I llm_load_print_meta: rope scaling     = linear
0.00.117.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.117.199 I llm_load_print_meta: freq_scale_train = 1
0.00.117.199 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.117.200 I llm_load_print_meta: rope_finetuned   = unknown
0.00.117.200 I llm_load_print_meta: ssm_d_conv       = 0
0.00.117.201 I llm_load_print_meta: ssm_d_inner      = 0
0.00.117.207 I llm_load_print_meta: ssm_d_state      = 0
0.00.117.207 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.117.208 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.117.209 I llm_load_print_meta: model type       = 2.8B
0.00.117.210 I llm_load_print_meta: model ftype      = Q6_K
0.00.117.212 I llm_load_print_meta: model params     = 2.78 B
0.00.117.213 I llm_load_print_meta: model size       = 2.12 GiB (6.57 BPW) 
0.00.117.213 I llm_load_print_meta: general.name     = 2.8B
0.00.117.214 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.117.214 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.117.215 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.117.215 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.117.216 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.117.217 I llm_load_print_meta: max token length = 1024
0.00.236.367 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.236.374 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.236.375 I ggml_cuda_init: found 1 CUDA devices:
0.00.236.481 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.544.280 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.698.020 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.698.035 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.698.035 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.698.044 I llm_load_tensors:        CPU buffer size =   100.74 MiB
0.00.698.046 I llm_load_tensors:      CUDA0 buffer size =  2073.58 MiB
.............................................................................................
0.01.151.454 I llama_new_context_with_model: n_ctx      = 2048
0.01.151.462 I llama_new_context_with_model: n_batch    = 2048
0.01.151.463 I llama_new_context_with_model: n_ubatch   = 512
0.01.151.463 I llama_new_context_with_model: flash_attn = 0
0.01.151.469 I llama_new_context_with_model: freq_base  = 10000.0
0.01.151.470 I llama_new_context_with_model: freq_scale = 1
0.01.152.728 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.152.742 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.153.785 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.163.804 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.163.814 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.163.817 I llama_new_context_with_model: graph nodes  = 1287
0.01.163.818 I llama_new_context_with_model: graph splits = 2
0.01.163.822 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.239.682 I main: llama threadpool init, n_threads = 1
0.01.239.701 I 
0.01.239.798 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.239.804 I 
0.01.239.949 I sampler seed: 1234
0.01.239.962 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.239.966 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.239.970 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0

I believe the meaning of life is to create art."

"I do not believe in God," I said. "I believe in a Supreme Being—a higher power—a spirit. I have no proof of this, but I believe this."

"If it is a spirit, it is a spirit of love, not of hate, as you say," she said. "It would not be a spirit of hate and anger against a world that is so cruel, that has killed so many people. It would be a spirit of love, of concern for this world and its people."

I stared at her. She was looking at me with an odd expression, as though she were seeing me for the first time.

"Do you believe that there is a God?" I asked.

"I have no reason not to believe in God," she said. "I believe in God for myself, but I have no reason to believe in God for others."

"You don't believe in God?"

"I do not believe that there is a God," she said. "I believe that there is a Supreme Being."

"You do not believe that there is a God?"

"I do not believe that there is a God," she

0.03.214.007 I llama_perf_sampler_print:    sampling time =      11.66 ms /   263 runs   (    0.04 ms per token, 22551.88 tokens per second)
0.03.214.011 I llama_perf_context_print:        load time =    1236.90 ms
0.03.214.013 I llama_perf_context_print: prompt eval time =      11.81 ms /     7 tokens (    1.69 ms per token,   592.72 tokens per second)
0.03.214.014 I llama_perf_context_print:        eval time =    1925.99 ms /   255 runs   (    7.55 ms per token,   132.40 tokens per second)
0.03.214.015 I llama_perf_context_print:       total time =    1974.33 ms /   262 tokens

real	0m3.392s
user	0m2.538s
sys	0m0.857s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.012 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.022.057 I llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.022.072 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.082 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.022.083 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.022.084 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.022.084 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.022.085 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.022.089 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.022.090 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.022.091 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.022.092 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.022.093 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.022.094 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.022.095 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.022.101 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.022.102 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.022.102 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.029.648 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.031.397 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.038.102 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.038.110 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.038.111 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.038.111 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.038.112 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.038.114 I llama_model_loader: - type  f32:  258 tensors
0.00.038.117 I llama_model_loader: - type  f16:  130 tensors
0.00.093.763 I llm_load_vocab: special tokens cache size = 25
0.00.115.974 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.115.994 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.115.994 I llm_load_print_meta: arch             = gptneox
0.00.115.995 I llm_load_print_meta: vocab type       = BPE
0.00.115.996 I llm_load_print_meta: n_vocab          = 50304
0.00.115.997 I llm_load_print_meta: n_merges         = 50009
0.00.115.998 I llm_load_print_meta: vocab_only       = 0
0.00.115.998 I llm_load_print_meta: n_ctx_train      = 2048
0.00.115.999 I llm_load_print_meta: n_embd           = 2560
0.00.115.999 I llm_load_print_meta: n_layer          = 32
0.00.116.015 I llm_load_print_meta: n_head           = 32
0.00.116.016 I llm_load_print_meta: n_head_kv        = 32
0.00.116.017 I llm_load_print_meta: n_rot            = 20
0.00.116.017 I llm_load_print_meta: n_swa            = 0
0.00.116.018 I llm_load_print_meta: n_embd_head_k    = 80
0.00.116.018 I llm_load_print_meta: n_embd_head_v    = 80
0.00.116.020 I llm_load_print_meta: n_gqa            = 1
0.00.116.021 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.116.022 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.116.024 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.116.024 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.116.025 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.116.026 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.116.026 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.116.027 I llm_load_print_meta: n_ff             = 10240
0.00.116.028 I llm_load_print_meta: n_expert         = 0
0.00.116.028 I llm_load_print_meta: n_expert_used    = 0
0.00.116.029 I llm_load_print_meta: causal attn      = 1
0.00.116.029 I llm_load_print_meta: pooling type     = 0
0.00.116.031 I llm_load_print_meta: rope type        = 2
0.00.116.035 I llm_load_print_meta: rope scaling     = linear
0.00.116.037 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.116.038 I llm_load_print_meta: freq_scale_train = 1
0.00.116.039 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.116.040 I llm_load_print_meta: rope_finetuned   = unknown
0.00.116.040 I llm_load_print_meta: ssm_d_conv       = 0
0.00.116.042 I llm_load_print_meta: ssm_d_inner      = 0
0.00.116.042 I llm_load_print_meta: ssm_d_state      = 0
0.00.116.043 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.116.044 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.116.045 I llm_load_print_meta: model type       = 2.8B
0.00.116.047 I llm_load_print_meta: model ftype      = all F32 (guessed)
0.00.116.048 I llm_load_print_meta: model params     = 2.78 B
0.00.116.049 I llm_load_print_meta: model size       = 5.17 GiB (16.01 BPW) 
0.00.116.050 I llm_load_print_meta: general.name     = 2.8B
0.00.116.051 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.116.051 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.116.055 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.116.056 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.116.057 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.116.057 I llm_load_print_meta: max token length = 1024
0.00.218.703 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.218.710 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.218.711 I ggml_cuda_init: found 1 CUDA devices:
0.00.218.814 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.494.002 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.826.334 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.826.344 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.826.345 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.826.355 I llm_load_tensors:        CPU buffer size =   245.62 MiB
0.00.826.356 I llm_load_tensors:      CUDA0 buffer size =  5049.71 MiB
.............................................................................................
0.01.707.175 I llama_new_context_with_model: n_ctx      = 2048
0.01.707.181 I llama_new_context_with_model: n_batch    = 512
0.01.707.181 I llama_new_context_with_model: n_ubatch   = 512
0.01.707.182 I llama_new_context_with_model: flash_attn = 0
0.01.707.189 I llama_new_context_with_model: freq_base  = 10000.0
0.01.707.190 I llama_new_context_with_model: freq_scale = 1
0.01.708.709 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.708.723 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.710.032 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.719.031 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.719.042 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.719.046 I llama_new_context_with_model: graph nodes  = 1287
0.01.719.046 I llama_new_context_with_model: graph splits = 2
0.01.719.049 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.800.934 I 
0.01.801.047 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.801.066 I perplexity: tokenizing the input ..
0.03.123.458 I perplexity: tokenization took 1322.37 ms
0.03.123.788 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.03.714.585 I perplexity: 0.59 seconds per pass - ETA 0.03 minutes

[1]9.6667,
[2]11.4286,
[3]11.6311,
[4]10.3475,
0.05.314.479 I Final estimate: PPL = 10.3475 +/- 0.42292

0.05.316.422 I llama_perf_context_print:        load time =    1792.45 ms
0.05.316.425 I llama_perf_context_print: prompt eval time =    1821.15 ms /  8192 tokens (    0.22 ms per token,  4498.25 tokens per second)
0.05.316.426 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.05.316.428 I llama_perf_context_print:       total time =    3515.49 ms /  8193 tokens

real	0m5.520s
user	0m5.183s
sys	0m1.335s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.006.972 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.022.351 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf (version GGUF V3 (latest))
0.00.022.370 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.379 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.022.380 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.022.380 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.022.381 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.022.382 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.022.386 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.022.387 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.022.388 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.022.388 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.022.389 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.022.390 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.022.392 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.022.397 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.022.399 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.022.400 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.030.064 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.031.874 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.038.569 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.038.577 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.038.578 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.038.578 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.038.579 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.038.579 I llama_model_loader: - kv  22:                          general.file_type u32              = 7
0.00.038.582 I llama_model_loader: - type  f32:  258 tensors
0.00.038.584 I llama_model_loader: - type q8_0:  130 tensors
0.00.110.016 I llm_load_vocab: special tokens cache size = 25
0.00.133.712 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.133.731 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.133.732 I llm_load_print_meta: arch             = gptneox
0.00.133.733 I llm_load_print_meta: vocab type       = BPE
0.00.133.734 I llm_load_print_meta: n_vocab          = 50304
0.00.133.734 I llm_load_print_meta: n_merges         = 50009
0.00.133.735 I llm_load_print_meta: vocab_only       = 0
0.00.133.735 I llm_load_print_meta: n_ctx_train      = 2048
0.00.133.736 I llm_load_print_meta: n_embd           = 2560
0.00.133.736 I llm_load_print_meta: n_layer          = 32
0.00.133.751 I llm_load_print_meta: n_head           = 32
0.00.133.752 I llm_load_print_meta: n_head_kv        = 32
0.00.133.752 I llm_load_print_meta: n_rot            = 20
0.00.133.753 I llm_load_print_meta: n_swa            = 0
0.00.133.753 I llm_load_print_meta: n_embd_head_k    = 80
0.00.133.754 I llm_load_print_meta: n_embd_head_v    = 80
0.00.133.755 I llm_load_print_meta: n_gqa            = 1
0.00.133.757 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.133.758 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.133.760 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.133.760 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.133.762 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.133.762 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.133.763 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.133.764 I llm_load_print_meta: n_ff             = 10240
0.00.133.764 I llm_load_print_meta: n_expert         = 0
0.00.133.764 I llm_load_print_meta: n_expert_used    = 0
0.00.133.766 I llm_load_print_meta: causal attn      = 1
0.00.133.767 I llm_load_print_meta: pooling type     = 0
0.00.133.767 I llm_load_print_meta: rope type        = 2
0.00.133.768 I llm_load_print_meta: rope scaling     = linear
0.00.133.769 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.133.770 I llm_load_print_meta: freq_scale_train = 1
0.00.133.771 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.133.772 I llm_load_print_meta: rope_finetuned   = unknown
0.00.133.776 I llm_load_print_meta: ssm_d_conv       = 0
0.00.133.777 I llm_load_print_meta: ssm_d_inner      = 0
0.00.133.777 I llm_load_print_meta: ssm_d_state      = 0
0.00.133.778 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.133.778 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.133.779 I llm_load_print_meta: model type       = 2.8B
0.00.133.781 I llm_load_print_meta: model ftype      = Q8_0
0.00.133.782 I llm_load_print_meta: model params     = 2.78 B
0.00.133.783 I llm_load_print_meta: model size       = 2.75 GiB (8.51 BPW) 
0.00.133.783 I llm_load_print_meta: general.name     = 2.8B
0.00.133.784 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.133.785 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.133.786 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.133.787 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.133.788 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.133.788 I llm_load_print_meta: max token length = 1024
0.00.246.670 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.246.677 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.246.678 I ggml_cuda_init: found 1 CUDA devices:
0.00.246.781 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.525.191 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.709.356 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.709.368 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.709.368 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.709.378 I llm_load_tensors:        CPU buffer size =   130.49 MiB
0.00.709.379 I llm_load_tensors:      CUDA0 buffer size =  2684.57 MiB
.............................................................................................
0.01.187.382 I llama_new_context_with_model: n_ctx      = 2048
0.01.187.387 I llama_new_context_with_model: n_batch    = 512
0.01.187.388 I llama_new_context_with_model: n_ubatch   = 512
0.01.187.388 I llama_new_context_with_model: flash_attn = 0
0.01.187.394 I llama_new_context_with_model: freq_base  = 10000.0
0.01.187.395 I llama_new_context_with_model: freq_scale = 1
0.01.188.673 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.188.686 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.189.957 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.198.133 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.198.142 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.198.145 I llama_new_context_with_model: graph nodes  = 1287
0.01.198.146 I llama_new_context_with_model: graph splits = 2
0.01.198.148 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.269.186 I 
0.01.269.293 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.269.321 I perplexity: tokenizing the input ..
0.02.506.386 I perplexity: tokenization took 1237.07 ms
0.02.506.710 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.03.127.776 I perplexity: 0.62 seconds per pass - ETA 0.03 minutes

[1]9.7126,
[2]11.4535,
[3]11.6553,
[4]10.3702,
0.04.834.033 I Final estimate: PPL = 10.3702 +/- 0.42431

0.04.835.806 I llama_perf_context_print:        load time =    1260.76 ms
0.04.835.809 I llama_perf_context_print: prompt eval time =    1972.84 ms /  8192 tokens (    0.24 ms per token,  4152.39 tokens per second)
0.04.835.810 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.835.811 I llama_perf_context_print:       total time =    3566.62 ms /  8193 tokens

real	0m5.036s
user	0m4.887s
sys	0m1.118s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.081 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.022.216 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
0.00.022.233 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.242 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.022.243 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.022.244 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.022.245 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.022.245 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.022.249 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.022.250 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.022.251 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.022.253 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.022.254 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.022.255 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.022.256 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.022.261 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.022.262 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.022.262 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.029.797 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.031.568 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.038.381 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.038.388 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.038.389 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.038.390 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.038.390 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.038.391 I llama_model_loader: - kv  22:                          general.file_type u32              = 2
0.00.038.393 I llama_model_loader: - type  f32:  258 tensors
0.00.038.395 I llama_model_loader: - type q4_0:  129 tensors
0.00.038.396 I llama_model_loader: - type q6_K:    1 tensors
0.00.092.691 I llm_load_vocab: special tokens cache size = 25
0.00.115.051 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.115.067 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.115.067 I llm_load_print_meta: arch             = gptneox
0.00.115.068 I llm_load_print_meta: vocab type       = BPE
0.00.115.069 I llm_load_print_meta: n_vocab          = 50304
0.00.115.070 I llm_load_print_meta: n_merges         = 50009
0.00.115.070 I llm_load_print_meta: vocab_only       = 0
0.00.115.071 I llm_load_print_meta: n_ctx_train      = 2048
0.00.115.071 I llm_load_print_meta: n_embd           = 2560
0.00.115.072 I llm_load_print_meta: n_layer          = 32
0.00.115.084 I llm_load_print_meta: n_head           = 32
0.00.115.085 I llm_load_print_meta: n_head_kv        = 32
0.00.115.086 I llm_load_print_meta: n_rot            = 20
0.00.115.086 I llm_load_print_meta: n_swa            = 0
0.00.115.087 I llm_load_print_meta: n_embd_head_k    = 80
0.00.115.087 I llm_load_print_meta: n_embd_head_v    = 80
0.00.115.089 I llm_load_print_meta: n_gqa            = 1
0.00.115.091 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.115.092 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.115.094 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.115.095 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.115.096 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.115.097 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.115.098 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.115.099 I llm_load_print_meta: n_ff             = 10240
0.00.115.099 I llm_load_print_meta: n_expert         = 0
0.00.115.100 I llm_load_print_meta: n_expert_used    = 0
0.00.115.101 I llm_load_print_meta: causal attn      = 1
0.00.115.105 I llm_load_print_meta: pooling type     = 0
0.00.115.105 I llm_load_print_meta: rope type        = 2
0.00.115.106 I llm_load_print_meta: rope scaling     = linear
0.00.115.107 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.115.108 I llm_load_print_meta: freq_scale_train = 1
0.00.115.109 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.115.109 I llm_load_print_meta: rope_finetuned   = unknown
0.00.115.110 I llm_load_print_meta: ssm_d_conv       = 0
0.00.115.110 I llm_load_print_meta: ssm_d_inner      = 0
0.00.115.111 I llm_load_print_meta: ssm_d_state      = 0
0.00.115.112 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.115.112 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.115.113 I llm_load_print_meta: model type       = 2.8B
0.00.115.115 I llm_load_print_meta: model ftype      = Q4_0
0.00.115.115 I llm_load_print_meta: model params     = 2.78 B
0.00.115.116 I llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
0.00.115.117 I llm_load_print_meta: general.name     = 2.8B
0.00.115.118 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.115.119 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.115.119 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.115.121 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.115.121 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.115.122 I llm_load_print_meta: max token length = 1024
0.00.230.120 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.230.126 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.230.127 I ggml_cuda_init: found 1 CUDA devices:
0.00.230.230 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.509.914 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.609.201 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.609.215 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.609.216 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.609.225 I llm_load_tensors:        CPU buffer size =    69.08 MiB
0.00.609.227 I llm_load_tensors:      CUDA0 buffer size =  1454.83 MiB
...........................................................................................
0.00.878.495 I llama_new_context_with_model: n_ctx      = 2048
0.00.878.501 I llama_new_context_with_model: n_batch    = 512
0.00.878.501 I llama_new_context_with_model: n_ubatch   = 512
0.00.878.502 I llama_new_context_with_model: flash_attn = 0
0.00.878.508 I llama_new_context_with_model: freq_base  = 10000.0
0.00.878.509 I llama_new_context_with_model: freq_scale = 1
0.00.879.847 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.879.857 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.881.137 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.889.865 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.889.874 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.889.877 I llama_new_context_with_model: graph nodes  = 1287
0.00.889.877 I llama_new_context_with_model: graph splits = 2
0.00.889.880 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.958.871 I 
0.00.958.982 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.958.995 I perplexity: tokenizing the input ..
0.02.209.507 I perplexity: tokenization took 1250.5 ms
0.02.209.840 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.874.140 I perplexity: 0.66 seconds per pass - ETA 0.03 minutes

[1]10.2888,
[2]12.0611,
[3]12.3179,
[4]10.9644,
0.04.707.733 I Final estimate: PPL = 10.9644 +/- 0.44786

0.04.709.320 I llama_perf_context_print:        load time =     950.33 ms
0.04.709.323 I llama_perf_context_print: prompt eval time =    2145.05 ms /  8192 tokens (    0.26 ms per token,  3819.03 tokens per second)
0.04.709.324 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.709.326 I llama_perf_context_print:       total time =    3750.45 ms /  8193 tokens

real	0m4.906s
user	0m4.929s
sys	0m0.950s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.154 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.022.157 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf (version GGUF V3 (latest))
0.00.022.177 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.185 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.022.187 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.022.188 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.022.189 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.022.190 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.022.195 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.022.196 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.022.197 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.022.197 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.022.198 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.022.199 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.022.200 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.022.204 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.022.205 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.022.206 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.029.764 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.031.521 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.038.357 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.038.365 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.038.366 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.038.366 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.038.367 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.038.367 I llama_model_loader: - kv  22:                          general.file_type u32              = 3
0.00.038.370 I llama_model_loader: - type  f32:  258 tensors
0.00.038.372 I llama_model_loader: - type q4_1:  129 tensors
0.00.038.372 I llama_model_loader: - type q6_K:    1 tensors
0.00.091.825 I llm_load_vocab: special tokens cache size = 25
0.00.114.538 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.114.556 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.114.556 I llm_load_print_meta: arch             = gptneox
0.00.114.557 I llm_load_print_meta: vocab type       = BPE
0.00.114.558 I llm_load_print_meta: n_vocab          = 50304
0.00.114.559 I llm_load_print_meta: n_merges         = 50009
0.00.114.559 I llm_load_print_meta: vocab_only       = 0
0.00.114.560 I llm_load_print_meta: n_ctx_train      = 2048
0.00.114.560 I llm_load_print_meta: n_embd           = 2560
0.00.114.561 I llm_load_print_meta: n_layer          = 32
0.00.114.575 I llm_load_print_meta: n_head           = 32
0.00.114.576 I llm_load_print_meta: n_head_kv        = 32
0.00.114.577 I llm_load_print_meta: n_rot            = 20
0.00.114.577 I llm_load_print_meta: n_swa            = 0
0.00.114.578 I llm_load_print_meta: n_embd_head_k    = 80
0.00.114.578 I llm_load_print_meta: n_embd_head_v    = 80
0.00.114.581 I llm_load_print_meta: n_gqa            = 1
0.00.114.582 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.114.587 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.114.589 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.114.590 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.114.590 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.114.591 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.114.591 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.114.593 I llm_load_print_meta: n_ff             = 10240
0.00.114.594 I llm_load_print_meta: n_expert         = 0
0.00.114.594 I llm_load_print_meta: n_expert_used    = 0
0.00.114.595 I llm_load_print_meta: causal attn      = 1
0.00.114.596 I llm_load_print_meta: pooling type     = 0
0.00.114.597 I llm_load_print_meta: rope type        = 2
0.00.114.598 I llm_load_print_meta: rope scaling     = linear
0.00.114.600 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.114.601 I llm_load_print_meta: freq_scale_train = 1
0.00.114.601 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.114.602 I llm_load_print_meta: rope_finetuned   = unknown
0.00.114.602 I llm_load_print_meta: ssm_d_conv       = 0
0.00.114.603 I llm_load_print_meta: ssm_d_inner      = 0
0.00.114.603 I llm_load_print_meta: ssm_d_state      = 0
0.00.114.603 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.114.604 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.114.604 I llm_load_print_meta: model type       = 2.8B
0.00.114.606 I llm_load_print_meta: model ftype      = Q4_1
0.00.114.607 I llm_load_print_meta: model params     = 2.78 B
0.00.114.608 I llm_load_print_meta: model size       = 1.64 GiB (5.08 BPW) 
0.00.114.609 I llm_load_print_meta: general.name     = 2.8B
0.00.114.609 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.114.610 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.114.610 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.114.611 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.114.612 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.114.612 I llm_load_print_meta: max token length = 1024
0.00.221.413 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.221.420 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.221.421 I ggml_cuda_init: found 1 CUDA devices:
0.00.221.524 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.500.186 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.608.994 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.609.007 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.609.008 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.609.017 I llm_load_tensors:        CPU buffer size =    76.76 MiB
0.00.609.019 I llm_load_tensors:      CUDA0 buffer size =  1604.83 MiB
............................................................................................
0.00.906.694 I llama_new_context_with_model: n_ctx      = 2048
0.00.906.699 I llama_new_context_with_model: n_batch    = 512
0.00.906.700 I llama_new_context_with_model: n_ubatch   = 512
0.00.906.701 I llama_new_context_with_model: flash_attn = 0
0.00.906.707 I llama_new_context_with_model: freq_base  = 10000.0
0.00.906.709 I llama_new_context_with_model: freq_scale = 1
0.00.907.998 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.908.012 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.909.314 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.917.455 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.917.465 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.917.468 I llama_new_context_with_model: graph nodes  = 1287
0.00.917.468 I llama_new_context_with_model: graph splits = 2
0.00.917.471 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.986.080 I 
0.00.986.187 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.986.200 I perplexity: tokenizing the input ..
0.02.263.921 I perplexity: tokenization took 1277.71 ms
0.02.264.249 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.929.135 I perplexity: 0.66 seconds per pass - ETA 0.03 minutes

[1]9.9584,
[2]11.8211,
[3]12.1418,
[4]10.8426,
0.04.767.834 I Final estimate: PPL = 10.8426 +/- 0.43892

0.04.769.459 I llama_perf_context_print:        load time =     977.41 ms
0.04.769.462 I llama_perf_context_print: prompt eval time =    2144.32 ms /  8192 tokens (    0.26 ms per token,  3820.33 tokens per second)
0.04.769.463 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.769.464 I llama_perf_context_print:       total time =    3783.38 ms /  8193 tokens

real	0m4.972s
user	0m4.963s
sys	0m1.002s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.235 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.024.107 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf (version GGUF V3 (latest))
0.00.024.132 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.141 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.024.146 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.024.147 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.024.148 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.024.148 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.024.153 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.024.153 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.024.154 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.024.155 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.024.156 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.024.157 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.024.158 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.024.163 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.024.164 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.024.165 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.032.439 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.034.212 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.041.429 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.041.437 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.041.438 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.041.438 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.041.439 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.041.440 I llama_model_loader: - kv  22:                          general.file_type u32              = 8
0.00.041.442 I llama_model_loader: - type  f32:  258 tensors
0.00.041.444 I llama_model_loader: - type q5_0:  129 tensors
0.00.041.445 I llama_model_loader: - type q6_K:    1 tensors
0.00.098.854 I llm_load_vocab: special tokens cache size = 25
0.00.123.301 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.123.323 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.123.323 I llm_load_print_meta: arch             = gptneox
0.00.123.324 I llm_load_print_meta: vocab type       = BPE
0.00.123.325 I llm_load_print_meta: n_vocab          = 50304
0.00.123.326 I llm_load_print_meta: n_merges         = 50009
0.00.123.326 I llm_load_print_meta: vocab_only       = 0
0.00.123.327 I llm_load_print_meta: n_ctx_train      = 2048
0.00.123.328 I llm_load_print_meta: n_embd           = 2560
0.00.123.328 I llm_load_print_meta: n_layer          = 32
0.00.123.343 I llm_load_print_meta: n_head           = 32
0.00.123.344 I llm_load_print_meta: n_head_kv        = 32
0.00.123.345 I llm_load_print_meta: n_rot            = 20
0.00.123.345 I llm_load_print_meta: n_swa            = 0
0.00.123.345 I llm_load_print_meta: n_embd_head_k    = 80
0.00.123.346 I llm_load_print_meta: n_embd_head_v    = 80
0.00.123.348 I llm_load_print_meta: n_gqa            = 1
0.00.123.349 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.123.351 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.123.353 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.123.354 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.123.355 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.123.355 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.123.356 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.123.357 I llm_load_print_meta: n_ff             = 10240
0.00.123.358 I llm_load_print_meta: n_expert         = 0
0.00.123.358 I llm_load_print_meta: n_expert_used    = 0
0.00.123.359 I llm_load_print_meta: causal attn      = 1
0.00.123.361 I llm_load_print_meta: pooling type     = 0
0.00.123.361 I llm_load_print_meta: rope type        = 2
0.00.123.361 I llm_load_print_meta: rope scaling     = linear
0.00.123.363 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.123.365 I llm_load_print_meta: freq_scale_train = 1
0.00.123.366 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.123.367 I llm_load_print_meta: rope_finetuned   = unknown
0.00.123.368 I llm_load_print_meta: ssm_d_conv       = 0
0.00.123.368 I llm_load_print_meta: ssm_d_inner      = 0
0.00.123.369 I llm_load_print_meta: ssm_d_state      = 0
0.00.123.369 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.123.370 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.123.370 I llm_load_print_meta: model type       = 2.8B
0.00.123.371 I llm_load_print_meta: model ftype      = Q5_0
0.00.123.372 I llm_load_print_meta: model params     = 2.78 B
0.00.123.373 I llm_load_print_meta: model size       = 1.80 GiB (5.56 BPW) 
0.00.123.378 I llm_load_print_meta: general.name     = 2.8B
0.00.123.379 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.123.380 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.123.380 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.123.382 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.123.382 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.123.383 I llm_load_print_meta: max token length = 1024
0.00.235.053 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.235.061 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.235.062 I ggml_cuda_init: found 1 CUDA devices:
0.00.235.165 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.534.134 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.663.861 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.663.874 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.663.875 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.663.884 I llm_load_tensors:        CPU buffer size =    84.43 MiB
0.00.663.886 I llm_load_tensors:      CUDA0 buffer size =  1754.83 MiB
............................................................................................
0.01.033.311 I llama_new_context_with_model: n_ctx      = 2048
0.01.033.319 I llama_new_context_with_model: n_batch    = 512
0.01.033.320 I llama_new_context_with_model: n_ubatch   = 512
0.01.033.320 I llama_new_context_with_model: flash_attn = 0
0.01.033.326 I llama_new_context_with_model: freq_base  = 10000.0
0.01.033.327 I llama_new_context_with_model: freq_scale = 1
0.01.034.819 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.034.834 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.036.732 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.045.488 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.045.498 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.045.500 I llama_new_context_with_model: graph nodes  = 1287
0.01.045.501 I llama_new_context_with_model: graph splits = 2
0.01.045.504 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.117.896 I 
0.01.118.001 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.118.029 I perplexity: tokenizing the input ..
0.02.499.061 I perplexity: tokenization took 1381.04 ms
0.02.499.391 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.03.132.990 I perplexity: 0.63 seconds per pass - ETA 0.03 minutes

[1]9.8047,
[2]11.5245,
[3]11.8234,
[4]10.5057,
0.04.847.032 I Final estimate: PPL = 10.5057 +/- 0.42912

0.04.848.747 I llama_perf_context_print:        load time =    1109.00 ms
0.04.848.751 I llama_perf_context_print: prompt eval time =    1988.12 ms /  8192 tokens (    0.24 ms per token,  4120.47 tokens per second)
0.04.848.753 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.848.754 I llama_perf_context_print:       total time =    3730.85 ms /  8193 tokens

real	0m5.060s
user	0m4.961s
sys	0m1.087s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.123 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.022.296 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf (version GGUF V3 (latest))
0.00.022.320 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.329 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.022.330 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.022.331 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.022.331 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.022.332 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.022.336 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.022.337 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.022.337 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.022.338 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.022.340 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.022.341 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.022.342 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.022.346 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.022.346 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.022.347 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.029.916 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.031.688 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.038.410 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.038.418 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.038.418 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.038.419 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.038.419 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.038.420 I llama_model_loader: - kv  22:                          general.file_type u32              = 9
0.00.038.423 I llama_model_loader: - type  f32:  258 tensors
0.00.038.425 I llama_model_loader: - type q5_1:  129 tensors
0.00.038.426 I llama_model_loader: - type q6_K:    1 tensors
0.00.092.586 I llm_load_vocab: special tokens cache size = 25
0.00.114.655 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.114.670 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.114.671 I llm_load_print_meta: arch             = gptneox
0.00.114.672 I llm_load_print_meta: vocab type       = BPE
0.00.114.673 I llm_load_print_meta: n_vocab          = 50304
0.00.114.673 I llm_load_print_meta: n_merges         = 50009
0.00.114.674 I llm_load_print_meta: vocab_only       = 0
0.00.114.674 I llm_load_print_meta: n_ctx_train      = 2048
0.00.114.675 I llm_load_print_meta: n_embd           = 2560
0.00.114.675 I llm_load_print_meta: n_layer          = 32
0.00.114.689 I llm_load_print_meta: n_head           = 32
0.00.114.690 I llm_load_print_meta: n_head_kv        = 32
0.00.114.691 I llm_load_print_meta: n_rot            = 20
0.00.114.691 I llm_load_print_meta: n_swa            = 0
0.00.114.692 I llm_load_print_meta: n_embd_head_k    = 80
0.00.114.693 I llm_load_print_meta: n_embd_head_v    = 80
0.00.114.695 I llm_load_print_meta: n_gqa            = 1
0.00.114.696 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.114.697 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.114.699 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.114.701 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.114.701 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.114.702 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.114.702 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.114.705 I llm_load_print_meta: n_ff             = 10240
0.00.114.706 I llm_load_print_meta: n_expert         = 0
0.00.114.706 I llm_load_print_meta: n_expert_used    = 0
0.00.114.707 I llm_load_print_meta: causal attn      = 1
0.00.114.710 I llm_load_print_meta: pooling type     = 0
0.00.114.711 I llm_load_print_meta: rope type        = 2
0.00.114.711 I llm_load_print_meta: rope scaling     = linear
0.00.114.713 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.114.714 I llm_load_print_meta: freq_scale_train = 1
0.00.114.714 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.114.715 I llm_load_print_meta: rope_finetuned   = unknown
0.00.114.715 I llm_load_print_meta: ssm_d_conv       = 0
0.00.114.715 I llm_load_print_meta: ssm_d_inner      = 0
0.00.114.716 I llm_load_print_meta: ssm_d_state      = 0
0.00.114.717 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.114.718 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.114.718 I llm_load_print_meta: model type       = 2.8B
0.00.114.719 I llm_load_print_meta: model ftype      = Q5_1
0.00.114.720 I llm_load_print_meta: model params     = 2.78 B
0.00.114.721 I llm_load_print_meta: model size       = 1.95 GiB (6.04 BPW) 
0.00.114.722 I llm_load_print_meta: general.name     = 2.8B
0.00.114.722 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.114.723 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.114.724 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.114.725 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.114.726 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.114.726 I llm_load_print_meta: max token length = 1024
0.00.219.229 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.219.236 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.219.237 I ggml_cuda_init: found 1 CUDA devices:
0.00.219.339 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.496.980 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.632.915 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.632.938 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.632.939 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.632.948 I llm_load_tensors:        CPU buffer size =    92.11 MiB
0.00.632.950 I llm_load_tensors:      CUDA0 buffer size =  1904.83 MiB
.............................................................................................
0.00.977.836 I llama_new_context_with_model: n_ctx      = 2048
0.00.977.843 I llama_new_context_with_model: n_batch    = 512
0.00.977.843 I llama_new_context_with_model: n_ubatch   = 512
0.00.977.844 I llama_new_context_with_model: flash_attn = 0
0.00.977.850 I llama_new_context_with_model: freq_base  = 10000.0
0.00.977.851 I llama_new_context_with_model: freq_scale = 1
0.00.979.135 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.979.147 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.980.480 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.988.553 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.988.562 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.988.565 I llama_new_context_with_model: graph nodes  = 1287
0.00.988.566 I llama_new_context_with_model: graph splits = 2
0.00.988.568 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.057.107 I 
0.01.057.216 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.057.228 I perplexity: tokenizing the input ..
0.02.305.326 I perplexity: tokenization took 1248.09 ms
0.02.305.659 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.944.981 I perplexity: 0.64 seconds per pass - ETA 0.03 minutes

[1]9.7281,
[2]11.5056,
[3]11.7212,
[4]10.4307,
0.04.679.107 I Final estimate: PPL = 10.4307 +/- 0.42590

0.04.680.924 I llama_perf_context_print:        load time =    1048.48 ms
0.04.680.927 I llama_perf_context_print: prompt eval time =    1995.17 ms /  8192 tokens (    0.24 ms per token,  4105.91 tokens per second)
0.04.680.929 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.680.930 I llama_perf_context_print:       total time =    3623.81 ms /  8193 tokens

real	0m4.894s
user	0m4.888s
sys	0m1.048s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q2_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.564 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.024.587 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf (version GGUF V3 (latest))
0.00.024.613 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.622 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.024.624 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.024.624 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.024.625 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.024.627 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.024.631 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.024.632 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.024.633 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.024.634 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.024.634 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.024.635 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.024.637 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.024.644 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.024.644 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.024.646 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.032.957 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.034.900 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.042.138 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.042.147 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.042.147 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.042.148 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.042.149 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.042.150 I llama_model_loader: - kv  22:                          general.file_type u32              = 10
0.00.042.152 I llama_model_loader: - type  f32:  258 tensors
0.00.042.155 I llama_model_loader: - type q2_K:   65 tensors
0.00.042.155 I llama_model_loader: - type q3_K:   64 tensors
0.00.042.156 I llama_model_loader: - type q6_K:    1 tensors
0.00.099.947 I llm_load_vocab: special tokens cache size = 25
0.00.123.761 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.123.781 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.123.781 I llm_load_print_meta: arch             = gptneox
0.00.123.782 I llm_load_print_meta: vocab type       = BPE
0.00.123.783 I llm_load_print_meta: n_vocab          = 50304
0.00.123.784 I llm_load_print_meta: n_merges         = 50009
0.00.123.784 I llm_load_print_meta: vocab_only       = 0
0.00.123.785 I llm_load_print_meta: n_ctx_train      = 2048
0.00.123.785 I llm_load_print_meta: n_embd           = 2560
0.00.123.786 I llm_load_print_meta: n_layer          = 32
0.00.123.801 I llm_load_print_meta: n_head           = 32
0.00.123.803 I llm_load_print_meta: n_head_kv        = 32
0.00.123.803 I llm_load_print_meta: n_rot            = 20
0.00.123.804 I llm_load_print_meta: n_swa            = 0
0.00.123.804 I llm_load_print_meta: n_embd_head_k    = 80
0.00.123.804 I llm_load_print_meta: n_embd_head_v    = 80
0.00.123.806 I llm_load_print_meta: n_gqa            = 1
0.00.123.807 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.123.808 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.123.810 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.123.812 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.123.812 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.123.813 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.123.814 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.123.816 I llm_load_print_meta: n_ff             = 10240
0.00.123.817 I llm_load_print_meta: n_expert         = 0
0.00.123.818 I llm_load_print_meta: n_expert_used    = 0
0.00.123.819 I llm_load_print_meta: causal attn      = 1
0.00.123.819 I llm_load_print_meta: pooling type     = 0
0.00.123.819 I llm_load_print_meta: rope type        = 2
0.00.123.820 I llm_load_print_meta: rope scaling     = linear
0.00.123.827 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.123.828 I llm_load_print_meta: freq_scale_train = 1
0.00.123.829 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.123.829 I llm_load_print_meta: rope_finetuned   = unknown
0.00.123.830 I llm_load_print_meta: ssm_d_conv       = 0
0.00.123.831 I llm_load_print_meta: ssm_d_inner      = 0
0.00.123.832 I llm_load_print_meta: ssm_d_state      = 0
0.00.123.833 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.123.833 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.123.834 I llm_load_print_meta: model type       = 2.8B
0.00.123.836 I llm_load_print_meta: model ftype      = Q2_K - Medium
0.00.123.837 I llm_load_print_meta: model params     = 2.78 B
0.00.123.838 I llm_load_print_meta: model size       = 1.01 GiB (3.13 BPW) 
0.00.123.838 I llm_load_print_meta: general.name     = 2.8B
0.00.123.840 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.123.841 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.123.841 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.123.842 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.123.844 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.123.844 I llm_load_print_meta: max token length = 1024
0.00.238.487 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.238.494 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.238.495 I ggml_cuda_init: found 1 CUDA devices:
0.00.238.598 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.514.050 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.583.136 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.583.146 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.583.147 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.583.165 I llm_load_tensors:        CPU buffer size =    40.30 MiB
0.00.583.167 I llm_load_tensors:      CUDA0 buffer size =   993.89 MiB
......................................................................................
0.00.769.631 I llama_new_context_with_model: n_ctx      = 2048
0.00.769.637 I llama_new_context_with_model: n_batch    = 512
0.00.769.637 I llama_new_context_with_model: n_ubatch   = 512
0.00.769.638 I llama_new_context_with_model: flash_attn = 0
0.00.769.643 I llama_new_context_with_model: freq_base  = 10000.0
0.00.769.644 I llama_new_context_with_model: freq_scale = 1
0.00.771.018 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.771.028 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.772.302 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.780.485 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.780.495 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.780.498 I llama_new_context_with_model: graph nodes  = 1287
0.00.780.498 I llama_new_context_with_model: graph splits = 2
0.00.780.501 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.849.236 I 
0.00.849.347 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.849.363 I perplexity: tokenizing the input ..
0.02.088.654 I perplexity: tokenization took 1239.28 ms
0.02.088.982 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.739.991 I perplexity: 0.65 seconds per pass - ETA 0.03 minutes

[1]55.7748,
[2]67.1016,
[3]74.2544,
[4]74.3759,
0.04.532.572 I Final estimate: PPL = 74.3759 +/- 3.84923

0.04.534.259 I llama_perf_context_print:        load time =     840.06 ms
0.04.534.261 I llama_perf_context_print: prompt eval time =    2089.72 ms /  8192 tokens (    0.26 ms per token,  3920.14 tokens per second)
0.04.534.263 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.534.264 I llama_perf_context_print:       total time =    3685.02 ms /  8193 tokens

real	0m4.730s
user	0m4.726s
sys	0m0.987s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.068 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.022.044 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf (version GGUF V3 (latest))
0.00.022.061 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.071 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.022.072 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.022.073 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.022.073 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.022.074 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.022.079 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.022.080 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.022.081 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.022.081 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.022.082 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.022.083 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.022.084 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.022.089 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.022.090 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.022.091 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.029.655 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.031.427 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.038.150 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.038.158 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.038.159 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.038.160 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.038.160 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.038.161 I llama_model_loader: - kv  22:                          general.file_type u32              = 12
0.00.038.164 I llama_model_loader: - type  f32:  258 tensors
0.00.038.166 I llama_model_loader: - type q3_K:   33 tensors
0.00.038.166 I llama_model_loader: - type q4_K:   94 tensors
0.00.038.167 I llama_model_loader: - type q5_K:    2 tensors
0.00.038.167 I llama_model_loader: - type q6_K:    1 tensors
0.00.092.497 I llm_load_vocab: special tokens cache size = 25
0.00.114.570 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.114.586 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.114.587 I llm_load_print_meta: arch             = gptneox
0.00.114.588 I llm_load_print_meta: vocab type       = BPE
0.00.114.589 I llm_load_print_meta: n_vocab          = 50304
0.00.114.589 I llm_load_print_meta: n_merges         = 50009
0.00.114.590 I llm_load_print_meta: vocab_only       = 0
0.00.114.590 I llm_load_print_meta: n_ctx_train      = 2048
0.00.114.591 I llm_load_print_meta: n_embd           = 2560
0.00.114.593 I llm_load_print_meta: n_layer          = 32
0.00.114.607 I llm_load_print_meta: n_head           = 32
0.00.114.609 I llm_load_print_meta: n_head_kv        = 32
0.00.114.609 I llm_load_print_meta: n_rot            = 20
0.00.114.610 I llm_load_print_meta: n_swa            = 0
0.00.114.611 I llm_load_print_meta: n_embd_head_k    = 80
0.00.114.612 I llm_load_print_meta: n_embd_head_v    = 80
0.00.114.614 I llm_load_print_meta: n_gqa            = 1
0.00.114.616 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.114.617 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.114.619 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.114.619 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.114.620 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.114.620 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.114.621 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.114.622 I llm_load_print_meta: n_ff             = 10240
0.00.114.623 I llm_load_print_meta: n_expert         = 0
0.00.114.623 I llm_load_print_meta: n_expert_used    = 0
0.00.114.624 I llm_load_print_meta: causal attn      = 1
0.00.114.625 I llm_load_print_meta: pooling type     = 0
0.00.114.625 I llm_load_print_meta: rope type        = 2
0.00.114.626 I llm_load_print_meta: rope scaling     = linear
0.00.114.628 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.114.639 I llm_load_print_meta: freq_scale_train = 1
0.00.114.639 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.114.640 I llm_load_print_meta: rope_finetuned   = unknown
0.00.114.640 I llm_load_print_meta: ssm_d_conv       = 0
0.00.114.642 I llm_load_print_meta: ssm_d_inner      = 0
0.00.114.643 I llm_load_print_meta: ssm_d_state      = 0
0.00.114.644 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.114.644 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.114.645 I llm_load_print_meta: model type       = 2.8B
0.00.114.646 I llm_load_print_meta: model ftype      = Q3_K - Medium
0.00.114.647 I llm_load_print_meta: model params     = 2.78 B
0.00.114.649 I llm_load_print_meta: model size       = 1.37 GiB (4.25 BPW) 
0.00.114.650 I llm_load_print_meta: general.name     = 2.8B
0.00.114.650 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.114.651 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.114.652 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.114.653 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.114.653 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.114.654 I llm_load_print_meta: max token length = 1024
0.00.219.530 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.219.537 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.219.538 I ggml_cuda_init: found 1 CUDA devices:
0.00.219.640 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.497.049 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.589.045 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.589.058 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.589.059 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.589.068 I llm_load_tensors:        CPU buffer size =    52.77 MiB
0.00.589.070 I llm_load_tensors:      CUDA0 buffer size =  1354.83 MiB
..........................................................................................
0.00.836.023 I llama_new_context_with_model: n_ctx      = 2048
0.00.836.029 I llama_new_context_with_model: n_batch    = 512
0.00.836.030 I llama_new_context_with_model: n_ubatch   = 512
0.00.836.031 I llama_new_context_with_model: flash_attn = 0
0.00.836.035 I llama_new_context_with_model: freq_base  = 10000.0
0.00.836.038 I llama_new_context_with_model: freq_scale = 1
0.00.837.322 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.837.336 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.838.612 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.846.820 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.846.828 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.846.831 I llama_new_context_with_model: graph nodes  = 1287
0.00.846.831 I llama_new_context_with_model: graph splits = 2
0.00.846.835 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.916.222 I 
0.00.916.326 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.916.351 I perplexity: tokenizing the input ..
0.02.142.250 I perplexity: tokenization took 1225.9 ms
0.02.142.573 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.811.297 I perplexity: 0.67 seconds per pass - ETA 0.03 minutes

[1]10.3341,
[2]12.1669,
[3]12.5532,
[4]11.2762,
0.04.649.673 I Final estimate: PPL = 11.2762 +/- 0.46074

0.04.651.389 I llama_perf_context_print:        load time =     907.66 ms
0.04.651.392 I llama_perf_context_print: prompt eval time =    2154.48 ms /  8192 tokens (    0.26 ms per token,  3802.31 tokens per second)
0.04.651.394 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.651.395 I llama_perf_context_print:       total time =    3735.17 ms /  8193 tokens

real	0m4.852s
user	0m4.832s
sys	0m1.008s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.006.937 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.022.329 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf (version GGUF V3 (latest))
0.00.022.346 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.355 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.022.356 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.022.357 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.022.357 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.022.358 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.022.361 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.022.362 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.022.363 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.022.364 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.022.365 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.022.365 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.022.366 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.022.370 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.022.371 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.022.371 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.030.048 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.031.807 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.038.590 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.038.598 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.038.599 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.038.599 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.038.600 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.038.601 I llama_model_loader: - kv  22:                          general.file_type u32              = 15
0.00.038.603 I llama_model_loader: - type  f32:  258 tensors
0.00.038.606 I llama_model_loader: - type q4_K:   81 tensors
0.00.038.606 I llama_model_loader: - type q5_K:   32 tensors
0.00.038.607 I llama_model_loader: - type q6_K:   17 tensors
0.00.092.549 I llm_load_vocab: special tokens cache size = 25
0.00.114.724 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.114.740 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.114.741 I llm_load_print_meta: arch             = gptneox
0.00.114.742 I llm_load_print_meta: vocab type       = BPE
0.00.114.743 I llm_load_print_meta: n_vocab          = 50304
0.00.114.744 I llm_load_print_meta: n_merges         = 50009
0.00.114.744 I llm_load_print_meta: vocab_only       = 0
0.00.114.747 I llm_load_print_meta: n_ctx_train      = 2048
0.00.114.748 I llm_load_print_meta: n_embd           = 2560
0.00.114.749 I llm_load_print_meta: n_layer          = 32
0.00.114.762 I llm_load_print_meta: n_head           = 32
0.00.114.763 I llm_load_print_meta: n_head_kv        = 32
0.00.114.764 I llm_load_print_meta: n_rot            = 20
0.00.114.764 I llm_load_print_meta: n_swa            = 0
0.00.114.765 I llm_load_print_meta: n_embd_head_k    = 80
0.00.114.765 I llm_load_print_meta: n_embd_head_v    = 80
0.00.114.769 I llm_load_print_meta: n_gqa            = 1
0.00.114.771 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.114.772 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.114.774 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.114.775 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.114.776 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.114.776 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.114.777 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.114.778 I llm_load_print_meta: n_ff             = 10240
0.00.114.779 I llm_load_print_meta: n_expert         = 0
0.00.114.779 I llm_load_print_meta: n_expert_used    = 0
0.00.114.780 I llm_load_print_meta: causal attn      = 1
0.00.114.781 I llm_load_print_meta: pooling type     = 0
0.00.114.782 I llm_load_print_meta: rope type        = 2
0.00.114.782 I llm_load_print_meta: rope scaling     = linear
0.00.114.784 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.114.785 I llm_load_print_meta: freq_scale_train = 1
0.00.114.786 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.114.786 I llm_load_print_meta: rope_finetuned   = unknown
0.00.114.787 I llm_load_print_meta: ssm_d_conv       = 0
0.00.114.787 I llm_load_print_meta: ssm_d_inner      = 0
0.00.114.787 I llm_load_print_meta: ssm_d_state      = 0
0.00.114.788 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.114.791 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.114.792 I llm_load_print_meta: model type       = 2.8B
0.00.114.793 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.114.794 I llm_load_print_meta: model params     = 2.78 B
0.00.114.795 I llm_load_print_meta: model size       = 1.66 GiB (5.14 BPW) 
0.00.114.796 I llm_load_print_meta: general.name     = 2.8B
0.00.114.796 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.114.797 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.114.797 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.114.798 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.114.799 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.114.799 I llm_load_print_meta: max token length = 1024
0.00.220.095 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.220.102 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.220.103 I ggml_cuda_init: found 1 CUDA devices:
0.00.220.205 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.506.866 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.618.218 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.618.231 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.618.232 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.618.241 I llm_load_tensors:        CPU buffer size =    69.08 MiB
0.00.618.243 I llm_load_tensors:      CUDA0 buffer size =  1632.95 MiB
...................................................................................
0.00.921.879 I llama_new_context_with_model: n_ctx      = 2048
0.00.921.884 I llama_new_context_with_model: n_batch    = 512
0.00.921.885 I llama_new_context_with_model: n_ubatch   = 512
0.00.921.886 I llama_new_context_with_model: flash_attn = 0
0.00.921.891 I llama_new_context_with_model: freq_base  = 10000.0
0.00.921.892 I llama_new_context_with_model: freq_scale = 1
0.00.923.154 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.00.923.167 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.924.457 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.00.932.756 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.00.932.763 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.00.932.765 I llama_new_context_with_model: graph nodes  = 1287
0.00.932.766 I llama_new_context_with_model: graph splits = 2
0.00.932.768 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.001.395 I 
0.01.001.513 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.001.540 I perplexity: tokenizing the input ..
0.02.243.963 I perplexity: tokenization took 1242.43 ms
0.02.244.291 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.899.345 I perplexity: 0.65 seconds per pass - ETA 0.03 minutes

[1]9.8572,
[2]11.6301,
[3]11.8902,
[4]10.6112,
0.04.716.513 I Final estimate: PPL = 10.6112 +/- 0.43489

0.04.718.477 I llama_perf_context_print:        load time =     992.81 ms
0.04.718.480 I llama_perf_context_print: prompt eval time =    2115.19 ms /  8192 tokens (    0.26 ms per token,  3872.94 tokens per second)
0.04.718.482 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.718.484 I llama_perf_context_print:       total time =    3717.08 ms /  8193 tokens

real	0m4.924s
user	0m4.845s
sys	0m1.047s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.014 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.022.061 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf (version GGUF V3 (latest))
0.00.022.085 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.093 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.022.099 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.022.099 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.022.100 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.022.100 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.022.105 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.022.105 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.022.106 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.022.107 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.022.108 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.022.108 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.022.109 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.022.113 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.022.113 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.022.114 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.029.741 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.031.591 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.038.273 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.038.281 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.038.281 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.038.282 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.038.283 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.038.284 I llama_model_loader: - kv  22:                          general.file_type u32              = 17
0.00.038.286 I llama_model_loader: - type  f32:  258 tensors
0.00.038.288 I llama_model_loader: - type q5_K:   81 tensors
0.00.038.288 I llama_model_loader: - type q6_K:   49 tensors
0.00.092.195 I llm_load_vocab: special tokens cache size = 25
0.00.114.608 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.114.625 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.114.626 I llm_load_print_meta: arch             = gptneox
0.00.114.627 I llm_load_print_meta: vocab type       = BPE
0.00.114.628 I llm_load_print_meta: n_vocab          = 50304
0.00.114.628 I llm_load_print_meta: n_merges         = 50009
0.00.114.629 I llm_load_print_meta: vocab_only       = 0
0.00.114.630 I llm_load_print_meta: n_ctx_train      = 2048
0.00.114.630 I llm_load_print_meta: n_embd           = 2560
0.00.114.631 I llm_load_print_meta: n_layer          = 32
0.00.114.646 I llm_load_print_meta: n_head           = 32
0.00.114.648 I llm_load_print_meta: n_head_kv        = 32
0.00.114.650 I llm_load_print_meta: n_rot            = 20
0.00.114.650 I llm_load_print_meta: n_swa            = 0
0.00.114.651 I llm_load_print_meta: n_embd_head_k    = 80
0.00.114.651 I llm_load_print_meta: n_embd_head_v    = 80
0.00.114.653 I llm_load_print_meta: n_gqa            = 1
0.00.114.654 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.114.655 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.114.657 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.114.658 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.114.659 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.114.659 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.114.660 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.114.661 I llm_load_print_meta: n_ff             = 10240
0.00.114.662 I llm_load_print_meta: n_expert         = 0
0.00.114.663 I llm_load_print_meta: n_expert_used    = 0
0.00.114.664 I llm_load_print_meta: causal attn      = 1
0.00.114.664 I llm_load_print_meta: pooling type     = 0
0.00.114.665 I llm_load_print_meta: rope type        = 2
0.00.114.665 I llm_load_print_meta: rope scaling     = linear
0.00.114.667 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.114.667 I llm_load_print_meta: freq_scale_train = 1
0.00.114.668 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.114.669 I llm_load_print_meta: rope_finetuned   = unknown
0.00.114.670 I llm_load_print_meta: ssm_d_conv       = 0
0.00.114.670 I llm_load_print_meta: ssm_d_inner      = 0
0.00.114.671 I llm_load_print_meta: ssm_d_state      = 0
0.00.114.671 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.114.672 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.114.672 I llm_load_print_meta: model type       = 2.8B
0.00.114.673 I llm_load_print_meta: model ftype      = Q5_K - Medium
0.00.114.674 I llm_load_print_meta: model params     = 2.78 B
0.00.114.676 I llm_load_print_meta: model size       = 1.93 GiB (5.96 BPW) 
0.00.114.676 I llm_load_print_meta: general.name     = 2.8B
0.00.114.677 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.114.678 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.114.679 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.114.680 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.114.681 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.114.684 I llm_load_print_meta: max token length = 1024
0.00.220.689 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.220.696 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.220.697 I ggml_cuda_init: found 1 CUDA devices:
0.00.220.805 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.504.916 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.642.891 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.642.904 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.642.905 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.642.914 I llm_load_tensors:        CPU buffer size =    84.43 MiB
0.00.642.917 I llm_load_tensors:      CUDA0 buffer size =  1887.64 MiB
............................................................................................
0.01.013.727 I llama_new_context_with_model: n_ctx      = 2048
0.01.013.734 I llama_new_context_with_model: n_batch    = 512
0.01.013.735 I llama_new_context_with_model: n_ubatch   = 512
0.01.013.736 I llama_new_context_with_model: flash_attn = 0
0.01.013.742 I llama_new_context_with_model: freq_base  = 10000.0
0.01.013.743 I llama_new_context_with_model: freq_scale = 1
0.01.015.014 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.015.028 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.016.547 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.025.415 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.025.425 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.025.428 I llama_new_context_with_model: graph nodes  = 1287
0.01.025.428 I llama_new_context_with_model: graph splits = 2
0.01.025.431 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.102.421 I 
0.01.102.745 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.102.761 I perplexity: tokenizing the input ..
0.02.464.755 I perplexity: tokenization took 1361.98 ms
0.02.465.082 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.03.127.686 I perplexity: 0.66 seconds per pass - ETA 0.03 minutes

[1]9.7086,
[2]11.4170,
[3]11.6331,
[4]10.3824,
0.04.912.857 I Final estimate: PPL = 10.3824 +/- 0.42466

0.04.915.336 I llama_perf_context_print:        load time =    1093.84 ms
0.04.915.338 I llama_perf_context_print: prompt eval time =    2078.40 ms /  8192 tokens (    0.25 ms per token,  3941.49 tokens per second)
0.04.915.340 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.915.343 I llama_perf_context_print:       total time =    3812.91 ms /  8193 tokens

real	0m5.109s
user	0m5.099s
sys	0m1.029s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.070 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.023.245 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf (version GGUF V3 (latest))
0.00.023.268 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.281 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.023.287 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.023.288 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.023.288 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.023.289 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.023.293 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.023.294 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.023.295 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.023.296 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.023.297 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.023.298 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.023.299 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.023.303 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.023.304 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.023.306 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.031.522 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.033.286 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.040.079 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.040.087 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.040.088 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.040.088 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.040.089 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.040.090 I llama_model_loader: - kv  22:                          general.file_type u32              = 18
0.00.040.093 I llama_model_loader: - type  f32:  258 tensors
0.00.040.095 I llama_model_loader: - type q6_K:  130 tensors
0.00.094.881 I llm_load_vocab: special tokens cache size = 25
0.00.117.766 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.117.785 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.117.786 I llm_load_print_meta: arch             = gptneox
0.00.117.787 I llm_load_print_meta: vocab type       = BPE
0.00.117.788 I llm_load_print_meta: n_vocab          = 50304
0.00.117.788 I llm_load_print_meta: n_merges         = 50009
0.00.117.789 I llm_load_print_meta: vocab_only       = 0
0.00.117.789 I llm_load_print_meta: n_ctx_train      = 2048
0.00.117.790 I llm_load_print_meta: n_embd           = 2560
0.00.117.790 I llm_load_print_meta: n_layer          = 32
0.00.117.806 I llm_load_print_meta: n_head           = 32
0.00.117.807 I llm_load_print_meta: n_head_kv        = 32
0.00.117.807 I llm_load_print_meta: n_rot            = 20
0.00.117.808 I llm_load_print_meta: n_swa            = 0
0.00.117.809 I llm_load_print_meta: n_embd_head_k    = 80
0.00.117.809 I llm_load_print_meta: n_embd_head_v    = 80
0.00.117.811 I llm_load_print_meta: n_gqa            = 1
0.00.117.812 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.117.814 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.117.816 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.117.817 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.117.818 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.117.819 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.117.820 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.117.821 I llm_load_print_meta: n_ff             = 10240
0.00.117.821 I llm_load_print_meta: n_expert         = 0
0.00.117.821 I llm_load_print_meta: n_expert_used    = 0
0.00.117.822 I llm_load_print_meta: causal attn      = 1
0.00.117.823 I llm_load_print_meta: pooling type     = 0
0.00.117.823 I llm_load_print_meta: rope type        = 2
0.00.117.823 I llm_load_print_meta: rope scaling     = linear
0.00.117.826 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.117.827 I llm_load_print_meta: freq_scale_train = 1
0.00.117.827 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.117.828 I llm_load_print_meta: rope_finetuned   = unknown
0.00.117.829 I llm_load_print_meta: ssm_d_conv       = 0
0.00.117.829 I llm_load_print_meta: ssm_d_inner      = 0
0.00.117.830 I llm_load_print_meta: ssm_d_state      = 0
0.00.117.830 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.117.831 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.117.831 I llm_load_print_meta: model type       = 2.8B
0.00.117.832 I llm_load_print_meta: model ftype      = Q6_K
0.00.117.833 I llm_load_print_meta: model params     = 2.78 B
0.00.117.834 I llm_load_print_meta: model size       = 2.12 GiB (6.57 BPW) 
0.00.117.838 I llm_load_print_meta: general.name     = 2.8B
0.00.117.839 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.117.839 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.117.840 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.117.841 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.117.842 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.117.842 I llm_load_print_meta: max token length = 1024
0.00.227.013 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.227.020 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.227.021 I ggml_cuda_init: found 1 CUDA devices:
0.00.227.124 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.506.527 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.651.670 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.651.682 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.651.683 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.651.692 I llm_load_tensors:        CPU buffer size =   100.74 MiB
0.00.651.693 I llm_load_tensors:      CUDA0 buffer size =  2073.58 MiB
.............................................................................................
0.01.020.233 I llama_new_context_with_model: n_ctx      = 2048
0.01.020.239 I llama_new_context_with_model: n_batch    = 512
0.01.020.240 I llama_new_context_with_model: n_ubatch   = 512
0.01.020.241 I llama_new_context_with_model: flash_attn = 0
0.01.020.246 I llama_new_context_with_model: freq_base  = 10000.0
0.01.020.247 I llama_new_context_with_model: freq_scale = 1
0.01.021.534 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.021.545 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.022.815 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.031.122 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.031.130 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.031.133 I llama_new_context_with_model: graph nodes  = 1287
0.01.031.133 I llama_new_context_with_model: graph splits = 2
0.01.031.136 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.100.257 I 
0.01.100.367 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.100.380 I perplexity: tokenizing the input ..
0.02.369.975 I perplexity: tokenization took 1269.58 ms
0.02.370.310 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.03.032.928 I perplexity: 0.66 seconds per pass - ETA 0.03 minutes

[1]9.6946,
[2]11.4591,
[3]11.6563,
[4]10.3851,
0.04.836.471 I Final estimate: PPL = 10.3851 +/- 0.42530

0.04.838.060 I llama_perf_context_print:        load time =    1091.62 ms
0.04.838.062 I llama_perf_context_print: prompt eval time =    2092.00 ms /  8192 tokens (    0.26 ms per token,  3915.86 tokens per second)
0.04.838.064 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.838.066 I llama_perf_context_print:       total time =    3737.80 ms /  8193 tokens

real	0m5.044s
user	0m4.959s
sys	0m1.087s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-imatrix.log
+ ./bin/llama-imatrix --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 999 -c 2048 -b 512 --chunks 4
0.00.007.626 I build: 3778 (8b836ae7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.024.762 I llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.024.779 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.788 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.024.790 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.024.790 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.024.791 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.024.792 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.024.795 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.024.796 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.024.797 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.024.798 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.024.798 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.024.799 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.024.800 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.024.804 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.024.805 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.024.806 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.034.379 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.036.359 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.043.677 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.043.687 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.043.687 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.043.688 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.043.689 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.043.692 I llama_model_loader: - type  f32:  258 tensors
0.00.043.694 I llama_model_loader: - type  f16:  130 tensors
0.00.103.263 I llm_load_vocab: special tokens cache size = 25
0.00.127.147 I llm_load_vocab: token to piece cache size = 0.2984 MB
0.00.127.164 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.127.165 I llm_load_print_meta: arch             = gptneox
0.00.127.166 I llm_load_print_meta: vocab type       = BPE
0.00.127.166 I llm_load_print_meta: n_vocab          = 50304
0.00.127.168 I llm_load_print_meta: n_merges         = 50009
0.00.127.169 I llm_load_print_meta: vocab_only       = 0
0.00.127.169 I llm_load_print_meta: n_ctx_train      = 2048
0.00.127.170 I llm_load_print_meta: n_embd           = 2560
0.00.127.170 I llm_load_print_meta: n_layer          = 32
0.00.127.183 I llm_load_print_meta: n_head           = 32
0.00.127.184 I llm_load_print_meta: n_head_kv        = 32
0.00.127.184 I llm_load_print_meta: n_rot            = 20
0.00.127.186 I llm_load_print_meta: n_swa            = 0
0.00.127.186 I llm_load_print_meta: n_embd_head_k    = 80
0.00.127.187 I llm_load_print_meta: n_embd_head_v    = 80
0.00.127.188 I llm_load_print_meta: n_gqa            = 1
0.00.127.190 I llm_load_print_meta: n_embd_k_gqa     = 2560
0.00.127.191 I llm_load_print_meta: n_embd_v_gqa     = 2560
0.00.127.193 I llm_load_print_meta: f_norm_eps       = 1.0e-05
0.00.127.193 I llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
0.00.127.194 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.127.195 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.127.195 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.127.197 I llm_load_print_meta: n_ff             = 10240
0.00.127.197 I llm_load_print_meta: n_expert         = 0
0.00.127.198 I llm_load_print_meta: n_expert_used    = 0
0.00.127.198 I llm_load_print_meta: causal attn      = 1
0.00.127.198 I llm_load_print_meta: pooling type     = 0
0.00.127.199 I llm_load_print_meta: rope type        = 2
0.00.127.199 I llm_load_print_meta: rope scaling     = linear
0.00.127.201 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.127.202 I llm_load_print_meta: freq_scale_train = 1
0.00.127.204 I llm_load_print_meta: n_ctx_orig_yarn  = 2048
0.00.127.205 I llm_load_print_meta: rope_finetuned   = unknown
0.00.127.205 I llm_load_print_meta: ssm_d_conv       = 0
0.00.127.205 I llm_load_print_meta: ssm_d_inner      = 0
0.00.127.206 I llm_load_print_meta: ssm_d_state      = 0
0.00.127.206 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.127.207 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.127.208 I llm_load_print_meta: model type       = 2.8B
0.00.127.209 I llm_load_print_meta: model ftype      = all F32 (guessed)
0.00.127.210 I llm_load_print_meta: model params     = 2.78 B
0.00.127.212 I llm_load_print_meta: model size       = 5.17 GiB (16.01 BPW) 
0.00.127.212 I llm_load_print_meta: general.name     = 2.8B
0.00.127.213 I llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
0.00.127.213 I llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
0.00.127.214 I llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
0.00.127.214 I llm_load_print_meta: LF token         = 128 'Ä'
0.00.127.215 I llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
0.00.127.216 I llm_load_print_meta: max token length = 1024
0.00.241.300 I ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
0.00.241.306 I ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
0.00.241.307 I ggml_cuda_init: found 1 CUDA devices:
0.00.241.412 I   Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.536.959 I llm_load_tensors: ggml ctx size =    0.34 MiB
0.00.869.078 I llm_load_tensors: offloading 32 repeating layers to GPU
0.00.869.089 I llm_load_tensors: offloading non-repeating layers to GPU
0.00.869.090 I llm_load_tensors: offloaded 33/33 layers to GPU
0.00.869.099 I llm_load_tensors:        CPU buffer size =   245.62 MiB
0.00.869.100 I llm_load_tensors:      CUDA0 buffer size =  5049.71 MiB
.............................................................................................
0.01.735.584 I llama_new_context_with_model: n_ctx      = 2048
0.01.735.591 I llama_new_context_with_model: n_batch    = 512
0.01.735.591 I llama_new_context_with_model: n_ubatch   = 512
0.01.735.592 I llama_new_context_with_model: flash_attn = 0
0.01.735.597 I llama_new_context_with_model: freq_base  = 10000.0
0.01.735.598 I llama_new_context_with_model: freq_scale = 1
0.01.736.894 I llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
0.01.736.906 I llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.738.176 I llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
0.01.746.441 I llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
0.01.746.451 I llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
0.01.746.454 I llama_new_context_with_model: graph nodes  = 1287
0.01.746.454 I llama_new_context_with_model: graph splits = 2
0.01.746.458 I 
0.01.746.554 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 0 | AVX512_VBMI = 0 | AVX512_VNNI = 0 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 1 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.746.562 I compute_imatrix: tokenizing the input ..
0.02.983.188 I compute_imatrix: tokenization took 1236.62 ms
0.02.984.380 I compute_imatrix: computing over 4 chunks with batch_size 512
0.06.238.043 I compute_imatrix: 3.25 seconds per pass - ETA 0.22 minutes
[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,
Final estimate: PPL = 10.3475 +/- 0.42292

0.15.902.999 I llama_perf_context_print:        load time =    3776.31 ms
0.15.903.002 I llama_perf_context_print: prompt eval time =   11546.30 ms /  8192 tokens (    1.41 ms per token,   709.49 tokens per second)
0.15.903.004 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.15.903.005 I llama_perf_context_print:       total time =   15892.87 ms /  8193 tokens

real	0m16.129s
user	0m15.162s
sys	0m1.928s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state -ngl 10 --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 25
llm_load_vocab: token to piece cache size = 0.2984 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: vocab_only       = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_swa            = 0
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: ssm_dt_b_c_rms   = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 10 repeating layers to GPU
llm_load_tensors: offloaded 10/33 layers to GPU
llm_load_tensors:        CPU buffer size =  1523.91 MiB
llm_load_tensors:      CUDA0 buffer size =   423.14 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 313
0.01.037.058 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 313
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 313
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox jumps a fa<fig.s23.gif>… but before he can


second run: The quick brown fox jumps a fa<fig.s23.gif>… but before he can


single seq run: The quick brown fox jumps a fa<fig.s23.gif>… but before he can

real	0m6.297s
user	0m16.786s
sys	0m1.742s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state -fa -ngl 10 --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 25
llm_load_vocab: token to piece cache size = 0.2984 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: vocab_only       = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_swa            = 0
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: ssm_dt_b_c_rms   = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 10 repeating layers to GPU
llm_load_tensors: offloaded 10/33 layers to GPU
llm_load_tensors:        CPU buffer size =  1523.91 MiB
llm_load_tensors:      CUDA0 buffer size =   423.14 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 313
0.00.987.875 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 313
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:  CUDA_Host KV buffer size =   440.00 MiB
llama_kv_cache_init:      CUDA0 KV buffer size =   200.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   203.99 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =    14.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 313
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox jumped
lyallim
the liitle brown fox jumped
"The little


second run: The quick brown fox jumped
lyallim
the liitle brown fox jumped
"The little


single seq run: The quick brown fox jumped
lyallim
the liitle brown fox jumped
"The little

real	0m4.913s
user	0m14.706s
sys	0m1.628s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state -ngl 99 --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 25
llm_load_vocab: token to piece cache size = 0.2984 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: vocab_only       = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_swa            = 0
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: ssm_dt_b_c_rms   = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    69.08 MiB
llm_load_tensors:      CUDA0 buffer size =  1454.83 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2
0.00.872.209 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 0
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   162.00 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1287
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox jumped over the chabela, so the chabela jumped over the quick


second run: The quick brown fox jumped over the chabela, so the chabela jumped over the quick


single seq run: The quick brown fox jumped over the chabela, so the chabela jumped over the quick

real	0m4.716s
user	0m3.979s
sys	0m0.736s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state -fa -ngl 99 --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
main: build = 3778 (8b836ae7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
llm_load_vocab: special tokens cache size = 25
llm_load_vocab: token to piece cache size = 0.2984 MB
llm_load_print_meta: format           = GGUF V3 (latest)
llm_load_print_meta: arch             = gptneox
llm_load_print_meta: vocab type       = BPE
llm_load_print_meta: n_vocab          = 50304
llm_load_print_meta: n_merges         = 50009
llm_load_print_meta: vocab_only       = 0
llm_load_print_meta: n_ctx_train      = 2048
llm_load_print_meta: n_embd           = 2560
llm_load_print_meta: n_layer          = 32
llm_load_print_meta: n_head           = 32
llm_load_print_meta: n_head_kv        = 32
llm_load_print_meta: n_rot            = 20
llm_load_print_meta: n_swa            = 0
llm_load_print_meta: n_embd_head_k    = 80
llm_load_print_meta: n_embd_head_v    = 80
llm_load_print_meta: n_gqa            = 1
llm_load_print_meta: n_embd_k_gqa     = 2560
llm_load_print_meta: n_embd_v_gqa     = 2560
llm_load_print_meta: f_norm_eps       = 1.0e-05
llm_load_print_meta: f_norm_rms_eps   = 0.0e+00
llm_load_print_meta: f_clamp_kqv      = 0.0e+00
llm_load_print_meta: f_max_alibi_bias = 0.0e+00
llm_load_print_meta: f_logit_scale    = 0.0e+00
llm_load_print_meta: n_ff             = 10240
llm_load_print_meta: n_expert         = 0
llm_load_print_meta: n_expert_used    = 0
llm_load_print_meta: causal attn      = 1
llm_load_print_meta: pooling type     = 0
llm_load_print_meta: rope type        = 2
llm_load_print_meta: rope scaling     = linear
llm_load_print_meta: freq_base_train  = 10000.0
llm_load_print_meta: freq_scale_train = 1
llm_load_print_meta: n_ctx_orig_yarn  = 2048
llm_load_print_meta: rope_finetuned   = unknown
llm_load_print_meta: ssm_d_conv       = 0
llm_load_print_meta: ssm_d_inner      = 0
llm_load_print_meta: ssm_d_state      = 0
llm_load_print_meta: ssm_dt_rank      = 0
llm_load_print_meta: ssm_dt_b_c_rms   = 0
llm_load_print_meta: model type       = 2.8B
llm_load_print_meta: model ftype      = Q4_0
llm_load_print_meta: model params     = 2.78 B
llm_load_print_meta: model size       = 1.49 GiB (4.61 BPW) 
llm_load_print_meta: general.name     = 2.8B
llm_load_print_meta: BOS token        = 0 '<|endoftext|>'
llm_load_print_meta: EOS token        = 0 '<|endoftext|>'
llm_load_print_meta: UNK token        = 0 '<|endoftext|>'
llm_load_print_meta: LF token         = 128 'Ä'
llm_load_print_meta: EOT token        = 0 '<|endoftext|>'
llm_load_print_meta: max token length = 1024
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
llm_load_tensors: ggml ctx size =    0.34 MiB
llm_load_tensors: offloading 32 repeating layers to GPU
llm_load_tensors: offloading non-repeating layers to GPU
llm_load_tensors: offloaded 33/33 layers to GPU
llm_load_tensors:        CPU buffer size =    69.08 MiB
llm_load_tensors:      CUDA0 buffer size =  1454.83 MiB
...........................................................................................
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   103.25 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 2
0.00.870.181 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   103.25 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_new_context_with_model: n_ctx      = 2048
llama_new_context_with_model: n_batch    = 2048
llama_new_context_with_model: n_ubatch   = 512
llama_new_context_with_model: flash_attn = 1
llama_new_context_with_model: freq_base  = 10000.0
llama_new_context_with_model: freq_scale = 1
llama_kv_cache_init:      CUDA0 KV buffer size =   640.00 MiB
llama_new_context_with_model: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_new_context_with_model:  CUDA_Host  output buffer size =     0.19 MiB
llama_new_context_with_model:      CUDA0 compute buffer size =   103.25 MiB
llama_new_context_with_model:  CUDA_Host compute buffer size =     9.01 MiB
llama_new_context_with_model: graph nodes  = 1160
llama_new_context_with_model: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox
Chose his longevity

favourite food, to lap up the


second run: The quick brown fox
Chose his longevity

favourite food, to lap up the


single seq run: The quick brown fox
Chose his longevity

favourite food, to lap up the

real	0m1.584s
user	0m0.841s
sys	0m0.736s
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
++ grep '^\[1\]'
+ check_ppl f16 '[1]9.6667,'
+ qnt=f16
++ echo '[1]9.6667,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=9.6667
++ echo '9.6667 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' f16 9.6667
+ return 0
  - f16 @ 9.6667 OK
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
++ grep '^\[1\]'
+ check_ppl q8_0 '[1]9.7126,'
+ qnt=q8_0
++ echo '[1]9.7126,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=9.7126
++ echo '9.7126 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q8_0 9.7126
+ return 0
  - q8_0 @ 9.7126 OK
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
++ grep '^\[1\]'
+ check_ppl q4_0 '[1]10.2888,'
+ qnt=q4_0
++ echo '[1]10.2888,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.2888
++ echo '10.2888 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_0 10.2888
+ return 0
  - q4_0 @ 10.2888 OK
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
++ grep '^\[1\]'
+ check_ppl q4_1 '[1]9.9584,'
+ qnt=q4_1
++ echo '[1]9.9584,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=9.9584
++ echo '9.9584 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_1 9.9584
+ return 0
  - q4_1 @ 9.9584 OK
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
++ grep '^\[1\]'
+ check_ppl q5_0 '[1]9.8047,'
+ qnt=q5_0
++ echo '[1]9.8047,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=9.8047
++ echo '9.8047 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_0 9.8047
+ return 0
  - q5_0 @ 9.8047 OK
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
++ grep '^\[1\]'
+ check_ppl q5_1 '[1]9.7281,'
+ qnt=q5_1
++ echo '[1]9.7281,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=9.7281
++ echo '9.7281 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_1 9.7281
+ return 0
  - q5_1 @ 9.7281 OK
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
++ grep '^\[1\]'
+ check_ppl q3_k '[1]10.3341,'
+ qnt=q3_k
++ echo '[1]10.3341,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3341
++ echo '10.3341 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q3_k 10.3341
+ return 0
  - q3_k @ 10.3341 OK
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
++ grep '^\[1\]'
+ check_ppl q4_k '[1]9.8572,'
+ qnt=q4_k
++ echo '[1]9.8572,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=9.8572
++ echo '9.8572 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_k 9.8572
+ return 0
  - q4_k @ 9.8572 OK
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
++ grep '^\[1\]'
+ check_ppl q5_k '[1]9.7086,'
+ qnt=q5_k
++ echo '[1]9.7086,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=9.7086
++ echo '9.7086 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_k 9.7086
+ return 0
  - q5_k @ 9.7086 OK
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
++ grep '^\[1\]'
+ check_ppl q6_k '[1]9.6946,'
+ qnt=q6_k
++ echo '[1]9.6946,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=9.6946
++ echo '9.6946 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q6_k 9.6946
+ return 0
  - q6_k @ 9.6946 OK
+ cat /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/pythia_2_8b-imatrix.log
+ grep Final
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_debug
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_with_model_debug.log
+ local model
++ gg_get_model
++ local gguf_0=/mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf
++ local gguf_1=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
++ local gguf_2=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf ]]
++ [[ -s /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ cd build-ci-debug
+ set -e
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_with_model_debug-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-debug
    Start 28: test-model-load-cancel
1/2 Test #28: test-model-load-cancel ...........   Passed    4.57 sec
    Start 29: test-autorelease
2/2 Test #29: test-autorelease .................   Passed    1.61 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   6.18 sec*proc (2 tests)

Total Test time (real) =   6.18 sec
0.98user 5.21system 0:06.22elapsed 99%CPU (0avgtext+0avgdata 5876784maxresident)k
0inputs+48outputs (0major+1515239minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_release
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_with_model_release.log
+ local model
++ gg_get_model
++ local gguf_0=/mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf
++ local gguf_1=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
++ local gguf_2=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf ]]
++ [[ -s /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/8b/836ae731bbb2c5640bc47df5b0a78ffcb129cb/ggml-4-x86-cuda-v100/ctest_with_model_release-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-release
    Start 28: test-model-load-cancel
1/2 Test #28: test-model-load-cancel ...........   Passed    4.38 sec
    Start 29: test-autorelease
2/2 Test #29: test-autorelease .................   Passed    1.34 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   5.72 sec*proc (2 tests)

Total Test time (real) =   5.72 sec
0.35user 5.38system 0:05.75elapsed 99%CPU (0avgtext+0avgdata 5868548maxresident)k
0inputs+48outputs (0major+1514547minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
