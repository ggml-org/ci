+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.571 I build: 4815 (8bc4a9b2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.031.172 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.031.185 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.031.193 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.200 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.201 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.204 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.205 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.207 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.208 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.220 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.220 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.221 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.003 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.906 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.690 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.698 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.699 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.700 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.701 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.702 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.703 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.706 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.707 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.708 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.710 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.711 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.140.714 I llama_model_loader: - type  f32:   37 tensors
0.00.140.715 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.718 I print_info: file format = GGUF V3 (latest)
0.00.140.718 I print_info: file type   = Q8_0
0.00.140.721 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.220.715 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.701 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.372 I load: special tokens cache size = 5
0.00.293.309 I load: token to piece cache size = 1.6014 MB
0.00.293.330 I print_info: arch             = gemma
0.00.293.331 I print_info: vocab_only       = 0
0.00.293.332 I print_info: n_ctx_train      = 8192
0.00.293.332 I print_info: n_embd           = 2048
0.00.293.332 I print_info: n_layer          = 18
0.00.293.344 I print_info: n_head           = 8
0.00.293.346 I print_info: n_head_kv        = 1
0.00.293.346 I print_info: n_rot            = 256
0.00.293.346 I print_info: n_swa            = 0
0.00.293.347 I print_info: n_embd_head_k    = 256
0.00.293.347 I print_info: n_embd_head_v    = 256
0.00.293.349 I print_info: n_gqa            = 8
0.00.293.351 I print_info: n_embd_k_gqa     = 256
0.00.293.352 I print_info: n_embd_v_gqa     = 256
0.00.293.353 I print_info: f_norm_eps       = 0.0e+00
0.00.293.355 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.293.355 I print_info: f_clamp_kqv      = 0.0e+00
0.00.293.355 I print_info: f_max_alibi_bias = 0.0e+00
0.00.293.356 I print_info: f_logit_scale    = 0.0e+00
0.00.293.357 I print_info: n_ff             = 16384
0.00.293.358 I print_info: n_expert         = 0
0.00.293.358 I print_info: n_expert_used    = 0
0.00.293.358 I print_info: causal attn      = 1
0.00.293.359 I print_info: pooling type     = 0
0.00.293.359 I print_info: rope type        = 2
0.00.293.359 I print_info: rope scaling     = linear
0.00.293.361 I print_info: freq_base_train  = 10000.0
0.00.293.361 I print_info: freq_scale_train = 1
0.00.293.362 I print_info: n_ctx_orig_yarn  = 8192
0.00.293.362 I print_info: rope_finetuned   = unknown
0.00.293.362 I print_info: ssm_d_conv       = 0
0.00.293.362 I print_info: ssm_d_inner      = 0
0.00.293.363 I print_info: ssm_d_state      = 0
0.00.293.363 I print_info: ssm_dt_rank      = 0
0.00.293.363 I print_info: ssm_dt_b_c_rms   = 0
0.00.293.364 I print_info: model type       = 2B
0.00.293.365 I print_info: model params     = 2.51 B
0.00.293.365 I print_info: general.name     = gemma-1.1-2b-it
0.00.293.368 I print_info: vocab type       = SPM
0.00.293.369 I print_info: n_vocab          = 256000
0.00.293.370 I print_info: n_merges         = 0
0.00.293.370 I print_info: BOS token        = 2 '<bos>'
0.00.293.371 I print_info: EOS token        = 1 '<eos>'
0.00.293.372 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.293.372 I print_info: UNK token        = 3 '<unk>'
0.00.293.372 I print_info: PAD token        = 0 '<pad>'
0.00.293.373 I print_info: LF token         = 227 '<0x0A>'
0.00.293.373 I print_info: EOG token        = 1 '<eos>'
0.00.293.374 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.293.374 I print_info: max token length = 93
0.00.293.375 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.394.082 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.394.088 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.394.088 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.394.089 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.394.089 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.394.090 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.395.473 I llama_context: constructing llama_context
0.00.395.478 I llama_context: n_seq_max     = 1
0.00.395.478 I llama_context: n_ctx         = 4096
0.00.395.479 I llama_context: n_ctx_per_seq = 4096
0.00.395.479 I llama_context: n_batch       = 2048
0.00.395.479 I llama_context: n_ubatch      = 512
0.00.395.480 I llama_context: flash_attn    = 0
0.00.395.481 I llama_context: freq_base     = 10000.0
0.00.395.482 I llama_context: freq_scale    = 1
0.00.395.483 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.594 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.397.270 I init:        CPU compute buffer size =   504.00 MiB
0.00.397.275 I init: graph nodes  = 583
0.00.397.276 I init: graph splits = 1
0.00.397.279 W common_init_from_params: KV cache shifting is not supported for this context, disabling KV cache shifting
0.00.397.280 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.397.280 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.864 I main: llama threadpool init, n_threads = 4
0.00.479.874 I 
0.00.479.929 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.932 I 
0.00.479.975 I sampler seed: 3449819086
0.00.479.989 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.998 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.001 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.001 I 
 increasia [end of text]


0.00.691.095 I llama_perf_sampler_print:    sampling time =       0.47 ms /     4 runs   (    0.12 ms per token,  8547.01 tokens per second)
0.00.691.098 I llama_perf_context_print:        load time =     476.45 ms
0.00.691.099 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.691.100 I llama_perf_context_print:        eval time =     208.41 ms /     3 runs   (   69.47 ms per token,    14.39 tokens per second)
0.00.691.101 I llama_perf_context_print:       total time =     213.87 ms /     4 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.605 I build: 4815 (8bc4a9b2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.814 I main: llama backend init
0.00.000.821 I main: load the model and apply lora adapter, if any
0.00.031.022 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.031.039 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.049 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.050 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.053 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.054 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.054 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.055 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.056 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.056 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.066 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.068 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.068 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.069 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.069 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.949 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.182 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.740 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.748 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.748 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.749 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.750 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.751 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.752 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.754 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.755 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.755 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.756 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.757 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.140.761 I llama_model_loader: - type  f32:   37 tensors
0.00.140.762 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.765 I print_info: file format = GGUF V3 (latest)
0.00.140.765 I print_info: file type   = Q8_0
0.00.140.767 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.213.873 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.266 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.894 I load: special tokens cache size = 5
0.00.284.884 I load: token to piece cache size = 1.6014 MB
0.00.284.903 I print_info: arch             = gemma
0.00.284.904 I print_info: vocab_only       = 0
0.00.284.905 I print_info: n_ctx_train      = 8192
0.00.284.905 I print_info: n_embd           = 2048
0.00.284.905 I print_info: n_layer          = 18
0.00.284.916 I print_info: n_head           = 8
0.00.284.918 I print_info: n_head_kv        = 1
0.00.284.918 I print_info: n_rot            = 256
0.00.284.919 I print_info: n_swa            = 0
0.00.284.919 I print_info: n_embd_head_k    = 256
0.00.284.919 I print_info: n_embd_head_v    = 256
0.00.284.921 I print_info: n_gqa            = 8
0.00.284.923 I print_info: n_embd_k_gqa     = 256
0.00.284.925 I print_info: n_embd_v_gqa     = 256
0.00.284.926 I print_info: f_norm_eps       = 0.0e+00
0.00.284.928 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.284.928 I print_info: f_clamp_kqv      = 0.0e+00
0.00.284.928 I print_info: f_max_alibi_bias = 0.0e+00
0.00.284.929 I print_info: f_logit_scale    = 0.0e+00
0.00.284.931 I print_info: n_ff             = 16384
0.00.284.931 I print_info: n_expert         = 0
0.00.284.931 I print_info: n_expert_used    = 0
0.00.284.931 I print_info: causal attn      = 1
0.00.284.932 I print_info: pooling type     = 0
0.00.284.932 I print_info: rope type        = 2
0.00.284.932 I print_info: rope scaling     = linear
0.00.284.934 I print_info: freq_base_train  = 10000.0
0.00.284.935 I print_info: freq_scale_train = 1
0.00.284.935 I print_info: n_ctx_orig_yarn  = 8192
0.00.284.935 I print_info: rope_finetuned   = unknown
0.00.284.936 I print_info: ssm_d_conv       = 0
0.00.284.936 I print_info: ssm_d_inner      = 0
0.00.284.936 I print_info: ssm_d_state      = 0
0.00.284.937 I print_info: ssm_dt_rank      = 0
0.00.284.937 I print_info: ssm_dt_b_c_rms   = 0
0.00.284.938 I print_info: model type       = 2B
0.00.284.938 I print_info: model params     = 2.51 B
0.00.284.939 I print_info: general.name     = gemma-1.1-2b-it
0.00.284.942 I print_info: vocab type       = SPM
0.00.284.943 I print_info: n_vocab          = 256000
0.00.284.943 I print_info: n_merges         = 0
0.00.284.944 I print_info: BOS token        = 2 '<bos>'
0.00.284.944 I print_info: EOS token        = 1 '<eos>'
0.00.284.944 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.284.945 I print_info: UNK token        = 3 '<unk>'
0.00.284.945 I print_info: PAD token        = 0 '<pad>'
0.00.284.945 I print_info: LF token         = 227 '<0x0A>'
0.00.284.946 I print_info: EOG token        = 1 '<eos>'
0.00.284.946 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.284.946 I print_info: max token length = 93
0.00.284.947 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.380.630 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.381.881 I llama_context: constructing llama_context
0.00.381.886 I llama_context: n_seq_max     = 1
0.00.381.886 I llama_context: n_ctx         = 4096
0.00.381.887 I llama_context: n_ctx_per_seq = 4096
0.00.381.887 I llama_context: n_batch       = 2048
0.00.381.888 I llama_context: n_ubatch      = 512
0.00.381.888 I llama_context: flash_attn    = 0
0.00.381.891 I llama_context: freq_base     = 10000.0
0.00.381.892 I llama_context: freq_scale    = 1
0.00.381.892 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.003 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.384.062 I init:        CPU compute buffer size =   504.00 MiB
0.00.384.067 I init: graph nodes  = 583
0.00.384.067 I init: graph splits = 1
0.00.384.070 W common_init_from_params: KV cache shifting is not supported for this context, disabling KV cache shifting
0.00.384.071 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.071 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.810 I main: llama threadpool init, n_threads = 4
0.00.463.821 I 
0.00.463.884 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.887 I 
0.00.463.928 I sampler seed: 1851621768
0.00.463.940 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.943 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.944 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.945 I 
 increa. [end of text]


0.00.667.792 I llama_perf_sampler_print:    sampling time =       0.48 ms /     4 runs   (    0.12 ms per token,  8421.05 tokens per second)
0.00.667.797 I llama_perf_context_print:        load time =     460.32 ms
0.00.667.799 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.667.801 I llama_perf_context_print:        eval time =     201.37 ms /     3 runs   (   67.12 ms per token,    14.90 tokens per second)
0.00.667.801 I llama_perf_context_print:       total time =     206.64 ms /     4 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.174 I build: 4815 (8bc4a9b2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.361 I main: llama backend init
0.00.000.367 I main: load the model and apply lora adapter, if any
0.00.030.207 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.219 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.227 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.234 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.235 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.238 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.239 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.240 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.241 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.241 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.246 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.252 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.252 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.253 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.253 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.254 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.564 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.967 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.427 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.437 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.438 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.439 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.440 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.442 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.443 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.447 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.448 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.449 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.450 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.451 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.140.455 I llama_model_loader: - type  f32:   37 tensors
0.00.140.456 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.460 I print_info: file format = GGUF V3 (latest)
0.00.140.460 I print_info: file type   = Q8_0
0.00.140.463 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.231.504 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.288.069 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.288.836 I load: special tokens cache size = 5
0.00.311.010 I load: token to piece cache size = 1.6014 MB
0.00.311.035 I print_info: arch             = gemma
0.00.311.036 I print_info: vocab_only       = 0
0.00.311.037 I print_info: n_ctx_train      = 8192
0.00.311.037 I print_info: n_embd           = 2048
0.00.311.037 I print_info: n_layer          = 18
0.00.311.050 I print_info: n_head           = 8
0.00.311.053 I print_info: n_head_kv        = 1
0.00.311.053 I print_info: n_rot            = 256
0.00.311.054 I print_info: n_swa            = 0
0.00.311.054 I print_info: n_embd_head_k    = 256
0.00.311.054 I print_info: n_embd_head_v    = 256
0.00.311.057 I print_info: n_gqa            = 8
0.00.311.060 I print_info: n_embd_k_gqa     = 256
0.00.311.062 I print_info: n_embd_v_gqa     = 256
0.00.311.062 I print_info: f_norm_eps       = 0.0e+00
0.00.311.064 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.311.065 I print_info: f_clamp_kqv      = 0.0e+00
0.00.311.065 I print_info: f_max_alibi_bias = 0.0e+00
0.00.311.066 I print_info: f_logit_scale    = 0.0e+00
0.00.311.068 I print_info: n_ff             = 16384
0.00.311.068 I print_info: n_expert         = 0
0.00.311.069 I print_info: n_expert_used    = 0
0.00.311.069 I print_info: causal attn      = 1
0.00.311.070 I print_info: pooling type     = 0
0.00.311.074 I print_info: rope type        = 2
0.00.311.074 I print_info: rope scaling     = linear
0.00.311.076 I print_info: freq_base_train  = 10000.0
0.00.311.076 I print_info: freq_scale_train = 1
0.00.311.076 I print_info: n_ctx_orig_yarn  = 8192
0.00.311.077 I print_info: rope_finetuned   = unknown
0.00.311.077 I print_info: ssm_d_conv       = 0
0.00.311.078 I print_info: ssm_d_inner      = 0
0.00.311.078 I print_info: ssm_d_state      = 0
0.00.311.078 I print_info: ssm_dt_rank      = 0
0.00.311.079 I print_info: ssm_dt_b_c_rms   = 0
0.00.311.080 I print_info: model type       = 2B
0.00.311.080 I print_info: model params     = 2.51 B
0.00.311.081 I print_info: general.name     = gemma-1.1-2b-it
0.00.311.084 I print_info: vocab type       = SPM
0.00.311.085 I print_info: n_vocab          = 256000
0.00.311.086 I print_info: n_merges         = 0
0.00.311.088 I print_info: BOS token        = 2 '<bos>'
0.00.311.088 I print_info: EOS token        = 1 '<eos>'
0.00.311.089 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.311.089 I print_info: UNK token        = 3 '<unk>'
0.00.311.089 I print_info: PAD token        = 0 '<pad>'
0.00.311.090 I print_info: LF token         = 227 '<0x0A>'
0.00.311.091 I print_info: EOG token        = 1 '<eos>'
0.00.311.092 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.311.092 I print_info: max token length = 93
0.00.311.093 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.389.417 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.389.423 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.389.424 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.389.424 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.389.425 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.389.425 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.390.738 I llama_context: constructing llama_context
0.00.390.742 I llama_context: n_seq_max     = 1
0.00.390.742 I llama_context: n_ctx         = 4096
0.00.390.743 I llama_context: n_ctx_per_seq = 4096
0.00.390.743 I llama_context: n_batch       = 2048
0.00.390.744 I llama_context: n_ubatch      = 512
0.00.390.744 I llama_context: flash_attn    = 0
0.00.390.746 I llama_context: freq_base     = 10000.0
0.00.390.747 I llama_context: freq_scale    = 1
0.00.390.748 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.858 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.392.920 I init:        CPU compute buffer size =   504.00 MiB
0.00.392.926 I init: graph nodes  = 583
0.00.392.927 I init: graph splits = 1
0.00.392.929 W common_init_from_params: KV cache shifting is not supported for this context, disabling KV cache shifting
0.00.392.930 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.931 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.526 I main: llama threadpool init, n_threads = 4
0.00.475.536 I 
0.00.475.610 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.613 I 
0.00.475.653 I sampler seed: 702245133
0.00.475.665 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.678 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.684 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.684 I 
 increamicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymicallymically

0.02.717.738 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7019.78 tokens per second)
0.02.717.741 I llama_perf_context_print:        load time =     472.48 ms
0.02.717.742 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.717.743 I llama_perf_context_print:        eval time =    2224.04 ms /    32 runs   (   69.50 ms per token,    14.39 tokens per second)
0.02.717.744 I llama_perf_context_print:       total time =    2244.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.560 I build: 4815 (8bc4a9b2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.762 I main: load the model and apply lora adapter, if any
0.00.030.407 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.030.417 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.030.427 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.434 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.435 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.438 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.439 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.440 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.441 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.441 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.442 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.449 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.449 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.450 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.451 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.229 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.994 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.616 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.624 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.626 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.626 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.627 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.628 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.630 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.631 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.631 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.632 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.139.633 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.139.637 I llama_model_loader: - type  f32:   37 tensors
0.00.139.638 I llama_model_loader: - type q8_0:  127 tensors
0.00.139.640 I print_info: file format = GGUF V3 (latest)
0.00.139.641 I print_info: file type   = Q8_0
0.00.139.643 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.213.837 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.975 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.697 I load: special tokens cache size = 5
0.00.283.442 I load: token to piece cache size = 1.6014 MB
0.00.283.465 I print_info: arch             = gemma
0.00.283.466 I print_info: vocab_only       = 0
0.00.283.467 I print_info: n_ctx_train      = 8192
0.00.283.467 I print_info: n_embd           = 2048
0.00.283.467 I print_info: n_layer          = 18
0.00.283.480 I print_info: n_head           = 8
0.00.283.482 I print_info: n_head_kv        = 1
0.00.283.482 I print_info: n_rot            = 256
0.00.283.482 I print_info: n_swa            = 0
0.00.283.483 I print_info: n_embd_head_k    = 256
0.00.283.483 I print_info: n_embd_head_v    = 256
0.00.283.485 I print_info: n_gqa            = 8
0.00.283.487 I print_info: n_embd_k_gqa     = 256
0.00.283.489 I print_info: n_embd_v_gqa     = 256
0.00.283.489 I print_info: f_norm_eps       = 0.0e+00
0.00.283.491 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.283.491 I print_info: f_clamp_kqv      = 0.0e+00
0.00.283.491 I print_info: f_max_alibi_bias = 0.0e+00
0.00.283.492 I print_info: f_logit_scale    = 0.0e+00
0.00.283.493 I print_info: n_ff             = 16384
0.00.283.494 I print_info: n_expert         = 0
0.00.283.494 I print_info: n_expert_used    = 0
0.00.283.494 I print_info: causal attn      = 1
0.00.283.494 I print_info: pooling type     = 0
0.00.283.495 I print_info: rope type        = 2
0.00.283.495 I print_info: rope scaling     = linear
0.00.283.497 I print_info: freq_base_train  = 10000.0
0.00.283.497 I print_info: freq_scale_train = 1
0.00.283.498 I print_info: n_ctx_orig_yarn  = 8192
0.00.283.498 I print_info: rope_finetuned   = unknown
0.00.283.498 I print_info: ssm_d_conv       = 0
0.00.283.499 I print_info: ssm_d_inner      = 0
0.00.283.499 I print_info: ssm_d_state      = 0
0.00.283.499 I print_info: ssm_dt_rank      = 0
0.00.283.500 I print_info: ssm_dt_b_c_rms   = 0
0.00.283.501 I print_info: model type       = 2B
0.00.283.502 I print_info: model params     = 2.51 B
0.00.283.502 I print_info: general.name     = gemma-1.1-2b-it
0.00.283.505 I print_info: vocab type       = SPM
0.00.283.506 I print_info: n_vocab          = 256000
0.00.283.507 I print_info: n_merges         = 0
0.00.283.507 I print_info: BOS token        = 2 '<bos>'
0.00.283.507 I print_info: EOS token        = 1 '<eos>'
0.00.283.508 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.283.508 I print_info: UNK token        = 3 '<unk>'
0.00.283.508 I print_info: PAD token        = 0 '<pad>'
0.00.283.509 I print_info: LF token         = 227 '<0x0A>'
0.00.283.509 I print_info: EOG token        = 1 '<eos>'
0.00.283.510 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.283.510 I print_info: max token length = 93
0.00.283.512 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.354.652 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.660 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.355.905 I llama_context: constructing llama_context
0.00.355.910 I llama_context: n_seq_max     = 1
0.00.355.910 I llama_context: n_ctx         = 4096
0.00.355.911 I llama_context: n_ctx_per_seq = 4096
0.00.355.911 I llama_context: n_batch       = 2048
0.00.355.911 I llama_context: n_ubatch      = 512
0.00.355.912 I llama_context: flash_attn    = 0
0.00.355.914 I llama_context: freq_base     = 10000.0
0.00.355.915 I llama_context: freq_scale    = 1
0.00.355.916 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.024 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.358.072 I init:        CPU compute buffer size =   504.00 MiB
0.00.358.077 I init: graph nodes  = 583
0.00.358.077 I init: graph splits = 1
0.00.358.080 W common_init_from_params: KV cache shifting is not supported for this context, disabling KV cache shifting
0.00.358.081 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.358.081 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.990 I main: llama threadpool init, n_threads = 4
0.00.445.001 I 
0.00.445.067 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.445.071 I 
0.00.445.112 I sampler seed: 2645720069
0.00.445.122 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.126 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.127 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.127 I 
 increa. [end of text]


0.00.675.617 I llama_perf_sampler_print:    sampling time =       0.47 ms /     4 runs   (    0.12 ms per token,  8438.82 tokens per second)
0.00.675.619 I llama_perf_context_print:        load time =     441.57 ms
0.00.675.620 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.675.622 I llama_perf_context_print:        eval time =     228.03 ms /     3 runs   (   76.01 ms per token,    13.16 tokens per second)
0.00.675.622 I llama_perf_context_print:       total time =     233.27 ms /     4 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m15.479s
user	0m14.697s
sys	0m9.481s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4815 (8bc4a9b2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40262.54 ms
main:    total time = 40262.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 4815 (8bc4a9b2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.031.191 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.031.203 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.031.212 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.219 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.220 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.224 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.225 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.226 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.227 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.228 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.229 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.236 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.237 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.240 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.057.586 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.209 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.649 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.656 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.657 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.658 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.658 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.659 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.660 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.663 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.664 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.139.665 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.139.666 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.666 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.139.667 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.139.671 I llama_model_loader: - type  f32:   37 tensors
0.00.139.672 I llama_model_loader: - type q4_K:  108 tensors
0.00.139.673 I llama_model_loader: - type q6_K:   19 tensors
0.00.139.676 I print_info: file format = GGUF V3 (latest)
0.00.139.677 I print_info: file type   = Q4_K - Medium
0.00.139.679 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.218.036 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.926 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.654 I load: special tokens cache size = 5
0.00.292.660 I load: token to piece cache size = 1.6014 MB
0.00.292.683 I print_info: arch             = gemma
0.00.292.684 I print_info: vocab_only       = 0
0.00.292.684 I print_info: n_ctx_train      = 8192
0.00.292.684 I print_info: n_embd           = 2048
0.00.292.685 I print_info: n_layer          = 18
0.00.292.699 I print_info: n_head           = 8
0.00.292.704 I print_info: n_head_kv        = 1
0.00.292.704 I print_info: n_rot            = 256
0.00.292.705 I print_info: n_swa            = 0
0.00.292.705 I print_info: n_embd_head_k    = 256
0.00.292.706 I print_info: n_embd_head_v    = 256
0.00.292.709 I print_info: n_gqa            = 8
0.00.292.711 I print_info: n_embd_k_gqa     = 256
0.00.292.713 I print_info: n_embd_v_gqa     = 256
0.00.292.715 I print_info: f_norm_eps       = 0.0e+00
0.00.292.716 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.292.717 I print_info: f_clamp_kqv      = 0.0e+00
0.00.292.717 I print_info: f_max_alibi_bias = 0.0e+00
0.00.292.718 I print_info: f_logit_scale    = 0.0e+00
0.00.292.721 I print_info: n_ff             = 16384
0.00.292.721 I print_info: n_expert         = 0
0.00.292.725 I print_info: n_expert_used    = 0
0.00.292.725 I print_info: causal attn      = 1
0.00.292.725 I print_info: pooling type     = 0
0.00.292.726 I print_info: rope type        = 2
0.00.292.726 I print_info: rope scaling     = linear
0.00.292.728 I print_info: freq_base_train  = 10000.0
0.00.292.729 I print_info: freq_scale_train = 1
0.00.292.730 I print_info: n_ctx_orig_yarn  = 8192
0.00.292.731 I print_info: rope_finetuned   = unknown
0.00.292.732 I print_info: ssm_d_conv       = 0
0.00.292.732 I print_info: ssm_d_inner      = 0
0.00.292.735 I print_info: ssm_d_state      = 0
0.00.292.735 I print_info: ssm_dt_rank      = 0
0.00.292.736 I print_info: ssm_dt_b_c_rms   = 0
0.00.292.737 I print_info: model type       = 2B
0.00.292.738 I print_info: model params     = 2.51 B
0.00.292.738 I print_info: general.name     = gemma-1.1-2b-it
0.00.292.742 I print_info: vocab type       = SPM
0.00.292.744 I print_info: n_vocab          = 256000
0.00.292.744 I print_info: n_merges         = 0
0.00.292.745 I print_info: BOS token        = 2 '<bos>'
0.00.292.745 I print_info: EOS token        = 1 '<eos>'
0.00.292.746 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.292.747 I print_info: UNK token        = 3 '<unk>'
0.00.292.747 I print_info: PAD token        = 0 '<pad>'
0.00.292.748 I print_info: LF token         = 227 '<0x0A>'
0.00.292.749 I print_info: EOG token        = 1 '<eos>'
0.00.292.750 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.292.750 I print_info: max token length = 93
0.00.292.753 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.352.112 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.352.120 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.352.120 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.352.121 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.352.121 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.352.122 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.353.718 I llama_context: constructing llama_context
0.00.353.722 I llama_context: n_seq_max     = 1
0.00.353.723 I llama_context: n_ctx         = 4096
0.00.353.723 I llama_context: n_ctx_per_seq = 4096
0.00.353.724 I llama_context: n_batch       = 2048
0.00.353.724 I llama_context: n_ubatch      = 512
0.00.353.725 I llama_context: flash_attn    = 0
0.00.353.727 I llama_context: freq_base     = 10000.0
0.00.353.728 I llama_context: freq_scale    = 1
0.00.353.728 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.856 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.355.621 I init:        CPU compute buffer size =   504.00 MiB
0.00.355.627 I init: graph nodes  = 583
0.00.355.627 I init: graph splits = 1
0.00.355.630 W common_init_from_params: KV cache shifting is not supported for this context, disabling KV cache shifting
0.00.355.632 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.355.632 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.457 I main: llama threadpool init, n_threads = 4
0.00.428.466 I 
0.00.428.532 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.428.535 I 
0.00.428.578 I sampler seed: 3716867579
0.00.428.587 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.591 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.591 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.591 I 
 encompantlyantlyantlyantlyantlyantly [end of text]


0.00.831.749 I llama_perf_sampler_print:    sampling time =       1.27 ms /     9 runs   (    0.14 ms per token,  7069.91 tokens per second)
0.00.831.751 I llama_perf_context_print:        load time =     424.75 ms
0.00.831.752 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.831.754 I llama_perf_context_print:        eval time =     397.69 ms /     8 runs   (   49.71 ms per token,    20.12 tokens per second)
0.00.831.754 I llama_perf_context_print:       total time =     406.21 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4815 (8bc4a9b2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40251.19 ms
main:    total time = 40251.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.165 I build: 4815 (8bc4a9b2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.350 I main: llama backend init
0.00.000.357 I main: load the model and apply lora adapter, if any
0.00.029.760 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.029.777 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.786 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.788 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.791 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.791 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.792 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.793 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.794 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.794 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.805 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.806 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.807 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.808 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.195 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.789 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.256 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.263 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.264 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.265 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.265 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.266 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.267 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.270 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.270 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.138.271 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.138.275 I llama_model_loader: - type  f32:   37 tensors
0.00.138.276 I llama_model_loader: - type q4_K:  108 tensors
0.00.138.276 I llama_model_loader: - type q6_K:   19 tensors
0.00.138.280 I print_info: file format = GGUF V3 (latest)
0.00.138.280 I print_info: file type   = Q4_K - Medium
0.00.138.283 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.208.826 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.180 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.841 I load: special tokens cache size = 5
0.00.279.627 I load: token to piece cache size = 1.6014 MB
0.00.279.646 I print_info: arch             = gemma
0.00.279.647 I print_info: vocab_only       = 0
0.00.279.648 I print_info: n_ctx_train      = 8192
0.00.279.648 I print_info: n_embd           = 2048
0.00.279.648 I print_info: n_layer          = 18
0.00.279.659 I print_info: n_head           = 8
0.00.279.661 I print_info: n_head_kv        = 1
0.00.279.661 I print_info: n_rot            = 256
0.00.279.662 I print_info: n_swa            = 0
0.00.279.662 I print_info: n_embd_head_k    = 256
0.00.279.663 I print_info: n_embd_head_v    = 256
0.00.279.665 I print_info: n_gqa            = 8
0.00.279.666 I print_info: n_embd_k_gqa     = 256
0.00.279.668 I print_info: n_embd_v_gqa     = 256
0.00.279.669 I print_info: f_norm_eps       = 0.0e+00
0.00.279.672 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.279.673 I print_info: f_clamp_kqv      = 0.0e+00
0.00.279.673 I print_info: f_max_alibi_bias = 0.0e+00
0.00.279.673 I print_info: f_logit_scale    = 0.0e+00
0.00.279.675 I print_info: n_ff             = 16384
0.00.279.675 I print_info: n_expert         = 0
0.00.279.676 I print_info: n_expert_used    = 0
0.00.279.677 I print_info: causal attn      = 1
0.00.279.677 I print_info: pooling type     = 0
0.00.279.678 I print_info: rope type        = 2
0.00.279.678 I print_info: rope scaling     = linear
0.00.279.680 I print_info: freq_base_train  = 10000.0
0.00.279.680 I print_info: freq_scale_train = 1
0.00.279.681 I print_info: n_ctx_orig_yarn  = 8192
0.00.279.681 I print_info: rope_finetuned   = unknown
0.00.279.681 I print_info: ssm_d_conv       = 0
0.00.279.682 I print_info: ssm_d_inner      = 0
0.00.279.682 I print_info: ssm_d_state      = 0
0.00.279.682 I print_info: ssm_dt_rank      = 0
0.00.279.683 I print_info: ssm_dt_b_c_rms   = 0
0.00.279.684 I print_info: model type       = 2B
0.00.279.685 I print_info: model params     = 2.51 B
0.00.279.685 I print_info: general.name     = gemma-1.1-2b-it
0.00.279.688 I print_info: vocab type       = SPM
0.00.279.689 I print_info: n_vocab          = 256000
0.00.279.690 I print_info: n_merges         = 0
0.00.279.692 I print_info: BOS token        = 2 '<bos>'
0.00.279.693 I print_info: EOS token        = 1 '<eos>'
0.00.279.693 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.279.693 I print_info: UNK token        = 3 '<unk>'
0.00.279.694 I print_info: PAD token        = 0 '<pad>'
0.00.279.695 I print_info: LF token         = 227 '<0x0A>'
0.00.279.695 I print_info: EOG token        = 1 '<eos>'
0.00.279.695 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.279.696 I print_info: max token length = 93
0.00.279.697 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.338.049 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.338 I llama_context: constructing llama_context
0.00.339.342 I llama_context: n_seq_max     = 1
0.00.339.343 I llama_context: n_ctx         = 4096
0.00.339.343 I llama_context: n_ctx_per_seq = 4096
0.00.339.344 I llama_context: n_batch       = 2048
0.00.339.344 I llama_context: n_ubatch      = 512
0.00.339.344 I llama_context: flash_attn    = 0
0.00.339.346 I llama_context: freq_base     = 10000.0
0.00.339.347 I llama_context: freq_scale    = 1
0.00.339.348 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.454 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.341.159 I init:        CPU compute buffer size =   504.00 MiB
0.00.341.165 I init: graph nodes  = 583
0.00.341.165 I init: graph splits = 1
0.00.341.168 W common_init_from_params: KV cache shifting is not supported for this context, disabling KV cache shifting
0.00.341.169 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.341.169 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.412.458 I main: llama threadpool init, n_threads = 4
0.00.412.468 I 
0.00.412.526 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.412.529 I 
0.00.412.564 I sampler seed: 2460532239
0.00.412.574 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.412.577 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.412.578 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.412.578 I 
 secon. [end of text]


0.00.557.655 I llama_perf_sampler_print:    sampling time =       0.53 ms /     4 runs   (    0.13 ms per token,  7518.80 tokens per second)
0.00.557.658 I llama_perf_context_print:        load time =     409.46 ms
0.00.557.659 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.557.660 I llama_perf_context_print:        eval time =     142.34 ms /     3 runs   (   47.45 ms per token,    21.08 tokens per second)
0.00.557.661 I llama_perf_context_print:       total time =     147.83 ms /     4 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m24.807s
user	10m13.946s
sys	0m7.194s
