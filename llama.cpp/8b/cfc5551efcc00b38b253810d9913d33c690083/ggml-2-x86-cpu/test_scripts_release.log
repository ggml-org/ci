+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.177 I build: 4339 (8bcfc555) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.370 I main: load the model and apply lora adapter, if any
0.00.020.687 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.698 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.707 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.713 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.715 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.719 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.722 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.723 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.724 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.724 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.725 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.729 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.730 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.730 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.731 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.732 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.749 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.164 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.041 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.046 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.047 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.047 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.048 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.049 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.049 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.052 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.052 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.053 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.053 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.054 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.058 I llama_model_loader: - type  f32:   37 tensors
0.00.132.059 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.927 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.038 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.652 I llm_load_vocab: special tokens cache size = 5
0.00.269.644 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.660 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.661 I llm_load_print_meta: arch             = gemma
0.00.269.661 I llm_load_print_meta: vocab type       = SPM
0.00.269.662 I llm_load_print_meta: n_vocab          = 256000
0.00.269.663 I llm_load_print_meta: n_merges         = 0
0.00.269.663 I llm_load_print_meta: vocab_only       = 0
0.00.269.664 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.664 I llm_load_print_meta: n_embd           = 2048
0.00.269.664 I llm_load_print_meta: n_layer          = 18
0.00.269.676 I llm_load_print_meta: n_head           = 8
0.00.269.676 I llm_load_print_meta: n_head_kv        = 1
0.00.269.677 I llm_load_print_meta: n_rot            = 256
0.00.269.677 I llm_load_print_meta: n_swa            = 0
0.00.269.677 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.678 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.678 I llm_load_print_meta: n_gqa            = 8
0.00.269.679 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.680 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.681 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.682 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.683 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.684 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.684 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.685 I llm_load_print_meta: n_ff             = 16384
0.00.269.685 I llm_load_print_meta: n_expert         = 0
0.00.269.686 I llm_load_print_meta: n_expert_used    = 0
0.00.269.686 I llm_load_print_meta: causal attn      = 1
0.00.269.686 I llm_load_print_meta: pooling type     = 0
0.00.269.686 I llm_load_print_meta: rope type        = 2
0.00.269.686 I llm_load_print_meta: rope scaling     = linear
0.00.269.688 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.688 I llm_load_print_meta: freq_scale_train = 1
0.00.269.689 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.689 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.689 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.689 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.690 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.690 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.690 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.691 I llm_load_print_meta: model type       = 2B
0.00.269.692 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.692 I llm_load_print_meta: model params     = 2.51 B
0.00.269.693 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.694 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.694 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.694 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.694 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.695 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.695 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.696 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.696 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.696 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.697 I llm_load_print_meta: max token length = 93
0.00.370.379 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.386 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.387 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.387 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.388 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.388 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.496 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.502 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.502 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.503 I llama_new_context_with_model: n_batch       = 2048
0.00.375.503 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.504 I llama_new_context_with_model: flash_attn    = 0
0.00.375.506 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.507 I llama_new_context_with_model: freq_scale    = 1
0.00.375.508 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.722 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.736 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.821 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.113 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.119 I llama_new_context_with_model: graph nodes  = 601
0.00.391.120 I llama_new_context_with_model: graph splits = 1
0.00.391.122 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.122 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.755 I main: llama threadpool init, n_threads = 4
0.00.476.770 I 
0.00.476.843 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.476.846 I 
0.00.476.885 I sampler seed: 3443693801
0.00.476.895 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.900 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.900 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.900 I 
 increably. The more I write, the more complex and layered my text becomes.

I am a language model, and I am designed to help you communicate

0.02.753.112 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7001.91 tokens per second)
0.02.753.114 I llama_perf_context_print:        load time =     476.37 ms
0.02.753.116 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.753.118 I llama_perf_context_print:        eval time =    2257.25 ms /    32 runs   (   70.54 ms per token,    14.18 tokens per second)
0.02.753.119 I llama_perf_context_print:       total time =    2276.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.527 I build: 4339 (8bcfc555) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.532 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.549 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.560 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.562 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.567 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.573 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.574 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.575 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.575 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.576 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.581 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.581 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.582 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.583 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.335 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.030 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.964 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.971 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.972 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.972 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.973 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.974 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.974 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.977 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.978 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.979 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.979 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.980 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.985 I llama_model_loader: - type  f32:   37 tensors
0.00.132.986 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.296 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.158 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.851 I llm_load_vocab: special tokens cache size = 5
0.00.285.031 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.051 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.052 I llm_load_print_meta: arch             = gemma
0.00.285.052 I llm_load_print_meta: vocab type       = SPM
0.00.285.053 I llm_load_print_meta: n_vocab          = 256000
0.00.285.053 I llm_load_print_meta: n_merges         = 0
0.00.285.054 I llm_load_print_meta: vocab_only       = 0
0.00.285.054 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.054 I llm_load_print_meta: n_embd           = 2048
0.00.285.055 I llm_load_print_meta: n_layer          = 18
0.00.285.066 I llm_load_print_meta: n_head           = 8
0.00.285.067 I llm_load_print_meta: n_head_kv        = 1
0.00.285.067 I llm_load_print_meta: n_rot            = 256
0.00.285.068 I llm_load_print_meta: n_swa            = 0
0.00.285.068 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.068 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.069 I llm_load_print_meta: n_gqa            = 8
0.00.285.070 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.071 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.071 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.073 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.073 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.074 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.074 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.075 I llm_load_print_meta: n_ff             = 16384
0.00.285.075 I llm_load_print_meta: n_expert         = 0
0.00.285.075 I llm_load_print_meta: n_expert_used    = 0
0.00.285.076 I llm_load_print_meta: causal attn      = 1
0.00.285.076 I llm_load_print_meta: pooling type     = 0
0.00.285.076 I llm_load_print_meta: rope type        = 2
0.00.285.076 I llm_load_print_meta: rope scaling     = linear
0.00.285.077 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.078 I llm_load_print_meta: freq_scale_train = 1
0.00.285.078 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.078 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.079 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.079 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.079 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.080 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.080 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.080 I llm_load_print_meta: model type       = 2B
0.00.285.081 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.082 I llm_load_print_meta: model params     = 2.51 B
0.00.285.082 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.083 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.083 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.084 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.084 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.084 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.084 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.085 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.085 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.086 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.086 I llm_load_print_meta: max token length = 93
0.00.381.383 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.386.719 I llama_new_context_with_model: n_seq_max     = 1
0.00.386.724 I llama_new_context_with_model: n_ctx         = 4096
0.00.386.725 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.386.725 I llama_new_context_with_model: n_batch       = 2048
0.00.386.726 I llama_new_context_with_model: n_ubatch      = 512
0.00.386.726 I llama_new_context_with_model: flash_attn    = 0
0.00.386.729 I llama_new_context_with_model: freq_base     = 10000.0
0.00.386.730 I llama_new_context_with_model: freq_scale    = 1
0.00.386.731 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.401.423 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.401.438 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.401.532 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.820 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.402.826 I llama_new_context_with_model: graph nodes  = 601
0.00.402.827 I llama_new_context_with_model: graph splits = 1
0.00.402.829 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.402.829 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.450 I main: llama threadpool init, n_threads = 4
0.00.484.467 I 
0.00.484.544 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.548 I 
0.00.484.590 I sampler seed: 3857094166
0.00.484.601 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.603 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.604 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.604 I 
 increadibly with the following conditions:
- The total time must not exceed 60 minutes.
- The number of questions must be between 10

0.02.691.470 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7127.43 tokens per second)
0.02.691.473 I llama_perf_context_print:        load time =     483.70 ms
0.02.691.474 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.691.475 I llama_perf_context_print:        eval time =    2187.64 ms /    32 runs   (   68.36 ms per token,    14.63 tokens per second)
0.02.691.476 I llama_perf_context_print:       total time =    2207.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.185 I build: 4339 (8bcfc555) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.392 I main: llama backend init
0.00.000.398 I main: load the model and apply lora adapter, if any
0.00.020.647 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.660 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.672 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.678 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.679 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.683 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.686 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.687 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.697 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.700 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.700 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.706 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.706 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.707 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.708 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.709 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.335 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.155 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.183 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.189 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.190 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.191 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.192 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.192 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.193 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.196 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.196 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.197 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.198 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.199 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.203 I llama_model_loader: - type  f32:   37 tensors
0.00.133.204 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.815 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.422 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.037 I llm_load_vocab: special tokens cache size = 5
0.00.273.067 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.084 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.085 I llm_load_print_meta: arch             = gemma
0.00.273.085 I llm_load_print_meta: vocab type       = SPM
0.00.273.086 I llm_load_print_meta: n_vocab          = 256000
0.00.273.086 I llm_load_print_meta: n_merges         = 0
0.00.273.086 I llm_load_print_meta: vocab_only       = 0
0.00.273.087 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.087 I llm_load_print_meta: n_embd           = 2048
0.00.273.087 I llm_load_print_meta: n_layer          = 18
0.00.273.101 I llm_load_print_meta: n_head           = 8
0.00.273.102 I llm_load_print_meta: n_head_kv        = 1
0.00.273.102 I llm_load_print_meta: n_rot            = 256
0.00.273.103 I llm_load_print_meta: n_swa            = 0
0.00.273.103 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.103 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.104 I llm_load_print_meta: n_gqa            = 8
0.00.273.105 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.106 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.107 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.108 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.108 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.109 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.109 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.110 I llm_load_print_meta: n_ff             = 16384
0.00.273.110 I llm_load_print_meta: n_expert         = 0
0.00.273.111 I llm_load_print_meta: n_expert_used    = 0
0.00.273.111 I llm_load_print_meta: causal attn      = 1
0.00.273.111 I llm_load_print_meta: pooling type     = 0
0.00.273.111 I llm_load_print_meta: rope type        = 2
0.00.273.111 I llm_load_print_meta: rope scaling     = linear
0.00.273.113 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.113 I llm_load_print_meta: freq_scale_train = 1
0.00.273.114 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.114 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.114 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.115 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.115 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.115 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.115 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.116 I llm_load_print_meta: model type       = 2B
0.00.273.116 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.117 I llm_load_print_meta: model params     = 2.51 B
0.00.273.118 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.118 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.119 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.119 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.119 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.119 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.120 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.120 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.120 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.121 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.121 I llm_load_print_meta: max token length = 93
0.00.349.570 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.576 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.577 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.578 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.578 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.579 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.354.724 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.731 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.731 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.732 I llama_new_context_with_model: n_batch       = 2048
0.00.354.732 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.733 I llama_new_context_with_model: flash_attn    = 0
0.00.354.735 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.736 I llama_new_context_with_model: freq_scale    = 1
0.00.354.737 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.592 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.605 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.702 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.965 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.972 I llama_new_context_with_model: graph nodes  = 601
0.00.370.973 I llama_new_context_with_model: graph splits = 1
0.00.370.975 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.370.976 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.822 I main: llama threadpool init, n_threads = 4
0.00.458.838 I 
0.00.458.911 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.458.914 I 
0.00.458.954 I sampler seed: 2157023102
0.00.458.965 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.973 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.974 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.974 I 
 increadibly with each other.

I am unable to generate the requested output as it contains sexually suggestive content. [end of text]


0.02.114.830 I llama_perf_sampler_print:    sampling time =       3.46 ms /    24 runs   (    0.14 ms per token,  6926.41 tokens per second)
0.02.114.832 I llama_perf_context_print:        load time =     458.41 ms
0.02.114.833 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.114.834 I llama_perf_context_print:        eval time =    1641.20 ms /    23 runs   (   71.36 ms per token,    14.01 tokens per second)
0.02.114.835 I llama_perf_context_print:       total time =    1656.01 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.549 I build: 4339 (8bcfc555) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.275 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.285 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.292 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.298 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.299 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.304 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.308 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.309 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.310 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.311 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.312 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.317 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.318 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.319 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.320 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.196 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.621 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.873 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.881 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.881 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.882 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.883 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.884 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.885 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.887 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.888 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.889 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.890 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.891 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.896 I llama_model_loader: - type  f32:   37 tensors
0.00.133.897 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.980 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.266 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.790 I llm_load_vocab: special tokens cache size = 5
0.00.272.478 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.495 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.496 I llm_load_print_meta: arch             = gemma
0.00.272.496 I llm_load_print_meta: vocab type       = SPM
0.00.272.497 I llm_load_print_meta: n_vocab          = 256000
0.00.272.497 I llm_load_print_meta: n_merges         = 0
0.00.272.498 I llm_load_print_meta: vocab_only       = 0
0.00.272.498 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.498 I llm_load_print_meta: n_embd           = 2048
0.00.272.499 I llm_load_print_meta: n_layer          = 18
0.00.272.511 I llm_load_print_meta: n_head           = 8
0.00.272.512 I llm_load_print_meta: n_head_kv        = 1
0.00.272.513 I llm_load_print_meta: n_rot            = 256
0.00.272.513 I llm_load_print_meta: n_swa            = 0
0.00.272.514 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.515 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.517 I llm_load_print_meta: n_gqa            = 8
0.00.272.519 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.520 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.521 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.523 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.525 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.525 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.526 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.530 I llm_load_print_meta: n_ff             = 16384
0.00.272.531 I llm_load_print_meta: n_expert         = 0
0.00.272.531 I llm_load_print_meta: n_expert_used    = 0
0.00.272.532 I llm_load_print_meta: causal attn      = 1
0.00.272.532 I llm_load_print_meta: pooling type     = 0
0.00.272.533 I llm_load_print_meta: rope type        = 2
0.00.272.533 I llm_load_print_meta: rope scaling     = linear
0.00.272.535 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.536 I llm_load_print_meta: freq_scale_train = 1
0.00.272.536 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.537 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.537 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.538 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.539 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.539 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.540 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.541 I llm_load_print_meta: model type       = 2B
0.00.272.542 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.543 I llm_load_print_meta: model params     = 2.51 B
0.00.272.544 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.544 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.545 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.545 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.546 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.546 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.547 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.548 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.548 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.549 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.550 I llm_load_print_meta: max token length = 93
0.00.343.615 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.623 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.349.019 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.026 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.027 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.027 I llama_new_context_with_model: n_batch       = 2048
0.00.349.028 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.028 I llama_new_context_with_model: flash_attn    = 0
0.00.349.030 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.031 I llama_new_context_with_model: freq_scale    = 1
0.00.349.032 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.375 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.388 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.488 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.712 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.718 I llama_new_context_with_model: graph nodes  = 601
0.00.364.719 I llama_new_context_with_model: graph splits = 1
0.00.364.721 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.721 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.483 I main: llama threadpool init, n_threads = 4
0.00.454.499 I 
0.00.454.596 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.599 I 
0.00.454.670 I sampler seed: 2080339386
0.00.454.683 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.693 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.698 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.698 I 
 seconary document.

**Purpose:**

The purpose of this document is to provide guidance on the development of a data-driven culture within the organization.



0.02.900.506 I llama_perf_sampler_print:    sampling time =       5.29 ms /    33 runs   (    0.16 ms per token,  6238.19 tokens per second)
0.02.900.509 I llama_perf_context_print:        load time =     453.71 ms
0.02.900.510 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.900.512 I llama_perf_context_print:        eval time =    2425.71 ms /    32 runs   (   75.80 ms per token,    13.19 tokens per second)
0.02.900.512 I llama_perf_context_print:       total time =    2446.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.031s
user	0m37.250s
sys	0m9.460s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4339 (8bcfc555)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40242.42 ms
main:    total time = 40242.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4339 (8bcfc555) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.347 I main: llama backend init
0.00.000.350 I main: load the model and apply lora adapter, if any
0.00.020.842 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.853 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.863 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.868 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.869 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.874 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.875 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.876 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.877 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.878 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.878 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.882 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.883 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.887 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.888 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.889 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.431 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.022 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.941 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.947 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.947 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.948 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.949 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.950 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.950 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.953 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.955 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.955 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.956 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.957 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.960 I llama_model_loader: - type  f32:   37 tensors
0.00.131.961 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.962 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.497 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.847 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.436 I llm_load_vocab: special tokens cache size = 5
0.00.268.163 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.178 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.179 I llm_load_print_meta: arch             = gemma
0.00.268.180 I llm_load_print_meta: vocab type       = SPM
0.00.268.180 I llm_load_print_meta: n_vocab          = 256000
0.00.268.181 I llm_load_print_meta: n_merges         = 0
0.00.268.181 I llm_load_print_meta: vocab_only       = 0
0.00.268.181 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.182 I llm_load_print_meta: n_embd           = 2048
0.00.268.182 I llm_load_print_meta: n_layer          = 18
0.00.268.193 I llm_load_print_meta: n_head           = 8
0.00.268.194 I llm_load_print_meta: n_head_kv        = 1
0.00.268.194 I llm_load_print_meta: n_rot            = 256
0.00.268.195 I llm_load_print_meta: n_swa            = 0
0.00.268.195 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.195 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.196 I llm_load_print_meta: n_gqa            = 8
0.00.268.197 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.198 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.199 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.201 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.201 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.202 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.202 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.203 I llm_load_print_meta: n_ff             = 16384
0.00.268.203 I llm_load_print_meta: n_expert         = 0
0.00.268.203 I llm_load_print_meta: n_expert_used    = 0
0.00.268.204 I llm_load_print_meta: causal attn      = 1
0.00.268.204 I llm_load_print_meta: pooling type     = 0
0.00.268.204 I llm_load_print_meta: rope type        = 2
0.00.268.204 I llm_load_print_meta: rope scaling     = linear
0.00.268.205 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.206 I llm_load_print_meta: freq_scale_train = 1
0.00.268.206 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.207 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.207 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.207 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.208 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.208 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.208 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.209 I llm_load_print_meta: model type       = 2B
0.00.268.209 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.210 I llm_load_print_meta: model params     = 2.51 B
0.00.268.211 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.211 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.211 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.212 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.212 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.212 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.213 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.214 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.215 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.215 I llm_load_print_meta: max token length = 93
0.00.328.150 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.157 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.157 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.158 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.159 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.159 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.332 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.339 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.339 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.340 I llama_new_context_with_model: n_batch       = 2048
0.00.333.340 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.341 I llama_new_context_with_model: flash_attn    = 0
0.00.333.343 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.344 I llama_new_context_with_model: freq_scale    = 1
0.00.333.345 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.160 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.174 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.265 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.589 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.596 I llama_new_context_with_model: graph nodes  = 601
0.00.349.596 I llama_new_context_with_model: graph splits = 1
0.00.349.598 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.349.599 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.389 I main: llama threadpool init, n_threads = 4
0.00.425.405 I 
0.00.425.479 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.482 I 
0.00.425.525 I sampler seed: 438474762
0.00.425.536 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.544 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.547 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.547 I 
 maneurages and promises of "all things good".

I am not sure if this is a legitimate marketing tactic or a scam.

**Answer:**

It

0.02.060.428 I llama_perf_sampler_print:    sampling time =       5.61 ms /    33 runs   (    0.17 ms per token,  5881.30 tokens per second)
0.02.060.431 I llama_perf_context_print:        load time =     425.03 ms
0.02.060.433 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.060.435 I llama_perf_context_print:        eval time =    1614.29 ms /    32 runs   (   50.45 ms per token,    19.82 tokens per second)
0.02.060.436 I llama_perf_context_print:       total time =    1635.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4339 (8bcfc555)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40210.31 ms
main:    total time = 40210.31 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.521 I build: 4339 (8bcfc555) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.696 I main: llama backend init
0.00.000.704 I main: load the model and apply lora adapter, if any
0.00.021.188 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.207 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.214 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.217 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.223 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.223 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.224 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.225 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.225 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.226 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.229 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.230 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.231 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.469 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.352 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.358 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.359 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.360 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.360 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.361 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.362 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.364 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.366 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.369 I llama_model_loader: - type  f32:   37 tensors
0.00.132.370 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.371 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.336 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.005 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.542 I llm_load_vocab: special tokens cache size = 5
0.00.275.365 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.382 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.383 I llm_load_print_meta: arch             = gemma
0.00.275.383 I llm_load_print_meta: vocab type       = SPM
0.00.275.384 I llm_load_print_meta: n_vocab          = 256000
0.00.275.385 I llm_load_print_meta: n_merges         = 0
0.00.275.385 I llm_load_print_meta: vocab_only       = 0
0.00.275.385 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.386 I llm_load_print_meta: n_embd           = 2048
0.00.275.386 I llm_load_print_meta: n_layer          = 18
0.00.275.398 I llm_load_print_meta: n_head           = 8
0.00.275.399 I llm_load_print_meta: n_head_kv        = 1
0.00.275.399 I llm_load_print_meta: n_rot            = 256
0.00.275.400 I llm_load_print_meta: n_swa            = 0
0.00.275.400 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.400 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.401 I llm_load_print_meta: n_gqa            = 8
0.00.275.402 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.403 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.403 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.405 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.405 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.405 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.406 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.407 I llm_load_print_meta: n_ff             = 16384
0.00.275.407 I llm_load_print_meta: n_expert         = 0
0.00.275.407 I llm_load_print_meta: n_expert_used    = 0
0.00.275.408 I llm_load_print_meta: causal attn      = 1
0.00.275.408 I llm_load_print_meta: pooling type     = 0
0.00.275.408 I llm_load_print_meta: rope type        = 2
0.00.275.409 I llm_load_print_meta: rope scaling     = linear
0.00.275.410 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.411 I llm_load_print_meta: freq_scale_train = 1
0.00.275.411 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.412 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.412 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.412 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.412 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.413 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.413 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.413 I llm_load_print_meta: model type       = 2B
0.00.275.414 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.415 I llm_load_print_meta: model params     = 2.51 B
0.00.275.415 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.416 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.416 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.416 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.416 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.417 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.417 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.417 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.417 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.418 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.418 I llm_load_print_meta: max token length = 93
0.00.332.644 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.337.811 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.819 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.819 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.820 I llama_new_context_with_model: n_batch       = 2048
0.00.337.820 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.821 I llama_new_context_with_model: flash_attn    = 0
0.00.337.823 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.824 I llama_new_context_with_model: freq_scale    = 1
0.00.337.825 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.423 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.439 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.540 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.844 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.850 I llama_new_context_with_model: graph nodes  = 601
0.00.354.850 I llama_new_context_with_model: graph splits = 1
0.00.354.852 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.354.853 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.618 I main: llama threadpool init, n_threads = 4
0.00.429.634 I 
0.00.429.706 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.709 I 
0.00.429.750 I sampler seed: 3272261719
0.00.429.762 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.773 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.776 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.777 I 
 seconded 
## Understanding the Difference Between a Network and a Network Connection

**Network:**

* A collection of interconnected devices or systems that communicate with each

0.02.016.893 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6378.04 tokens per second)
0.02.016.896 I llama_perf_context_print:        load time =     428.90 ms
0.02.016.897 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.016.898 I llama_perf_context_print:        eval time =    1568.38 ms /    32 runs   (   49.01 ms per token,    20.40 tokens per second)
0.02.016.899 I llama_perf_context_print:       total time =    1587.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.376s
user	10m24.303s
sys	0m6.942s
