+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3994 (b9e02e81) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.024.616 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.829 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.923 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.934 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.935 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.940 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.941 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.942 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.944 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.945 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.946 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.964 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.969 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.971 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.974 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.968 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.266.113 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.284.975 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.284.985 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.284.986 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.284.987 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.284.988 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.284.990 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.284.991 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.284.994 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.284.994 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.284.995 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.284.996 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.284.998 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.285.006 I llama_model_loader: - type  f32:   37 tensors
0.00.285.011 I llama_model_loader: - type q8_0:  127 tensors
0.00.477.185 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.542.223 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.543.235 I llm_load_vocab: special tokens cache size = 5
0.00.638.306 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.638.379 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.638.380 I llm_load_print_meta: arch             = gemma
0.00.638.381 I llm_load_print_meta: vocab type       = SPM
0.00.638.381 I llm_load_print_meta: n_vocab          = 256000
0.00.638.384 I llm_load_print_meta: n_merges         = 0
0.00.638.384 I llm_load_print_meta: vocab_only       = 0
0.00.638.385 I llm_load_print_meta: n_ctx_train      = 8192
0.00.638.385 I llm_load_print_meta: n_embd           = 2048
0.00.638.385 I llm_load_print_meta: n_layer          = 18
0.00.638.450 I llm_load_print_meta: n_head           = 8
0.00.638.457 I llm_load_print_meta: n_head_kv        = 1
0.00.638.458 I llm_load_print_meta: n_rot            = 256
0.00.638.458 I llm_load_print_meta: n_swa            = 0
0.00.638.459 I llm_load_print_meta: n_embd_head_k    = 256
0.00.638.459 I llm_load_print_meta: n_embd_head_v    = 256
0.00.638.464 I llm_load_print_meta: n_gqa            = 8
0.00.638.468 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.638.474 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.638.475 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.638.476 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.638.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.638.477 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.638.477 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.638.482 I llm_load_print_meta: n_ff             = 16384
0.00.638.483 I llm_load_print_meta: n_expert         = 0
0.00.638.484 I llm_load_print_meta: n_expert_used    = 0
0.00.638.484 I llm_load_print_meta: causal attn      = 1
0.00.638.485 I llm_load_print_meta: pooling type     = 0
0.00.638.485 I llm_load_print_meta: rope type        = 2
0.00.638.486 I llm_load_print_meta: rope scaling     = linear
0.00.638.487 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.638.487 I llm_load_print_meta: freq_scale_train = 1
0.00.638.488 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.638.488 I llm_load_print_meta: rope_finetuned   = unknown
0.00.638.489 I llm_load_print_meta: ssm_d_conv       = 0
0.00.638.490 I llm_load_print_meta: ssm_d_inner      = 0
0.00.638.490 I llm_load_print_meta: ssm_d_state      = 0
0.00.638.490 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.638.491 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.638.492 I llm_load_print_meta: model type       = 2B
0.00.638.494 I llm_load_print_meta: model ftype      = Q8_0
0.00.638.494 I llm_load_print_meta: model params     = 2.51 B
0.00.638.495 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.638.496 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.638.497 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.638.497 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.638.497 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.638.498 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.638.499 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.638.499 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.638.505 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.638.507 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.638.507 I llm_load_print_meta: max token length = 93
0.00.747.957 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.747.969 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.747.970 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.747.971 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.747.972 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.747.972 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.753.856 I llama_new_context_with_model: n_ctx      = 8192
0.00.753.864 I llama_new_context_with_model: n_batch    = 2048
0.00.753.864 I llama_new_context_with_model: n_ubatch   = 512
0.00.753.865 I llama_new_context_with_model: flash_attn = 0
0.00.753.867 I llama_new_context_with_model: freq_base  = 10000.0
0.00.753.867 I llama_new_context_with_model: freq_scale = 1
0.00.782.913 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.782.952 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.783.076 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.786.234 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.786.239 I llama_new_context_with_model: graph nodes  = 601
0.00.786.239 I llama_new_context_with_model: graph splits = 1
0.00.786.255 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.397.376 I main: llama threadpool init, n_threads = 4
0.01.397.389 I 
0.01.397.520 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.397.525 I 
0.01.397.766 I sampler seed: 3232673284
0.01.397.779 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.397.785 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.397.787 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.397.787 I 
 increably. 

I am unable to access the requested content. Please verify your internet connection and try again later. [end of text]


0.11.989.602 I llama_perf_sampler_print:    sampling time =      37.30 ms /    26 runs   (    1.43 ms per token,   697.09 tokens per second)
0.11.989.605 I llama_perf_context_print:        load time =    1394.48 ms
0.11.989.606 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.989.619 I llama_perf_context_print:        eval time =   10518.75 ms /    25 runs   (  420.75 ms per token,     2.38 tokens per second)
0.11.989.621 I llama_perf_context_print:       total time =   10592.23 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3994 (b9e02e81) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.024.994 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.093 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.108 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.110 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.138 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.139 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.141 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.147 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.149 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.160 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.164 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.165 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.166 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.166 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.756 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.064 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.916 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.925 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.926 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.927 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.928 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.929 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.930 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.935 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.936 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.937 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.938 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.939 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.948 I llama_model_loader: - type  f32:   37 tensors
0.00.266.952 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.921 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.117 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.140 I llm_load_vocab: special tokens cache size = 5
0.00.601.608 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.677 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.678 I llm_load_print_meta: arch             = gemma
0.00.601.678 I llm_load_print_meta: vocab type       = SPM
0.00.601.679 I llm_load_print_meta: n_vocab          = 256000
0.00.601.681 I llm_load_print_meta: n_merges         = 0
0.00.601.682 I llm_load_print_meta: vocab_only       = 0
0.00.601.682 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.683 I llm_load_print_meta: n_embd           = 2048
0.00.601.683 I llm_load_print_meta: n_layer          = 18
0.00.601.747 I llm_load_print_meta: n_head           = 8
0.00.601.754 I llm_load_print_meta: n_head_kv        = 1
0.00.601.754 I llm_load_print_meta: n_rot            = 256
0.00.601.755 I llm_load_print_meta: n_swa            = 0
0.00.601.755 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.755 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.760 I llm_load_print_meta: n_gqa            = 8
0.00.601.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.771 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.773 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.775 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.775 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.776 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.776 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.782 I llm_load_print_meta: n_ff             = 16384
0.00.601.782 I llm_load_print_meta: n_expert         = 0
0.00.601.783 I llm_load_print_meta: n_expert_used    = 0
0.00.601.784 I llm_load_print_meta: causal attn      = 1
0.00.601.785 I llm_load_print_meta: pooling type     = 0
0.00.601.785 I llm_load_print_meta: rope type        = 2
0.00.601.804 I llm_load_print_meta: rope scaling     = linear
0.00.601.807 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.807 I llm_load_print_meta: freq_scale_train = 1
0.00.601.816 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.817 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.821 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.822 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.822 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.822 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.823 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.823 I llm_load_print_meta: model type       = 2B
0.00.601.824 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.833 I llm_load_print_meta: model params     = 2.51 B
0.00.601.834 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.834 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.835 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.836 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.836 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.844 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.845 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.846 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.851 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.853 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.853 I llm_load_print_meta: max token length = 93
0.00.701.472 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.707.331 I llama_new_context_with_model: n_ctx      = 8192
0.00.707.337 I llama_new_context_with_model: n_batch    = 2048
0.00.707.337 I llama_new_context_with_model: n_ubatch   = 512
0.00.707.339 I llama_new_context_with_model: flash_attn = 0
0.00.707.341 I llama_new_context_with_model: freq_base  = 10000.0
0.00.707.342 I llama_new_context_with_model: freq_scale = 1
0.00.736.915 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.955 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.737.079 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.280 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.740.285 I llama_new_context_with_model: graph nodes  = 601
0.00.740.286 I llama_new_context_with_model: graph splits = 1
0.00.740.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.540 I main: llama threadpool init, n_threads = 4
0.01.349.554 I 
0.01.349.664 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.667 I 
0.01.349.900 I sampler seed: 2005719586
0.01.349.911 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.919 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.349.920 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.920 I 
 increasities, but her husband and son died in the battle. 

This woman is most likely a:

A) Widower
B) Widowess

0.14.942.533 I llama_perf_sampler_print:    sampling time =      47.77 ms /    33 runs   (    1.45 ms per token,   690.77 tokens per second)
0.14.942.536 I llama_perf_context_print:        load time =    1346.64 ms
0.14.942.538 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.942.540 I llama_perf_context_print:        eval time =   13499.35 ms /    32 runs   (  421.85 ms per token,     2.37 tokens per second)
0.14.942.541 I llama_perf_context_print:       total time =   13593.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 3994 (b9e02e81) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.024.758 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.954 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.042 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.052 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.054 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.058 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.060 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.062 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.063 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.064 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.065 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.075 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.076 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.077 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.085 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.087 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.445 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.456 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.160 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.167 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.168 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.169 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.171 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.172 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.173 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.176 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.177 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.178 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.179 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.181 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.189 I llama_model_loader: - type  f32:   37 tensors
0.00.267.193 I llama_model_loader: - type q8_0:  127 tensors
0.00.436.988 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.430 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.392 I llm_load_vocab: special tokens cache size = 5
0.00.594.414 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.480 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.481 I llm_load_print_meta: arch             = gemma
0.00.594.482 I llm_load_print_meta: vocab type       = SPM
0.00.594.483 I llm_load_print_meta: n_vocab          = 256000
0.00.594.485 I llm_load_print_meta: n_merges         = 0
0.00.594.486 I llm_load_print_meta: vocab_only       = 0
0.00.594.486 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.487 I llm_load_print_meta: n_embd           = 2048
0.00.594.487 I llm_load_print_meta: n_layer          = 18
0.00.594.550 I llm_load_print_meta: n_head           = 8
0.00.594.556 I llm_load_print_meta: n_head_kv        = 1
0.00.594.557 I llm_load_print_meta: n_rot            = 256
0.00.594.559 I llm_load_print_meta: n_swa            = 0
0.00.594.560 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.560 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.566 I llm_load_print_meta: n_gqa            = 8
0.00.594.571 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.576 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.581 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.583 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.584 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.587 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.588 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.593 I llm_load_print_meta: n_ff             = 16384
0.00.594.593 I llm_load_print_meta: n_expert         = 0
0.00.594.594 I llm_load_print_meta: n_expert_used    = 0
0.00.594.594 I llm_load_print_meta: causal attn      = 1
0.00.594.594 I llm_load_print_meta: pooling type     = 0
0.00.594.595 I llm_load_print_meta: rope type        = 2
0.00.594.607 I llm_load_print_meta: rope scaling     = linear
0.00.594.609 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.610 I llm_load_print_meta: freq_scale_train = 1
0.00.594.611 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.611 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.612 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.623 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.624 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.624 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.625 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.634 I llm_load_print_meta: model type       = 2B
0.00.594.636 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.637 I llm_load_print_meta: model params     = 2.51 B
0.00.594.638 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.638 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.639 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.639 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.640 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.640 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.641 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.642 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.656 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.658 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.659 I llm_load_print_meta: max token length = 93
0.00.693.064 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.693.075 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.693.076 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.693.077 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.693.077 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.693.078 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.698.884 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.892 I llama_new_context_with_model: n_batch    = 2048
0.00.698.892 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.893 I llama_new_context_with_model: flash_attn = 0
0.00.698.897 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.898 I llama_new_context_with_model: freq_scale = 1
0.00.730.261 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.730.300 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.418 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.538 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.542 I llama_new_context_with_model: graph nodes  = 601
0.00.733.543 I llama_new_context_with_model: graph splits = 1
0.00.733.558 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.875 I main: llama threadpool init, n_threads = 4
0.01.342.888 I 
0.01.342.996 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.999 I 
0.01.343.232 I sampler seed: 3113575784
0.01.343.244 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.252 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.253 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.253 I 
 increasively, defying logic, defying the laws of physics and morality. [end of text]


0.07.691.749 I llama_perf_sampler_print:    sampling time =      22.63 ms /    16 runs   (    1.41 ms per token,   707.09 tokens per second)
0.07.691.764 I llama_perf_context_print:        load time =    1340.00 ms
0.07.691.767 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.691.769 I llama_perf_context_print:        eval time =    6304.01 ms /    15 runs   (  420.27 ms per token,     2.38 tokens per second)
0.07.691.770 I llama_perf_context_print:       total time =    6348.89 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 3994 (b9e02e81) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
0.00.024.843 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.062 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.165 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.178 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.180 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.184 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.188 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.194 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.196 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.217 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.222 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.224 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.225 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.227 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.012 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.194 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.172 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.181 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.183 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.183 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.185 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.186 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.187 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.190 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.191 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.192 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.193 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.194 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.204 I llama_model_loader: - type  f32:   37 tensors
0.00.266.208 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.957 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.025 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.127 I llm_load_vocab: special tokens cache size = 5
0.00.617.957 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.030 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.031 I llm_load_print_meta: arch             = gemma
0.00.618.032 I llm_load_print_meta: vocab type       = SPM
0.00.618.032 I llm_load_print_meta: n_vocab          = 256000
0.00.618.035 I llm_load_print_meta: n_merges         = 0
0.00.618.035 I llm_load_print_meta: vocab_only       = 0
0.00.618.036 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.036 I llm_load_print_meta: n_embd           = 2048
0.00.618.037 I llm_load_print_meta: n_layer          = 18
0.00.618.101 I llm_load_print_meta: n_head           = 8
0.00.618.108 I llm_load_print_meta: n_head_kv        = 1
0.00.618.108 I llm_load_print_meta: n_rot            = 256
0.00.618.109 I llm_load_print_meta: n_swa            = 0
0.00.618.109 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.109 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.114 I llm_load_print_meta: n_gqa            = 8
0.00.618.119 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.125 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.126 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.128 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.128 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.129 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.130 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.135 I llm_load_print_meta: n_ff             = 16384
0.00.618.135 I llm_load_print_meta: n_expert         = 0
0.00.618.136 I llm_load_print_meta: n_expert_used    = 0
0.00.618.136 I llm_load_print_meta: causal attn      = 1
0.00.618.137 I llm_load_print_meta: pooling type     = 0
0.00.618.137 I llm_load_print_meta: rope type        = 2
0.00.618.138 I llm_load_print_meta: rope scaling     = linear
0.00.618.140 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.141 I llm_load_print_meta: freq_scale_train = 1
0.00.618.142 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.147 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.147 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.147 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.148 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.148 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.148 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.163 I llm_load_print_meta: model type       = 2B
0.00.618.165 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.166 I llm_load_print_meta: model params     = 2.51 B
0.00.618.167 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.168 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.169 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.169 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.170 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.170 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.171 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.171 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.178 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.180 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.180 I llm_load_print_meta: max token length = 93
0.00.709.875 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.709.889 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.715.648 I llama_new_context_with_model: n_ctx      = 8192
0.00.715.656 I llama_new_context_with_model: n_batch    = 2048
0.00.715.657 I llama_new_context_with_model: n_ubatch   = 512
0.00.715.657 I llama_new_context_with_model: flash_attn = 0
0.00.715.660 I llama_new_context_with_model: freq_base  = 10000.0
0.00.715.661 I llama_new_context_with_model: freq_scale = 1
0.00.745.641 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.682 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.798 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.984 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.989 I llama_new_context_with_model: graph nodes  = 601
0.00.748.989 I llama_new_context_with_model: graph splits = 1
0.00.749.004 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.362.895 I main: llama threadpool init, n_threads = 4
0.01.362.909 I 
0.01.363.023 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.028 I 
0.01.363.267 I sampler seed: 3527588106
0.01.363.279 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.287 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.363.287 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.288 I 
 increably!

I'm so excited for our trip! Can't wait to explore new places, make new memories, and have a blast.



0.14.870.578 I llama_perf_sampler_print:    sampling time =      48.00 ms /    33 runs   (    1.45 ms per token,   687.53 tokens per second)
0.14.870.583 I llama_perf_context_print:        load time =    1359.96 ms
0.14.870.585 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.870.587 I llama_perf_context_print:        eval time =   13413.72 ms /    32 runs   (  419.18 ms per token,     2.39 tokens per second)
0.14.870.590 I llama_perf_context_print:       total time =   13507.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.425s
user	3m8.816s
sys	0m9.771s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3994 (b9e02e81)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200648.23 ms
main:    total time = 200648.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 3994 (b9e02e81) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.606 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.823 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.932 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.939 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.944 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.945 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.946 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.947 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.957 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.961 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.962 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.963 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.964 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.261 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.776 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.658 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.668 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.669 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.670 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.672 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.673 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.674 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.677 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.678 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.679 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.680 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.681 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.690 I llama_model_loader: - type  f32:   37 tensors
0.00.266.694 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.695 I llama_model_loader: - type q6_K:   19 tensors
0.00.475.967 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.545.250 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.234 I llm_load_vocab: special tokens cache size = 5
0.00.646.424 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.646.494 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.646.498 I llm_load_print_meta: arch             = gemma
0.00.646.499 I llm_load_print_meta: vocab type       = SPM
0.00.646.500 I llm_load_print_meta: n_vocab          = 256000
0.00.646.503 I llm_load_print_meta: n_merges         = 0
0.00.646.503 I llm_load_print_meta: vocab_only       = 0
0.00.646.503 I llm_load_print_meta: n_ctx_train      = 8192
0.00.646.504 I llm_load_print_meta: n_embd           = 2048
0.00.646.504 I llm_load_print_meta: n_layer          = 18
0.00.646.567 I llm_load_print_meta: n_head           = 8
0.00.646.577 I llm_load_print_meta: n_head_kv        = 1
0.00.646.578 I llm_load_print_meta: n_rot            = 256
0.00.646.578 I llm_load_print_meta: n_swa            = 0
0.00.646.598 I llm_load_print_meta: n_embd_head_k    = 256
0.00.646.601 I llm_load_print_meta: n_embd_head_v    = 256
0.00.646.607 I llm_load_print_meta: n_gqa            = 8
0.00.646.612 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.646.618 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.646.620 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.646.622 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.646.632 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.646.635 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.646.636 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.646.642 I llm_load_print_meta: n_ff             = 16384
0.00.646.643 I llm_load_print_meta: n_expert         = 0
0.00.646.643 I llm_load_print_meta: n_expert_used    = 0
0.00.646.644 I llm_load_print_meta: causal attn      = 1
0.00.646.644 I llm_load_print_meta: pooling type     = 0
0.00.646.647 I llm_load_print_meta: rope type        = 2
0.00.646.647 I llm_load_print_meta: rope scaling     = linear
0.00.646.649 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.646.650 I llm_load_print_meta: freq_scale_train = 1
0.00.646.651 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.646.651 I llm_load_print_meta: rope_finetuned   = unknown
0.00.646.651 I llm_load_print_meta: ssm_d_conv       = 0
0.00.646.651 I llm_load_print_meta: ssm_d_inner      = 0
0.00.646.652 I llm_load_print_meta: ssm_d_state      = 0
0.00.646.652 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.646.652 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.646.653 I llm_load_print_meta: model type       = 2B
0.00.646.655 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.646.656 I llm_load_print_meta: model params     = 2.51 B
0.00.646.656 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.646.657 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.646.657 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.646.658 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.646.659 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.646.659 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.646.659 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.646.660 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.646.666 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.646.667 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.646.668 I llm_load_print_meta: max token length = 93
0.00.709.447 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.709.454 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.709.455 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.709.456 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.709.457 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.709.457 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.714.967 I llama_new_context_with_model: n_ctx      = 8192
0.00.714.974 I llama_new_context_with_model: n_batch    = 2048
0.00.714.975 I llama_new_context_with_model: n_ubatch   = 512
0.00.714.975 I llama_new_context_with_model: flash_attn = 0
0.00.714.978 I llama_new_context_with_model: freq_base  = 10000.0
0.00.714.979 I llama_new_context_with_model: freq_scale = 1
0.00.744.561 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.744.598 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.744.715 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.723 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.747.727 I llama_new_context_with_model: graph nodes  = 601
0.00.747.728 I llama_new_context_with_model: graph splits = 1
0.00.747.744 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.322.405 I main: llama threadpool init, n_threads = 4
0.01.322.419 I 
0.01.322.525 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.322.526 I 
0.01.322.754 I sampler seed: 1508701554
0.01.322.768 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.776 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.322.777 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.777 I 
 seconally in the sentence, "The students were excited to celebrate their victory."

This sentence uses "secondely" incorrectly. It should use "second

0.12.236.929 I llama_perf_sampler_print:    sampling time =      47.64 ms /    33 runs   (    1.44 ms per token,   692.70 tokens per second)
0.12.236.932 I llama_perf_context_print:        load time =    1319.49 ms
0.12.236.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.236.935 I llama_perf_context_print:        eval time =   10820.93 ms /    32 runs   (  338.15 ms per token,     2.96 tokens per second)
0.12.236.948 I llama_perf_context_print:       total time =   10914.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3994 (b9e02e81)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199744.75 ms
main:    total time = 199744.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 3994 (b9e02e81) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.002.831 I main: load the model and apply lora adapter, if any
0.00.024.760 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.862 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.878 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.880 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.885 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.889 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.890 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.899 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.900 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.902 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.913 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.917 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.918 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.919 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.921 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.916 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.809 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.817 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.819 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.820 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.821 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.822 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.823 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.827 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.830 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.839 I llama_model_loader: - type  f32:   37 tensors
0.00.265.842 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.843 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.491 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.811 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.737 I llm_load_vocab: special tokens cache size = 5
0.00.636.016 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.091 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.092 I llm_load_print_meta: arch             = gemma
0.00.636.093 I llm_load_print_meta: vocab type       = SPM
0.00.636.094 I llm_load_print_meta: n_vocab          = 256000
0.00.636.096 I llm_load_print_meta: n_merges         = 0
0.00.636.097 I llm_load_print_meta: vocab_only       = 0
0.00.636.097 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.098 I llm_load_print_meta: n_embd           = 2048
0.00.636.098 I llm_load_print_meta: n_layer          = 18
0.00.636.164 I llm_load_print_meta: n_head           = 8
0.00.636.170 I llm_load_print_meta: n_head_kv        = 1
0.00.636.171 I llm_load_print_meta: n_rot            = 256
0.00.636.172 I llm_load_print_meta: n_swa            = 0
0.00.636.172 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.172 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.177 I llm_load_print_meta: n_gqa            = 8
0.00.636.182 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.187 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.188 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.190 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.190 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.191 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.191 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.210 I llm_load_print_meta: n_ff             = 16384
0.00.636.211 I llm_load_print_meta: n_expert         = 0
0.00.636.212 I llm_load_print_meta: n_expert_used    = 0
0.00.636.212 I llm_load_print_meta: causal attn      = 1
0.00.636.212 I llm_load_print_meta: pooling type     = 0
0.00.636.213 I llm_load_print_meta: rope type        = 2
0.00.636.213 I llm_load_print_meta: rope scaling     = linear
0.00.636.215 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.216 I llm_load_print_meta: freq_scale_train = 1
0.00.636.216 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.217 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.217 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.217 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.217 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.218 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.218 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.219 I llm_load_print_meta: model type       = 2B
0.00.636.220 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.636.220 I llm_load_print_meta: model params     = 2.51 B
0.00.636.221 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.636.221 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.222 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.223 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.228 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.230 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.235 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.240 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.242 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.242 I llm_load_print_meta: max token length = 93
0.00.696.598 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.702.366 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.375 I llama_new_context_with_model: n_batch    = 2048
0.00.702.376 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.376 I llama_new_context_with_model: flash_attn = 0
0.00.702.380 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.381 I llama_new_context_with_model: freq_scale = 1
0.00.733.882 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.921 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.045 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.153 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.737.157 I llama_new_context_with_model: graph nodes  = 601
0.00.737.157 I llama_new_context_with_model: graph splits = 1
0.00.737.174 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.644 I main: llama threadpool init, n_threads = 4
0.01.314.657 I 
0.01.314.765 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.769 I 
0.01.315.007 I sampler seed: 285743398
0.01.315.020 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.028 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.315.029 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.315.029 I 
 maneutruely in the following sentence:

"The process of learning, which begins with gathering information and organizing it, **is** a lifelong endeavor that requires

0.12.240.082 I llama_perf_sampler_print:    sampling time =      48.08 ms /    33 runs   (    1.46 ms per token,   686.33 tokens per second)
0.12.240.085 I llama_perf_context_print:        load time =    1311.71 ms
0.12.240.086 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.240.087 I llama_perf_context_print:        eval time =   10830.99 ms /    32 runs   (  338.47 ms per token,     2.95 tokens per second)
0.12.240.088 I llama_perf_context_print:       total time =   10925.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.877s
user	50m20.877s
sys	0m6.786s
