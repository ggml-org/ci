+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.535 I build: 3945 (b9970ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.816 I main: load the model and apply lora adapter, if any
0.00.022.090 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.138 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.145 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.150 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.151 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.155 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.155 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.156 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.156 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.157 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.157 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.161 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.161 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.162 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.162 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.163 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.738 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.285 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.111 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.117 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.118 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.118 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.119 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.120 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.121 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.124 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.124 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.126 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.126 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.127 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.129 I llama_model_loader: - type  f32:   37 tensors
0.00.132.131 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.241 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.729 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.905 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.241.387 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.248.271 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.769 I llm_load_vocab: special tokens cache size = 5
0.00.269.572 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.590 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.591 I llm_load_print_meta: arch             = gemma
0.00.269.593 I llm_load_print_meta: vocab type       = SPM
0.00.269.593 I llm_load_print_meta: n_vocab          = 256000
0.00.269.594 I llm_load_print_meta: n_merges         = 0
0.00.269.594 I llm_load_print_meta: vocab_only       = 0
0.00.269.594 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.595 I llm_load_print_meta: n_embd           = 2048
0.00.269.595 I llm_load_print_meta: n_layer          = 18
0.00.269.607 I llm_load_print_meta: n_head           = 8
0.00.269.608 I llm_load_print_meta: n_head_kv        = 1
0.00.269.608 I llm_load_print_meta: n_rot            = 256
0.00.269.608 I llm_load_print_meta: n_swa            = 0
0.00.269.609 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.609 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.610 I llm_load_print_meta: n_gqa            = 8
0.00.269.612 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.613 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.614 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.616 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.617 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.617 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.618 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.619 I llm_load_print_meta: n_ff             = 16384
0.00.269.619 I llm_load_print_meta: n_expert         = 0
0.00.269.620 I llm_load_print_meta: n_expert_used    = 0
0.00.269.620 I llm_load_print_meta: causal attn      = 1
0.00.269.621 I llm_load_print_meta: pooling type     = 0
0.00.269.621 I llm_load_print_meta: rope type        = 2
0.00.269.630 I llm_load_print_meta: rope scaling     = linear
0.00.269.632 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.633 I llm_load_print_meta: freq_scale_train = 1
0.00.269.633 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.634 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.635 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.635 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.635 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.636 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.637 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.637 I llm_load_print_meta: model type       = 2B
0.00.269.651 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.653 I llm_load_print_meta: model params     = 2.51 B
0.00.269.654 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.654 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.655 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.655 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.658 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.658 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.658 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.659 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.660 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.660 I llm_load_print_meta: max token length = 93
0.00.269.679 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.368.898 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.368.907 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.368.907 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.368.908 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.368.909 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.368.909 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.373.990 I llama_new_context_with_model: n_ctx      = 8192
0.00.373.996 I llama_new_context_with_model: n_batch    = 2048
0.00.373.996 I llama_new_context_with_model: n_ubatch   = 512
0.00.373.997 I llama_new_context_with_model: flash_attn = 0
0.00.373.999 I llama_new_context_with_model: freq_base  = 10000.0
0.00.374.000 I llama_new_context_with_model: freq_scale = 1
0.00.402.783 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.402.798 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.402.892 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.759 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.403.768 I llama_new_context_with_model: graph nodes  = 601
0.00.403.768 I llama_new_context_with_model: graph splits = 1
0.00.403.770 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.396 I main: llama threadpool init, n_threads = 4
0.00.495.407 I 
0.00.495.484 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.495.487 I 
0.00.495.525 I sampler seed: 1525132192
0.00.495.533 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.536 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.495.536 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.536 I 
 increasities is a captivating and thought-provoking show that explores complex themes of identity, family, and societal expectations.

**Themes explored in the show:**



0.02.739.812 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6621.19 tokens per second)
0.02.739.816 I llama_perf_context_print:        load time =     493.56 ms
0.02.739.817 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.739.819 I llama_perf_context_print:        eval time =    2226.72 ms /    32 runs   (   69.58 ms per token,    14.37 tokens per second)
0.02.739.820 I llama_perf_context_print:       total time =    2244.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.526 I build: 3945 (b9970ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.826 I main: load the model and apply lora adapter, if any
0.00.021.991 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.003 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.010 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.011 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.016 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.017 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.018 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.018 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.019 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.019 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.023 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.024 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.024 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.025 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.025 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.590 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.910 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.739 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.746 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.747 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.748 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.749 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.750 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.751 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.754 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.755 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.756 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.756 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.757 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.761 I llama_model_loader: - type  f32:   37 tensors
0.00.131.764 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.864 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.523 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.240.788 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.244.504 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.252.094 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.662 I llm_load_vocab: special tokens cache size = 5
0.00.273.391 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.407 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.407 I llm_load_print_meta: arch             = gemma
0.00.273.408 I llm_load_print_meta: vocab type       = SPM
0.00.273.408 I llm_load_print_meta: n_vocab          = 256000
0.00.273.409 I llm_load_print_meta: n_merges         = 0
0.00.273.409 I llm_load_print_meta: vocab_only       = 0
0.00.273.409 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.410 I llm_load_print_meta: n_embd           = 2048
0.00.273.410 I llm_load_print_meta: n_layer          = 18
0.00.273.421 I llm_load_print_meta: n_head           = 8
0.00.273.422 I llm_load_print_meta: n_head_kv        = 1
0.00.273.423 I llm_load_print_meta: n_rot            = 256
0.00.273.423 I llm_load_print_meta: n_swa            = 0
0.00.273.423 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.423 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.424 I llm_load_print_meta: n_gqa            = 8
0.00.273.425 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.426 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.427 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.429 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.429 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.430 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.430 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.431 I llm_load_print_meta: n_ff             = 16384
0.00.273.431 I llm_load_print_meta: n_expert         = 0
0.00.273.431 I llm_load_print_meta: n_expert_used    = 0
0.00.273.432 I llm_load_print_meta: causal attn      = 1
0.00.273.432 I llm_load_print_meta: pooling type     = 0
0.00.273.432 I llm_load_print_meta: rope type        = 2
0.00.273.433 I llm_load_print_meta: rope scaling     = linear
0.00.273.434 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.435 I llm_load_print_meta: freq_scale_train = 1
0.00.273.435 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.435 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.436 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.437 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.437 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.437 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.437 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.438 I llm_load_print_meta: model type       = 2B
0.00.273.438 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.439 I llm_load_print_meta: model params     = 2.51 B
0.00.273.440 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.440 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.441 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.441 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.441 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.442 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.442 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.442 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.443 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.443 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.443 I llm_load_print_meta: max token length = 93
0.00.273.463 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.364.419 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.369.495 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.500 I llama_new_context_with_model: n_batch    = 2048
0.00.369.501 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.501 I llama_new_context_with_model: flash_attn = 0
0.00.369.503 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.504 I llama_new_context_with_model: freq_scale = 1
0.00.399.241 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.399.258 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.399.348 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.181 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.400.189 I llama_new_context_with_model: graph nodes  = 601
0.00.400.189 I llama_new_context_with_model: graph splits = 1
0.00.400.191 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.426 I main: llama threadpool init, n_threads = 4
0.00.489.438 I 
0.00.489.512 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.515 I 
0.00.489.553 I sampler seed: 3074271263
0.00.489.563 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.570 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.489.571 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.572 I 
 increasities and herculean efforts to achieve the impossible.

The passage describes her as a woman of immense strength and determination, capable of conquering any obstacle with

0.02.657.956 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7006.37 tokens per second)
0.02.657.958 I llama_perf_context_print:        load time =     487.58 ms
0.02.657.959 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.657.961 I llama_perf_context_print:        eval time =    2151.15 ms /    32 runs   (   67.22 ms per token,    14.88 tokens per second)
0.02.657.962 I llama_perf_context_print:       total time =    2168.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.556 I build: 3945 (b9970ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.894 I main: load the model and apply lora adapter, if any
0.00.021.974 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.022 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.032 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.037 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.038 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.043 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.044 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.044 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.045 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.045 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.046 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.049 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.050 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.051 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.051 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.052 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.669 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.541 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.439 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.445 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.446 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.447 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.447 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.448 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.449 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.452 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.452 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.453 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.454 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.455 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.460 I llama_model_loader: - type  f32:   37 tensors
0.00.132.462 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.473 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.900 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.241.138 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.244.871 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.252.334 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.875 I llm_load_vocab: special tokens cache size = 5
0.00.273.672 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.688 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.689 I llm_load_print_meta: arch             = gemma
0.00.273.690 I llm_load_print_meta: vocab type       = SPM
0.00.273.699 I llm_load_print_meta: n_vocab          = 256000
0.00.273.699 I llm_load_print_meta: n_merges         = 0
0.00.273.700 I llm_load_print_meta: vocab_only       = 0
0.00.273.700 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.700 I llm_load_print_meta: n_embd           = 2048
0.00.273.701 I llm_load_print_meta: n_layer          = 18
0.00.273.712 I llm_load_print_meta: n_head           = 8
0.00.273.714 I llm_load_print_meta: n_head_kv        = 1
0.00.273.714 I llm_load_print_meta: n_rot            = 256
0.00.273.715 I llm_load_print_meta: n_swa            = 0
0.00.273.715 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.716 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.717 I llm_load_print_meta: n_gqa            = 8
0.00.273.718 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.719 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.719 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.721 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.721 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.722 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.722 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.723 I llm_load_print_meta: n_ff             = 16384
0.00.273.724 I llm_load_print_meta: n_expert         = 0
0.00.273.724 I llm_load_print_meta: n_expert_used    = 0
0.00.273.724 I llm_load_print_meta: causal attn      = 1
0.00.273.725 I llm_load_print_meta: pooling type     = 0
0.00.273.726 I llm_load_print_meta: rope type        = 2
0.00.273.726 I llm_load_print_meta: rope scaling     = linear
0.00.273.728 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.729 I llm_load_print_meta: freq_scale_train = 1
0.00.273.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.730 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.730 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.731 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.731 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.732 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.732 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.732 I llm_load_print_meta: model type       = 2B
0.00.273.733 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.734 I llm_load_print_meta: model params     = 2.51 B
0.00.273.735 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.735 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.735 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.736 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.737 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.738 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.738 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.738 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.739 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.739 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.739 I llm_load_print_meta: max token length = 93
0.00.273.760 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.350.714 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.350.722 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.350.723 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.350.723 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.350.724 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.350.725 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.355.847 I llama_new_context_with_model: n_ctx      = 8192
0.00.355.852 I llama_new_context_with_model: n_batch    = 2048
0.00.355.853 I llama_new_context_with_model: n_ubatch   = 512
0.00.355.853 I llama_new_context_with_model: flash_attn = 0
0.00.355.856 I llama_new_context_with_model: freq_base  = 10000.0
0.00.355.857 I llama_new_context_with_model: freq_scale = 1
0.00.384.639 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.384.653 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.384.748 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.589 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.385.597 I llama_new_context_with_model: graph nodes  = 601
0.00.385.597 I llama_new_context_with_model: graph splits = 1
0.00.385.599 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.628 I main: llama threadpool init, n_threads = 4
0.00.477.642 I 
0.00.477.717 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.720 I 
0.00.477.756 I sampler seed: 380449628
0.00.477.765 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.768 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.477.769 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.770 I 
 increasities?

I am unable to find the requested information. Therefore, I am unable to provide an answer. [end of text]


0.02.170.981 I llama_perf_sampler_print:    sampling time =       3.62 ms /    25 runs   (    0.14 ms per token,  6902.26 tokens per second)
0.02.170.983 I llama_perf_context_print:        load time =     475.71 ms
0.02.170.984 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.170.985 I llama_perf_context_print:        eval time =    1678.96 ms /    24 runs   (   69.96 ms per token,    14.29 tokens per second)
0.02.170.986 I llama_perf_context_print:       total time =    1693.36 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.572 I build: 3945 (b9970ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.001.918 I main: load the model and apply lora adapter, if any
0.00.021.878 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.940 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.949 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.957 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.969 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.970 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.971 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.972 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.972 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.982 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.982 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.983 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.983 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.983 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.456 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.938 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.839 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.841 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.842 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.843 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.845 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.846 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.847 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.848 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.848 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.852 I llama_model_loader: - type  f32:   37 tensors
0.00.131.855 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.395 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.489 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.711 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.241.399 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.248.814 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.362 I llm_load_vocab: special tokens cache size = 5
0.00.270.154 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.170 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.170 I llm_load_print_meta: arch             = gemma
0.00.270.171 I llm_load_print_meta: vocab type       = SPM
0.00.270.171 I llm_load_print_meta: n_vocab          = 256000
0.00.270.172 I llm_load_print_meta: n_merges         = 0
0.00.270.172 I llm_load_print_meta: vocab_only       = 0
0.00.270.172 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.173 I llm_load_print_meta: n_embd           = 2048
0.00.270.173 I llm_load_print_meta: n_layer          = 18
0.00.270.185 I llm_load_print_meta: n_head           = 8
0.00.270.186 I llm_load_print_meta: n_head_kv        = 1
0.00.270.187 I llm_load_print_meta: n_rot            = 256
0.00.270.187 I llm_load_print_meta: n_swa            = 0
0.00.270.187 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.187 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.188 I llm_load_print_meta: n_gqa            = 8
0.00.270.189 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.190 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.191 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.192 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.193 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.193 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.193 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.194 I llm_load_print_meta: n_ff             = 16384
0.00.270.194 I llm_load_print_meta: n_expert         = 0
0.00.270.195 I llm_load_print_meta: n_expert_used    = 0
0.00.270.195 I llm_load_print_meta: causal attn      = 1
0.00.270.195 I llm_load_print_meta: pooling type     = 0
0.00.270.196 I llm_load_print_meta: rope type        = 2
0.00.270.196 I llm_load_print_meta: rope scaling     = linear
0.00.270.197 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.198 I llm_load_print_meta: freq_scale_train = 1
0.00.270.198 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.199 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.199 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.199 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.199 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.200 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.200 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.200 I llm_load_print_meta: model type       = 2B
0.00.270.201 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.201 I llm_load_print_meta: model params     = 2.51 B
0.00.270.202 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.203 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.203 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.204 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.204 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.205 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.205 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.205 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.206 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.206 I llm_load_print_meta: max token length = 93
0.00.270.225 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.340.886 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.340.892 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.345.897 I llama_new_context_with_model: n_ctx      = 8192
0.00.345.904 I llama_new_context_with_model: n_batch    = 2048
0.00.345.904 I llama_new_context_with_model: n_ubatch   = 512
0.00.345.905 I llama_new_context_with_model: flash_attn = 0
0.00.345.907 I llama_new_context_with_model: freq_base  = 10000.0
0.00.345.908 I llama_new_context_with_model: freq_scale = 1
0.00.374.479 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.374.494 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.374.584 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.465 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.375.474 I llama_new_context_with_model: graph nodes  = 601
0.00.375.474 I llama_new_context_with_model: graph splits = 1
0.00.375.476 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.451 I main: llama threadpool init, n_threads = 4
0.00.471.464 I 
0.00.471.556 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.561 I 
0.00.471.603 I sampler seed: 3434716702
0.00.471.613 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.620 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.471.621 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.623 I 
 increamically in complexity.

**What is the process of increasing the complexity of a system?**

**a) Adding new features**
**b)

0.02.896.304 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6691.00 tokens per second)
0.02.896.306 I llama_perf_context_print:        load time =     469.51 ms
0.02.896.307 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.896.309 I llama_perf_context_print:        eval time =    2405.76 ms /    32 runs   (   75.18 ms per token,    13.30 tokens per second)
0.02.896.310 I llama_perf_context_print:       total time =    2424.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.967s
user	0m37.008s
sys	0m9.390s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3945 (b9970ff2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31996.52 ms
main:    total time = 31996.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 3945 (b9970ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.001.848 I main: load the model and apply lora adapter, if any
0.00.022.273 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.320 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.328 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.337 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.345 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.345 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.346 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.347 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.348 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.348 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.351 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.353 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.353 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.354 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.354 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.871 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.502 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.327 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.333 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.334 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.335 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.335 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.336 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.337 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.339 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.339 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.341 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.341 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.342 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.344 I llama_model_loader: - type  f32:   37 tensors
0.00.132.346 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.347 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.985 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.934 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.241.132 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.244.718 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.251.936 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.468 I llm_load_vocab: special tokens cache size = 5
0.00.273.402 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.416 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.417 I llm_load_print_meta: arch             = gemma
0.00.273.418 I llm_load_print_meta: vocab type       = SPM
0.00.273.418 I llm_load_print_meta: n_vocab          = 256000
0.00.273.419 I llm_load_print_meta: n_merges         = 0
0.00.273.419 I llm_load_print_meta: vocab_only       = 0
0.00.273.420 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.420 I llm_load_print_meta: n_embd           = 2048
0.00.273.420 I llm_load_print_meta: n_layer          = 18
0.00.273.431 I llm_load_print_meta: n_head           = 8
0.00.273.432 I llm_load_print_meta: n_head_kv        = 1
0.00.273.432 I llm_load_print_meta: n_rot            = 256
0.00.273.433 I llm_load_print_meta: n_swa            = 0
0.00.273.433 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.433 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.434 I llm_load_print_meta: n_gqa            = 8
0.00.273.435 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.436 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.437 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.438 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.438 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.439 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.439 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.440 I llm_load_print_meta: n_ff             = 16384
0.00.273.440 I llm_load_print_meta: n_expert         = 0
0.00.273.440 I llm_load_print_meta: n_expert_used    = 0
0.00.273.441 I llm_load_print_meta: causal attn      = 1
0.00.273.441 I llm_load_print_meta: pooling type     = 0
0.00.273.441 I llm_load_print_meta: rope type        = 2
0.00.273.442 I llm_load_print_meta: rope scaling     = linear
0.00.273.443 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.444 I llm_load_print_meta: freq_scale_train = 1
0.00.273.444 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.444 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.445 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.445 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.445 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.445 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.446 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.446 I llm_load_print_meta: model type       = 2B
0.00.273.447 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.448 I llm_load_print_meta: model params     = 2.51 B
0.00.273.449 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.449 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.449 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.450 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.450 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.450 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.451 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.451 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.451 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.452 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.452 I llm_load_print_meta: max token length = 93
0.00.273.471 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.332.808 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.332.814 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.332.815 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.332.816 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.332.816 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.332.817 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.338.608 I llama_new_context_with_model: n_ctx      = 8192
0.00.338.614 I llama_new_context_with_model: n_batch    = 2048
0.00.338.615 I llama_new_context_with_model: n_ubatch   = 512
0.00.338.615 I llama_new_context_with_model: flash_attn = 0
0.00.338.617 I llama_new_context_with_model: freq_base  = 10000.0
0.00.338.618 I llama_new_context_with_model: freq_scale = 1
0.00.368.724 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.368.738 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.368.835 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.750 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.369.759 I llama_new_context_with_model: graph nodes  = 601
0.00.369.759 I llama_new_context_with_model: graph splits = 1
0.00.369.761 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.134 I main: llama threadpool init, n_threads = 4
0.00.451.146 I 
0.00.451.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.223 I 
0.00.451.259 I sampler seed: 2468099584
0.00.451.268 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.271 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.451.272 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.272 I 
 seconally, and in that order. [end of text]


0.00.903.105 I llama_perf_sampler_print:    sampling time =       1.45 ms /    10 runs   (    0.15 ms per token,  6891.80 tokens per second)
0.00.903.108 I llama_perf_context_print:        load time =     449.26 ms
0.00.903.109 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.903.111 I llama_perf_context_print:        eval time =     445.69 ms /     9 runs   (   49.52 ms per token,    20.19 tokens per second)
0.00.903.111 I llama_perf_context_print:       total time =     451.98 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3945 (b9970ff2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32102.63 ms
main:    total time = 32102.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.537 I build: 3945 (b9970ff2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.859 I main: load the model and apply lora adapter, if any
0.00.022.029 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.040 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.047 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.048 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.051 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.052 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.052 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.053 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.053 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.054 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.057 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.058 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.059 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.059 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.060 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.252 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.005 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.222 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.228 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.228 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.229 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.230 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.231 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.231 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.234 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.234 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.237 I llama_model_loader: - type  f32:   37 tensors
0.00.134.240 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.241 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.006 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.115 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.244.339 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.248.000 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.255.375 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.914 I llm_load_vocab: special tokens cache size = 5
0.00.276.833 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.850 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.851 I llm_load_print_meta: arch             = gemma
0.00.276.852 I llm_load_print_meta: vocab type       = SPM
0.00.276.852 I llm_load_print_meta: n_vocab          = 256000
0.00.276.853 I llm_load_print_meta: n_merges         = 0
0.00.276.853 I llm_load_print_meta: vocab_only       = 0
0.00.276.853 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.854 I llm_load_print_meta: n_embd           = 2048
0.00.276.854 I llm_load_print_meta: n_layer          = 18
0.00.276.867 I llm_load_print_meta: n_head           = 8
0.00.276.868 I llm_load_print_meta: n_head_kv        = 1
0.00.276.868 I llm_load_print_meta: n_rot            = 256
0.00.276.869 I llm_load_print_meta: n_swa            = 0
0.00.276.869 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.869 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.870 I llm_load_print_meta: n_gqa            = 8
0.00.276.871 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.872 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.873 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.875 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.875 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.876 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.876 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.877 I llm_load_print_meta: n_ff             = 16384
0.00.276.877 I llm_load_print_meta: n_expert         = 0
0.00.276.877 I llm_load_print_meta: n_expert_used    = 0
0.00.276.877 I llm_load_print_meta: causal attn      = 1
0.00.276.878 I llm_load_print_meta: pooling type     = 0
0.00.276.878 I llm_load_print_meta: rope type        = 2
0.00.276.879 I llm_load_print_meta: rope scaling     = linear
0.00.276.881 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.881 I llm_load_print_meta: freq_scale_train = 1
0.00.276.882 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.882 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.882 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.883 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.883 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.883 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.883 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.884 I llm_load_print_meta: model type       = 2B
0.00.276.884 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.885 I llm_load_print_meta: model params     = 2.51 B
0.00.276.886 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.886 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.886 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.887 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.887 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.888 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.888 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.889 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.889 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.889 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.890 I llm_load_print_meta: max token length = 93
0.00.276.909 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.333.727 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.338.822 I llama_new_context_with_model: n_ctx      = 8192
0.00.338.829 I llama_new_context_with_model: n_batch    = 2048
0.00.338.829 I llama_new_context_with_model: n_ubatch   = 512
0.00.338.830 I llama_new_context_with_model: flash_attn = 0
0.00.338.832 I llama_new_context_with_model: freq_base  = 10000.0
0.00.338.833 I llama_new_context_with_model: freq_scale = 1
0.00.367.765 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.367.780 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.367.882 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.763 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.368.769 I llama_new_context_with_model: graph nodes  = 601
0.00.368.769 I llama_new_context_with_model: graph splits = 1
0.00.368.771 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.444 I main: llama threadpool init, n_threads = 4
0.00.449.456 I 
0.00.449.534 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.537 I 
0.00.449.574 I sampler seed: 570122471
0.00.449.583 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.586 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.449.587 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.587 I 
 seconded with a nervous giggle. "I can't believe I actually said that."

The other girls in the room chuckled. "It's okay

0.02.043.448 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6476.94 tokens per second)
0.02.043.450 I llama_perf_context_print:        load time =     447.56 ms
0.02.043.451 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.043.452 I llama_perf_context_print:        eval time =    1575.87 ms /    32 runs   (   49.25 ms per token,    20.31 tokens per second)
0.02.043.453 I llama_perf_context_print:       total time =    1594.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.108s
user	8m9.731s
sys	0m7.012s
