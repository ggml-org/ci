+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4381 (b92a14a8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.356 I main: llama backend init
0.00.000.362 I main: load the model and apply lora adapter, if any
0.00.020.763 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.773 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.784 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.788 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.792 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.795 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.796 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.797 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.798 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.798 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.798 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.803 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.803 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.812 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.813 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.813 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.468 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.336 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.589 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.595 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.596 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.596 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.597 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.598 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.599 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.602 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.603 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.604 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.604 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.605 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.608 I llama_model_loader: - type  f32:   37 tensors
0.00.130.609 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.684 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.389 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.941 I llm_load_vocab: special tokens cache size = 5
0.00.264.900 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.915 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.916 I llm_load_print_meta: arch             = gemma
0.00.264.916 I llm_load_print_meta: vocab type       = SPM
0.00.264.917 I llm_load_print_meta: n_vocab          = 256000
0.00.264.917 I llm_load_print_meta: n_merges         = 0
0.00.264.918 I llm_load_print_meta: vocab_only       = 0
0.00.264.918 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.918 I llm_load_print_meta: n_embd           = 2048
0.00.264.918 I llm_load_print_meta: n_layer          = 18
0.00.264.930 I llm_load_print_meta: n_head           = 8
0.00.264.932 I llm_load_print_meta: n_head_kv        = 1
0.00.264.932 I llm_load_print_meta: n_rot            = 256
0.00.264.933 I llm_load_print_meta: n_swa            = 0
0.00.264.933 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.934 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.935 I llm_load_print_meta: n_gqa            = 8
0.00.264.936 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.937 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.938 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.940 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.940 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.941 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.941 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.942 I llm_load_print_meta: n_ff             = 16384
0.00.264.942 I llm_load_print_meta: n_expert         = 0
0.00.264.942 I llm_load_print_meta: n_expert_used    = 0
0.00.264.943 I llm_load_print_meta: causal attn      = 1
0.00.264.946 I llm_load_print_meta: pooling type     = 0
0.00.264.946 I llm_load_print_meta: rope type        = 2
0.00.264.946 I llm_load_print_meta: rope scaling     = linear
0.00.264.948 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.949 I llm_load_print_meta: freq_scale_train = 1
0.00.264.950 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.950 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.950 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.951 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.951 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.952 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.952 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.953 I llm_load_print_meta: model type       = 2B
0.00.264.954 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.955 I llm_load_print_meta: model params     = 2.51 B
0.00.264.957 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.957 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.958 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.958 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.959 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.959 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.960 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.961 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.961 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.962 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.962 I llm_load_print_meta: max token length = 93
0.00.365.200 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.208 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.209 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.209 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.210 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.210 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.418 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.425 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.425 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.426 I llama_new_context_with_model: n_batch       = 2048
0.00.370.426 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.427 I llama_new_context_with_model: flash_attn    = 0
0.00.370.430 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.431 I llama_new_context_with_model: freq_scale    = 1
0.00.370.432 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.455 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.385.395 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.408 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.842 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.848 I llama_new_context_with_model: graph nodes  = 601
0.00.386.849 I llama_new_context_with_model: graph splits = 1
0.00.386.852 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.386.852 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.595 I main: llama threadpool init, n_threads = 4
0.00.474.610 I 
0.00.474.684 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.687 I 
0.00.474.729 I sampler seed: 1087204864
0.00.474.742 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.755 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.759 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.759 I 
 increasities as the primary mode of evolution. [end of text]


0.01.177.705 I llama_perf_sampler_print:    sampling time =       1.72 ms /    11 runs   (    0.16 ms per token,  6384.21 tokens per second)
0.01.177.707 I llama_perf_context_print:        load time =     474.22 ms
0.01.177.708 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.177.710 I llama_perf_context_print:        eval time =     695.95 ms /    10 runs   (   69.59 ms per token,    14.37 tokens per second)
0.01.177.710 I llama_perf_context_print:       total time =     703.12 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.536 I build: 4381 (b92a14a8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.072 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.090 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.100 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.104 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.109 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.110 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.110 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.111 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.111 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.115 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.115 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.116 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.117 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.118 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.629 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.759 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.627 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.635 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.636 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.637 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.638 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.638 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.641 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.642 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.642 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.643 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.644 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.648 I llama_model_loader: - type  f32:   37 tensors
0.00.130.649 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.807 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.927 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.450 I llm_load_vocab: special tokens cache size = 5
0.00.270.202 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.221 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.221 I llm_load_print_meta: arch             = gemma
0.00.270.222 I llm_load_print_meta: vocab type       = SPM
0.00.270.222 I llm_load_print_meta: n_vocab          = 256000
0.00.270.223 I llm_load_print_meta: n_merges         = 0
0.00.270.223 I llm_load_print_meta: vocab_only       = 0
0.00.270.223 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.224 I llm_load_print_meta: n_embd           = 2048
0.00.270.224 I llm_load_print_meta: n_layer          = 18
0.00.270.234 I llm_load_print_meta: n_head           = 8
0.00.270.235 I llm_load_print_meta: n_head_kv        = 1
0.00.270.235 I llm_load_print_meta: n_rot            = 256
0.00.270.235 I llm_load_print_meta: n_swa            = 0
0.00.270.236 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.236 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.237 I llm_load_print_meta: n_gqa            = 8
0.00.270.238 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.239 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.240 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.241 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.242 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.242 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.242 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.243 I llm_load_print_meta: n_ff             = 16384
0.00.270.243 I llm_load_print_meta: n_expert         = 0
0.00.270.244 I llm_load_print_meta: n_expert_used    = 0
0.00.270.244 I llm_load_print_meta: causal attn      = 1
0.00.270.244 I llm_load_print_meta: pooling type     = 0
0.00.270.244 I llm_load_print_meta: rope type        = 2
0.00.270.245 I llm_load_print_meta: rope scaling     = linear
0.00.270.246 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.247 I llm_load_print_meta: freq_scale_train = 1
0.00.270.247 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.248 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.248 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.248 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.248 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.248 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.249 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.249 I llm_load_print_meta: model type       = 2B
0.00.270.249 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.250 I llm_load_print_meta: model params     = 2.51 B
0.00.270.251 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.251 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.252 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.252 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.253 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.253 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.253 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.254 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.254 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.254 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.255 I llm_load_print_meta: max token length = 93
0.00.366.562 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.670 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.677 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.677 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.677 I llama_new_context_with_model: n_batch       = 2048
0.00.371.678 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.678 I llama_new_context_with_model: flash_attn    = 0
0.00.371.680 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.681 I llama_new_context_with_model: freq_scale    = 1
0.00.371.682 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.701 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.386.603 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.616 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.713 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.990 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.996 I llama_new_context_with_model: graph nodes  = 601
0.00.387.996 I llama_new_context_with_model: graph splits = 1
0.00.387.999 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.000 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.029 I main: llama threadpool init, n_threads = 4
0.00.469.046 I 
0.00.469.119 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.123 I 
0.00.469.163 I sampler seed: 1697539323
0.00.469.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.186 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.190 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.190 I 
 increably.

I am not sure how to express my feelings.
I am feeling lost and alone.
I long for connection and support.

What

0.02.654.675 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6023.00 tokens per second)
0.02.654.678 I llama_perf_context_print:        load time =     468.27 ms
0.02.654.679 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.654.680 I llama_perf_context_print:        eval time =    2165.90 ms /    32 runs   (   67.68 ms per token,    14.77 tokens per second)
0.02.654.681 I llama_perf_context_print:       total time =    2185.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.170 I build: 4381 (b92a14a8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.370 I main: llama backend init
0.00.000.376 I main: load the model and apply lora adapter, if any
0.00.020.397 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.407 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.418 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.423 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.425 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.428 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.430 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.431 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.431 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.432 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.432 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.436 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.437 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.437 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.438 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.439 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.711 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.162 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.330 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.334 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.335 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.336 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.336 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.337 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.338 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.340 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.340 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.341 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.341 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.342 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.345 I llama_model_loader: - type  f32:   37 tensors
0.00.131.347 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.626 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.815 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.405 I llm_load_vocab: special tokens cache size = 5
0.00.274.270 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.288 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.288 I llm_load_print_meta: arch             = gemma
0.00.274.289 I llm_load_print_meta: vocab type       = SPM
0.00.274.290 I llm_load_print_meta: n_vocab          = 256000
0.00.274.290 I llm_load_print_meta: n_merges         = 0
0.00.274.290 I llm_load_print_meta: vocab_only       = 0
0.00.274.291 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.291 I llm_load_print_meta: n_embd           = 2048
0.00.274.291 I llm_load_print_meta: n_layer          = 18
0.00.274.302 I llm_load_print_meta: n_head           = 8
0.00.274.303 I llm_load_print_meta: n_head_kv        = 1
0.00.274.304 I llm_load_print_meta: n_rot            = 256
0.00.274.304 I llm_load_print_meta: n_swa            = 0
0.00.274.305 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.305 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.306 I llm_load_print_meta: n_gqa            = 8
0.00.274.307 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.308 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.309 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.310 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.311 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.311 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.311 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.312 I llm_load_print_meta: n_ff             = 16384
0.00.274.313 I llm_load_print_meta: n_expert         = 0
0.00.274.313 I llm_load_print_meta: n_expert_used    = 0
0.00.274.313 I llm_load_print_meta: causal attn      = 1
0.00.274.314 I llm_load_print_meta: pooling type     = 0
0.00.274.315 I llm_load_print_meta: rope type        = 2
0.00.274.315 I llm_load_print_meta: rope scaling     = linear
0.00.274.317 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.317 I llm_load_print_meta: freq_scale_train = 1
0.00.274.318 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.318 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.318 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.319 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.319 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.319 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.319 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.320 I llm_load_print_meta: model type       = 2B
0.00.274.320 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.321 I llm_load_print_meta: model params     = 2.51 B
0.00.274.322 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.322 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.323 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.323 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.324 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.325 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.325 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.326 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.326 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.327 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.327 I llm_load_print_meta: max token length = 93
0.00.352.095 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.352.104 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.105 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.352.105 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.352.106 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.106 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.357.315 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.324 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.324 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.325 I llama_new_context_with_model: n_batch       = 2048
0.00.357.325 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.326 I llama_new_context_with_model: flash_attn    = 0
0.00.357.329 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.330 I llama_new_context_with_model: freq_scale    = 1
0.00.357.331 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.354 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.373.246 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.259 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.359 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.686 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.693 I llama_new_context_with_model: graph nodes  = 601
0.00.374.693 I llama_new_context_with_model: graph splits = 1
0.00.374.696 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.374.696 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.113 I main: llama threadpool init, n_threads = 4
0.00.463.129 I 
0.00.463.204 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.207 I 
0.00.463.248 I sampler seed: 1305936670
0.00.463.259 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.263 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.263 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.263 I 
 increamically. [end of text]


0.00.747.560 I llama_perf_sampler_print:    sampling time =       0.71 ms /     5 runs   (    0.14 ms per token,  7052.19 tokens per second)
0.00.747.562 I llama_perf_context_print:        load time =     462.72 ms
0.00.747.563 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.747.564 I llama_perf_context_print:        eval time =     281.26 ms /     4 runs   (   70.32 ms per token,    14.22 tokens per second)
0.00.747.565 I llama_perf_context_print:       total time =     284.45 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.466 I build: 4381 (b92a14a8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.657 I main: llama backend init
0.00.000.663 I main: load the model and apply lora adapter, if any
0.00.021.298 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.308 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.323 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.333 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.336 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.341 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.342 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.342 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.343 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.343 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.344 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.348 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.348 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.349 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.349 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.350 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.403 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.930 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.765 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.771 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.773 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.773 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.774 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.775 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.776 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.780 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.781 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.782 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.782 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.783 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.787 I llama_model_loader: - type  f32:   37 tensors
0.00.130.788 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.894 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.749 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.298 I llm_load_vocab: special tokens cache size = 5
0.00.270.948 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.963 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.964 I llm_load_print_meta: arch             = gemma
0.00.270.964 I llm_load_print_meta: vocab type       = SPM
0.00.270.965 I llm_load_print_meta: n_vocab          = 256000
0.00.270.965 I llm_load_print_meta: n_merges         = 0
0.00.270.966 I llm_load_print_meta: vocab_only       = 0
0.00.270.966 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.966 I llm_load_print_meta: n_embd           = 2048
0.00.270.967 I llm_load_print_meta: n_layer          = 18
0.00.270.978 I llm_load_print_meta: n_head           = 8
0.00.270.979 I llm_load_print_meta: n_head_kv        = 1
0.00.270.980 I llm_load_print_meta: n_rot            = 256
0.00.270.980 I llm_load_print_meta: n_swa            = 0
0.00.270.980 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.980 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.981 I llm_load_print_meta: n_gqa            = 8
0.00.270.983 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.984 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.984 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.986 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.986 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.986 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.987 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.987 I llm_load_print_meta: n_ff             = 16384
0.00.270.988 I llm_load_print_meta: n_expert         = 0
0.00.270.988 I llm_load_print_meta: n_expert_used    = 0
0.00.270.989 I llm_load_print_meta: causal attn      = 1
0.00.270.989 I llm_load_print_meta: pooling type     = 0
0.00.270.989 I llm_load_print_meta: rope type        = 2
0.00.270.990 I llm_load_print_meta: rope scaling     = linear
0.00.270.991 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.992 I llm_load_print_meta: freq_scale_train = 1
0.00.270.992 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.993 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.993 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.993 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.993 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.994 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.994 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.994 I llm_load_print_meta: model type       = 2B
0.00.270.995 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.996 I llm_load_print_meta: model params     = 2.51 B
0.00.270.997 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.997 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.998 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.998 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.998 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.999 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.999 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.000 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.000 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.000 I llm_load_print_meta: max token length = 93
0.00.341.713 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.719 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.929 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.936 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.936 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.937 I llama_new_context_with_model: n_batch       = 2048
0.00.346.937 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.938 I llama_new_context_with_model: flash_attn    = 0
0.00.346.940 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.941 I llama_new_context_with_model: freq_scale    = 1
0.00.346.942 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.962 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.361.211 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.227 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.330 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.629 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.635 I llama_new_context_with_model: graph nodes  = 601
0.00.362.636 I llama_new_context_with_model: graph splits = 1
0.00.362.638 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.362.638 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.532 I main: llama threadpool init, n_threads = 4
0.00.449.548 I 
0.00.449.631 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.449.634 I 
0.00.449.686 I sampler seed: 3651011656
0.00.449.699 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.705 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.706 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.707 I 
 increamically. 

I apologize, but I am unable to generate text that is sexually suggestive in nature. My purpose is to assist with tasks and questions that

0.02.844.625 I llama_perf_sampler_print:    sampling time =       5.74 ms /    33 runs   (    0.17 ms per token,  5754.14 tokens per second)
0.02.844.628 I llama_perf_context_print:        load time =     448.85 ms
0.02.844.629 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.844.631 I llama_perf_context_print:        eval time =    2375.58 ms /    32 runs   (   74.24 ms per token,    13.47 tokens per second)
0.02.844.632 I llama_perf_context_print:       total time =    2395.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.937s
user	0m25.144s
sys	0m9.428s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4381 (b92a14a8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40242.84 ms
main:    total time = 40242.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4381 (b92a14a8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.020.965 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.973 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.986 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.993 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.994 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.998 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.001 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.002 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.002 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.003 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.003 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.006 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.007 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.008 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.009 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.609 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.559 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.315 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.320 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.321 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.322 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.323 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.324 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.324 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.326 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.327 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.328 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.328 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.329 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.331 I llama_model_loader: - type  f32:   37 tensors
0.00.130.332 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.333 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.627 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.401 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.852 I llm_load_vocab: special tokens cache size = 5
0.00.262.665 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.681 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.682 I llm_load_print_meta: arch             = gemma
0.00.262.682 I llm_load_print_meta: vocab type       = SPM
0.00.262.683 I llm_load_print_meta: n_vocab          = 256000
0.00.262.683 I llm_load_print_meta: n_merges         = 0
0.00.262.683 I llm_load_print_meta: vocab_only       = 0
0.00.262.684 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.684 I llm_load_print_meta: n_embd           = 2048
0.00.262.684 I llm_load_print_meta: n_layer          = 18
0.00.262.696 I llm_load_print_meta: n_head           = 8
0.00.262.697 I llm_load_print_meta: n_head_kv        = 1
0.00.262.697 I llm_load_print_meta: n_rot            = 256
0.00.262.698 I llm_load_print_meta: n_swa            = 0
0.00.262.698 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.698 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.699 I llm_load_print_meta: n_gqa            = 8
0.00.262.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.701 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.702 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.703 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.704 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.704 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.704 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.705 I llm_load_print_meta: n_ff             = 16384
0.00.262.705 I llm_load_print_meta: n_expert         = 0
0.00.262.706 I llm_load_print_meta: n_expert_used    = 0
0.00.262.706 I llm_load_print_meta: causal attn      = 1
0.00.262.706 I llm_load_print_meta: pooling type     = 0
0.00.262.707 I llm_load_print_meta: rope type        = 2
0.00.262.707 I llm_load_print_meta: rope scaling     = linear
0.00.262.708 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.709 I llm_load_print_meta: freq_scale_train = 1
0.00.262.709 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.709 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.710 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.710 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.710 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.710 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.710 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.711 I llm_load_print_meta: model type       = 2B
0.00.262.711 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.712 I llm_load_print_meta: model params     = 2.51 B
0.00.262.713 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.714 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.714 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.714 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.715 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.715 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.715 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.716 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.716 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.716 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.716 I llm_load_print_meta: max token length = 93
0.00.323.843 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.851 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.851 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.852 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.852 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.853 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.897 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.904 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.904 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.905 I llama_new_context_with_model: n_batch       = 2048
0.00.328.905 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.906 I llama_new_context_with_model: flash_attn    = 0
0.00.328.908 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.909 I llama_new_context_with_model: freq_scale    = 1
0.00.328.910 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.328.928 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.342.996 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.009 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.098 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.340 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.345 I llama_new_context_with_model: graph nodes  = 601
0.00.344.345 I llama_new_context_with_model: graph splits = 1
0.00.344.347 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.348 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.474 I main: llama threadpool init, n_threads = 4
0.00.419.489 I 
0.00.419.565 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.568 I 
0.00.419.611 I sampler seed: 2235439002
0.00.419.621 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.628 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.631 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.632 I 
 increasities and other forms of sexual harassment can have devastating consequences for victims.

**1. Emotional Trauma**

* Sexual harassment can cause feelings of shame,

0.02.017.151 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6014.22 tokens per second)
0.02.017.154 I llama_perf_context_print:        load time =     418.72 ms
0.02.017.155 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.017.156 I llama_perf_context_print:        eval time =    1578.84 ms /    32 runs   (   49.34 ms per token,    20.27 tokens per second)
0.02.017.157 I llama_perf_context_print:       total time =    1597.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4381 (b92a14a8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40204.89 ms
main:    total time = 40204.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.582 I build: 4381 (b92a14a8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.841 I main: llama backend init
0.00.000.848 I main: load the model and apply lora adapter, if any
0.00.021.047 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.060 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.070 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.073 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.077 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.078 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.078 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.079 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.079 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.080 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.084 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.085 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.085 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.086 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.614 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.719 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.893 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.900 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.901 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.901 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.902 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.903 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.904 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.906 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.906 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.910 I llama_model_loader: - type  f32:   37 tensors
0.00.130.911 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.911 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.346 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.314 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.788 I llm_load_vocab: special tokens cache size = 5
0.00.264.464 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.480 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.480 I llm_load_print_meta: arch             = gemma
0.00.264.481 I llm_load_print_meta: vocab type       = SPM
0.00.264.481 I llm_load_print_meta: n_vocab          = 256000
0.00.264.482 I llm_load_print_meta: n_merges         = 0
0.00.264.482 I llm_load_print_meta: vocab_only       = 0
0.00.264.482 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.483 I llm_load_print_meta: n_embd           = 2048
0.00.264.483 I llm_load_print_meta: n_layer          = 18
0.00.264.494 I llm_load_print_meta: n_head           = 8
0.00.264.495 I llm_load_print_meta: n_head_kv        = 1
0.00.264.495 I llm_load_print_meta: n_rot            = 256
0.00.264.496 I llm_load_print_meta: n_swa            = 0
0.00.264.496 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.496 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.497 I llm_load_print_meta: n_gqa            = 8
0.00.264.498 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.499 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.500 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.501 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.501 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.502 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.502 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.503 I llm_load_print_meta: n_ff             = 16384
0.00.264.503 I llm_load_print_meta: n_expert         = 0
0.00.264.503 I llm_load_print_meta: n_expert_used    = 0
0.00.264.504 I llm_load_print_meta: causal attn      = 1
0.00.264.504 I llm_load_print_meta: pooling type     = 0
0.00.264.504 I llm_load_print_meta: rope type        = 2
0.00.264.505 I llm_load_print_meta: rope scaling     = linear
0.00.264.506 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.506 I llm_load_print_meta: freq_scale_train = 1
0.00.264.507 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.507 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.507 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.507 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.508 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.508 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.508 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.509 I llm_load_print_meta: model type       = 2B
0.00.264.509 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.510 I llm_load_print_meta: model params     = 2.51 B
0.00.264.511 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.511 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.511 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.512 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.512 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.513 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.513 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.513 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.514 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.514 I llm_load_print_meta: max token length = 93
0.00.322.827 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.770 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.776 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.777 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.777 I llama_new_context_with_model: n_batch       = 2048
0.00.327.778 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.778 I llama_new_context_with_model: flash_attn    = 0
0.00.327.780 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.781 I llama_new_context_with_model: freq_scale    = 1
0.00.327.782 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.327.800 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.342.231 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.245 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.330 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.544 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.551 I llama_new_context_with_model: graph nodes  = 601
0.00.343.551 I llama_new_context_with_model: graph splits = 1
0.00.343.553 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.343.554 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.172 I main: llama threadpool init, n_threads = 4
0.00.417.185 I 
0.00.417.259 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.417.262 I 
0.00.417.304 I sampler seed: 2620919132
0.00.417.315 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.318 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.318 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.319 I 
 increasities of the COVID-19 pandemic, the need for a comprehensive and coordinated approach to managing the outbreak is evident.

**a) Discuss the challenges

0.01.981.364 I llama_perf_sampler_print:    sampling time =       5.59 ms /    33 runs   (    0.17 ms per token,  5905.51 tokens per second)
0.01.981.366 I llama_perf_context_print:        load time =     416.30 ms
0.01.981.367 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.981.369 I llama_perf_context_print:        eval time =    1544.85 ms /    32 runs   (   48.28 ms per token,    20.71 tokens per second)
0.01.981.369 I llama_perf_context_print:       total time =    1564.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.234s
user	10m23.904s
sys	0m7.101s
