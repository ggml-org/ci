+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.521 I build: 4102 (d82c9bb8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.021.097 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.105 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.113 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.117 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.119 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.123 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.123 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.124 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.124 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.125 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.125 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.129 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.129 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.130 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.131 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.131 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.282 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.539 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.392 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.399 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.399 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.400 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.400 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.401 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.402 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.404 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.405 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.405 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.406 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.406 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.411 I llama_model_loader: - type  f32:   37 tensors
0.00.130.411 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.692 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.954 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.488 I llm_load_vocab: special tokens cache size = 5
0.00.264.748 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.765 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.765 I llm_load_print_meta: arch             = gemma
0.00.264.766 I llm_load_print_meta: vocab type       = SPM
0.00.264.767 I llm_load_print_meta: n_vocab          = 256000
0.00.264.767 I llm_load_print_meta: n_merges         = 0
0.00.264.768 I llm_load_print_meta: vocab_only       = 0
0.00.264.768 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.769 I llm_load_print_meta: n_embd           = 2048
0.00.264.769 I llm_load_print_meta: n_layer          = 18
0.00.264.780 I llm_load_print_meta: n_head           = 8
0.00.264.781 I llm_load_print_meta: n_head_kv        = 1
0.00.264.781 I llm_load_print_meta: n_rot            = 256
0.00.264.781 I llm_load_print_meta: n_swa            = 0
0.00.264.782 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.782 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.783 I llm_load_print_meta: n_gqa            = 8
0.00.264.784 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.785 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.786 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.787 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.787 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.788 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.788 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.789 I llm_load_print_meta: n_ff             = 16384
0.00.264.789 I llm_load_print_meta: n_expert         = 0
0.00.264.789 I llm_load_print_meta: n_expert_used    = 0
0.00.264.790 I llm_load_print_meta: causal attn      = 1
0.00.264.790 I llm_load_print_meta: pooling type     = 0
0.00.264.791 I llm_load_print_meta: rope type        = 2
0.00.264.791 I llm_load_print_meta: rope scaling     = linear
0.00.264.793 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.793 I llm_load_print_meta: freq_scale_train = 1
0.00.264.793 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.794 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.794 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.794 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.794 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.795 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.795 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.795 I llm_load_print_meta: model type       = 2B
0.00.264.796 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.797 I llm_load_print_meta: model params     = 2.51 B
0.00.264.798 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.798 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.799 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.799 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.800 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.800 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.801 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.801 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.801 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.802 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.802 I llm_load_print_meta: max token length = 93
0.00.364.118 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.126 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.127 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.128 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.129 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.129 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.422 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.428 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.429 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.429 I llama_new_context_with_model: n_batch       = 2048
0.00.369.429 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.430 I llama_new_context_with_model: flash_attn    = 0
0.00.369.432 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.433 I llama_new_context_with_model: freq_scale    = 1
0.00.369.433 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.497 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.525 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.616 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.942 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.949 I llama_new_context_with_model: graph nodes  = 601
0.00.384.949 I llama_new_context_with_model: graph splits = 1
0.00.384.951 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.316 I main: llama threadpool init, n_threads = 4
0.00.470.332 I 
0.00.470.408 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.410 I 
0.00.470.456 I sampler seed: 1397580535
0.00.470.467 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.470 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.471 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.472 I 
 seconally.

The question is: Explain why the statement "the Earth revolves around the Sun" is incorrect.

The answer should explain that the Earth'

0.02.721.647 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6550.22 tokens per second)
0.02.721.649 I llama_perf_context_print:        load time =     469.55 ms
0.02.721.650 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.652 I llama_perf_context_print:        eval time =    2231.94 ms /    32 runs   (   69.75 ms per token,    14.34 tokens per second)
0.02.721.652 I llama_perf_context_print:       total time =    2251.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.586 I build: 4102 (d82c9bb8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.000.792 I main: load the model and apply lora adapter, if any
0.00.021.257 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.271 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.282 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.286 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.289 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.290 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.291 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.292 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.293 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.293 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.297 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.298 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.298 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.299 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.299 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.697 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.457 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.277 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.284 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.284 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.285 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.287 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.288 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.290 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.291 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.292 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.293 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.294 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.297 I llama_model_loader: - type  f32:   37 tensors
0.00.130.298 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.053 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.256 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.756 I llm_load_vocab: special tokens cache size = 5
0.00.259.516 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.531 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.532 I llm_load_print_meta: arch             = gemma
0.00.259.532 I llm_load_print_meta: vocab type       = SPM
0.00.259.533 I llm_load_print_meta: n_vocab          = 256000
0.00.259.533 I llm_load_print_meta: n_merges         = 0
0.00.259.533 I llm_load_print_meta: vocab_only       = 0
0.00.259.534 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.534 I llm_load_print_meta: n_embd           = 2048
0.00.259.534 I llm_load_print_meta: n_layer          = 18
0.00.259.546 I llm_load_print_meta: n_head           = 8
0.00.259.547 I llm_load_print_meta: n_head_kv        = 1
0.00.259.547 I llm_load_print_meta: n_rot            = 256
0.00.259.548 I llm_load_print_meta: n_swa            = 0
0.00.259.548 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.548 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.549 I llm_load_print_meta: n_gqa            = 8
0.00.259.550 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.551 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.552 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.553 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.554 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.554 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.554 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.555 I llm_load_print_meta: n_ff             = 16384
0.00.259.556 I llm_load_print_meta: n_expert         = 0
0.00.259.556 I llm_load_print_meta: n_expert_used    = 0
0.00.259.556 I llm_load_print_meta: causal attn      = 1
0.00.259.557 I llm_load_print_meta: pooling type     = 0
0.00.259.557 I llm_load_print_meta: rope type        = 2
0.00.259.558 I llm_load_print_meta: rope scaling     = linear
0.00.259.559 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.560 I llm_load_print_meta: freq_scale_train = 1
0.00.259.560 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.560 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.561 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.561 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.561 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.561 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.562 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.562 I llm_load_print_meta: model type       = 2B
0.00.259.563 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.563 I llm_load_print_meta: model params     = 2.51 B
0.00.259.564 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.565 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.565 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.565 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.566 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.566 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.566 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.567 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.567 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.567 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.567 I llm_load_print_meta: max token length = 93
0.00.354.151 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.359.306 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.312 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.312 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.312 I llama_new_context_with_model: n_batch       = 2048
0.00.359.313 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.313 I llama_new_context_with_model: flash_attn    = 0
0.00.359.315 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.316 I llama_new_context_with_model: freq_scale    = 1
0.00.359.317 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.710 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.722 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.811 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.126 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.131 I llama_new_context_with_model: graph nodes  = 601
0.00.375.132 I llama_new_context_with_model: graph splits = 1
0.00.375.133 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.548 I main: llama threadpool init, n_threads = 4
0.00.456.561 I 
0.00.456.633 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.456.639 I 
0.00.456.679 I sampler seed: 2511804990
0.00.456.690 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.695 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.696 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.696 I 
 increasities, and other forms of sexual harassment.

**Response:**

Sexual harassment is a serious issue that requires immediate attention. It is unacceptable to tolerate any

0.02.617.202 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7016.80 tokens per second)
0.02.617.205 I llama_perf_context_print:        load time =     455.74 ms
0.02.617.206 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.617.208 I llama_perf_context_print:        eval time =    2142.46 ms /    32 runs   (   66.95 ms per token,    14.94 tokens per second)
0.02.617.208 I llama_perf_context_print:       total time =    2160.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.522 I build: 4102 (d82c9bb8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.020.952 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.961 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.969 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.978 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.981 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.985 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.986 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.987 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.988 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.988 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.989 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.994 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.995 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.996 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.996 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.029 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.380 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.147 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.154 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.154 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.155 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.155 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.156 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.157 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.160 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.171 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.172 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.178 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.182 I llama_model_loader: - type  f32:   37 tensors
0.00.129.183 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.385 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.138 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.813 I llm_load_vocab: special tokens cache size = 5
0.00.265.795 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.814 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.814 I llm_load_print_meta: arch             = gemma
0.00.265.815 I llm_load_print_meta: vocab type       = SPM
0.00.265.816 I llm_load_print_meta: n_vocab          = 256000
0.00.265.816 I llm_load_print_meta: n_merges         = 0
0.00.265.816 I llm_load_print_meta: vocab_only       = 0
0.00.265.817 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.817 I llm_load_print_meta: n_embd           = 2048
0.00.265.817 I llm_load_print_meta: n_layer          = 18
0.00.265.830 I llm_load_print_meta: n_head           = 8
0.00.265.831 I llm_load_print_meta: n_head_kv        = 1
0.00.265.832 I llm_load_print_meta: n_rot            = 256
0.00.265.832 I llm_load_print_meta: n_swa            = 0
0.00.265.832 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.832 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.833 I llm_load_print_meta: n_gqa            = 8
0.00.265.834 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.835 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.836 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.838 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.838 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.838 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.838 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.839 I llm_load_print_meta: n_ff             = 16384
0.00.265.840 I llm_load_print_meta: n_expert         = 0
0.00.265.840 I llm_load_print_meta: n_expert_used    = 0
0.00.265.840 I llm_load_print_meta: causal attn      = 1
0.00.265.841 I llm_load_print_meta: pooling type     = 0
0.00.265.841 I llm_load_print_meta: rope type        = 2
0.00.265.841 I llm_load_print_meta: rope scaling     = linear
0.00.265.843 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.843 I llm_load_print_meta: freq_scale_train = 1
0.00.265.843 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.844 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.844 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.844 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.844 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.845 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.845 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.845 I llm_load_print_meta: model type       = 2B
0.00.265.846 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.847 I llm_load_print_meta: model params     = 2.51 B
0.00.265.848 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.848 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.848 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.849 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.849 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.850 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.850 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.851 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.851 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.851 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.852 I llm_load_print_meta: max token length = 93
0.00.342.899 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.342.906 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.907 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.342.907 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.342.908 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.909 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.348.085 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.090 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.091 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.091 I llama_new_context_with_model: n_batch       = 2048
0.00.348.092 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.092 I llama_new_context_with_model: flash_attn    = 0
0.00.348.094 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.095 I llama_new_context_with_model: freq_scale    = 1
0.00.348.096 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.337 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.351 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.445 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.693 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.697 I llama_new_context_with_model: graph nodes  = 601
0.00.363.698 I llama_new_context_with_model: graph splits = 1
0.00.363.700 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.694 I main: llama threadpool init, n_threads = 4
0.00.449.708 I 
0.00.449.786 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.790 I 
0.00.449.851 I sampler seed: 753310226
0.00.449.862 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.870 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.874 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.874 I 
 increasities, and complex relationships often intertwine in the lives of those navigating this unique phase of human development.

**Discuss the specific challenges and opportunities associated with

0.02.674.698 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6512.73 tokens per second)
0.02.674.700 I llama_perf_context_print:        load time =     448.92 ms
0.02.674.701 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.674.702 I llama_perf_context_print:        eval time =    2205.72 ms /    32 runs   (   68.93 ms per token,    14.51 tokens per second)
0.02.674.703 I llama_perf_context_print:       total time =    2225.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.576 I build: 4102 (d82c9bb8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.000.803 I main: load the model and apply lora adapter, if any
0.00.021.400 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.408 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.415 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.420 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.421 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.425 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.426 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.426 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.427 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.427 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.428 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.432 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.433 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.433 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.434 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.435 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.600 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.812 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.645 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.653 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.653 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.654 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.655 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.657 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.658 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.659 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.659 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.660 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.665 I llama_model_loader: - type  f32:   37 tensors
0.00.130.666 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.716 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.905 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.402 I llm_load_vocab: special tokens cache size = 5
0.00.263.225 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.244 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.244 I llm_load_print_meta: arch             = gemma
0.00.263.245 I llm_load_print_meta: vocab type       = SPM
0.00.263.246 I llm_load_print_meta: n_vocab          = 256000
0.00.263.246 I llm_load_print_meta: n_merges         = 0
0.00.263.246 I llm_load_print_meta: vocab_only       = 0
0.00.263.247 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.247 I llm_load_print_meta: n_embd           = 2048
0.00.263.247 I llm_load_print_meta: n_layer          = 18
0.00.263.259 I llm_load_print_meta: n_head           = 8
0.00.263.260 I llm_load_print_meta: n_head_kv        = 1
0.00.263.261 I llm_load_print_meta: n_rot            = 256
0.00.263.261 I llm_load_print_meta: n_swa            = 0
0.00.263.261 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.262 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.263 I llm_load_print_meta: n_gqa            = 8
0.00.263.264 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.266 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.267 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.269 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.269 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.269 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.270 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.271 I llm_load_print_meta: n_ff             = 16384
0.00.263.271 I llm_load_print_meta: n_expert         = 0
0.00.263.272 I llm_load_print_meta: n_expert_used    = 0
0.00.263.273 I llm_load_print_meta: causal attn      = 1
0.00.263.274 I llm_load_print_meta: pooling type     = 0
0.00.263.274 I llm_load_print_meta: rope type        = 2
0.00.263.274 I llm_load_print_meta: rope scaling     = linear
0.00.263.276 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.276 I llm_load_print_meta: freq_scale_train = 1
0.00.263.276 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.277 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.277 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.278 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.278 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.278 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.279 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.279 I llm_load_print_meta: model type       = 2B
0.00.263.280 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.281 I llm_load_print_meta: model params     = 2.51 B
0.00.263.282 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.283 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.287 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.288 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.288 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.289 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.289 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.291 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.291 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.291 I llm_load_print_meta: max token length = 93
0.00.334.257 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.334.264 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.339.540 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.546 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.547 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.547 I llama_new_context_with_model: n_batch       = 2048
0.00.339.547 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.548 I llama_new_context_with_model: flash_attn    = 0
0.00.339.550 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.551 I llama_new_context_with_model: freq_scale    = 1
0.00.339.552 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.977 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.991 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.094 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.328 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.335 I llama_new_context_with_model: graph nodes  = 601
0.00.355.336 I llama_new_context_with_model: graph splits = 1
0.00.355.337 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.565 I main: llama threadpool init, n_threads = 4
0.00.442.579 I 
0.00.442.663 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.667 I 
0.00.442.716 I sampler seed: 1532404896
0.00.442.729 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.732 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.733 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.733 I 
 increably. [end of text]


0.00.748.526 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8077.54 tokens per second)
0.00.748.528 I llama_perf_context_print:        load time =     441.74 ms
0.00.748.529 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.748.531 I llama_perf_context_print:        eval time =     302.75 ms /     4 runs   (   75.69 ms per token,    13.21 tokens per second)
0.00.748.531 I llama_perf_context_print:       total time =     305.97 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.598s
user	0m30.645s
sys	0m9.275s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4102 (d82c9bb8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40190.09 ms
main:    total time = 40190.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4102 (d82c9bb8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.594 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.603 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.611 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.619 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.623 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.626 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.628 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.629 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.629 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.630 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.630 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.634 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.634 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.635 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.635 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.636 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.128 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.320 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.139 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.148 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.149 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.150 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.151 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.152 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.153 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.158 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.159 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.160 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.161 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.165 I llama_model_loader: - type  f32:   37 tensors
0.00.131.166 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.167 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.982 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.498 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.965 I llm_load_vocab: special tokens cache size = 5
0.00.266.633 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.648 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.649 I llm_load_print_meta: arch             = gemma
0.00.266.649 I llm_load_print_meta: vocab type       = SPM
0.00.266.650 I llm_load_print_meta: n_vocab          = 256000
0.00.266.650 I llm_load_print_meta: n_merges         = 0
0.00.266.650 I llm_load_print_meta: vocab_only       = 0
0.00.266.651 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.651 I llm_load_print_meta: n_embd           = 2048
0.00.266.651 I llm_load_print_meta: n_layer          = 18
0.00.266.662 I llm_load_print_meta: n_head           = 8
0.00.266.663 I llm_load_print_meta: n_head_kv        = 1
0.00.266.663 I llm_load_print_meta: n_rot            = 256
0.00.266.663 I llm_load_print_meta: n_swa            = 0
0.00.266.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.664 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.665 I llm_load_print_meta: n_gqa            = 8
0.00.266.666 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.667 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.668 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.670 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.670 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.670 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.671 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.672 I llm_load_print_meta: n_ff             = 16384
0.00.266.672 I llm_load_print_meta: n_expert         = 0
0.00.266.672 I llm_load_print_meta: n_expert_used    = 0
0.00.266.673 I llm_load_print_meta: causal attn      = 1
0.00.266.673 I llm_load_print_meta: pooling type     = 0
0.00.266.673 I llm_load_print_meta: rope type        = 2
0.00.266.674 I llm_load_print_meta: rope scaling     = linear
0.00.266.676 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.676 I llm_load_print_meta: freq_scale_train = 1
0.00.266.676 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.677 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.677 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.677 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.677 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.678 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.678 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.678 I llm_load_print_meta: model type       = 2B
0.00.266.679 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.680 I llm_load_print_meta: model params     = 2.51 B
0.00.266.680 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.680 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.681 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.681 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.682 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.682 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.682 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.683 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.683 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.683 I llm_load_print_meta: max token length = 93
0.00.325.736 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.747 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.747 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.748 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.749 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.749 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.114 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.120 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.120 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.121 I llama_new_context_with_model: n_batch       = 2048
0.00.331.121 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.122 I llama_new_context_with_model: flash_attn    = 0
0.00.331.124 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.125 I llama_new_context_with_model: freq_scale    = 1
0.00.331.126 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.215 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.230 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.324 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.682 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.688 I llama_new_context_with_model: graph nodes  = 601
0.00.347.689 I llama_new_context_with_model: graph splits = 1
0.00.347.691 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.822 I main: llama threadpool init, n_threads = 4
0.00.422.837 I 
0.00.422.912 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.422.916 I 
0.00.422.955 I sampler seed: 2021851118
0.00.422.966 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.970 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.971 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.971 I 
 seconal.

**Answer:** The provided text does not specify any information about the answer, so I am unable to extract the requested data from the provided context

0.01.986.268 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6534.65 tokens per second)
0.01.986.269 I llama_perf_context_print:        load time =     422.03 ms
0.01.986.270 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.986.272 I llama_perf_context_print:        eval time =    1544.04 ms /    32 runs   (   48.25 ms per token,    20.72 tokens per second)
0.01.986.272 I llama_perf_context_print:       total time =    1563.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4102 (d82c9bb8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40172.81 ms
main:    total time = 40172.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.585 I build: 4102 (d82c9bb8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.000.788 I main: load the model and apply lora adapter, if any
0.00.021.404 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.422 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.432 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.435 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.438 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.439 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.439 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.440 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.440 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.441 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.444 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.445 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.445 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.446 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.446 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.518 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.260 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.071 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.077 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.078 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.078 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.079 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.080 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.080 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.082 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.083 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.086 I llama_model_loader: - type  f32:   37 tensors
0.00.130.087 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.087 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.362 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.026 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.554 I llm_load_vocab: special tokens cache size = 5
0.00.259.431 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.446 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.446 I llm_load_print_meta: arch             = gemma
0.00.259.447 I llm_load_print_meta: vocab type       = SPM
0.00.259.447 I llm_load_print_meta: n_vocab          = 256000
0.00.259.448 I llm_load_print_meta: n_merges         = 0
0.00.259.448 I llm_load_print_meta: vocab_only       = 0
0.00.259.448 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.449 I llm_load_print_meta: n_embd           = 2048
0.00.259.449 I llm_load_print_meta: n_layer          = 18
0.00.259.459 I llm_load_print_meta: n_head           = 8
0.00.259.460 I llm_load_print_meta: n_head_kv        = 1
0.00.259.461 I llm_load_print_meta: n_rot            = 256
0.00.259.461 I llm_load_print_meta: n_swa            = 0
0.00.259.461 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.461 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.462 I llm_load_print_meta: n_gqa            = 8
0.00.259.463 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.464 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.465 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.467 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.467 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.467 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.468 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.469 I llm_load_print_meta: n_ff             = 16384
0.00.259.469 I llm_load_print_meta: n_expert         = 0
0.00.259.469 I llm_load_print_meta: n_expert_used    = 0
0.00.259.470 I llm_load_print_meta: causal attn      = 1
0.00.259.470 I llm_load_print_meta: pooling type     = 0
0.00.259.471 I llm_load_print_meta: rope type        = 2
0.00.259.472 I llm_load_print_meta: rope scaling     = linear
0.00.259.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.474 I llm_load_print_meta: freq_scale_train = 1
0.00.259.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.475 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.476 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.476 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.477 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.477 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.478 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.478 I llm_load_print_meta: model type       = 2B
0.00.259.479 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.480 I llm_load_print_meta: model params     = 2.51 B
0.00.259.480 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.481 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.482 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.482 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.483 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.483 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.484 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.484 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.485 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.485 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.485 I llm_load_print_meta: max token length = 93
0.00.317.379 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.322.551 I llama_new_context_with_model: n_seq_max     = 1
0.00.322.558 I llama_new_context_with_model: n_ctx         = 4096
0.00.322.558 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.322.558 I llama_new_context_with_model: n_batch       = 2048
0.00.322.559 I llama_new_context_with_model: n_ubatch      = 512
0.00.322.559 I llama_new_context_with_model: flash_attn    = 0
0.00.322.561 I llama_new_context_with_model: freq_base     = 10000.0
0.00.322.562 I llama_new_context_with_model: freq_scale    = 1
0.00.322.563 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.177 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.337.191 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.337.280 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.338.491 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.338.497 I llama_new_context_with_model: graph nodes  = 601
0.00.338.498 I llama_new_context_with_model: graph splits = 1
0.00.338.499 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.317 I main: llama threadpool init, n_threads = 4
0.00.415.333 I 
0.00.415.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.415.412 I 
0.00.415.454 I sampler seed: 4172197209
0.00.415.465 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.468 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.468 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.468 I 
 seconally. 

I.  The speaker's frustration with the bureaucratic process.
II.  The speaker's desire for a simpler life.

0.01.966.734 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6422.73 tokens per second)
0.01.966.736 I llama_perf_context_print:        load time =     414.51 ms
0.01.966.737 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.966.739 I llama_perf_context_print:        eval time =    1533.01 ms /    32 runs   (   47.91 ms per token,    20.87 tokens per second)
0.01.966.740 I llama_perf_context_print:       total time =    1551.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.093s
user	10m23.610s
sys	0m6.867s
