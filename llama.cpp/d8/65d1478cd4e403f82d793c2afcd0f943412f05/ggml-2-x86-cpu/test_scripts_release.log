+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.542 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.844 I main: load the model and apply lora adapter, if any
0.00.022.159 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.169 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.187 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.188 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.192 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.193 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.193 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.194 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.195 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.196 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.200 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.201 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.202 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.202 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.203 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.700 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.630 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.504 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.510 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.511 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.512 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.512 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.513 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.514 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.516 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.516 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.517 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.519 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.520 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.534 I llama_model_loader: - type  f32:   37 tensors
0.00.131.536 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.269 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.045 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.645 I llm_load_vocab: special tokens cache size = 5
0.00.268.991 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.009 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.009 I llm_load_print_meta: arch             = gemma
0.00.269.010 I llm_load_print_meta: vocab type       = SPM
0.00.269.011 I llm_load_print_meta: n_vocab          = 256000
0.00.269.012 I llm_load_print_meta: n_merges         = 0
0.00.269.012 I llm_load_print_meta: vocab_only       = 0
0.00.269.012 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.013 I llm_load_print_meta: n_embd           = 2048
0.00.269.013 I llm_load_print_meta: n_layer          = 18
0.00.269.025 I llm_load_print_meta: n_head           = 8
0.00.269.026 I llm_load_print_meta: n_head_kv        = 1
0.00.269.027 I llm_load_print_meta: n_rot            = 256
0.00.269.027 I llm_load_print_meta: n_swa            = 0
0.00.269.027 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.027 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.028 I llm_load_print_meta: n_gqa            = 8
0.00.269.029 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.030 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.031 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.032 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.032 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.033 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.033 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.034 I llm_load_print_meta: n_ff             = 16384
0.00.269.034 I llm_load_print_meta: n_expert         = 0
0.00.269.035 I llm_load_print_meta: n_expert_used    = 0
0.00.269.035 I llm_load_print_meta: causal attn      = 1
0.00.269.035 I llm_load_print_meta: pooling type     = 0
0.00.269.036 I llm_load_print_meta: rope type        = 2
0.00.269.036 I llm_load_print_meta: rope scaling     = linear
0.00.269.037 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.038 I llm_load_print_meta: freq_scale_train = 1
0.00.269.038 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.039 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.039 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.039 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.039 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.040 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.040 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.040 I llm_load_print_meta: model type       = 2B
0.00.269.041 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.042 I llm_load_print_meta: model params     = 2.51 B
0.00.269.043 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.043 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.044 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.044 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.044 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.045 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.045 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.045 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.046 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.046 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.046 I llm_load_print_meta: max token length = 93
0.00.371.102 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.371.111 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.371.111 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.371.112 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.371.112 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.371.113 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.376.259 I llama_new_context_with_model: n_ctx      = 8192
0.00.376.265 I llama_new_context_with_model: n_batch    = 2048
0.00.376.265 I llama_new_context_with_model: n_ubatch   = 512
0.00.376.266 I llama_new_context_with_model: flash_attn = 0
0.00.376.268 I llama_new_context_with_model: freq_base  = 10000.0
0.00.376.268 I llama_new_context_with_model: freq_scale = 1
0.00.404.721 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.404.737 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.404.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.110 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.406.119 I llama_new_context_with_model: graph nodes  = 601
0.00.406.120 I llama_new_context_with_model: graph splits = 1
0.00.406.122 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.498.325 I main: llama threadpool init, n_threads = 4
0.00.498.337 I 
0.00.498.414 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.498.417 I 
0.00.498.460 I sampler seed: 504759033
0.00.498.475 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.498.482 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.498.485 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.498.485 I 
 increably, but you can't help but feel a tinge of melancholy.

The world is a chaotic place, and sometimes it feels like nothing makes sense

0.02.776.219 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7090.67 tokens per second)
0.02.776.222 I llama_perf_context_print:        load time =     496.46 ms
0.02.776.223 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.776.224 I llama_perf_context_print:        eval time =    2257.79 ms /    32 runs   (   70.56 ms per token,    14.17 tokens per second)
0.02.776.225 I llama_perf_context_print:       total time =    2277.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.535 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.022.507 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.522 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.528 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.529 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.533 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.534 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.535 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.535 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.536 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.537 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.542 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.543 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.543 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.544 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.545 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.938 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.061 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.969 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.976 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.977 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.977 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.979 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.979 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.982 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.983 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.983 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.984 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.984 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.988 I llama_model_loader: - type  f32:   37 tensors
0.00.132.989 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.224 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.855 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.418 I llm_load_vocab: special tokens cache size = 5
0.00.267.463 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.480 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.480 I llm_load_print_meta: arch             = gemma
0.00.267.481 I llm_load_print_meta: vocab type       = SPM
0.00.267.481 I llm_load_print_meta: n_vocab          = 256000
0.00.267.482 I llm_load_print_meta: n_merges         = 0
0.00.267.482 I llm_load_print_meta: vocab_only       = 0
0.00.267.482 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.483 I llm_load_print_meta: n_embd           = 2048
0.00.267.483 I llm_load_print_meta: n_layer          = 18
0.00.267.494 I llm_load_print_meta: n_head           = 8
0.00.267.495 I llm_load_print_meta: n_head_kv        = 1
0.00.267.495 I llm_load_print_meta: n_rot            = 256
0.00.267.496 I llm_load_print_meta: n_swa            = 0
0.00.267.496 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.496 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.497 I llm_load_print_meta: n_gqa            = 8
0.00.267.498 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.499 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.500 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.501 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.502 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.502 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.502 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.503 I llm_load_print_meta: n_ff             = 16384
0.00.267.503 I llm_load_print_meta: n_expert         = 0
0.00.267.504 I llm_load_print_meta: n_expert_used    = 0
0.00.267.504 I llm_load_print_meta: causal attn      = 1
0.00.267.504 I llm_load_print_meta: pooling type     = 0
0.00.267.505 I llm_load_print_meta: rope type        = 2
0.00.267.505 I llm_load_print_meta: rope scaling     = linear
0.00.267.507 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.508 I llm_load_print_meta: freq_scale_train = 1
0.00.267.508 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.508 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.508 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.509 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.509 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.509 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.509 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.510 I llm_load_print_meta: model type       = 2B
0.00.267.510 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.511 I llm_load_print_meta: model params     = 2.51 B
0.00.267.512 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.512 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.513 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.513 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.513 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.514 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.514 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.514 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.515 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.515 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.515 I llm_load_print_meta: max token length = 93
0.00.366.159 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.612 I llama_new_context_with_model: n_ctx      = 8192
0.00.371.618 I llama_new_context_with_model: n_batch    = 2048
0.00.371.618 I llama_new_context_with_model: n_ubatch   = 512
0.00.371.619 I llama_new_context_with_model: flash_attn = 0
0.00.371.622 I llama_new_context_with_model: freq_base  = 10000.0
0.00.371.623 I llama_new_context_with_model: freq_scale = 1
0.00.401.697 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.401.712 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.401.812 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.087 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.403.092 I llama_new_context_with_model: graph nodes  = 601
0.00.403.093 I llama_new_context_with_model: graph splits = 1
0.00.403.094 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.125 I main: llama threadpool init, n_threads = 4
0.00.495.139 I 
0.00.495.214 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.495.217 I 
0.00.495.261 I sampler seed: 122943184
0.00.495.272 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.276 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.276 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.277 I 
 increably!

I am unable to access the requested file. Please check the file path and try again.

This error occurs when I try to access a

0.02.763.531 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6484.57 tokens per second)
0.02.763.533 I llama_perf_context_print:        load time =     493.26 ms
0.02.763.534 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.763.536 I llama_perf_context_print:        eval time =    2248.49 ms /    32 runs   (   70.27 ms per token,    14.23 tokens per second)
0.02.763.536 I llama_perf_context_print:       total time =    2268.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.595 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.803 I main: llama backend init
0.00.001.886 I main: load the model and apply lora adapter, if any
0.00.026.292 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.307 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.318 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.325 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.326 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.334 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.337 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.338 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.339 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.340 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.341 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.346 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.348 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.349 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.350 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.351 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.138.804 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.145.660 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.145.667 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.145.667 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.145.668 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.145.669 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.145.670 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.145.670 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.145.673 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.145.673 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.145.675 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.145.675 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.145.676 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.145.680 I llama_model_loader: - type  f32:   37 tensors
0.00.145.681 I llama_model_loader: - type q8_0:  127 tensors
0.00.232.751 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.284.740 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.285.343 I llm_load_vocab: special tokens cache size = 5
0.00.306.519 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.306.538 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.306.538 I llm_load_print_meta: arch             = gemma
0.00.306.539 I llm_load_print_meta: vocab type       = SPM
0.00.306.540 I llm_load_print_meta: n_vocab          = 256000
0.00.306.540 I llm_load_print_meta: n_merges         = 0
0.00.306.541 I llm_load_print_meta: vocab_only       = 0
0.00.306.541 I llm_load_print_meta: n_ctx_train      = 8192
0.00.306.541 I llm_load_print_meta: n_embd           = 2048
0.00.306.541 I llm_load_print_meta: n_layer          = 18
0.00.306.553 I llm_load_print_meta: n_head           = 8
0.00.306.554 I llm_load_print_meta: n_head_kv        = 1
0.00.306.554 I llm_load_print_meta: n_rot            = 256
0.00.306.554 I llm_load_print_meta: n_swa            = 0
0.00.306.554 I llm_load_print_meta: n_embd_head_k    = 256
0.00.306.555 I llm_load_print_meta: n_embd_head_v    = 256
0.00.306.556 I llm_load_print_meta: n_gqa            = 8
0.00.306.557 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.306.558 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.306.558 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.306.560 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.306.560 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.306.561 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.306.561 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.306.562 I llm_load_print_meta: n_ff             = 16384
0.00.306.562 I llm_load_print_meta: n_expert         = 0
0.00.306.562 I llm_load_print_meta: n_expert_used    = 0
0.00.306.563 I llm_load_print_meta: causal attn      = 1
0.00.306.563 I llm_load_print_meta: pooling type     = 0
0.00.306.563 I llm_load_print_meta: rope type        = 2
0.00.306.564 I llm_load_print_meta: rope scaling     = linear
0.00.306.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.306.566 I llm_load_print_meta: freq_scale_train = 1
0.00.306.566 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.306.566 I llm_load_print_meta: rope_finetuned   = unknown
0.00.306.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.306.567 I llm_load_print_meta: ssm_d_inner      = 0
0.00.306.567 I llm_load_print_meta: ssm_d_state      = 0
0.00.306.567 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.306.568 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.306.568 I llm_load_print_meta: model type       = 2B
0.00.306.569 I llm_load_print_meta: model ftype      = Q8_0
0.00.306.570 I llm_load_print_meta: model params     = 2.51 B
0.00.306.570 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.306.571 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.306.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.306.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.306.572 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.306.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.306.573 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.306.573 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.306.573 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.306.574 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.306.574 I llm_load_print_meta: max token length = 93
0.00.407.437 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.407.444 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.407.445 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.407.446 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.407.446 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.407.447 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.413.306 I llama_new_context_with_model: n_ctx      = 8192
0.00.413.315 I llama_new_context_with_model: n_batch    = 2048
0.00.413.316 I llama_new_context_with_model: n_ubatch   = 512
0.00.413.317 I llama_new_context_with_model: flash_attn = 0
0.00.413.320 I llama_new_context_with_model: freq_base  = 10000.0
0.00.413.321 I llama_new_context_with_model: freq_scale = 1
0.00.442.747 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.442.765 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.442.856 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.444.070 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.444.076 I llama_new_context_with_model: graph nodes  = 601
0.00.444.077 I llama_new_context_with_model: graph splits = 1
0.00.444.078 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.535.983 I main: llama threadpool init, n_threads = 4
0.00.535.998 I 
0.00.536.076 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.536.079 I 
0.00.536.122 I sampler seed: 2508769915
0.00.536.133 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.536.136 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.536.138 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.536.138 I 
 increasities.  It is a common misconception that these events are harmless or unimportant, but they have caused significant harm and loss of life. [end of text]


0.02.518.072 I llama_perf_sampler_print:    sampling time =       4.61 ms /    30 runs   (    0.15 ms per token,  6503.36 tokens per second)
0.02.518.075 I llama_perf_context_print:        load time =     534.08 ms
0.02.518.076 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.518.077 I llama_perf_context_print:        eval time =    1964.03 ms /    29 runs   (   67.73 ms per token,    14.77 tokens per second)
0.02.518.078 I llama_perf_context_print:       total time =    1982.10 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.555 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.001.866 I main: load the model and apply lora adapter, if any
0.00.022.686 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.696 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.703 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.714 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.718 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.719 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.720 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.720 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.721 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.722 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.726 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.727 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.727 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.728 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.728 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.479 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.016 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.903 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.910 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.911 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.911 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.912 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.913 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.914 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.916 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.917 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.918 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.918 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.919 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.922 I llama_model_loader: - type  f32:   37 tensors
0.00.133.924 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.489 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.090 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.690 I llm_load_vocab: special tokens cache size = 5
0.00.274.584 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.602 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.603 I llm_load_print_meta: arch             = gemma
0.00.274.604 I llm_load_print_meta: vocab type       = SPM
0.00.274.604 I llm_load_print_meta: n_vocab          = 256000
0.00.274.604 I llm_load_print_meta: n_merges         = 0
0.00.274.605 I llm_load_print_meta: vocab_only       = 0
0.00.274.605 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.605 I llm_load_print_meta: n_embd           = 2048
0.00.274.605 I llm_load_print_meta: n_layer          = 18
0.00.274.617 I llm_load_print_meta: n_head           = 8
0.00.274.618 I llm_load_print_meta: n_head_kv        = 1
0.00.274.619 I llm_load_print_meta: n_rot            = 256
0.00.274.619 I llm_load_print_meta: n_swa            = 0
0.00.274.619 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.620 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.621 I llm_load_print_meta: n_gqa            = 8
0.00.274.622 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.622 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.624 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.625 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.625 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.625 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.626 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.627 I llm_load_print_meta: n_ff             = 16384
0.00.274.627 I llm_load_print_meta: n_expert         = 0
0.00.274.627 I llm_load_print_meta: n_expert_used    = 0
0.00.274.628 I llm_load_print_meta: causal attn      = 1
0.00.274.628 I llm_load_print_meta: pooling type     = 0
0.00.274.628 I llm_load_print_meta: rope type        = 2
0.00.274.629 I llm_load_print_meta: rope scaling     = linear
0.00.274.630 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.631 I llm_load_print_meta: freq_scale_train = 1
0.00.274.631 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.631 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.631 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.632 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.632 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.632 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.632 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.633 I llm_load_print_meta: model type       = 2B
0.00.274.633 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.634 I llm_load_print_meta: model params     = 2.51 B
0.00.274.635 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.635 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.636 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.636 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.636 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.637 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.637 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.637 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.638 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.638 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.638 I llm_load_print_meta: max token length = 93
0.00.348.683 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.348.691 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.353.986 I llama_new_context_with_model: n_ctx      = 8192
0.00.353.993 I llama_new_context_with_model: n_batch    = 2048
0.00.353.993 I llama_new_context_with_model: n_ubatch   = 512
0.00.353.994 I llama_new_context_with_model: flash_attn = 0
0.00.353.996 I llama_new_context_with_model: freq_base  = 10000.0
0.00.353.997 I llama_new_context_with_model: freq_scale = 1
0.00.383.110 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.383.127 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.383.216 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.518 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.384.525 I llama_new_context_with_model: graph nodes  = 601
0.00.384.525 I llama_new_context_with_model: graph splits = 1
0.00.384.527 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.198 I main: llama threadpool init, n_threads = 4
0.00.477.213 I 
0.00.477.290 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.293 I 
0.00.477.333 I sampler seed: 1666325674
0.00.477.346 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.350 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.351 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.353 I 
 increasities? 
The provided text does not contain any information regarding "incredia", "lesbian", or "erotic", so I am unable to

0.02.774.095 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6452.87 tokens per second)
0.02.774.098 I llama_perf_context_print:        load time =     475.31 ms
0.02.774.099 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.774.101 I llama_perf_context_print:        eval time =    2276.17 ms /    32 runs   (   71.13 ms per token,    14.06 tokens per second)
0.02.774.101 I llama_perf_context_print:       total time =    2296.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.477s
user	0m38.256s
sys	0m9.586s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4007 (d865d147)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32085.87 ms
main:    total time = 32085.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.842 I main: load the model and apply lora adapter, if any
0.00.022.698 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.709 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.718 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.728 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.732 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.738 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.739 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.740 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.740 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.741 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.742 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.746 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.746 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.747 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.747 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.748 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.271 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.337 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.220 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.227 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.228 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.228 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.229 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.229 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.230 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.233 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.233 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.234 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.234 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.235 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.239 I llama_model_loader: - type  f32:   37 tensors
0.00.133.240 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.241 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.988 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.345 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.050 I llm_load_vocab: special tokens cache size = 5
0.00.286.325 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.343 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.343 I llm_load_print_meta: arch             = gemma
0.00.286.344 I llm_load_print_meta: vocab type       = SPM
0.00.286.344 I llm_load_print_meta: n_vocab          = 256000
0.00.286.345 I llm_load_print_meta: n_merges         = 0
0.00.286.345 I llm_load_print_meta: vocab_only       = 0
0.00.286.345 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.346 I llm_load_print_meta: n_embd           = 2048
0.00.286.346 I llm_load_print_meta: n_layer          = 18
0.00.286.358 I llm_load_print_meta: n_head           = 8
0.00.286.359 I llm_load_print_meta: n_head_kv        = 1
0.00.286.359 I llm_load_print_meta: n_rot            = 256
0.00.286.360 I llm_load_print_meta: n_swa            = 0
0.00.286.360 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.360 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.361 I llm_load_print_meta: n_gqa            = 8
0.00.286.362 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.363 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.364 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.365 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.366 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.366 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.366 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.367 I llm_load_print_meta: n_ff             = 16384
0.00.286.368 I llm_load_print_meta: n_expert         = 0
0.00.286.368 I llm_load_print_meta: n_expert_used    = 0
0.00.286.368 I llm_load_print_meta: causal attn      = 1
0.00.286.369 I llm_load_print_meta: pooling type     = 0
0.00.286.369 I llm_load_print_meta: rope type        = 2
0.00.286.369 I llm_load_print_meta: rope scaling     = linear
0.00.286.371 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.371 I llm_load_print_meta: freq_scale_train = 1
0.00.286.372 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.372 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.372 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.373 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.373 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.373 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.373 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.374 I llm_load_print_meta: model type       = 2B
0.00.286.375 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.286.376 I llm_load_print_meta: model params     = 2.51 B
0.00.286.377 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.286.377 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.378 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.378 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.378 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.378 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.379 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.379 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.379 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.380 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.380 I llm_load_print_meta: max token length = 93
0.00.348.718 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.348.726 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.348.727 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.348.727 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.348.728 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.348.728 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.354.241 I llama_new_context_with_model: n_ctx      = 8192
0.00.354.246 I llama_new_context_with_model: n_batch    = 2048
0.00.354.246 I llama_new_context_with_model: n_ubatch   = 512
0.00.354.247 I llama_new_context_with_model: flash_attn = 0
0.00.354.250 I llama_new_context_with_model: freq_base  = 10000.0
0.00.354.251 I llama_new_context_with_model: freq_scale = 1
0.00.383.397 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.383.413 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.383.505 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.782 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.384.789 I llama_new_context_with_model: graph nodes  = 601
0.00.384.789 I llama_new_context_with_model: graph splits = 1
0.00.384.792 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.312 I main: llama threadpool init, n_threads = 4
0.00.470.328 I 
0.00.470.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.413 I 
0.00.470.463 I sampler seed: 3358997454
0.00.470.476 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.485 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.489 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.489 I 
 seconded data as part of the data transformation process. This data contained sensitive information that needed to be protected.

**Questions:**

1. What is the

0.02.181.116 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6763.68 tokens per second)
0.02.181.118 I llama_perf_context_print:        load time =     468.45 ms
0.02.181.120 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.181.121 I llama_perf_context_print:        eval time =    1690.75 ms /    32 runs   (   52.84 ms per token,    18.93 tokens per second)
0.02.181.123 I llama_perf_context_print:       total time =    1710.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4007 (d865d147)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32127.62 ms
main:    total time = 32127.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.564 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.843 I main: load the model and apply lora adapter, if any
0.00.022.433 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.449 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.459 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.460 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.464 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.465 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.466 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.466 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.467 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.467 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.471 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.472 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.473 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.473 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.474 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.087 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.291 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.200 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.209 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.210 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.211 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.212 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.213 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.214 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.216 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.217 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.220 I llama_model_loader: - type  f32:   37 tensors
0.00.133.221 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.221 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.205 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.072 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.716 I llm_load_vocab: special tokens cache size = 5
0.00.279.793 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.811 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.811 I llm_load_print_meta: arch             = gemma
0.00.279.812 I llm_load_print_meta: vocab type       = SPM
0.00.279.812 I llm_load_print_meta: n_vocab          = 256000
0.00.279.813 I llm_load_print_meta: n_merges         = 0
0.00.279.813 I llm_load_print_meta: vocab_only       = 0
0.00.279.813 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.814 I llm_load_print_meta: n_embd           = 2048
0.00.279.814 I llm_load_print_meta: n_layer          = 18
0.00.279.826 I llm_load_print_meta: n_head           = 8
0.00.279.827 I llm_load_print_meta: n_head_kv        = 1
0.00.279.827 I llm_load_print_meta: n_rot            = 256
0.00.279.827 I llm_load_print_meta: n_swa            = 0
0.00.279.828 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.828 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.829 I llm_load_print_meta: n_gqa            = 8
0.00.279.830 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.831 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.832 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.833 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.834 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.834 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.834 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.835 I llm_load_print_meta: n_ff             = 16384
0.00.279.835 I llm_load_print_meta: n_expert         = 0
0.00.279.835 I llm_load_print_meta: n_expert_used    = 0
0.00.279.836 I llm_load_print_meta: causal attn      = 1
0.00.279.836 I llm_load_print_meta: pooling type     = 0
0.00.279.836 I llm_load_print_meta: rope type        = 2
0.00.279.837 I llm_load_print_meta: rope scaling     = linear
0.00.279.838 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.839 I llm_load_print_meta: freq_scale_train = 1
0.00.279.839 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.840 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.840 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.840 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.841 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.841 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.841 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.841 I llm_load_print_meta: model type       = 2B
0.00.279.843 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.843 I llm_load_print_meta: model params     = 2.51 B
0.00.279.844 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.844 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.845 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.845 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.846 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.846 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.846 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.847 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.847 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.847 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.848 I llm_load_print_meta: max token length = 93
0.00.338.394 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.343.654 I llama_new_context_with_model: n_ctx      = 8192
0.00.343.661 I llama_new_context_with_model: n_batch    = 2048
0.00.343.661 I llama_new_context_with_model: n_ubatch   = 512
0.00.343.662 I llama_new_context_with_model: flash_attn = 0
0.00.343.665 I llama_new_context_with_model: freq_base  = 10000.0
0.00.343.665 I llama_new_context_with_model: freq_scale = 1
0.00.373.847 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.373.866 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.373.961 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.249 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.375.256 I llama_new_context_with_model: graph nodes  = 601
0.00.375.257 I llama_new_context_with_model: graph splits = 1
0.00.375.258 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.217 I main: llama threadpool init, n_threads = 4
0.00.457.231 I 
0.00.457.305 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.457.308 I 
0.00.457.350 I sampler seed: 1524978876
0.00.457.362 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.365 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.365 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.366 I 
 seconded?
I cannot answer this question as it contains sexually suggestive content that is not appropriate for me to discuss. [end of text]


0.01.732.768 I llama_perf_sampler_print:    sampling time =       3.96 ms /    26 runs   (    0.15 ms per token,  6572.30 tokens per second)
0.01.732.771 I llama_perf_context_print:        load time =     455.35 ms
0.01.732.772 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.732.773 I llama_perf_context_print:        eval time =    1259.97 ms /    25 runs   (   50.40 ms per token,    19.84 tokens per second)
0.01.732.774 I llama_perf_context_print:       total time =    1275.56 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.993s
user	8m13.294s
sys	0m7.134s
