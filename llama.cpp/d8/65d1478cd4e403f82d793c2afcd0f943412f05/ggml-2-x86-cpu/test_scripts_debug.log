+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.025.776 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.788 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.883 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.895 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.896 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.900 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.904 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.905 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.906 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.907 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.908 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.915 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.916 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.917 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.919 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.921 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.036 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.706 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.042 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.050 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.051 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.052 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.053 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.054 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.055 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.059 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.060 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.061 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.062 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.063 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.072 I llama_model_loader: - type  f32:   37 tensors
0.00.267.075 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.061 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.512 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.428 I llm_load_vocab: special tokens cache size = 5
0.00.616.347 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.414 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.415 I llm_load_print_meta: arch             = gemma
0.00.616.416 I llm_load_print_meta: vocab type       = SPM
0.00.616.416 I llm_load_print_meta: n_vocab          = 256000
0.00.616.418 I llm_load_print_meta: n_merges         = 0
0.00.616.419 I llm_load_print_meta: vocab_only       = 0
0.00.616.419 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.429 I llm_load_print_meta: n_embd           = 2048
0.00.616.429 I llm_load_print_meta: n_layer          = 18
0.00.616.491 I llm_load_print_meta: n_head           = 8
0.00.616.499 I llm_load_print_meta: n_head_kv        = 1
0.00.616.500 I llm_load_print_meta: n_rot            = 256
0.00.616.500 I llm_load_print_meta: n_swa            = 0
0.00.616.501 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.501 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.506 I llm_load_print_meta: n_gqa            = 8
0.00.616.510 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.515 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.516 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.518 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.518 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.518 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.519 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.524 I llm_load_print_meta: n_ff             = 16384
0.00.616.524 I llm_load_print_meta: n_expert         = 0
0.00.616.525 I llm_load_print_meta: n_expert_used    = 0
0.00.616.525 I llm_load_print_meta: causal attn      = 1
0.00.616.526 I llm_load_print_meta: pooling type     = 0
0.00.616.526 I llm_load_print_meta: rope type        = 2
0.00.616.527 I llm_load_print_meta: rope scaling     = linear
0.00.616.528 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.529 I llm_load_print_meta: freq_scale_train = 1
0.00.616.529 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.529 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.529 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.530 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.530 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.530 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.531 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.531 I llm_load_print_meta: model type       = 2B
0.00.616.532 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.533 I llm_load_print_meta: model params     = 2.51 B
0.00.616.534 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.535 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.537 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.537 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.543 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.544 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.544 I llm_load_print_meta: max token length = 93
0.00.721.968 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.721.978 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.721.979 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.721.980 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.721.980 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.721.981 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.728.692 I llama_new_context_with_model: n_ctx      = 8192
0.00.728.699 I llama_new_context_with_model: n_batch    = 2048
0.00.728.699 I llama_new_context_with_model: n_ubatch   = 512
0.00.728.700 I llama_new_context_with_model: flash_attn = 0
0.00.728.703 I llama_new_context_with_model: freq_base  = 10000.0
0.00.728.703 I llama_new_context_with_model: freq_scale = 1
0.00.759.353 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.759.395 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.759.520 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.762.047 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.762.051 I llama_new_context_with_model: graph nodes  = 601
0.00.762.052 I llama_new_context_with_model: graph splits = 1
0.00.762.067 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.372.710 I main: llama threadpool init, n_threads = 4
0.01.372.723 I 
0.01.372.831 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.372.835 I 
0.01.373.069 I sampler seed: 3704906311
0.01.373.083 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.373.090 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.373.091 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.373.091 I 
 increasively, neglecting any contradictions or inconsistencies. [end of text]


0.05.576.256 I llama_perf_sampler_print:    sampling time =      15.11 ms /    11 runs   (    1.37 ms per token,   728.04 tokens per second)
0.05.576.270 I llama_perf_context_print:        load time =    1369.80 ms
0.05.576.272 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.576.274 I llama_perf_context_print:        eval time =    4172.85 ms /    10 runs   (  417.28 ms per token,     2.40 tokens per second)
0.05.576.275 I llama_perf_context_print:       total time =    4203.56 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.754 I main: load the model and apply lora adapter, if any
0.00.025.589 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.691 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.705 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.709 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.714 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.715 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.716 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.717 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.726 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.727 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.735 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.739 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.740 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.741 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.742 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.073 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.594 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.919 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.928 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.929 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.930 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.931 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.934 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.938 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.939 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.940 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.940 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.942 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.950 I llama_model_loader: - type  f32:   37 tensors
0.00.265.951 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.024 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.961 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.901 I llm_load_vocab: special tokens cache size = 5
0.00.628.947 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.017 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.018 I llm_load_print_meta: arch             = gemma
0.00.629.019 I llm_load_print_meta: vocab type       = SPM
0.00.629.020 I llm_load_print_meta: n_vocab          = 256000
0.00.629.022 I llm_load_print_meta: n_merges         = 0
0.00.629.022 I llm_load_print_meta: vocab_only       = 0
0.00.629.023 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.033 I llm_load_print_meta: n_embd           = 2048
0.00.629.034 I llm_load_print_meta: n_layer          = 18
0.00.629.097 I llm_load_print_meta: n_head           = 8
0.00.629.103 I llm_load_print_meta: n_head_kv        = 1
0.00.629.104 I llm_load_print_meta: n_rot            = 256
0.00.629.105 I llm_load_print_meta: n_swa            = 0
0.00.629.105 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.105 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.110 I llm_load_print_meta: n_gqa            = 8
0.00.629.114 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.119 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.120 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.123 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.129 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.129 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.130 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.135 I llm_load_print_meta: n_ff             = 16384
0.00.629.135 I llm_load_print_meta: n_expert         = 0
0.00.629.136 I llm_load_print_meta: n_expert_used    = 0
0.00.629.137 I llm_load_print_meta: causal attn      = 1
0.00.629.137 I llm_load_print_meta: pooling type     = 0
0.00.629.138 I llm_load_print_meta: rope type        = 2
0.00.629.138 I llm_load_print_meta: rope scaling     = linear
0.00.629.140 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.141 I llm_load_print_meta: freq_scale_train = 1
0.00.629.142 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.142 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.154 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.158 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.159 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.159 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.160 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.160 I llm_load_print_meta: model type       = 2B
0.00.629.161 I llm_load_print_meta: model ftype      = Q8_0
0.00.629.162 I llm_load_print_meta: model params     = 2.51 B
0.00.629.163 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.629.164 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.164 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.165 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.166 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.166 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.167 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.174 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.175 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.176 I llm_load_print_meta: max token length = 93
0.00.728.884 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.734.904 I llama_new_context_with_model: n_ctx      = 8192
0.00.734.912 I llama_new_context_with_model: n_batch    = 2048
0.00.734.913 I llama_new_context_with_model: n_ubatch   = 512
0.00.734.913 I llama_new_context_with_model: flash_attn = 0
0.00.734.917 I llama_new_context_with_model: freq_base  = 10000.0
0.00.734.918 I llama_new_context_with_model: freq_scale = 1
0.00.766.419 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.766.462 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.766.587 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.769.076 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.769.081 I llama_new_context_with_model: graph nodes  = 601
0.00.769.081 I llama_new_context_with_model: graph splits = 1
0.00.769.097 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.380.581 I main: llama threadpool init, n_threads = 4
0.01.380.597 I 
0.01.380.707 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.380.711 I 
0.01.380.944 I sampler seed: 2554284511
0.01.380.956 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.380.962 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.380.963 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.380.964 I 
 increasities from the 19th century.

I am unable to find that information. Could you please provide me with a reference or suggestion where I might

0.14.868.637 I llama_perf_sampler_print:    sampling time =      47.93 ms /    33 runs   (    1.45 ms per token,   688.45 tokens per second)
0.14.868.641 I llama_perf_context_print:        load time =    1377.71 ms
0.14.868.643 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.868.646 I llama_perf_context_print:        eval time =   13393.00 ms /    32 runs   (  418.53 ms per token,     2.39 tokens per second)
0.14.868.648 I llama_perf_context_print:       total time =   13488.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.025.755 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.766 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.876 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.878 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.886 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.887 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.890 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.892 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.893 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.895 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.904 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.910 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.912 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.913 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.685 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.391 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.812 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.823 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.824 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.825 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.826 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.827 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.829 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.833 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.834 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.835 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.836 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.838 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.848 I llama_model_loader: - type  f32:   37 tensors
0.00.266.852 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.744 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.615 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.626 I llm_load_vocab: special tokens cache size = 5
0.00.622.239 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.317 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.318 I llm_load_print_meta: arch             = gemma
0.00.622.319 I llm_load_print_meta: vocab type       = SPM
0.00.622.319 I llm_load_print_meta: n_vocab          = 256000
0.00.622.321 I llm_load_print_meta: n_merges         = 0
0.00.622.322 I llm_load_print_meta: vocab_only       = 0
0.00.622.322 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.330 I llm_load_print_meta: n_embd           = 2048
0.00.622.330 I llm_load_print_meta: n_layer          = 18
0.00.622.393 I llm_load_print_meta: n_head           = 8
0.00.622.400 I llm_load_print_meta: n_head_kv        = 1
0.00.622.400 I llm_load_print_meta: n_rot            = 256
0.00.622.401 I llm_load_print_meta: n_swa            = 0
0.00.622.402 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.402 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.407 I llm_load_print_meta: n_gqa            = 8
0.00.622.411 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.416 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.418 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.420 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.420 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.421 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.421 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.426 I llm_load_print_meta: n_ff             = 16384
0.00.622.426 I llm_load_print_meta: n_expert         = 0
0.00.622.427 I llm_load_print_meta: n_expert_used    = 0
0.00.622.427 I llm_load_print_meta: causal attn      = 1
0.00.622.428 I llm_load_print_meta: pooling type     = 0
0.00.622.428 I llm_load_print_meta: rope type        = 2
0.00.622.428 I llm_load_print_meta: rope scaling     = linear
0.00.622.430 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.431 I llm_load_print_meta: freq_scale_train = 1
0.00.622.431 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.432 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.432 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.432 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.432 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.433 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.434 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.435 I llm_load_print_meta: model type       = 2B
0.00.622.436 I llm_load_print_meta: model ftype      = Q8_0
0.00.622.437 I llm_load_print_meta: model params     = 2.51 B
0.00.622.438 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.622.439 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.440 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.441 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.441 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.442 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.451 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.451 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.457 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.459 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.459 I llm_load_print_meta: max token length = 93
0.00.720.080 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.720.089 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.720.090 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.720.091 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.720.091 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.720.092 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.726.349 I llama_new_context_with_model: n_ctx      = 8192
0.00.726.354 I llama_new_context_with_model: n_batch    = 2048
0.00.726.355 I llama_new_context_with_model: n_ubatch   = 512
0.00.726.355 I llama_new_context_with_model: flash_attn = 0
0.00.726.357 I llama_new_context_with_model: freq_base  = 10000.0
0.00.726.358 I llama_new_context_with_model: freq_scale = 1
0.00.755.709 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.755.747 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.755.876 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.758.306 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.758.331 I llama_new_context_with_model: graph nodes  = 601
0.00.758.332 I llama_new_context_with_model: graph splits = 1
0.00.758.348 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.403.988 I main: llama threadpool init, n_threads = 4
0.01.403.999 I 
0.01.404.115 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.404.121 I 
0.01.404.359 I sampler seed: 2551617033
0.01.404.371 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.404.377 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.404.378 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.404.378 I 
 increasities in the following sentences:

1. The king's daughter, Princess Beatrice, was very beautiful and had a charming smile.
2. The

0.14.987.740 I llama_perf_sampler_print:    sampling time =      48.30 ms /    33 runs   (    1.46 ms per token,   683.29 tokens per second)
0.14.987.743 I llama_perf_context_print:        load time =    1401.08 ms
0.14.987.745 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.987.746 I llama_perf_context_print:        eval time =   13489.66 ms /    32 runs   (  421.55 ms per token,     2.37 tokens per second)
0.14.987.747 I llama_perf_context_print:       total time =   13583.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.025.440 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.451 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.562 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.569 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.578 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.580 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.582 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.585 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.586 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.588 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.597 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.602 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.603 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.605 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.607 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.929 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.412 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.699 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.708 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.709 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.710 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.711 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.712 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.713 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.717 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.718 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.719 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.720 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.721 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.729 I llama_model_loader: - type  f32:   37 tensors
0.00.265.731 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.363 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.385 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.331 I llm_load_vocab: special tokens cache size = 5
0.00.599.599 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.674 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.675 I llm_load_print_meta: arch             = gemma
0.00.599.676 I llm_load_print_meta: vocab type       = SPM
0.00.599.676 I llm_load_print_meta: n_vocab          = 256000
0.00.599.679 I llm_load_print_meta: n_merges         = 0
0.00.599.679 I llm_load_print_meta: vocab_only       = 0
0.00.599.680 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.689 I llm_load_print_meta: n_embd           = 2048
0.00.599.690 I llm_load_print_meta: n_layer          = 18
0.00.599.751 I llm_load_print_meta: n_head           = 8
0.00.599.759 I llm_load_print_meta: n_head_kv        = 1
0.00.599.764 I llm_load_print_meta: n_rot            = 256
0.00.599.764 I llm_load_print_meta: n_swa            = 0
0.00.599.765 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.765 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.770 I llm_load_print_meta: n_gqa            = 8
0.00.599.774 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.780 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.781 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.783 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.783 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.784 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.784 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.789 I llm_load_print_meta: n_ff             = 16384
0.00.599.793 I llm_load_print_meta: n_expert         = 0
0.00.599.793 I llm_load_print_meta: n_expert_used    = 0
0.00.599.793 I llm_load_print_meta: causal attn      = 1
0.00.599.794 I llm_load_print_meta: pooling type     = 0
0.00.599.794 I llm_load_print_meta: rope type        = 2
0.00.599.794 I llm_load_print_meta: rope scaling     = linear
0.00.599.796 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.797 I llm_load_print_meta: freq_scale_train = 1
0.00.599.797 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.797 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.798 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.798 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.798 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.799 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.799 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.800 I llm_load_print_meta: model type       = 2B
0.00.599.802 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.803 I llm_load_print_meta: model params     = 2.51 B
0.00.599.804 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.804 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.805 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.805 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.806 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.806 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.807 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.807 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.813 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.815 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.815 I llm_load_print_meta: max token length = 93
0.00.675.398 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.675.410 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.681.522 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.529 I llama_new_context_with_model: n_batch    = 2048
0.00.681.529 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.530 I llama_new_context_with_model: flash_attn = 0
0.00.681.533 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.533 I llama_new_context_with_model: freq_scale = 1
0.00.710.690 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.725 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.852 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.713.407 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.713.412 I llama_new_context_with_model: graph nodes  = 601
0.00.713.412 I llama_new_context_with_model: graph splits = 1
0.00.713.430 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.331.237 I main: llama threadpool init, n_threads = 4
0.01.331.249 I 
0.01.331.372 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.378 I 
0.01.331.625 I sampler seed: 961951446
0.01.331.638 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.646 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.331.646 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.647 I 
 seconary of a neuron:

**Function:**
- Receives signals from other neurons and sends them to the cell body.
- Transmits signals to other

0.14.868.364 I llama_perf_sampler_print:    sampling time =      47.86 ms /    33 runs   (    1.45 ms per token,   689.57 tokens per second)
0.14.868.367 I llama_perf_context_print:        load time =    1328.34 ms
0.14.868.368 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.868.370 I llama_perf_context_print:        eval time =   13443.45 ms /    32 runs   (  420.11 ms per token,     2.38 tokens per second)
0.14.868.371 I llama_perf_context_print:       total time =   13537.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.531s
user	3m12.017s
sys	0m9.638s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4007 (d865d147)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199008.29 ms
main:    total time = 199008.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.025.271 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.282 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.399 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.411 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.413 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.418 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.419 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.421 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.423 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.424 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.425 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.431 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.432 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.433 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.435 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.436 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.271 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.292 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.717 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.726 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.727 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.728 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.729 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.730 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.731 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.735 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.736 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.737 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.738 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.739 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.747 I llama_model_loader: - type  f32:   37 tensors
0.00.265.749 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.749 I llama_model_loader: - type q6_K:   19 tensors
0.00.443.480 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.225 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.168 I llm_load_vocab: special tokens cache size = 5
0.00.605.121 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.193 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.194 I llm_load_print_meta: arch             = gemma
0.00.605.195 I llm_load_print_meta: vocab type       = SPM
0.00.605.196 I llm_load_print_meta: n_vocab          = 256000
0.00.605.198 I llm_load_print_meta: n_merges         = 0
0.00.605.198 I llm_load_print_meta: vocab_only       = 0
0.00.605.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.208 I llm_load_print_meta: n_embd           = 2048
0.00.605.209 I llm_load_print_meta: n_layer          = 18
0.00.605.275 I llm_load_print_meta: n_head           = 8
0.00.605.281 I llm_load_print_meta: n_head_kv        = 1
0.00.605.283 I llm_load_print_meta: n_rot            = 256
0.00.605.284 I llm_load_print_meta: n_swa            = 0
0.00.605.284 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.284 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.294 I llm_load_print_meta: n_gqa            = 8
0.00.605.298 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.304 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.315 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.317 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.317 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.318 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.319 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.327 I llm_load_print_meta: n_ff             = 16384
0.00.605.328 I llm_load_print_meta: n_expert         = 0
0.00.605.329 I llm_load_print_meta: n_expert_used    = 0
0.00.605.330 I llm_load_print_meta: causal attn      = 1
0.00.605.330 I llm_load_print_meta: pooling type     = 0
0.00.605.331 I llm_load_print_meta: rope type        = 2
0.00.605.334 I llm_load_print_meta: rope scaling     = linear
0.00.605.335 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.336 I llm_load_print_meta: freq_scale_train = 1
0.00.605.337 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.341 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.341 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.342 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.342 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.343 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.343 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.344 I llm_load_print_meta: model type       = 2B
0.00.605.345 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.347 I llm_load_print_meta: model params     = 2.51 B
0.00.605.348 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.349 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.350 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.350 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.351 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.353 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.354 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.354 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.360 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.361 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.362 I llm_load_print_meta: max token length = 93
0.00.668.647 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.668.657 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.668.658 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.668.658 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.668.659 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.668.660 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.674.429 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.436 I llama_new_context_with_model: n_batch    = 2048
0.00.674.437 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.437 I llama_new_context_with_model: flash_attn = 0
0.00.674.440 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.441 I llama_new_context_with_model: freq_scale = 1
0.00.703.814 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.854 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.977 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.569 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.574 I llama_new_context_with_model: graph nodes  = 601
0.00.706.574 I llama_new_context_with_model: graph splits = 1
0.00.706.590 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.083 I main: llama threadpool init, n_threads = 4
0.01.283.097 I 
0.01.283.204 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.208 I 
0.01.283.442 I sampler seed: 2620928217
0.01.283.456 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.462 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.283.465 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.283.466 I 
 seconally to the question.

I am unable to access the question. I do not have access to external websites or the ability to retrieve information from them.

0.12.166.927 I llama_perf_sampler_print:    sampling time =      48.01 ms /    33 runs   (    1.45 ms per token,   687.36 tokens per second)
0.12.166.943 I llama_perf_context_print:        load time =    1280.19 ms
0.12.166.945 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.166.946 I llama_perf_context_print:        eval time =   10790.61 ms /    32 runs   (  337.21 ms per token,     2.97 tokens per second)
0.12.166.947 I llama_perf_context_print:       total time =   10883.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4007 (d865d147)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199005.60 ms
main:    total time = 199005.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.698 I build: 4007 (d865d147) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
0.00.025.906 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.014 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.028 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.030 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.035 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.039 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.040 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.041 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.042 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.043 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.050 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.051 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.053 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.054 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.056 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.893 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.649 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.124 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.133 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.134 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.135 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.136 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.137 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.139 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.143 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.144 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.153 I llama_model_loader: - type  f32:   37 tensors
0.00.268.155 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.156 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.010 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.783 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.711 I llm_load_vocab: special tokens cache size = 5
0.00.613.514 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.581 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.582 I llm_load_print_meta: arch             = gemma
0.00.613.582 I llm_load_print_meta: vocab type       = SPM
0.00.613.583 I llm_load_print_meta: n_vocab          = 256000
0.00.613.585 I llm_load_print_meta: n_merges         = 0
0.00.613.586 I llm_load_print_meta: vocab_only       = 0
0.00.613.586 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.593 I llm_load_print_meta: n_embd           = 2048
0.00.613.594 I llm_load_print_meta: n_layer          = 18
0.00.613.657 I llm_load_print_meta: n_head           = 8
0.00.613.664 I llm_load_print_meta: n_head_kv        = 1
0.00.613.665 I llm_load_print_meta: n_rot            = 256
0.00.613.665 I llm_load_print_meta: n_swa            = 0
0.00.613.666 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.666 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.670 I llm_load_print_meta: n_gqa            = 8
0.00.613.675 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.680 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.682 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.684 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.684 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.690 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.691 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.696 I llm_load_print_meta: n_ff             = 16384
0.00.613.696 I llm_load_print_meta: n_expert         = 0
0.00.613.697 I llm_load_print_meta: n_expert_used    = 0
0.00.613.698 I llm_load_print_meta: causal attn      = 1
0.00.613.699 I llm_load_print_meta: pooling type     = 0
0.00.613.699 I llm_load_print_meta: rope type        = 2
0.00.613.711 I llm_load_print_meta: rope scaling     = linear
0.00.613.713 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.713 I llm_load_print_meta: freq_scale_train = 1
0.00.613.725 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.726 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.726 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.726 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.727 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.727 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.727 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.729 I llm_load_print_meta: model type       = 2B
0.00.613.730 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.613.731 I llm_load_print_meta: model params     = 2.51 B
0.00.613.732 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.613.732 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.733 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.733 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.734 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.734 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.735 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.737 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.743 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.745 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.745 I llm_load_print_meta: max token length = 93
0.00.675.568 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.681.451 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.458 I llama_new_context_with_model: n_batch    = 2048
0.00.681.458 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.459 I llama_new_context_with_model: flash_attn = 0
0.00.681.461 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.462 I llama_new_context_with_model: freq_scale = 1
0.00.710.865 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.904 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.711.032 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.713.551 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.713.555 I llama_new_context_with_model: graph nodes  = 601
0.00.713.556 I llama_new_context_with_model: graph splits = 1
0.00.713.572 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.662 I main: llama threadpool init, n_threads = 4
0.01.290.674 I 
0.01.290.779 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.783 I 
0.01.291.008 I sampler seed: 2312070790
0.01.291.021 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.027 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.291.038 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.291.040 I 
 seconally. 

**Assistant**

I am unable to provide assistance with sexually suggestive or inappropriate content. My purpose is to assist with tasks and questions that

0.12.140.190 I llama_perf_sampler_print:    sampling time =      48.04 ms /    33 runs   (    1.46 ms per token,   686.97 tokens per second)
0.12.140.194 I llama_perf_context_print:        load time =    1287.75 ms
0.12.140.196 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.140.199 I llama_perf_context_print:        eval time =   10755.25 ms /    32 runs   (  336.10 ms per token,     2.98 tokens per second)
0.12.140.200 I llama_perf_context_print:       total time =   10849.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.298s
user	50m7.449s
sys	0m6.431s
