+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.001.087 I main: load the model and apply lora adapter, if any
0.00.023.608 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.619 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.710 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.721 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.723 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.728 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.730 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.731 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.732 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.733 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.734 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.741 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.744 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.746 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.014 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.553 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.692 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.701 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.702 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.705 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.706 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.707 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.711 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.712 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.713 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.714 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.715 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.723 I llama_model_loader: - type  f32:   37 tensors
0.00.271.725 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.355 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.944 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.984 I llm_load_vocab: special tokens cache size = 5
0.00.613.931 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.002 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.006 I llm_load_print_meta: arch             = gemma
0.00.614.007 I llm_load_print_meta: vocab type       = SPM
0.00.614.007 I llm_load_print_meta: n_vocab          = 256000
0.00.614.010 I llm_load_print_meta: n_merges         = 0
0.00.614.010 I llm_load_print_meta: vocab_only       = 0
0.00.614.011 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.011 I llm_load_print_meta: n_embd           = 2048
0.00.614.012 I llm_load_print_meta: n_layer          = 18
0.00.614.077 I llm_load_print_meta: n_head           = 8
0.00.614.087 I llm_load_print_meta: n_head_kv        = 1
0.00.614.088 I llm_load_print_meta: n_rot            = 256
0.00.614.089 I llm_load_print_meta: n_swa            = 0
0.00.614.089 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.089 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.094 I llm_load_print_meta: n_gqa            = 8
0.00.614.098 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.104 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.107 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.109 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.109 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.110 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.110 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.115 I llm_load_print_meta: n_ff             = 16384
0.00.614.116 I llm_load_print_meta: n_expert         = 0
0.00.614.116 I llm_load_print_meta: n_expert_used    = 0
0.00.614.117 I llm_load_print_meta: causal attn      = 1
0.00.614.118 I llm_load_print_meta: pooling type     = 0
0.00.614.118 I llm_load_print_meta: rope type        = 2
0.00.614.118 I llm_load_print_meta: rope scaling     = linear
0.00.614.120 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.122 I llm_load_print_meta: freq_scale_train = 1
0.00.614.123 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.124 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.124 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.124 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.125 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.125 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.126 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.126 I llm_load_print_meta: model type       = 2B
0.00.614.127 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.128 I llm_load_print_meta: model params     = 2.51 B
0.00.614.137 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.138 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.138 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.148 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.160 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.161 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.162 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.162 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.169 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.171 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.171 I llm_load_print_meta: max token length = 93
0.00.714.374 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.714.383 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.714.384 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.714.384 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.714.385 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.714.386 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.720.242 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.248 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.248 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.249 I llama_new_context_with_model: n_batch       = 2048
0.00.720.249 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.250 I llama_new_context_with_model: flash_attn    = 0
0.00.720.252 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.253 I llama_new_context_with_model: freq_scale    = 1
0.00.720.253 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.991 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.031 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.159 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.712 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.716 I llama_new_context_with_model: graph nodes  = 601
0.00.739.716 I llama_new_context_with_model: graph splits = 1
0.00.739.741 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.346.052 I main: llama threadpool init, n_threads = 4
0.01.346.066 I 
0.01.346.174 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.346.177 I 
0.01.346.412 I sampler seed: 2375833327
0.01.346.425 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.431 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.346.435 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.435 I 
 increasities, and sexual harassment.

Sexual harassment is a pervasive issue that affects individuals across different genders, ages, and occupations. It is a form of discrimination

0.14.797.664 I llama_perf_sampler_print:    sampling time =      48.27 ms /    33 runs   (    1.46 ms per token,   683.67 tokens per second)
0.14.797.667 I llama_perf_context_print:        load time =    1344.87 ms
0.14.797.668 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.797.682 I llama_perf_context_print:        eval time =   13362.32 ms /    32 runs   (  417.57 ms per token,     2.39 tokens per second)
0.14.797.684 I llama_perf_context_print:       total time =   13451.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.001.112 I main: load the model and apply lora adapter, if any
0.00.023.274 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.366 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.380 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.382 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.386 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.390 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.391 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.393 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.394 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.395 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.402 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.403 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.404 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.405 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.406 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.092 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.144 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.153 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.160 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.162 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.163 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.164 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.165 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.166 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.170 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.171 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.172 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.173 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.192 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.201 I llama_model_loader: - type  f32:   37 tensors
0.00.264.203 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.321 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.017 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.590 I llm_load_vocab: special tokens cache size = 5
0.00.604.354 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.430 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.431 I llm_load_print_meta: arch             = gemma
0.00.604.431 I llm_load_print_meta: vocab type       = SPM
0.00.604.432 I llm_load_print_meta: n_vocab          = 256000
0.00.604.435 I llm_load_print_meta: n_merges         = 0
0.00.604.435 I llm_load_print_meta: vocab_only       = 0
0.00.604.436 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.436 I llm_load_print_meta: n_embd           = 2048
0.00.604.437 I llm_load_print_meta: n_layer          = 18
0.00.604.500 I llm_load_print_meta: n_head           = 8
0.00.604.507 I llm_load_print_meta: n_head_kv        = 1
0.00.604.509 I llm_load_print_meta: n_rot            = 256
0.00.604.510 I llm_load_print_meta: n_swa            = 0
0.00.604.510 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.511 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.539 I llm_load_print_meta: n_gqa            = 8
0.00.604.547 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.563 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.569 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.571 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.571 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.572 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.573 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.578 I llm_load_print_meta: n_ff             = 16384
0.00.604.579 I llm_load_print_meta: n_expert         = 0
0.00.604.580 I llm_load_print_meta: n_expert_used    = 0
0.00.604.580 I llm_load_print_meta: causal attn      = 1
0.00.604.581 I llm_load_print_meta: pooling type     = 0
0.00.604.582 I llm_load_print_meta: rope type        = 2
0.00.604.582 I llm_load_print_meta: rope scaling     = linear
0.00.604.583 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.584 I llm_load_print_meta: freq_scale_train = 1
0.00.604.585 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.587 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.588 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.588 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.588 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.588 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.589 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.589 I llm_load_print_meta: model type       = 2B
0.00.604.590 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.591 I llm_load_print_meta: model params     = 2.51 B
0.00.604.599 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.599 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.600 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.602 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.603 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.603 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.609 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.611 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.611 I llm_load_print_meta: max token length = 93
0.00.704.115 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.709.913 I llama_new_context_with_model: n_seq_max     = 1
0.00.709.921 I llama_new_context_with_model: n_ctx         = 4096
0.00.709.921 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.709.922 I llama_new_context_with_model: n_batch       = 2048
0.00.709.922 I llama_new_context_with_model: n_ubatch      = 512
0.00.709.923 I llama_new_context_with_model: flash_attn    = 0
0.00.709.926 I llama_new_context_with_model: freq_base     = 10000.0
0.00.709.927 I llama_new_context_with_model: freq_scale    = 1
0.00.709.928 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.727.338 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.727.381 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.727.515 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.079 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.730.083 I llama_new_context_with_model: graph nodes  = 601
0.00.730.084 I llama_new_context_with_model: graph splits = 1
0.00.730.108 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.719 I main: llama threadpool init, n_threads = 4
0.01.343.729 I 
0.01.343.877 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.882 I 
0.01.344.196 I sampler seed: 2575913557
0.01.344.210 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.221 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.222 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.222 I 
 increasities in the late Middle Ages:

**A. Sexualization of religious rituals**

Sexualization of religious rituals refers to the transformation of sacred rituals into

0.14.864.229 I llama_perf_sampler_print:    sampling time =      48.29 ms /    33 runs   (    1.46 ms per token,   683.37 tokens per second)
0.14.864.231 I llama_perf_context_print:        load time =    1342.52 ms
0.14.864.255 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.864.257 I llama_perf_context_print:        eval time =   13430.93 ms /    32 runs   (  419.72 ms per token,     2.38 tokens per second)
0.14.864.265 I llama_perf_context_print:       total time =   13520.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.001.133 I main: load the model and apply lora adapter, if any
0.00.023.914 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.926 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.019 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.031 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.032 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.037 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.038 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.040 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.041 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.043 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.051 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.055 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.056 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.057 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.058 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.599 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.743 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.751 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.752 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.753 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.755 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.757 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.758 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.762 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.763 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.764 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.765 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.273.768 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.775 I llama_model_loader: - type  f32:   37 tensors
0.00.273.779 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.729 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.738 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.643 I llm_load_vocab: special tokens cache size = 5
0.00.606.286 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.357 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.358 I llm_load_print_meta: arch             = gemma
0.00.606.359 I llm_load_print_meta: vocab type       = SPM
0.00.606.360 I llm_load_print_meta: n_vocab          = 256000
0.00.606.363 I llm_load_print_meta: n_merges         = 0
0.00.606.363 I llm_load_print_meta: vocab_only       = 0
0.00.606.364 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.364 I llm_load_print_meta: n_embd           = 2048
0.00.606.365 I llm_load_print_meta: n_layer          = 18
0.00.606.432 I llm_load_print_meta: n_head           = 8
0.00.606.439 I llm_load_print_meta: n_head_kv        = 1
0.00.606.440 I llm_load_print_meta: n_rot            = 256
0.00.606.440 I llm_load_print_meta: n_swa            = 0
0.00.606.441 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.441 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.446 I llm_load_print_meta: n_gqa            = 8
0.00.606.451 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.457 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.459 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.461 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.462 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.462 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.462 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.467 I llm_load_print_meta: n_ff             = 16384
0.00.606.468 I llm_load_print_meta: n_expert         = 0
0.00.606.468 I llm_load_print_meta: n_expert_used    = 0
0.00.606.469 I llm_load_print_meta: causal attn      = 1
0.00.606.473 I llm_load_print_meta: pooling type     = 0
0.00.606.474 I llm_load_print_meta: rope type        = 2
0.00.606.474 I llm_load_print_meta: rope scaling     = linear
0.00.606.499 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.504 I llm_load_print_meta: freq_scale_train = 1
0.00.606.504 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.505 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.505 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.505 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.506 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.506 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.507 I llm_load_print_meta: model type       = 2B
0.00.606.508 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.509 I llm_load_print_meta: model params     = 2.51 B
0.00.606.518 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.519 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.519 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.520 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.521 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.523 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.523 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.524 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.530 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.532 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.532 I llm_load_print_meta: max token length = 93
0.00.696.746 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.696.754 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.696.755 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.696.755 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.696.756 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.696.757 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.702.684 I llama_new_context_with_model: n_seq_max     = 1
0.00.702.692 I llama_new_context_with_model: n_ctx         = 4096
0.00.702.692 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.702.692 I llama_new_context_with_model: n_batch       = 2048
0.00.702.693 I llama_new_context_with_model: n_ubatch      = 512
0.00.702.693 I llama_new_context_with_model: flash_attn    = 0
0.00.702.695 I llama_new_context_with_model: freq_base     = 10000.0
0.00.702.696 I llama_new_context_with_model: freq_scale    = 1
0.00.702.697 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.719.000 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.719.037 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.719.160 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.720 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.721.724 I llama_new_context_with_model: graph nodes  = 601
0.00.721.725 I llama_new_context_with_model: graph splits = 1
0.00.721.749 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.327.577 I main: llama threadpool init, n_threads = 4
0.01.327.590 I 
0.01.327.697 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.327.701 I 
0.01.327.955 I sampler seed: 498528779
0.01.327.967 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.327.974 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.327.977 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.327.978 I 
 increasities, the last of which took place in the year 476 AD.

The ancient Roman city of Pompeii lies nestled amidst a desolate landscape,

0.14.694.990 I llama_perf_sampler_print:    sampling time =      48.04 ms /    33 runs   (    1.46 ms per token,   686.87 tokens per second)
0.14.694.993 I llama_perf_context_print:        load time =    1326.34 ms
0.14.694.995 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.694.996 I llama_perf_context_print:        eval time =   13278.40 ms /    32 runs   (  414.95 ms per token,     2.41 tokens per second)
0.14.695.011 I llama_perf_context_print:       total time =   13367.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.001.123 I main: load the model and apply lora adapter, if any
0.00.023.412 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.449 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.544 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.557 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.558 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.563 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.567 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.568 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.570 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.572 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.575 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.583 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.588 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.590 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.594 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.686 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.600 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.727 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.737 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.738 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.739 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.740 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.742 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.743 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.746 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.747 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.749 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.749 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.264.751 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.758 I llama_model_loader: - type  f32:   37 tensors
0.00.264.760 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.124 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.945 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.936 I llm_load_vocab: special tokens cache size = 5
0.00.613.042 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.115 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.116 I llm_load_print_meta: arch             = gemma
0.00.613.116 I llm_load_print_meta: vocab type       = SPM
0.00.613.117 I llm_load_print_meta: n_vocab          = 256000
0.00.613.120 I llm_load_print_meta: n_merges         = 0
0.00.613.120 I llm_load_print_meta: vocab_only       = 0
0.00.613.120 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.121 I llm_load_print_meta: n_embd           = 2048
0.00.613.121 I llm_load_print_meta: n_layer          = 18
0.00.613.185 I llm_load_print_meta: n_head           = 8
0.00.613.192 I llm_load_print_meta: n_head_kv        = 1
0.00.613.193 I llm_load_print_meta: n_rot            = 256
0.00.613.193 I llm_load_print_meta: n_swa            = 0
0.00.613.193 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.194 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.199 I llm_load_print_meta: n_gqa            = 8
0.00.613.204 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.209 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.210 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.211 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.212 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.212 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.213 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.218 I llm_load_print_meta: n_ff             = 16384
0.00.613.219 I llm_load_print_meta: n_expert         = 0
0.00.613.219 I llm_load_print_meta: n_expert_used    = 0
0.00.613.220 I llm_load_print_meta: causal attn      = 1
0.00.613.224 I llm_load_print_meta: pooling type     = 0
0.00.613.224 I llm_load_print_meta: rope type        = 2
0.00.613.225 I llm_load_print_meta: rope scaling     = linear
0.00.613.227 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.227 I llm_load_print_meta: freq_scale_train = 1
0.00.613.228 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.237 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.238 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.238 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.251 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.251 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.252 I llm_load_print_meta: model type       = 2B
0.00.613.253 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.254 I llm_load_print_meta: model params     = 2.51 B
0.00.613.263 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.264 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.264 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.272 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.281 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.282 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.282 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.282 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.289 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.290 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.297 I llm_load_print_meta: max token length = 93
0.00.685.583 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.685.594 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.691.737 I llama_new_context_with_model: n_seq_max     = 1
0.00.691.743 I llama_new_context_with_model: n_ctx         = 4096
0.00.691.744 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.691.744 I llama_new_context_with_model: n_batch       = 2048
0.00.691.744 I llama_new_context_with_model: n_ubatch      = 512
0.00.691.745 I llama_new_context_with_model: flash_attn    = 0
0.00.691.747 I llama_new_context_with_model: freq_base     = 10000.0
0.00.691.747 I llama_new_context_with_model: freq_scale    = 1
0.00.691.748 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.708.114 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.708.155 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.708.292 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.827 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.710.830 I llama_new_context_with_model: graph nodes  = 601
0.00.710.831 I llama_new_context_with_model: graph splits = 1
0.00.710.856 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.035 I main: llama threadpool init, n_threads = 4
0.01.316.046 I 
0.01.316.164 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.169 I 
0.01.316.409 I sampler seed: 1376748130
0.01.316.421 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.428 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.316.429 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.316.429 I 
 seconormal patterns have been identified in an electrophysiological signal recorded from a human EEG electrode. 

**a) What are the possible interpretations of these patterns?

0.14.730.463 I llama_perf_sampler_print:    sampling time =      47.88 ms /    33 runs   (    1.45 ms per token,   689.15 tokens per second)
0.14.730.477 I llama_perf_context_print:        load time =    1314.81 ms
0.14.730.479 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.730.481 I llama_perf_context_print:        eval time =   13325.42 ms /    32 runs   (  416.42 ms per token,     2.40 tokens per second)
0.14.730.482 I llama_perf_context_print:       total time =   13414.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.166s
user	3m47.609s
sys	0m9.463s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4052 (d807a86e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198531.30 ms
main:    total time = 198531.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.001.144 I main: load the model and apply lora adapter, if any
0.00.023.846 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.860 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.962 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.976 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.977 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.982 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.984 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.985 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.987 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.988 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.990 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.997 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.999 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.000 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.002 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.004 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.961 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.078 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.262 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.272 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.273 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.274 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.275 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.276 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.277 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.281 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.282 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.283 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.284 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.285 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.294 I llama_model_loader: - type  f32:   37 tensors
0.00.265.297 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.297 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.614 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.392 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.381 I llm_load_vocab: special tokens cache size = 5
0.00.613.554 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.625 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.626 I llm_load_print_meta: arch             = gemma
0.00.613.627 I llm_load_print_meta: vocab type       = SPM
0.00.613.628 I llm_load_print_meta: n_vocab          = 256000
0.00.613.630 I llm_load_print_meta: n_merges         = 0
0.00.613.631 I llm_load_print_meta: vocab_only       = 0
0.00.613.631 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.631 I llm_load_print_meta: n_embd           = 2048
0.00.613.632 I llm_load_print_meta: n_layer          = 18
0.00.613.694 I llm_load_print_meta: n_head           = 8
0.00.613.701 I llm_load_print_meta: n_head_kv        = 1
0.00.613.702 I llm_load_print_meta: n_rot            = 256
0.00.613.704 I llm_load_print_meta: n_swa            = 0
0.00.613.705 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.715 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.720 I llm_load_print_meta: n_gqa            = 8
0.00.613.725 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.730 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.732 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.733 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.733 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.734 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.734 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.740 I llm_load_print_meta: n_ff             = 16384
0.00.613.741 I llm_load_print_meta: n_expert         = 0
0.00.613.741 I llm_load_print_meta: n_expert_used    = 0
0.00.613.742 I llm_load_print_meta: causal attn      = 1
0.00.613.756 I llm_load_print_meta: pooling type     = 0
0.00.613.760 I llm_load_print_meta: rope type        = 2
0.00.613.760 I llm_load_print_meta: rope scaling     = linear
0.00.613.762 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.762 I llm_load_print_meta: freq_scale_train = 1
0.00.613.763 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.763 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.763 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.764 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.764 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.765 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.765 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.774 I llm_load_print_meta: model type       = 2B
0.00.613.778 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.613.779 I llm_load_print_meta: model params     = 2.51 B
0.00.613.787 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.613.787 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.788 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.789 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.789 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.790 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.791 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.791 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.797 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.799 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.800 I llm_load_print_meta: max token length = 93
0.00.677.375 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.677.387 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.677.387 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.677.388 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.677.389 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.677.389 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.683.231 I llama_new_context_with_model: n_seq_max     = 1
0.00.683.238 I llama_new_context_with_model: n_ctx         = 4096
0.00.683.238 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.683.239 I llama_new_context_with_model: n_batch       = 2048
0.00.683.239 I llama_new_context_with_model: n_ubatch      = 512
0.00.683.240 I llama_new_context_with_model: flash_attn    = 0
0.00.683.242 I llama_new_context_with_model: freq_base     = 10000.0
0.00.683.243 I llama_new_context_with_model: freq_scale    = 1
0.00.683.243 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.699.920 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.699.961 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.700.081 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.649 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.702.654 I llama_new_context_with_model: graph nodes  = 601
0.00.702.654 I llama_new_context_with_model: graph splits = 1
0.00.702.678 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.525 I main: llama threadpool init, n_threads = 4
0.01.274.537 I 
0.01.274.642 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.645 I 
0.01.274.878 I sampler seed: 2576148073
0.01.274.891 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.900 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.274.901 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.901 I 
 increasities, and other forms of sexual harassment in the workplace.

**Response:**

**1. Awareness and Education:**

- Educate employees about sexual harassment

0.12.136.306 I llama_perf_sampler_print:    sampling time =      48.18 ms /    33 runs   (    1.46 ms per token,   684.96 tokens per second)
0.12.136.309 I llama_perf_context_print:        load time =    1273.28 ms
0.12.136.322 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.136.325 I llama_perf_context_print:        eval time =   10772.37 ms /    32 runs   (  336.64 ms per token,     2.97 tokens per second)
0.12.136.326 I llama_perf_context_print:       total time =   10861.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4052 (d807a86e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198631.21 ms
main:    total time = 198631.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.001.104 I main: load the model and apply lora adapter, if any
0.00.023.125 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.228 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.242 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.248 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.250 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.252 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.253 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.254 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.255 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.261 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.263 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.264 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.267 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.551 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.755 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.966 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.976 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.978 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.979 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.980 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.981 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.983 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.988 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.989 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.997 I llama_model_loader: - type  f32:   37 tensors
0.00.271.000 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.001 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.704 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.368 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.312 I llm_load_vocab: special tokens cache size = 5
0.00.611.240 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.311 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.312 I llm_load_print_meta: arch             = gemma
0.00.611.313 I llm_load_print_meta: vocab type       = SPM
0.00.611.314 I llm_load_print_meta: n_vocab          = 256000
0.00.611.316 I llm_load_print_meta: n_merges         = 0
0.00.611.317 I llm_load_print_meta: vocab_only       = 0
0.00.611.317 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.317 I llm_load_print_meta: n_embd           = 2048
0.00.611.318 I llm_load_print_meta: n_layer          = 18
0.00.611.385 I llm_load_print_meta: n_head           = 8
0.00.611.392 I llm_load_print_meta: n_head_kv        = 1
0.00.611.392 I llm_load_print_meta: n_rot            = 256
0.00.611.394 I llm_load_print_meta: n_swa            = 0
0.00.611.395 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.395 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.400 I llm_load_print_meta: n_gqa            = 8
0.00.611.404 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.409 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.410 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.412 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.425 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.426 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.431 I llm_load_print_meta: n_ff             = 16384
0.00.611.432 I llm_load_print_meta: n_expert         = 0
0.00.611.432 I llm_load_print_meta: n_expert_used    = 0
0.00.611.432 I llm_load_print_meta: causal attn      = 1
0.00.611.433 I llm_load_print_meta: pooling type     = 0
0.00.611.434 I llm_load_print_meta: rope type        = 2
0.00.611.434 I llm_load_print_meta: rope scaling     = linear
0.00.611.436 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.436 I llm_load_print_meta: freq_scale_train = 1
0.00.611.437 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.437 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.438 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.438 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.439 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.440 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.440 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.441 I llm_load_print_meta: model type       = 2B
0.00.611.442 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.443 I llm_load_print_meta: model params     = 2.51 B
0.00.611.453 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.453 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.458 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.459 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.459 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.460 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.464 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.470 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.472 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.472 I llm_load_print_meta: max token length = 93
0.00.670.492 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.676.134 I llama_new_context_with_model: n_seq_max     = 1
0.00.676.142 I llama_new_context_with_model: n_ctx         = 4096
0.00.676.143 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.676.143 I llama_new_context_with_model: n_batch       = 2048
0.00.676.144 I llama_new_context_with_model: n_ubatch      = 512
0.00.676.144 I llama_new_context_with_model: flash_attn    = 0
0.00.676.147 I llama_new_context_with_model: freq_base     = 10000.0
0.00.676.148 I llama_new_context_with_model: freq_scale    = 1
0.00.676.148 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.692.651 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.692.692 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.692.815 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.349 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.695.353 I llama_new_context_with_model: graph nodes  = 601
0.00.695.354 I llama_new_context_with_model: graph splits = 1
0.00.695.378 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.459 I main: llama threadpool init, n_threads = 4
0.01.267.472 I 
0.01.267.588 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.592 I 
0.01.267.824 I sampler seed: 1377710883
0.01.267.838 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.267.844 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.267.847 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.267.848 I 
 increasities. [end of text]


0.02.626.884 I llama_perf_sampler_print:    sampling time =       6.10 ms /     5 runs   (    1.22 ms per token,   819.27 tokens per second)
0.02.626.887 I llama_perf_context_print:        load time =    1266.26 ms
0.02.626.889 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.626.900 I llama_perf_context_print:        eval time =    1346.33 ms /     4 runs   (  336.58 ms per token,     2.97 tokens per second)
0.02.626.901 I llama_perf_context_print:       total time =    1359.43 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m54.795s
user	49m31.567s
sys	0m6.321s
