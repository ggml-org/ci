+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.595 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.806 I main: llama backend init
0.00.000.944 I main: load the model and apply lora adapter, if any
0.00.021.814 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.824 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.832 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.837 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.838 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.842 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.843 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.844 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.845 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.845 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.846 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.851 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.852 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.853 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.853 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.854 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.207 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.186 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.024 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.031 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.031 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.032 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.032 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.033 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.034 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.036 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.036 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.037 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.037 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.039 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.042 I llama_model_loader: - type  f32:   37 tensors
0.00.132.043 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.395 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.544 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.057 I llm_load_vocab: special tokens cache size = 5
0.00.284.176 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.193 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.194 I llm_load_print_meta: arch             = gemma
0.00.284.195 I llm_load_print_meta: vocab type       = SPM
0.00.284.196 I llm_load_print_meta: n_vocab          = 256000
0.00.284.196 I llm_load_print_meta: n_merges         = 0
0.00.284.196 I llm_load_print_meta: vocab_only       = 0
0.00.284.197 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.197 I llm_load_print_meta: n_embd           = 2048
0.00.284.197 I llm_load_print_meta: n_layer          = 18
0.00.284.209 I llm_load_print_meta: n_head           = 8
0.00.284.210 I llm_load_print_meta: n_head_kv        = 1
0.00.284.210 I llm_load_print_meta: n_rot            = 256
0.00.284.211 I llm_load_print_meta: n_swa            = 0
0.00.284.211 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.211 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.212 I llm_load_print_meta: n_gqa            = 8
0.00.284.213 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.214 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.215 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.217 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.217 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.217 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.218 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.218 I llm_load_print_meta: n_ff             = 16384
0.00.284.219 I llm_load_print_meta: n_expert         = 0
0.00.284.219 I llm_load_print_meta: n_expert_used    = 0
0.00.284.219 I llm_load_print_meta: causal attn      = 1
0.00.284.220 I llm_load_print_meta: pooling type     = 0
0.00.284.220 I llm_load_print_meta: rope type        = 2
0.00.284.221 I llm_load_print_meta: rope scaling     = linear
0.00.284.222 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.223 I llm_load_print_meta: freq_scale_train = 1
0.00.284.223 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.223 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.224 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.224 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.224 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.224 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.225 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.225 I llm_load_print_meta: model type       = 2B
0.00.284.226 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.226 I llm_load_print_meta: model params     = 2.51 B
0.00.284.227 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.228 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.229 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.229 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.230 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.231 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.231 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.232 I llm_load_print_meta: max token length = 93
0.00.384.468 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.384.477 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.384.478 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.384.478 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.384.479 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.384.480 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.389.694 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.700 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.701 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.701 I llama_new_context_with_model: n_batch       = 2048
0.00.389.702 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.702 I llama_new_context_with_model: flash_attn    = 0
0.00.389.704 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.705 I llama_new_context_with_model: freq_scale    = 1
0.00.389.706 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.404.797 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.811 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.901 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.111 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.118 I llama_new_context_with_model: graph nodes  = 601
0.00.406.118 I llama_new_context_with_model: graph splits = 1
0.00.406.120 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.462 I main: llama threadpool init, n_threads = 4
0.00.491.477 I 
0.00.491.552 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.556 I 
0.00.491.597 I sampler seed: 3630144889
0.00.491.609 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.614 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.615 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.615 I 
 maneupherously.

I cannot answer this question as it contains sexually suggestive content. [end of text]


0.01.764.070 I llama_perf_sampler_print:    sampling time =       2.94 ms /    19 runs   (    0.15 ms per token,  6462.59 tokens per second)
0.01.764.073 I llama_perf_context_print:        load time =     490.49 ms
0.01.764.074 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.764.076 I llama_perf_context_print:        eval time =    1261.34 ms /    18 runs   (   70.07 ms per token,    14.27 tokens per second)
0.01.764.076 I llama_perf_context_print:       total time =    1272.62 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.553 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.780 I main: llama backend init
0.00.000.911 I main: load the model and apply lora adapter, if any
0.00.021.428 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.443 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.453 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.454 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.458 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.459 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.460 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.461 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.461 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.462 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.467 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.467 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.468 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.468 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.469 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.711 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.894 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.772 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.779 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.780 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.780 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.781 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.782 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.782 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.785 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.785 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.786 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.786 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.788 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.792 I llama_model_loader: - type  f32:   37 tensors
0.00.131.793 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.268 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.700 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.242 I llm_load_vocab: special tokens cache size = 5
0.00.269.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.755 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.755 I llm_load_print_meta: arch             = gemma
0.00.269.756 I llm_load_print_meta: vocab type       = SPM
0.00.269.757 I llm_load_print_meta: n_vocab          = 256000
0.00.269.758 I llm_load_print_meta: n_merges         = 0
0.00.269.759 I llm_load_print_meta: vocab_only       = 0
0.00.269.760 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.760 I llm_load_print_meta: n_embd           = 2048
0.00.269.761 I llm_load_print_meta: n_layer          = 18
0.00.269.773 I llm_load_print_meta: n_head           = 8
0.00.269.774 I llm_load_print_meta: n_head_kv        = 1
0.00.269.774 I llm_load_print_meta: n_rot            = 256
0.00.269.774 I llm_load_print_meta: n_swa            = 0
0.00.269.775 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.776 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.777 I llm_load_print_meta: n_gqa            = 8
0.00.269.778 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.782 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.783 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.783 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.784 I llm_load_print_meta: n_ff             = 16384
0.00.269.785 I llm_load_print_meta: n_expert         = 0
0.00.269.785 I llm_load_print_meta: n_expert_used    = 0
0.00.269.786 I llm_load_print_meta: causal attn      = 1
0.00.269.786 I llm_load_print_meta: pooling type     = 0
0.00.269.787 I llm_load_print_meta: rope type        = 2
0.00.269.787 I llm_load_print_meta: rope scaling     = linear
0.00.269.789 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.790 I llm_load_print_meta: freq_scale_train = 1
0.00.269.790 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.791 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.791 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.792 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.792 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.792 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.793 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.793 I llm_load_print_meta: model type       = 2B
0.00.269.794 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.795 I llm_load_print_meta: model params     = 2.51 B
0.00.269.795 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.796 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.797 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.797 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.802 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.802 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.803 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.804 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.804 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.804 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.805 I llm_load_print_meta: max token length = 93
0.00.365.459 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.370.663 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.669 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.670 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.670 I llama_new_context_with_model: n_batch       = 2048
0.00.370.671 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.671 I llama_new_context_with_model: flash_attn    = 0
0.00.370.673 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.674 I llama_new_context_with_model: freq_scale    = 1
0.00.370.675 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.763 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.778 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.870 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.115 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.121 I llama_new_context_with_model: graph nodes  = 601
0.00.388.121 I llama_new_context_with_model: graph splits = 1
0.00.388.123 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.582 I main: llama threadpool init, n_threads = 4
0.00.470.597 I 
0.00.470.678 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.682 I 
0.00.470.729 I sampler seed: 3859617290
0.00.470.741 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.746 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.747 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.747 I 
 increably.

I am not sure what you mean. Could you please explain? [end of text]


0.01.700.174 I llama_perf_sampler_print:    sampling time =       2.64 ms /    19 runs   (    0.14 ms per token,  7205.16 tokens per second)
0.01.700.177 I llama_perf_context_print:        load time =     469.65 ms
0.01.700.178 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.700.180 I llama_perf_context_print:        eval time =    1218.71 ms /    18 runs   (   67.71 ms per token,    14.77 tokens per second)
0.01.700.181 I llama_perf_context_print:       total time =    1229.60 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.543 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.021.337 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.348 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.355 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.360 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.361 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.365 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.365 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.366 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.367 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.367 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.368 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.372 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.373 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.373 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.374 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.374 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.955 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.995 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.232 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.239 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.240 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.241 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.242 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.242 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.243 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.245 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.246 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.246 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.247 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.248 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.252 I llama_model_loader: - type  f32:   37 tensors
0.00.133.253 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.243 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.645 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.306 I llm_load_vocab: special tokens cache size = 5
0.00.274.746 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.766 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.767 I llm_load_print_meta: arch             = gemma
0.00.274.768 I llm_load_print_meta: vocab type       = SPM
0.00.274.768 I llm_load_print_meta: n_vocab          = 256000
0.00.274.768 I llm_load_print_meta: n_merges         = 0
0.00.274.769 I llm_load_print_meta: vocab_only       = 0
0.00.274.769 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.770 I llm_load_print_meta: n_embd           = 2048
0.00.274.770 I llm_load_print_meta: n_layer          = 18
0.00.274.782 I llm_load_print_meta: n_head           = 8
0.00.274.782 I llm_load_print_meta: n_head_kv        = 1
0.00.274.783 I llm_load_print_meta: n_rot            = 256
0.00.274.783 I llm_load_print_meta: n_swa            = 0
0.00.274.783 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.784 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.785 I llm_load_print_meta: n_gqa            = 8
0.00.274.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.787 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.787 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.789 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.789 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.790 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.790 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.791 I llm_load_print_meta: n_ff             = 16384
0.00.274.791 I llm_load_print_meta: n_expert         = 0
0.00.274.791 I llm_load_print_meta: n_expert_used    = 0
0.00.274.792 I llm_load_print_meta: causal attn      = 1
0.00.274.792 I llm_load_print_meta: pooling type     = 0
0.00.274.793 I llm_load_print_meta: rope type        = 2
0.00.274.793 I llm_load_print_meta: rope scaling     = linear
0.00.274.794 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.795 I llm_load_print_meta: freq_scale_train = 1
0.00.274.795 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.796 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.796 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.796 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.796 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.796 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.797 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.798 I llm_load_print_meta: model type       = 2B
0.00.274.798 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.799 I llm_load_print_meta: model params     = 2.51 B
0.00.274.800 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.800 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.801 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.801 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.801 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.802 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.802 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.802 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.802 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.803 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.803 I llm_load_print_meta: max token length = 93
0.00.362.283 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.362.290 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.291 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.362.292 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.362.292 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.293 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.367.467 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.474 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.474 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.475 I llama_new_context_with_model: n_batch       = 2048
0.00.367.475 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.476 I llama_new_context_with_model: flash_attn    = 0
0.00.367.478 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.479 I llama_new_context_with_model: freq_scale    = 1
0.00.367.480 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.644 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.657 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.748 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.989 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.994 I llama_new_context_with_model: graph nodes  = 601
0.00.383.995 I llama_new_context_with_model: graph splits = 1
0.00.383.996 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.035 I main: llama threadpool init, n_threads = 4
0.00.469.049 I 
0.00.469.129 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.132 I 
0.00.469.173 I sampler seed: 2908446929
0.00.469.184 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.191 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.194 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.194 I 
 increasities, and the like. [end of text]


0.01.017.170 I llama_perf_sampler_print:    sampling time =       1.27 ms /     9 runs   (    0.14 ms per token,  7081.04 tokens per second)
0.01.017.172 I llama_perf_context_print:        load time =     468.14 ms
0.01.017.173 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.017.175 I llama_perf_context_print:        eval time =     542.33 ms /     8 runs   (   67.79 ms per token,    14.75 tokens per second)
0.01.017.176 I llama_perf_context_print:       total time =     548.14 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.543 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.021.129 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.140 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.148 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.155 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.158 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.159 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.160 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.161 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.161 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.161 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.166 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.167 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.167 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.168 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.168 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.362 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.789 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.641 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.647 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.648 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.649 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.649 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.650 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.651 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.654 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.655 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.656 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.656 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.657 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.662 I llama_model_loader: - type  f32:   37 tensors
0.00.132.663 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.791 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.478 I llm_load_vocab: special tokens cache size = 5
0.00.280.835 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.856 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.857 I llm_load_print_meta: arch             = gemma
0.00.280.857 I llm_load_print_meta: vocab type       = SPM
0.00.280.858 I llm_load_print_meta: n_vocab          = 256000
0.00.280.859 I llm_load_print_meta: n_merges         = 0
0.00.280.859 I llm_load_print_meta: vocab_only       = 0
0.00.280.859 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.859 I llm_load_print_meta: n_embd           = 2048
0.00.280.860 I llm_load_print_meta: n_layer          = 18
0.00.280.872 I llm_load_print_meta: n_head           = 8
0.00.280.873 I llm_load_print_meta: n_head_kv        = 1
0.00.280.874 I llm_load_print_meta: n_rot            = 256
0.00.280.874 I llm_load_print_meta: n_swa            = 0
0.00.280.875 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.875 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.877 I llm_load_print_meta: n_gqa            = 8
0.00.280.878 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.880 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.881 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.882 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.883 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.883 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.884 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.885 I llm_load_print_meta: n_ff             = 16384
0.00.280.885 I llm_load_print_meta: n_expert         = 0
0.00.280.886 I llm_load_print_meta: n_expert_used    = 0
0.00.280.886 I llm_load_print_meta: causal attn      = 1
0.00.280.886 I llm_load_print_meta: pooling type     = 0
0.00.280.887 I llm_load_print_meta: rope type        = 2
0.00.280.887 I llm_load_print_meta: rope scaling     = linear
0.00.280.890 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.890 I llm_load_print_meta: freq_scale_train = 1
0.00.280.891 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.891 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.892 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.892 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.892 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.892 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.893 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.893 I llm_load_print_meta: model type       = 2B
0.00.280.894 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.895 I llm_load_print_meta: model params     = 2.51 B
0.00.280.896 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.896 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.897 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.897 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.898 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.898 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.899 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.899 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.899 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.900 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.901 I llm_load_print_meta: max token length = 93
0.00.351.415 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.351.423 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.356.644 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.650 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.650 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.651 I llama_new_context_with_model: n_batch       = 2048
0.00.356.651 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.652 I llama_new_context_with_model: flash_attn    = 0
0.00.356.654 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.655 I llama_new_context_with_model: freq_scale    = 1
0.00.356.656 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.777 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.791 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.882 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.154 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.159 I llama_new_context_with_model: graph nodes  = 601
0.00.374.160 I llama_new_context_with_model: graph splits = 1
0.00.374.161 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.377 I main: llama threadpool init, n_threads = 4
0.00.462.389 I 
0.00.462.465 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.469 I 
0.00.462.516 I sampler seed: 1027910394
0.00.462.527 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.530 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.531 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.531 I 
 increasements in the prompt.

**Original Prompt:**

I am sorry, I am not able to generate responses that are sexually suggestive in nature.

**

0.02.878.168 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6538.54 tokens per second)
0.02.878.170 I llama_perf_context_print:        load time =     461.48 ms
0.02.878.171 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.878.173 I llama_perf_context_print:        eval time =    2396.51 ms /    32 runs   (   74.89 ms per token,    13.35 tokens per second)
0.02.878.173 I llama_perf_context_print:       total time =    2415.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.914s
user	0m24.836s
sys	0m9.395s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4052 (d807a86e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31991.33 ms
main:    total time = 31991.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.560 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.021.669 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.679 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.687 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.692 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.693 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.697 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.698 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.699 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.700 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.701 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.701 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.704 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.705 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.706 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.707 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.707 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.133 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.563 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.408 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.415 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.416 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.416 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.417 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.418 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.418 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.421 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.422 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.423 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.424 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.424 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.427 I llama_model_loader: - type  f32:   37 tensors
0.00.132.428 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.429 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.747 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.468 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.063 I llm_load_vocab: special tokens cache size = 5
0.00.267.254 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.279 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.279 I llm_load_print_meta: arch             = gemma
0.00.267.280 I llm_load_print_meta: vocab type       = SPM
0.00.267.280 I llm_load_print_meta: n_vocab          = 256000
0.00.267.281 I llm_load_print_meta: n_merges         = 0
0.00.267.281 I llm_load_print_meta: vocab_only       = 0
0.00.267.282 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.282 I llm_load_print_meta: n_embd           = 2048
0.00.267.282 I llm_load_print_meta: n_layer          = 18
0.00.267.294 I llm_load_print_meta: n_head           = 8
0.00.267.295 I llm_load_print_meta: n_head_kv        = 1
0.00.267.295 I llm_load_print_meta: n_rot            = 256
0.00.267.296 I llm_load_print_meta: n_swa            = 0
0.00.267.296 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.296 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.298 I llm_load_print_meta: n_gqa            = 8
0.00.267.299 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.300 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.300 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.302 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.302 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.302 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.303 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.304 I llm_load_print_meta: n_ff             = 16384
0.00.267.304 I llm_load_print_meta: n_expert         = 0
0.00.267.304 I llm_load_print_meta: n_expert_used    = 0
0.00.267.305 I llm_load_print_meta: causal attn      = 1
0.00.267.305 I llm_load_print_meta: pooling type     = 0
0.00.267.305 I llm_load_print_meta: rope type        = 2
0.00.267.306 I llm_load_print_meta: rope scaling     = linear
0.00.267.307 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.308 I llm_load_print_meta: freq_scale_train = 1
0.00.267.308 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.309 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.309 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.309 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.309 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.309 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.310 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.310 I llm_load_print_meta: model type       = 2B
0.00.267.311 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.311 I llm_load_print_meta: model params     = 2.51 B
0.00.267.312 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.312 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.313 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.313 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.314 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.314 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.314 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.314 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.315 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.315 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.315 I llm_load_print_meta: max token length = 93
0.00.328.130 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.136 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.136 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.137 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.138 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.138 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.570 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.578 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.578 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.578 I llama_new_context_with_model: n_batch       = 2048
0.00.333.579 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.579 I llama_new_context_with_model: flash_attn    = 0
0.00.333.583 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.584 I llama_new_context_with_model: freq_scale    = 1
0.00.333.585 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.565 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.581 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.675 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.904 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.910 I llama_new_context_with_model: graph nodes  = 601
0.00.350.911 I llama_new_context_with_model: graph splits = 1
0.00.350.913 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.675 I main: llama threadpool init, n_threads = 4
0.00.436.689 I 
0.00.436.764 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.768 I 
0.00.436.807 I sampler seed: 463726200
0.00.436.818 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.821 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.822 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.822 I 
 seconally after the first sentence.

The COVID-19 pandemic has had a profound impact on global health, and it is imperative that we take immediate action

0.02.088.574 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6529.48 tokens per second)
0.02.088.577 I llama_perf_context_print:        load time =     435.76 ms
0.02.088.579 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.088.580 I llama_perf_context_print:        eval time =    1632.15 ms /    32 runs   (   51.00 ms per token,    19.61 tokens per second)
0.02.088.581 I llama_perf_context_print:       total time =    1651.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4052 (d807a86e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32148.92 ms
main:    total time = 32148.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.547 I build: 4052 (d807a86e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.021.565 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.582 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.590 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.591 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.595 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.597 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.598 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.599 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.600 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.601 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.606 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.607 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.609 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.609 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.610 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.157 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.663 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.526 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.534 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.535 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.535 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.536 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.538 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.539 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.542 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.543 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.548 I llama_model_loader: - type  f32:   37 tensors
0.00.132.549 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.550 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.351 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.837 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.382 I llm_load_vocab: special tokens cache size = 5
0.00.266.648 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.666 I llm_load_print_meta: arch             = gemma
0.00.266.666 I llm_load_print_meta: vocab type       = SPM
0.00.266.667 I llm_load_print_meta: n_vocab          = 256000
0.00.266.667 I llm_load_print_meta: n_merges         = 0
0.00.266.668 I llm_load_print_meta: vocab_only       = 0
0.00.266.668 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.668 I llm_load_print_meta: n_embd           = 2048
0.00.266.668 I llm_load_print_meta: n_layer          = 18
0.00.266.681 I llm_load_print_meta: n_head           = 8
0.00.266.682 I llm_load_print_meta: n_head_kv        = 1
0.00.266.683 I llm_load_print_meta: n_rot            = 256
0.00.266.683 I llm_load_print_meta: n_swa            = 0
0.00.266.683 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.683 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.684 I llm_load_print_meta: n_gqa            = 8
0.00.266.685 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.686 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.687 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.688 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.689 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.689 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.689 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.690 I llm_load_print_meta: n_ff             = 16384
0.00.266.690 I llm_load_print_meta: n_expert         = 0
0.00.266.691 I llm_load_print_meta: n_expert_used    = 0
0.00.266.691 I llm_load_print_meta: causal attn      = 1
0.00.266.691 I llm_load_print_meta: pooling type     = 0
0.00.266.691 I llm_load_print_meta: rope type        = 2
0.00.266.692 I llm_load_print_meta: rope scaling     = linear
0.00.266.693 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.694 I llm_load_print_meta: freq_scale_train = 1
0.00.266.694 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.695 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.695 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.695 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.695 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.695 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.696 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.696 I llm_load_print_meta: model type       = 2B
0.00.266.697 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.697 I llm_load_print_meta: model params     = 2.51 B
0.00.266.698 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.698 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.699 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.699 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.699 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.700 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.700 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.700 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.701 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.701 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.702 I llm_load_print_meta: max token length = 93
0.00.784.263 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.789.665 I llama_new_context_with_model: n_seq_max     = 1
0.00.789.672 I llama_new_context_with_model: n_ctx         = 4096
0.00.789.672 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.789.672 I llama_new_context_with_model: n_batch       = 2048
0.00.789.673 I llama_new_context_with_model: n_ubatch      = 512
0.00.789.673 I llama_new_context_with_model: flash_attn    = 0
0.00.789.676 I llama_new_context_with_model: freq_base     = 10000.0
0.00.789.677 I llama_new_context_with_model: freq_scale    = 1
0.00.789.678 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.806.012 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.806.028 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.806.120 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.807.391 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.807.399 I llama_new_context_with_model: graph nodes  = 601
0.00.807.399 I llama_new_context_with_model: graph splits = 1
0.00.807.401 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.883.236 I main: llama threadpool init, n_threads = 4
0.00.883.249 I 
0.00.883.345 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.883.349 I 
0.00.883.393 I sampler seed: 2215570692
0.00.883.404 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.883.408 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.883.410 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.883.410 I 
 increasities, and other sexually transmitted infections (STIs) can have devastating consequences for both physical and emotional health.

**1. Physical consequences**

-

0.02.491.503 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6601.32 tokens per second)
0.02.491.506 I llama_perf_context_print:        load time =     882.31 ms
0.02.491.507 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.491.508 I llama_perf_context_print:        eval time =    1588.28 ms /    32 runs   (   49.63 ms per token,    20.15 tokens per second)
0.02.491.509 I llama_perf_context_print:       total time =    1608.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.518s
user	8m14.932s
sys	0m7.000s
