+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 4238 (4cb003dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.021.177 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.186 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.194 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.198 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.199 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.204 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.205 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.212 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.213 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.213 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.214 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.214 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.776 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.624 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.509 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.516 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.517 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.518 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.518 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.519 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.520 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.524 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.525 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.526 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.527 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.528 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.531 I llama_model_loader: - type  f32:   37 tensors
0.00.131.532 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.069 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.767 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.219 I llm_load_vocab: special tokens cache size = 5
0.00.260.858 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.874 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.875 I llm_load_print_meta: arch             = gemma
0.00.260.875 I llm_load_print_meta: vocab type       = SPM
0.00.260.876 I llm_load_print_meta: n_vocab          = 256000
0.00.260.876 I llm_load_print_meta: n_merges         = 0
0.00.260.876 I llm_load_print_meta: vocab_only       = 0
0.00.260.877 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.877 I llm_load_print_meta: n_embd           = 2048
0.00.260.877 I llm_load_print_meta: n_layer          = 18
0.00.260.889 I llm_load_print_meta: n_head           = 8
0.00.260.889 I llm_load_print_meta: n_head_kv        = 1
0.00.260.890 I llm_load_print_meta: n_rot            = 256
0.00.260.890 I llm_load_print_meta: n_swa            = 0
0.00.260.890 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.891 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.892 I llm_load_print_meta: n_gqa            = 8
0.00.260.893 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.893 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.894 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.896 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.896 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.896 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.897 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.898 I llm_load_print_meta: n_ff             = 16384
0.00.260.898 I llm_load_print_meta: n_expert         = 0
0.00.260.898 I llm_load_print_meta: n_expert_used    = 0
0.00.260.898 I llm_load_print_meta: causal attn      = 1
0.00.260.899 I llm_load_print_meta: pooling type     = 0
0.00.260.899 I llm_load_print_meta: rope type        = 2
0.00.260.899 I llm_load_print_meta: rope scaling     = linear
0.00.260.901 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.901 I llm_load_print_meta: freq_scale_train = 1
0.00.260.902 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.902 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.902 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.903 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.903 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.903 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.903 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.904 I llm_load_print_meta: model type       = 2B
0.00.260.905 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.905 I llm_load_print_meta: model params     = 2.51 B
0.00.260.906 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.906 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.907 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.907 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.907 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.908 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.908 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.908 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.909 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.909 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.910 I llm_load_print_meta: max token length = 93
0.00.361.449 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.361.458 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.361.458 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.361.459 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.361.460 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.361.460 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.366.751 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.758 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.758 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.759 I llama_new_context_with_model: n_batch       = 2048
0.00.366.759 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.759 I llama_new_context_with_model: flash_attn    = 0
0.00.366.762 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.763 I llama_new_context_with_model: freq_scale    = 1
0.00.366.764 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.237 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.251 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.355 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.581 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.588 I llama_new_context_with_model: graph nodes  = 601
0.00.382.588 I llama_new_context_with_model: graph splits = 1
0.00.382.590 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.155 I main: llama threadpool init, n_threads = 4
0.00.467.170 I 
0.00.467.240 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.467.243 I 
0.00.467.285 I sampler seed: 2811225130
0.00.467.296 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.303 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.306 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.307 I 
 increamentalism, and the notion of the historical development of consciousness. [end of text]


0.01.521.002 I llama_perf_sampler_print:    sampling time =       2.27 ms /    16 runs   (    0.14 ms per token,  7042.25 tokens per second)
0.01.521.005 I llama_perf_context_print:        load time =     466.40 ms
0.01.521.006 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.521.008 I llama_perf_context_print:        eval time =    1044.61 ms /    15 runs   (   69.64 ms per token,    14.36 tokens per second)
0.01.521.008 I llama_perf_context_print:       total time =    1053.85 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.561 I build: 4238 (4cb003dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.762 I main: load the model and apply lora adapter, if any
0.00.021.056 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.072 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.079 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.080 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.084 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.085 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.086 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.086 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.087 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.087 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.092 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.093 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.093 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.094 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.094 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.186 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.648 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.441 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.446 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.447 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.448 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.448 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.450 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.450 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.453 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.453 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.454 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.455 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.456 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.459 I llama_model_loader: - type  f32:   37 tensors
0.00.131.460 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.734 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.198 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.754 I llm_load_vocab: special tokens cache size = 5
0.00.265.501 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.516 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.517 I llm_load_print_meta: arch             = gemma
0.00.265.517 I llm_load_print_meta: vocab type       = SPM
0.00.265.518 I llm_load_print_meta: n_vocab          = 256000
0.00.265.519 I llm_load_print_meta: n_merges         = 0
0.00.265.519 I llm_load_print_meta: vocab_only       = 0
0.00.265.519 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.519 I llm_load_print_meta: n_embd           = 2048
0.00.265.520 I llm_load_print_meta: n_layer          = 18
0.00.265.530 I llm_load_print_meta: n_head           = 8
0.00.265.531 I llm_load_print_meta: n_head_kv        = 1
0.00.265.532 I llm_load_print_meta: n_rot            = 256
0.00.265.532 I llm_load_print_meta: n_swa            = 0
0.00.265.532 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.532 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.533 I llm_load_print_meta: n_gqa            = 8
0.00.265.534 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.535 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.536 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.538 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.538 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.538 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.539 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.540 I llm_load_print_meta: n_ff             = 16384
0.00.265.540 I llm_load_print_meta: n_expert         = 0
0.00.265.540 I llm_load_print_meta: n_expert_used    = 0
0.00.265.541 I llm_load_print_meta: causal attn      = 1
0.00.265.541 I llm_load_print_meta: pooling type     = 0
0.00.265.541 I llm_load_print_meta: rope type        = 2
0.00.265.542 I llm_load_print_meta: rope scaling     = linear
0.00.265.543 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.544 I llm_load_print_meta: freq_scale_train = 1
0.00.265.544 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.544 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.545 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.546 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.546 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.546 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.546 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.547 I llm_load_print_meta: model type       = 2B
0.00.265.547 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.548 I llm_load_print_meta: model params     = 2.51 B
0.00.265.549 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.549 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.550 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.550 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.550 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.550 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.551 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.551 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.551 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.552 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.552 I llm_load_print_meta: max token length = 93
0.00.361.041 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.026 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.032 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.032 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.033 I llama_new_context_with_model: n_batch       = 2048
0.00.366.033 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.034 I llama_new_context_with_model: flash_attn    = 0
0.00.366.036 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.036 I llama_new_context_with_model: freq_scale    = 1
0.00.366.037 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.641 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.655 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.742 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.949 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.954 I llama_new_context_with_model: graph nodes  = 601
0.00.381.955 I llama_new_context_with_model: graph splits = 1
0.00.381.957 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.573 I main: llama threadpool init, n_threads = 4
0.00.462.586 I 
0.00.462.659 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.462.662 I 
0.00.462.705 I sampler seed: 137124354
0.00.462.716 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.724 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.724 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.725 I 
 increadibly complex sentences. [end of text]


0.00.870.116 I llama_perf_sampler_print:    sampling time =       0.93 ms /     7 runs   (    0.13 ms per token,  7551.24 tokens per second)
0.00.870.119 I llama_perf_context_print:        load time =     461.79 ms
0.00.870.120 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.870.121 I llama_perf_context_print:        eval time =     403.27 ms /     6 runs   (   67.21 ms per token,    14.88 tokens per second)
0.00.870.122 I llama_perf_context_print:       total time =     407.55 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.525 I build: 4238 (4cb003dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.120 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.132 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.145 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.146 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.150 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.151 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.152 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.152 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.153 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.153 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.158 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.159 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.160 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.161 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.161 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.255 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.694 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.615 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.621 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.621 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.622 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.623 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.624 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.624 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.627 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.627 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.628 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.630 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.630 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.635 I llama_model_loader: - type  f32:   37 tensors
0.00.135.636 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.798 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.239 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.782 I llm_load_vocab: special tokens cache size = 5
0.00.272.714 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.729 I llm_load_print_meta: arch             = gemma
0.00.272.730 I llm_load_print_meta: vocab type       = SPM
0.00.272.730 I llm_load_print_meta: n_vocab          = 256000
0.00.272.731 I llm_load_print_meta: n_merges         = 0
0.00.272.731 I llm_load_print_meta: vocab_only       = 0
0.00.272.732 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.732 I llm_load_print_meta: n_embd           = 2048
0.00.272.732 I llm_load_print_meta: n_layer          = 18
0.00.272.743 I llm_load_print_meta: n_head           = 8
0.00.272.744 I llm_load_print_meta: n_head_kv        = 1
0.00.272.745 I llm_load_print_meta: n_rot            = 256
0.00.272.745 I llm_load_print_meta: n_swa            = 0
0.00.272.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.745 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.746 I llm_load_print_meta: n_gqa            = 8
0.00.272.748 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.748 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.749 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.751 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.751 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.752 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.752 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.753 I llm_load_print_meta: n_ff             = 16384
0.00.272.753 I llm_load_print_meta: n_expert         = 0
0.00.272.753 I llm_load_print_meta: n_expert_used    = 0
0.00.272.754 I llm_load_print_meta: causal attn      = 1
0.00.272.754 I llm_load_print_meta: pooling type     = 0
0.00.272.754 I llm_load_print_meta: rope type        = 2
0.00.272.755 I llm_load_print_meta: rope scaling     = linear
0.00.272.756 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.756 I llm_load_print_meta: freq_scale_train = 1
0.00.272.757 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.757 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.757 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.758 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.758 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.758 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.758 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.759 I llm_load_print_meta: model type       = 2B
0.00.272.759 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.760 I llm_load_print_meta: model params     = 2.51 B
0.00.272.761 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.761 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.762 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.762 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.763 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.763 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.763 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.764 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.764 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.765 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.765 I llm_load_print_meta: max token length = 93
0.00.349.340 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.347 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.348 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.349 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.349 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.350 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.316 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.323 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.323 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.324 I llama_new_context_with_model: n_batch       = 2048
0.00.356.324 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.325 I llama_new_context_with_model: flash_attn    = 0
0.00.356.328 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.328 I llama_new_context_with_model: freq_scale    = 1
0.00.356.329 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.562 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.575 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.661 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.939 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.945 I llama_new_context_with_model: graph nodes  = 601
0.00.371.946 I llama_new_context_with_model: graph splits = 1
0.00.371.948 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.518 I main: llama threadpool init, n_threads = 4
0.00.457.535 I 
0.00.457.606 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.457.609 I 
0.00.457.651 I sampler seed: 1476448597
0.00.457.662 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.670 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.680 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.683 I 
 seconary clause.

The ____ industry is booming, and many new businesses are entering the market.

The clause "The ____ industry is booming" is a

0.02.748.170 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6503.74 tokens per second)
0.02.748.172 I llama_perf_context_print:        load time =     456.77 ms
0.02.748.173 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.748.175 I llama_perf_context_print:        eval time =    2271.19 ms /    32 runs   (   70.97 ms per token,    14.09 tokens per second)
0.02.748.175 I llama_perf_context_print:       total time =    2290.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.587 I build: 4238 (4cb003dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.021.169 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.178 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.186 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.190 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.195 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.196 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.197 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.197 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.198 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.198 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.206 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.643 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.343 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.702 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.711 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.712 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.713 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.714 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.716 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.718 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.722 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.723 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.725 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.727 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.138.728 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.734 I llama_model_loader: - type  f32:   37 tensors
0.00.138.735 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.731 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.375 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.062 I llm_load_vocab: special tokens cache size = 5
0.00.273.935 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.956 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.956 I llm_load_print_meta: arch             = gemma
0.00.273.957 I llm_load_print_meta: vocab type       = SPM
0.00.273.958 I llm_load_print_meta: n_vocab          = 256000
0.00.273.958 I llm_load_print_meta: n_merges         = 0
0.00.273.959 I llm_load_print_meta: vocab_only       = 0
0.00.273.959 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.959 I llm_load_print_meta: n_embd           = 2048
0.00.273.960 I llm_load_print_meta: n_layer          = 18
0.00.273.973 I llm_load_print_meta: n_head           = 8
0.00.273.974 I llm_load_print_meta: n_head_kv        = 1
0.00.273.975 I llm_load_print_meta: n_rot            = 256
0.00.273.975 I llm_load_print_meta: n_swa            = 0
0.00.273.975 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.975 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.976 I llm_load_print_meta: n_gqa            = 8
0.00.273.977 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.978 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.979 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.980 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.981 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.981 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.982 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.982 I llm_load_print_meta: n_ff             = 16384
0.00.273.983 I llm_load_print_meta: n_expert         = 0
0.00.273.983 I llm_load_print_meta: n_expert_used    = 0
0.00.273.983 I llm_load_print_meta: causal attn      = 1
0.00.273.983 I llm_load_print_meta: pooling type     = 0
0.00.273.984 I llm_load_print_meta: rope type        = 2
0.00.273.984 I llm_load_print_meta: rope scaling     = linear
0.00.273.985 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.986 I llm_load_print_meta: freq_scale_train = 1
0.00.273.986 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.987 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.987 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.988 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.988 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.988 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.989 I llm_load_print_meta: model type       = 2B
0.00.273.989 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.990 I llm_load_print_meta: model params     = 2.51 B
0.00.273.991 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.991 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.993 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.993 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.994 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.995 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.995 I llm_load_print_meta: max token length = 93
0.00.347.798 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.347.807 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.355.804 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.812 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.813 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.813 I llama_new_context_with_model: n_batch       = 2048
0.00.355.814 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.814 I llama_new_context_with_model: flash_attn    = 0
0.00.355.818 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.818 I llama_new_context_with_model: freq_scale    = 1
0.00.355.819 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.341 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.355 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.454 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.733 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.740 I llama_new_context_with_model: graph nodes  = 601
0.00.371.740 I llama_new_context_with_model: graph splits = 1
0.00.371.742 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.384 I main: llama threadpool init, n_threads = 4
0.00.459.400 I 
0.00.459.486 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.459.491 I 
0.00.459.543 I sampler seed: 1837525076
0.00.459.554 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.567 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.571 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.571 I 
 increasels, and other mythical creatures of the sea.

**The Legend of the Nautilus**

The Nautilus, a majestic underwater creature, is said to have

0.02.882.183 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6392.87 tokens per second)
0.02.882.186 I llama_perf_context_print:        load time =     458.57 ms
0.02.882.187 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.882.189 I llama_perf_context_print:        eval time =    2403.06 ms /    32 runs   (   75.10 ms per token,    13.32 tokens per second)
0.02.882.190 I llama_perf_context_print:       total time =    2422.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.512s
user	0m27.589s
sys	0m9.286s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4238 (4cb003dd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40212.49 ms
main:    total time = 40212.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.593 I build: 4238 (4cb003dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.786 I main: llama backend init
0.00.000.793 I main: load the model and apply lora adapter, if any
0.00.022.329 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.337 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.346 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.350 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.351 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.355 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.355 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.356 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.356 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.357 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.358 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.361 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.362 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.363 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.363 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.364 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.316 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.147 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.152 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.154 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.155 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.156 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.157 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.158 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.161 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.162 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.163 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.164 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.165 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.168 I llama_model_loader: - type  f32:   37 tensors
0.00.132.170 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.171 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.468 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.529 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.158 I llm_load_vocab: special tokens cache size = 5
0.00.272.162 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.179 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.180 I llm_load_print_meta: arch             = gemma
0.00.272.181 I llm_load_print_meta: vocab type       = SPM
0.00.272.181 I llm_load_print_meta: n_vocab          = 256000
0.00.272.182 I llm_load_print_meta: n_merges         = 0
0.00.272.182 I llm_load_print_meta: vocab_only       = 0
0.00.272.182 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.183 I llm_load_print_meta: n_embd           = 2048
0.00.272.183 I llm_load_print_meta: n_layer          = 18
0.00.272.194 I llm_load_print_meta: n_head           = 8
0.00.272.195 I llm_load_print_meta: n_head_kv        = 1
0.00.272.195 I llm_load_print_meta: n_rot            = 256
0.00.272.195 I llm_load_print_meta: n_swa            = 0
0.00.272.195 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.196 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.197 I llm_load_print_meta: n_gqa            = 8
0.00.272.198 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.199 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.200 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.201 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.201 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.202 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.202 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.203 I llm_load_print_meta: n_ff             = 16384
0.00.272.203 I llm_load_print_meta: n_expert         = 0
0.00.272.203 I llm_load_print_meta: n_expert_used    = 0
0.00.272.203 I llm_load_print_meta: causal attn      = 1
0.00.272.204 I llm_load_print_meta: pooling type     = 0
0.00.272.204 I llm_load_print_meta: rope type        = 2
0.00.272.204 I llm_load_print_meta: rope scaling     = linear
0.00.272.205 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.206 I llm_load_print_meta: freq_scale_train = 1
0.00.272.206 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.207 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.207 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.208 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.208 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.208 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.208 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.209 I llm_load_print_meta: model type       = 2B
0.00.272.210 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.210 I llm_load_print_meta: model params     = 2.51 B
0.00.272.211 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.211 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.212 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.212 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.212 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.213 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.213 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.214 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.214 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.215 I llm_load_print_meta: max token length = 93
0.00.332.001 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.332.010 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.332.011 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.332.012 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.332.012 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.332.013 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.337.298 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.306 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.307 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.307 I llama_new_context_with_model: n_batch       = 2048
0.00.337.308 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.309 I llama_new_context_with_model: flash_attn    = 0
0.00.337.312 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.313 I llama_new_context_with_model: freq_scale    = 1
0.00.337.314 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.300 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.314 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.407 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.648 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.656 I llama_new_context_with_model: graph nodes  = 601
0.00.353.657 I llama_new_context_with_model: graph splits = 1
0.00.353.659 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.320 I main: llama threadpool init, n_threads = 4
0.00.429.335 I 
0.00.429.404 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.429.407 I 
0.00.429.447 I sampler seed: 3757234342
0.00.429.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.469 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.473 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.473 I 
 seconded data into a vector.
$$X = \begin{bmatrix} x_1 & x_2 & \cdots & x_n \end

0.02.007.966 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6546.32 tokens per second)
0.02.007.969 I llama_perf_context_print:        load time =     428.51 ms
0.02.007.970 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.007.971 I llama_perf_context_print:        eval time =    1560.38 ms /    32 runs   (   48.76 ms per token,    20.51 tokens per second)
0.02.007.972 I llama_perf_context_print:       total time =    1578.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4238 (4cb003dd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40179.28 ms
main:    total time = 40179.28 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.570 I build: 4238 (4cb003dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.788 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.046 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.060 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.067 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.071 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.072 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.073 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.073 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.074 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.074 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.077 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.078 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.083 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.083 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.084 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.827 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.341 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.159 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.165 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.165 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.166 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.166 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.167 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.168 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.170 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.171 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.174 I llama_model_loader: - type  f32:   37 tensors
0.00.131.175 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.175 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.399 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.899 I llm_load_vocab: special tokens cache size = 5
0.00.258.695 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.713 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.713 I llm_load_print_meta: arch             = gemma
0.00.258.714 I llm_load_print_meta: vocab type       = SPM
0.00.258.715 I llm_load_print_meta: n_vocab          = 256000
0.00.258.715 I llm_load_print_meta: n_merges         = 0
0.00.258.715 I llm_load_print_meta: vocab_only       = 0
0.00.258.716 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.716 I llm_load_print_meta: n_embd           = 2048
0.00.258.716 I llm_load_print_meta: n_layer          = 18
0.00.258.728 I llm_load_print_meta: n_head           = 8
0.00.258.729 I llm_load_print_meta: n_head_kv        = 1
0.00.258.729 I llm_load_print_meta: n_rot            = 256
0.00.258.729 I llm_load_print_meta: n_swa            = 0
0.00.258.729 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.730 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.730 I llm_load_print_meta: n_gqa            = 8
0.00.258.731 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.732 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.733 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.734 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.735 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.736 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.736 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.737 I llm_load_print_meta: n_ff             = 16384
0.00.258.738 I llm_load_print_meta: n_expert         = 0
0.00.258.738 I llm_load_print_meta: n_expert_used    = 0
0.00.258.738 I llm_load_print_meta: causal attn      = 1
0.00.258.739 I llm_load_print_meta: pooling type     = 0
0.00.258.740 I llm_load_print_meta: rope type        = 2
0.00.258.740 I llm_load_print_meta: rope scaling     = linear
0.00.258.741 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.742 I llm_load_print_meta: freq_scale_train = 1
0.00.258.743 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.743 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.744 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.744 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.744 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.744 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.745 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.745 I llm_load_print_meta: model type       = 2B
0.00.258.746 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.258.747 I llm_load_print_meta: model params     = 2.51 B
0.00.258.748 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.258.749 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.749 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.750 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.750 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.750 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.750 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.751 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.752 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.752 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.753 I llm_load_print_meta: max token length = 93
0.00.315.232 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.320.351 I llama_new_context_with_model: n_seq_max     = 1
0.00.320.357 I llama_new_context_with_model: n_ctx         = 4096
0.00.320.358 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.320.358 I llama_new_context_with_model: n_batch       = 2048
0.00.320.359 I llama_new_context_with_model: n_ubatch      = 512
0.00.320.359 I llama_new_context_with_model: flash_attn    = 0
0.00.320.361 I llama_new_context_with_model: freq_base     = 10000.0
0.00.320.362 I llama_new_context_with_model: freq_scale    = 1
0.00.320.363 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.858 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.334.871 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.334.958 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.336.199 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.336.205 I llama_new_context_with_model: graph nodes  = 601
0.00.336.205 I llama_new_context_with_model: graph splits = 1
0.00.336.207 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.411.845 I main: llama threadpool init, n_threads = 4
0.00.411.862 I 
0.00.411.936 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.411.940 I 
0.00.411.984 I sampler seed: 183347124
0.00.411.996 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.412.008 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.412.012 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.412.012 I 
 seconally. [end of text]


0.00.608.367 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7824.73 tokens per second)
0.00.608.369 I llama_perf_context_print:        load time =     411.03 ms
0.00.608.371 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.608.372 I llama_perf_context_print:        eval time =     193.08 ms /     4 runs   (   48.27 ms per token,    20.72 tokens per second)
0.00.608.373 I llama_perf_context_print:       total time =     196.53 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.771s
user	10m18.354s
sys	0m7.073s
