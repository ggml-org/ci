+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.571 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.001.887 I main: load the model and apply lora adapter, if any
0.00.022.359 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.408 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.415 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.422 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.422 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.428 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.429 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.429 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.430 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.430 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.431 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.435 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.436 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.436 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.437 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.438 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.232 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.414 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.232 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.239 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.239 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.240 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.240 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.241 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.242 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.245 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.245 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.246 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.246 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.247 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.251 I llama_model_loader: - type  f32:   37 tensors
0.00.133.254 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.385 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.849 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.432 I llm_load_vocab: special tokens cache size = 5
0.00.283.390 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.408 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.408 I llm_load_print_meta: arch             = gemma
0.00.283.409 I llm_load_print_meta: vocab type       = SPM
0.00.283.409 I llm_load_print_meta: n_vocab          = 256000
0.00.283.410 I llm_load_print_meta: n_merges         = 0
0.00.283.410 I llm_load_print_meta: vocab_only       = 0
0.00.283.411 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.411 I llm_load_print_meta: n_embd           = 2048
0.00.283.411 I llm_load_print_meta: n_layer          = 18
0.00.283.422 I llm_load_print_meta: n_head           = 8
0.00.283.423 I llm_load_print_meta: n_head_kv        = 1
0.00.283.423 I llm_load_print_meta: n_rot            = 256
0.00.283.424 I llm_load_print_meta: n_swa            = 0
0.00.283.424 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.424 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.426 I llm_load_print_meta: n_gqa            = 8
0.00.283.427 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.427 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.428 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.430 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.430 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.430 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.430 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.431 I llm_load_print_meta: n_ff             = 16384
0.00.283.432 I llm_load_print_meta: n_expert         = 0
0.00.283.432 I llm_load_print_meta: n_expert_used    = 0
0.00.283.432 I llm_load_print_meta: causal attn      = 1
0.00.283.432 I llm_load_print_meta: pooling type     = 0
0.00.283.433 I llm_load_print_meta: rope type        = 2
0.00.283.433 I llm_load_print_meta: rope scaling     = linear
0.00.283.434 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.435 I llm_load_print_meta: freq_scale_train = 1
0.00.283.435 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.436 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.436 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.436 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.436 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.437 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.437 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.438 I llm_load_print_meta: model type       = 2B
0.00.283.438 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.439 I llm_load_print_meta: model params     = 2.51 B
0.00.283.440 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.440 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.441 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.441 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.441 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.442 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.442 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.442 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.443 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.443 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.443 I llm_load_print_meta: max token length = 93
0.00.283.473 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.381.413 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.381.422 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.381.422 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.381.423 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.381.424 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.381.424 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.386.549 I llama_new_context_with_model: n_ctx      = 8192
0.00.386.555 I llama_new_context_with_model: n_batch    = 2048
0.00.386.555 I llama_new_context_with_model: n_ubatch   = 512
0.00.386.555 I llama_new_context_with_model: flash_attn = 0
0.00.386.557 I llama_new_context_with_model: freq_base  = 10000.0
0.00.386.558 I llama_new_context_with_model: freq_scale = 1
0.00.415.246 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.415.260 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.415.351 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.416.242 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.416.250 I llama_new_context_with_model: graph nodes  = 601
0.00.416.251 I llama_new_context_with_model: graph splits = 1
0.00.416.253 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.508.448 I main: llama threadpool init, n_threads = 4
0.00.508.463 I 
0.00.508.539 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.508.543 I 
0.00.508.582 I sampler seed: 2654464686
0.00.508.592 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.508.594 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.508.595 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.508.595 I 
 increasels is a part of the **ancient greek philosophy**.

a. True
b. False


Answer: a. True

Greek philosophy has played a

0.02.762.369 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6538.54 tokens per second)
0.02.762.371 I llama_perf_context_print:        load time =     506.54 ms
0.02.762.373 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.762.374 I llama_perf_context_print:        eval time =    2233.60 ms /    32 runs   (   69.80 ms per token,    14.33 tokens per second)
0.02.762.375 I llama_perf_context_print:       total time =    2253.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.532 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.021.929 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.939 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.945 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.946 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.950 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.950 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.951 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.952 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.952 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.953 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.957 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.957 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.958 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.958 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.959 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.574 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.162 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.920 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.926 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.926 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.927 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.927 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.928 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.929 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.931 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.932 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.932 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.933 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.934 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.936 I llama_model_loader: - type  f32:   37 tensors
0.00.131.939 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.144 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.056 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.606 I llm_load_vocab: special tokens cache size = 5
0.00.270.566 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.582 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.583 I llm_load_print_meta: arch             = gemma
0.00.270.584 I llm_load_print_meta: vocab type       = SPM
0.00.270.584 I llm_load_print_meta: n_vocab          = 256000
0.00.270.584 I llm_load_print_meta: n_merges         = 0
0.00.270.585 I llm_load_print_meta: vocab_only       = 0
0.00.270.585 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.585 I llm_load_print_meta: n_embd           = 2048
0.00.270.586 I llm_load_print_meta: n_layer          = 18
0.00.270.598 I llm_load_print_meta: n_head           = 8
0.00.270.599 I llm_load_print_meta: n_head_kv        = 1
0.00.270.600 I llm_load_print_meta: n_rot            = 256
0.00.270.600 I llm_load_print_meta: n_swa            = 0
0.00.270.600 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.601 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.602 I llm_load_print_meta: n_gqa            = 8
0.00.270.603 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.604 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.604 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.605 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.605 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.606 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.606 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.607 I llm_load_print_meta: n_ff             = 16384
0.00.270.607 I llm_load_print_meta: n_expert         = 0
0.00.270.608 I llm_load_print_meta: n_expert_used    = 0
0.00.270.608 I llm_load_print_meta: causal attn      = 1
0.00.270.608 I llm_load_print_meta: pooling type     = 0
0.00.270.609 I llm_load_print_meta: rope type        = 2
0.00.270.609 I llm_load_print_meta: rope scaling     = linear
0.00.270.611 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.611 I llm_load_print_meta: freq_scale_train = 1
0.00.270.611 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.612 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.612 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.612 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.613 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.613 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.613 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.613 I llm_load_print_meta: model type       = 2B
0.00.270.614 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.615 I llm_load_print_meta: model params     = 2.51 B
0.00.270.615 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.616 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.616 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.617 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.617 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.617 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.617 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.618 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.618 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.618 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.619 I llm_load_print_meta: max token length = 93
0.00.270.638 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.467 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.368.871 I llama_new_context_with_model: n_ctx      = 8192
0.00.368.878 I llama_new_context_with_model: n_batch    = 2048
0.00.368.879 I llama_new_context_with_model: n_ubatch   = 512
0.00.368.880 I llama_new_context_with_model: flash_attn = 0
0.00.368.884 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.885 I llama_new_context_with_model: freq_scale = 1
0.00.399.242 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.399.259 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.399.359 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.247 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.400.256 I llama_new_context_with_model: graph nodes  = 601
0.00.400.256 I llama_new_context_with_model: graph splits = 1
0.00.400.258 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.901 I main: llama threadpool init, n_threads = 4
0.00.487.916 I 
0.00.487.994 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.487.998 I 
0.00.488.036 I sampler seed: 2973432043
0.00.488.046 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.049 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.049 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.049 I 
 increamically.

I am unable to generate a response due to the absence of context. Please provide the necessary information to generate a meaningful response. [end of text]


0.02.520.662 I llama_perf_sampler_print:    sampling time =       4.53 ms /    31 runs   (    0.15 ms per token,  6846.29 tokens per second)
0.02.520.666 I llama_perf_context_print:        load time =     486.01 ms
0.02.520.668 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.520.670 I llama_perf_context_print:        eval time =    2014.28 ms /    30 runs   (   67.14 ms per token,    14.89 tokens per second)
0.02.520.671 I llama_perf_context_print:       total time =    2032.77 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.588 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.780 I main: llama backend init
0.00.001.942 I main: load the model and apply lora adapter, if any
0.00.021.999 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.048 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.055 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.060 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.061 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.065 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.065 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.066 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.067 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.067 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.068 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.072 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.073 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.073 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.074 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.075 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.381 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.765 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.547 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.554 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.555 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.557 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.557 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.561 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.562 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.562 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.566 I llama_model_loader: - type  f32:   37 tensors
0.00.133.569 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.293 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.340 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.941 I llm_load_vocab: special tokens cache size = 5
0.00.273.073 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.089 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.090 I llm_load_print_meta: arch             = gemma
0.00.273.090 I llm_load_print_meta: vocab type       = SPM
0.00.273.091 I llm_load_print_meta: n_vocab          = 256000
0.00.273.092 I llm_load_print_meta: n_merges         = 0
0.00.273.092 I llm_load_print_meta: vocab_only       = 0
0.00.273.092 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.093 I llm_load_print_meta: n_embd           = 2048
0.00.273.093 I llm_load_print_meta: n_layer          = 18
0.00.273.105 I llm_load_print_meta: n_head           = 8
0.00.273.106 I llm_load_print_meta: n_head_kv        = 1
0.00.273.106 I llm_load_print_meta: n_rot            = 256
0.00.273.107 I llm_load_print_meta: n_swa            = 0
0.00.273.107 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.107 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.108 I llm_load_print_meta: n_gqa            = 8
0.00.273.109 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.110 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.111 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.112 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.112 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.112 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.113 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.114 I llm_load_print_meta: n_ff             = 16384
0.00.273.114 I llm_load_print_meta: n_expert         = 0
0.00.273.114 I llm_load_print_meta: n_expert_used    = 0
0.00.273.114 I llm_load_print_meta: causal attn      = 1
0.00.273.115 I llm_load_print_meta: pooling type     = 0
0.00.273.115 I llm_load_print_meta: rope type        = 2
0.00.273.116 I llm_load_print_meta: rope scaling     = linear
0.00.273.117 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.118 I llm_load_print_meta: freq_scale_train = 1
0.00.273.118 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.118 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.118 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.119 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.119 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.119 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.119 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.120 I llm_load_print_meta: model type       = 2B
0.00.273.120 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.121 I llm_load_print_meta: model params     = 2.51 B
0.00.273.122 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.122 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.123 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.123 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.123 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.124 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.124 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.124 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.124 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.125 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.125 I llm_load_print_meta: max token length = 93
0.00.273.152 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.350.499 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.350.506 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.350.507 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.350.507 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.350.508 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.350.509 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.355.528 I llama_new_context_with_model: n_ctx      = 8192
0.00.355.535 I llama_new_context_with_model: n_batch    = 2048
0.00.355.535 I llama_new_context_with_model: n_ubatch   = 512
0.00.355.536 I llama_new_context_with_model: flash_attn = 0
0.00.355.537 I llama_new_context_with_model: freq_base  = 10000.0
0.00.355.539 I llama_new_context_with_model: freq_scale = 1
0.00.384.301 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.384.315 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.384.418 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.319 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.385.327 I llama_new_context_with_model: graph nodes  = 601
0.00.385.328 I llama_new_context_with_model: graph splits = 1
0.00.385.330 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.199 I main: llama threadpool init, n_threads = 4
0.00.477.212 I 
0.00.477.285 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.288 I 
0.00.477.326 I sampler seed: 188728803
0.00.477.335 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.339 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.339 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.339 I 
 increasities, a young woman named Lyra, and a pompous squire named Fitzwilliam Darcy.

Lyra is a spirited and intelligent young woman, passionate about literature

0.02.730.672 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6474.40 tokens per second)
0.02.730.675 I llama_perf_context_print:        load time =     475.23 ms
0.02.730.676 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.730.677 I llama_perf_context_print:        eval time =    2233.87 ms /    32 runs   (   69.81 ms per token,    14.32 tokens per second)
0.02.730.678 I llama_perf_context_print:       total time =    2253.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.557 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.001.904 I main: load the model and apply lora adapter, if any
0.00.022.086 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.136 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.146 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.152 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.156 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.161 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.162 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.163 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.164 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.165 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.166 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.173 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.173 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.174 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.175 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.176 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.583 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.046 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.922 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.929 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.929 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.930 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.931 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.932 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.935 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.936 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.937 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.937 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.938 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.942 I llama_model_loader: - type  f32:   37 tensors
0.00.132.945 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.908 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.542 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.145 I llm_load_vocab: special tokens cache size = 5
0.00.274.359 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.378 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.378 I llm_load_print_meta: arch             = gemma
0.00.274.379 I llm_load_print_meta: vocab type       = SPM
0.00.274.380 I llm_load_print_meta: n_vocab          = 256000
0.00.274.380 I llm_load_print_meta: n_merges         = 0
0.00.274.381 I llm_load_print_meta: vocab_only       = 0
0.00.274.381 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.381 I llm_load_print_meta: n_embd           = 2048
0.00.274.381 I llm_load_print_meta: n_layer          = 18
0.00.274.394 I llm_load_print_meta: n_head           = 8
0.00.274.395 I llm_load_print_meta: n_head_kv        = 1
0.00.274.396 I llm_load_print_meta: n_rot            = 256
0.00.274.396 I llm_load_print_meta: n_swa            = 0
0.00.274.396 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.396 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.397 I llm_load_print_meta: n_gqa            = 8
0.00.274.398 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.399 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.400 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.401 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.402 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.402 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.402 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.403 I llm_load_print_meta: n_ff             = 16384
0.00.274.404 I llm_load_print_meta: n_expert         = 0
0.00.274.404 I llm_load_print_meta: n_expert_used    = 0
0.00.274.404 I llm_load_print_meta: causal attn      = 1
0.00.274.405 I llm_load_print_meta: pooling type     = 0
0.00.274.405 I llm_load_print_meta: rope type        = 2
0.00.274.405 I llm_load_print_meta: rope scaling     = linear
0.00.274.407 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.407 I llm_load_print_meta: freq_scale_train = 1
0.00.274.408 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.408 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.408 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.408 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.409 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.409 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.409 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.410 I llm_load_print_meta: model type       = 2B
0.00.274.410 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.411 I llm_load_print_meta: model params     = 2.51 B
0.00.274.412 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.412 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.413 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.413 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.413 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.414 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.414 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.414 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.415 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.415 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.416 I llm_load_print_meta: max token length = 93
0.00.274.438 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.344.203 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.344.211 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.349.127 I llama_new_context_with_model: n_ctx      = 8192
0.00.349.133 I llama_new_context_with_model: n_batch    = 2048
0.00.349.133 I llama_new_context_with_model: n_ubatch   = 512
0.00.349.134 I llama_new_context_with_model: flash_attn = 0
0.00.349.136 I llama_new_context_with_model: freq_base  = 10000.0
0.00.349.137 I llama_new_context_with_model: freq_scale = 1
0.00.377.650 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.377.665 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.377.762 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.670 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.378.676 I llama_new_context_with_model: graph nodes  = 601
0.00.378.677 I llama_new_context_with_model: graph splits = 1
0.00.378.678 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.734 I main: llama threadpool init, n_threads = 4
0.00.473.748 I 
0.00.473.833 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.473.837 I 
0.00.473.889 I sampler seed: 4032993393
0.00.473.899 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.901 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.902 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.902 I 
 maneupher.

I apologize, but I am unable to provide information or create content that promotes or glorifies harmful or illegal activities. [end of text]


0.02.590.232 I llama_perf_sampler_print:    sampling time =       4.37 ms /    29 runs   (    0.15 ms per token,  6636.16 tokens per second)
0.02.590.235 I llama_perf_context_print:        load time =     471.81 ms
0.02.590.236 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.590.237 I llama_perf_context_print:        eval time =    2099.00 ms /    28 runs   (   74.96 ms per token,    13.34 tokens per second)
0.02.590.238 I llama_perf_context_print:       total time =    2116.50 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.124s
user	0m37.594s
sys	0m9.363s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3964 (4c9388fb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32027.95 ms
main:    total time = 32027.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.819 I main: load the model and apply lora adapter, if any
0.00.022.065 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.113 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.124 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.129 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.130 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.133 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.134 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.135 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.135 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.136 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.136 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.140 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.140 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.141 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.141 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.142 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.804 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.652 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.418 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.424 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.425 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.426 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.427 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.428 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.429 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.432 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.434 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.435 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.436 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.439 I llama_model_loader: - type  f32:   37 tensors
0.00.132.441 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.443 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.115 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.449 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.908 I llm_load_vocab: special tokens cache size = 5
0.00.263.750 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.764 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.765 I llm_load_print_meta: arch             = gemma
0.00.263.765 I llm_load_print_meta: vocab type       = SPM
0.00.263.766 I llm_load_print_meta: n_vocab          = 256000
0.00.263.766 I llm_load_print_meta: n_merges         = 0
0.00.263.766 I llm_load_print_meta: vocab_only       = 0
0.00.263.767 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.767 I llm_load_print_meta: n_embd           = 2048
0.00.263.767 I llm_load_print_meta: n_layer          = 18
0.00.263.779 I llm_load_print_meta: n_head           = 8
0.00.263.779 I llm_load_print_meta: n_head_kv        = 1
0.00.263.780 I llm_load_print_meta: n_rot            = 256
0.00.263.780 I llm_load_print_meta: n_swa            = 0
0.00.263.780 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.781 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.782 I llm_load_print_meta: n_gqa            = 8
0.00.263.783 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.784 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.784 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.786 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.786 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.786 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.787 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.788 I llm_load_print_meta: n_ff             = 16384
0.00.263.788 I llm_load_print_meta: n_expert         = 0
0.00.263.788 I llm_load_print_meta: n_expert_used    = 0
0.00.263.789 I llm_load_print_meta: causal attn      = 1
0.00.263.789 I llm_load_print_meta: pooling type     = 0
0.00.263.789 I llm_load_print_meta: rope type        = 2
0.00.263.790 I llm_load_print_meta: rope scaling     = linear
0.00.263.791 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.792 I llm_load_print_meta: freq_scale_train = 1
0.00.263.792 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.792 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.792 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.793 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.793 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.793 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.794 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.794 I llm_load_print_meta: model type       = 2B
0.00.263.794 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.795 I llm_load_print_meta: model params     = 2.51 B
0.00.263.796 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.796 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.797 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.797 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.797 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.798 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.798 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.798 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.798 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.799 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.799 I llm_load_print_meta: max token length = 93
0.00.263.817 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.324.379 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.324.386 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.324.386 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.324.387 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.324.388 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.324.388 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.329.390 I llama_new_context_with_model: n_ctx      = 8192
0.00.329.396 I llama_new_context_with_model: n_batch    = 2048
0.00.329.397 I llama_new_context_with_model: n_ubatch   = 512
0.00.329.397 I llama_new_context_with_model: flash_attn = 0
0.00.329.399 I llama_new_context_with_model: freq_base  = 10000.0
0.00.329.400 I llama_new_context_with_model: freq_scale = 1
0.00.357.812 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.357.828 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.357.916 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.769 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.358.776 I llama_new_context_with_model: graph nodes  = 601
0.00.358.776 I llama_new_context_with_model: graph splits = 1
0.00.358.778 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.468 I main: llama threadpool init, n_threads = 4
0.00.440.482 I 
0.00.440.560 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.563 I 
0.00.440.602 I sampler seed: 4108532435
0.00.440.612 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.620 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.620 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.621 I 
 maneuvously, but a cunning mind was hiding beneath the surface. [end of text]


0.01.188.326 I llama_perf_sampler_print:    sampling time =       2.19 ms /    16 runs   (    0.14 ms per token,  7309.27 tokens per second)
0.01.188.329 I llama_perf_context_print:        load time =     438.62 ms
0.01.188.330 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.188.332 I llama_perf_context_print:        eval time =     738.57 ms /    15 runs   (   49.24 ms per token,    20.31 tokens per second)
0.01.188.332 I llama_perf_context_print:       total time =     747.87 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3964 (4c9388fb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32068.30 ms
main:    total time = 32068.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.555 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.001.848 I main: load the model and apply lora adapter, if any
0.00.021.979 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.989 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.995 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.996 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.000 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.000 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.001 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.002 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.002 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.003 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.006 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.006 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.008 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.008 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.131 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.386 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.226 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.232 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.233 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.234 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.235 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.236 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.236 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.239 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.239 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.243 I llama_model_loader: - type  f32:   37 tensors
0.00.133.246 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.246 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.798 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.392 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.996 I llm_load_vocab: special tokens cache size = 5
0.00.270.872 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.887 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.888 I llm_load_print_meta: arch             = gemma
0.00.270.889 I llm_load_print_meta: vocab type       = SPM
0.00.270.890 I llm_load_print_meta: n_vocab          = 256000
0.00.270.890 I llm_load_print_meta: n_merges         = 0
0.00.270.890 I llm_load_print_meta: vocab_only       = 0
0.00.270.891 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.891 I llm_load_print_meta: n_embd           = 2048
0.00.270.891 I llm_load_print_meta: n_layer          = 18
0.00.270.903 I llm_load_print_meta: n_head           = 8
0.00.270.904 I llm_load_print_meta: n_head_kv        = 1
0.00.270.904 I llm_load_print_meta: n_rot            = 256
0.00.270.904 I llm_load_print_meta: n_swa            = 0
0.00.270.905 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.905 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.906 I llm_load_print_meta: n_gqa            = 8
0.00.270.907 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.908 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.909 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.910 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.910 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.911 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.912 I llm_load_print_meta: n_ff             = 16384
0.00.270.912 I llm_load_print_meta: n_expert         = 0
0.00.270.912 I llm_load_print_meta: n_expert_used    = 0
0.00.270.913 I llm_load_print_meta: causal attn      = 1
0.00.270.913 I llm_load_print_meta: pooling type     = 0
0.00.270.913 I llm_load_print_meta: rope type        = 2
0.00.270.914 I llm_load_print_meta: rope scaling     = linear
0.00.270.915 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.916 I llm_load_print_meta: freq_scale_train = 1
0.00.270.916 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.916 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.917 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.917 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.917 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.917 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.918 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.918 I llm_load_print_meta: model type       = 2B
0.00.270.919 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.919 I llm_load_print_meta: model params     = 2.51 B
0.00.270.920 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.920 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.921 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.922 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.922 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.922 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.923 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.923 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.923 I llm_load_print_meta: max token length = 93
0.00.270.941 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.330.579 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.335.634 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.642 I llama_new_context_with_model: n_batch    = 2048
0.00.335.642 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.643 I llama_new_context_with_model: flash_attn = 0
0.00.335.646 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.647 I llama_new_context_with_model: freq_scale = 1
0.00.365.535 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.365.551 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.365.645 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.511 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.366.520 I llama_new_context_with_model: graph nodes  = 601
0.00.366.520 I llama_new_context_with_model: graph splits = 1
0.00.366.522 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.152 I main: llama threadpool init, n_threads = 4
0.00.447.166 I 
0.00.447.248 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.447.251 I 
0.00.447.289 I sampler seed: 1581880623
0.00.447.300 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.302 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.303 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.303 I 
 seconally to the question.

I need to create a database table for storing employee information.

**Employee Table**

- EmployeeID (Primary Key)

0.02.033.144 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6922.59 tokens per second)
0.02.033.146 I llama_perf_context_print:        load time =     445.29 ms
0.02.033.147 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.033.149 I llama_perf_context_print:        eval time =    1566.12 ms /    32 runs   (   48.94 ms per token,    20.43 tokens per second)
0.02.033.149 I llama_perf_context_print:       total time =    1586.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.496s
user	8m10.833s
sys	0m7.163s
