+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.024.667 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.882 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.965 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.976 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.977 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.981 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.983 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.985 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.986 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.988 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.988 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.995 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.996 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.997 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.998 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.999 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.068 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.386 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.602 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.610 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.611 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.612 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.613 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.614 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.615 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.618 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.619 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.620 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.621 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.623 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.631 I llama_model_loader: - type  f32:   37 tensors
0.00.274.635 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.386 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.370 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.356 I llm_load_vocab: special tokens cache size = 5
0.00.617.653 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.727 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.728 I llm_load_print_meta: arch             = gemma
0.00.617.729 I llm_load_print_meta: vocab type       = SPM
0.00.617.729 I llm_load_print_meta: n_vocab          = 256000
0.00.617.731 I llm_load_print_meta: n_merges         = 0
0.00.617.732 I llm_load_print_meta: vocab_only       = 0
0.00.617.732 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.733 I llm_load_print_meta: n_embd           = 2048
0.00.617.733 I llm_load_print_meta: n_layer          = 18
0.00.617.795 I llm_load_print_meta: n_head           = 8
0.00.617.803 I llm_load_print_meta: n_head_kv        = 1
0.00.617.804 I llm_load_print_meta: n_rot            = 256
0.00.617.804 I llm_load_print_meta: n_swa            = 0
0.00.617.805 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.805 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.810 I llm_load_print_meta: n_gqa            = 8
0.00.617.815 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.832 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.834 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.835 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.836 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.836 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.837 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.842 I llm_load_print_meta: n_ff             = 16384
0.00.617.843 I llm_load_print_meta: n_expert         = 0
0.00.617.843 I llm_load_print_meta: n_expert_used    = 0
0.00.617.844 I llm_load_print_meta: causal attn      = 1
0.00.617.844 I llm_load_print_meta: pooling type     = 0
0.00.617.844 I llm_load_print_meta: rope type        = 2
0.00.617.845 I llm_load_print_meta: rope scaling     = linear
0.00.617.847 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.848 I llm_load_print_meta: freq_scale_train = 1
0.00.617.849 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.849 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.850 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.850 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.850 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.863 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.864 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.865 I llm_load_print_meta: model type       = 2B
0.00.617.866 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.874 I llm_load_print_meta: model params     = 2.51 B
0.00.617.883 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.886 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.888 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.888 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.888 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.889 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.897 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.898 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.904 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.909 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.909 I llm_load_print_meta: max token length = 93
0.00.618.078 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.719.081 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.719.093 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.719.094 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.719.094 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.719.095 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.719.096 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.724.954 I llama_new_context_with_model: n_ctx      = 8192
0.00.724.961 I llama_new_context_with_model: n_batch    = 2048
0.00.724.961 I llama_new_context_with_model: n_ubatch   = 512
0.00.724.962 I llama_new_context_with_model: flash_attn = 0
0.00.724.964 I llama_new_context_with_model: freq_base  = 10000.0
0.00.724.965 I llama_new_context_with_model: freq_scale = 1
0.00.754.898 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.754.942 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.755.062 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.756.518 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.756.524 I llama_new_context_with_model: graph nodes  = 601
0.00.756.524 I llama_new_context_with_model: graph splits = 1
0.00.756.541 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.769 I main: llama threadpool init, n_threads = 4
0.01.367.782 I 
0.01.367.891 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.895 I 
0.01.368.077 I sampler seed: 1445572052
0.01.368.088 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.368.095 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.368.097 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.368.099 I 
 increasities.

I am unable to answer this question as it contains inappropriate and sexually suggestive content. [end of text]


0.10.184.388 I llama_perf_sampler_print:    sampling time =      32.31 ms /    22 runs   (    1.47 ms per token,   680.95 tokens per second)
0.10.184.392 I llama_perf_context_print:        load time =    1364.89 ms
0.10.184.393 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.184.417 I llama_perf_context_print:        eval time =    8753.58 ms /    21 runs   (  416.84 ms per token,     2.40 tokens per second)
0.10.184.418 I llama_perf_context_print:       total time =    8816.63 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.749 I main: load the model and apply lora adapter, if any
0.00.024.955 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.047 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.064 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.069 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.070 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.071 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.073 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.074 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.076 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.084 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.085 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.086 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.087 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.049 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.964 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.294 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.302 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.304 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.305 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.306 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.307 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.308 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.312 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.313 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.315 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.315 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.275.317 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.325 I llama_model_loader: - type  f32:   37 tensors
0.00.275.329 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.223 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.907 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.823 I llm_load_vocab: special tokens cache size = 5
0.00.616.362 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.435 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.436 I llm_load_print_meta: arch             = gemma
0.00.616.437 I llm_load_print_meta: vocab type       = SPM
0.00.616.438 I llm_load_print_meta: n_vocab          = 256000
0.00.616.440 I llm_load_print_meta: n_merges         = 0
0.00.616.441 I llm_load_print_meta: vocab_only       = 0
0.00.616.441 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.442 I llm_load_print_meta: n_embd           = 2048
0.00.616.442 I llm_load_print_meta: n_layer          = 18
0.00.616.509 I llm_load_print_meta: n_head           = 8
0.00.616.517 I llm_load_print_meta: n_head_kv        = 1
0.00.616.517 I llm_load_print_meta: n_rot            = 256
0.00.616.518 I llm_load_print_meta: n_swa            = 0
0.00.616.518 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.518 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.523 I llm_load_print_meta: n_gqa            = 8
0.00.616.528 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.532 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.534 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.535 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.535 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.537 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.537 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.542 I llm_load_print_meta: n_ff             = 16384
0.00.616.547 I llm_load_print_meta: n_expert         = 0
0.00.616.547 I llm_load_print_meta: n_expert_used    = 0
0.00.616.548 I llm_load_print_meta: causal attn      = 1
0.00.616.548 I llm_load_print_meta: pooling type     = 0
0.00.616.548 I llm_load_print_meta: rope type        = 2
0.00.616.560 I llm_load_print_meta: rope scaling     = linear
0.00.616.562 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.577 I llm_load_print_meta: freq_scale_train = 1
0.00.616.578 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.586 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.587 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.595 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.599 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.599 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.599 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.600 I llm_load_print_meta: model type       = 2B
0.00.616.602 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.603 I llm_load_print_meta: model params     = 2.51 B
0.00.616.603 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.604 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.605 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.605 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.606 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.606 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.614 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.617 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.629 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.631 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.632 I llm_load_print_meta: max token length = 93
0.00.616.798 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.115 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.720.181 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.190 I llama_new_context_with_model: n_batch    = 2048
0.00.720.190 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.191 I llama_new_context_with_model: flash_attn = 0
0.00.720.195 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.196 I llama_new_context_with_model: freq_scale = 1
0.00.751.264 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.308 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.426 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.821 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.826 I llama_new_context_with_model: graph nodes  = 601
0.00.752.827 I llama_new_context_with_model: graph splits = 1
0.00.752.842 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.408.408 I main: llama threadpool init, n_threads = 4
0.01.408.422 I 
0.01.408.529 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.408.534 I 
0.01.408.715 I sampler seed: 363681031
0.01.408.727 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.408.735 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.408.736 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.408.736 I 
 increasities. [end of text]


0.03.107.729 I llama_perf_sampler_print:    sampling time =       6.35 ms /     5 runs   (    1.27 ms per token,   787.40 tokens per second)
0.03.107.744 I llama_perf_context_print:        load time =    1405.57 ms
0.03.107.746 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.107.748 I llama_perf_context_print:        eval time =    1685.72 ms /     4 runs   (  421.43 ms per token,     2.37 tokens per second)
0.03.107.749 I llama_perf_context_print:       total time =    1699.33 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.024.885 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.094 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.189 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.202 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.204 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.209 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.210 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.212 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.213 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.215 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.216 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.225 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.226 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.227 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.228 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.229 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.425 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.271.881 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.290.240 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.290.248 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.290.250 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.290.251 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.290.251 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.290.253 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.290.254 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.290.258 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.290.259 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.290.276 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.290.278 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.290.280 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.290.288 I llama_model_loader: - type  f32:   37 tensors
0.00.290.292 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.836 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.488 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.380 I llm_load_vocab: special tokens cache size = 5
0.00.620.117 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.184 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.185 I llm_load_print_meta: arch             = gemma
0.00.620.185 I llm_load_print_meta: vocab type       = SPM
0.00.620.186 I llm_load_print_meta: n_vocab          = 256000
0.00.620.188 I llm_load_print_meta: n_merges         = 0
0.00.620.189 I llm_load_print_meta: vocab_only       = 0
0.00.620.189 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.190 I llm_load_print_meta: n_embd           = 2048
0.00.620.190 I llm_load_print_meta: n_layer          = 18
0.00.620.254 I llm_load_print_meta: n_head           = 8
0.00.620.262 I llm_load_print_meta: n_head_kv        = 1
0.00.620.262 I llm_load_print_meta: n_rot            = 256
0.00.620.263 I llm_load_print_meta: n_swa            = 0
0.00.620.264 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.264 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.269 I llm_load_print_meta: n_gqa            = 8
0.00.620.274 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.280 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.281 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.283 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.284 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.284 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.293 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.299 I llm_load_print_meta: n_ff             = 16384
0.00.620.300 I llm_load_print_meta: n_expert         = 0
0.00.620.300 I llm_load_print_meta: n_expert_used    = 0
0.00.620.301 I llm_load_print_meta: causal attn      = 1
0.00.620.301 I llm_load_print_meta: pooling type     = 0
0.00.620.301 I llm_load_print_meta: rope type        = 2
0.00.620.302 I llm_load_print_meta: rope scaling     = linear
0.00.620.316 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.319 I llm_load_print_meta: freq_scale_train = 1
0.00.620.320 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.320 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.320 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.321 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.321 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.321 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.322 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.322 I llm_load_print_meta: model type       = 2B
0.00.620.323 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.324 I llm_load_print_meta: model params     = 2.51 B
0.00.620.325 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.325 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.326 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.326 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.327 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.328 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.328 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.328 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.334 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.335 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.336 I llm_load_print_meta: max token length = 93
0.00.620.536 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.699.347 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.699.357 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.699.358 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.699.359 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.699.359 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.699.360 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.705.201 I llama_new_context_with_model: n_ctx      = 8192
0.00.705.209 I llama_new_context_with_model: n_batch    = 2048
0.00.705.209 I llama_new_context_with_model: n_ubatch   = 512
0.00.705.210 I llama_new_context_with_model: flash_attn = 0
0.00.705.213 I llama_new_context_with_model: freq_base  = 10000.0
0.00.705.213 I llama_new_context_with_model: freq_scale = 1
0.00.735.286 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.735.330 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.735.446 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.873 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.878 I llama_new_context_with_model: graph nodes  = 601
0.00.736.878 I llama_new_context_with_model: graph splits = 1
0.00.736.896 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.351.012 I main: llama threadpool init, n_threads = 4
0.01.351.026 I 
0.01.351.134 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.138 I 
0.01.351.314 I sampler seed: 1056994697
0.01.351.326 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.332 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.351.333 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.333 I 
 increasities. [end of text]


0.03.032.702 I llama_perf_sampler_print:    sampling time =       6.50 ms /     5 runs   (    1.30 ms per token,   768.99 tokens per second)
0.03.032.705 I llama_perf_context_print:        load time =    1348.12 ms
0.03.032.707 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.032.709 I llama_perf_context_print:        eval time =    1668.21 ms /     4 runs   (  417.05 ms per token,     2.40 tokens per second)
0.03.032.710 I llama_perf_context_print:       total time =    1681.70 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.032.752 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.032.977 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.033.077 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.033.090 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.033.092 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.033.097 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.033.101 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.033.103 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.033.104 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.033.106 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.033.108 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.033.119 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.033.125 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.033.130 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.033.131 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.033.133 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.171.193 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.277.898 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.296.267 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.296.275 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.296.277 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.296.278 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.296.279 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.296.280 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.296.282 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.296.285 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.296.286 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.296.287 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.296.288 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.296.289 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.296.298 I llama_model_loader: - type  f32:   37 tensors
0.00.296.302 I llama_model_loader: - type q8_0:  127 tensors
0.00.481.422 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.546.080 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.547.015 I llm_load_vocab: special tokens cache size = 5
0.00.652.767 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.652.842 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.652.842 I llm_load_print_meta: arch             = gemma
0.00.652.843 I llm_load_print_meta: vocab type       = SPM
0.00.652.844 I llm_load_print_meta: n_vocab          = 256000
0.00.652.846 I llm_load_print_meta: n_merges         = 0
0.00.652.847 I llm_load_print_meta: vocab_only       = 0
0.00.652.847 I llm_load_print_meta: n_ctx_train      = 8192
0.00.652.847 I llm_load_print_meta: n_embd           = 2048
0.00.652.848 I llm_load_print_meta: n_layer          = 18
0.00.652.909 I llm_load_print_meta: n_head           = 8
0.00.652.916 I llm_load_print_meta: n_head_kv        = 1
0.00.652.916 I llm_load_print_meta: n_rot            = 256
0.00.652.917 I llm_load_print_meta: n_swa            = 0
0.00.652.917 I llm_load_print_meta: n_embd_head_k    = 256
0.00.652.917 I llm_load_print_meta: n_embd_head_v    = 256
0.00.652.922 I llm_load_print_meta: n_gqa            = 8
0.00.652.926 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.652.931 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.652.932 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.652.934 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.652.934 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.652.934 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.652.935 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.652.940 I llm_load_print_meta: n_ff             = 16384
0.00.652.941 I llm_load_print_meta: n_expert         = 0
0.00.652.943 I llm_load_print_meta: n_expert_used    = 0
0.00.652.943 I llm_load_print_meta: causal attn      = 1
0.00.652.944 I llm_load_print_meta: pooling type     = 0
0.00.652.944 I llm_load_print_meta: rope type        = 2
0.00.652.956 I llm_load_print_meta: rope scaling     = linear
0.00.652.958 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.652.974 I llm_load_print_meta: freq_scale_train = 1
0.00.652.975 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.652.975 I llm_load_print_meta: rope_finetuned   = unknown
0.00.652.984 I llm_load_print_meta: ssm_d_conv       = 0
0.00.652.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.652.985 I llm_load_print_meta: ssm_d_state      = 0
0.00.652.985 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.652.986 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.652.987 I llm_load_print_meta: model type       = 2B
0.00.652.988 I llm_load_print_meta: model ftype      = Q8_0
0.00.652.989 I llm_load_print_meta: model params     = 2.51 B
0.00.652.990 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.652.991 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.652.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.652.992 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.652.993 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.653.001 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.653.002 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.653.002 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.653.009 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.653.011 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.653.011 I llm_load_print_meta: max token length = 93
0.00.653.188 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.724.687 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.724.696 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.730.630 I llama_new_context_with_model: n_ctx      = 8192
0.00.730.637 I llama_new_context_with_model: n_batch    = 2048
0.00.730.638 I llama_new_context_with_model: n_ubatch   = 512
0.00.730.638 I llama_new_context_with_model: flash_attn = 0
0.00.730.641 I llama_new_context_with_model: freq_base  = 10000.0
0.00.730.642 I llama_new_context_with_model: freq_scale = 1
0.00.759.901 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.759.944 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.760.062 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.761.421 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.761.426 I llama_new_context_with_model: graph nodes  = 601
0.00.761.427 I llama_new_context_with_model: graph splits = 1
0.00.761.443 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.406.461 I main: llama threadpool init, n_threads = 4
0.01.406.474 I 
0.01.406.595 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.406.600 I 
0.01.406.790 I sampler seed: 570259513
0.01.406.802 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.406.810 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.406.810 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.406.811 I 
 increasities that occur due to the interplay of evolutionary forces and ecological conditions. [end of text]


0.08.171.983 I llama_perf_sampler_print:    sampling time =      24.61 ms /    17 runs   (    1.45 ms per token,   690.69 tokens per second)
0.08.171.997 I llama_perf_context_print:        load time =    1403.54 ms
0.08.171.999 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.172.001 I llama_perf_context_print:        eval time =    6717.21 ms /    16 runs   (  419.83 ms per token,     2.38 tokens per second)
0.08.172.002 I llama_perf_context_print:       total time =    6765.53 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m34.180s
user	1m28.878s
sys	0m9.418s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3964 (4c9388fb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199443.23 ms
main:    total time = 199443.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.752 I main: load the model and apply lora adapter, if any
0.00.024.794 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.998 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.083 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.093 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.095 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.099 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.101 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.102 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.103 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.111 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.115 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.121 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.122 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.123 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.124 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.125 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.376 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.780 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.028 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.037 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.040 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.041 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.042 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.045 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.046 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.047 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.048 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.277.049 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.058 I llama_model_loader: - type  f32:   37 tensors
0.00.277.061 I llama_model_loader: - type q4_K:  108 tensors
0.00.277.062 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.896 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.310 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.350 I llm_load_vocab: special tokens cache size = 5
0.00.626.850 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.922 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.923 I llm_load_print_meta: arch             = gemma
0.00.626.923 I llm_load_print_meta: vocab type       = SPM
0.00.626.924 I llm_load_print_meta: n_vocab          = 256000
0.00.626.927 I llm_load_print_meta: n_merges         = 0
0.00.626.927 I llm_load_print_meta: vocab_only       = 0
0.00.626.928 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.928 I llm_load_print_meta: n_embd           = 2048
0.00.626.928 I llm_load_print_meta: n_layer          = 18
0.00.626.992 I llm_load_print_meta: n_head           = 8
0.00.627.000 I llm_load_print_meta: n_head_kv        = 1
0.00.627.000 I llm_load_print_meta: n_rot            = 256
0.00.627.000 I llm_load_print_meta: n_swa            = 0
0.00.627.001 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.002 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.006 I llm_load_print_meta: n_gqa            = 8
0.00.627.011 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.016 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.017 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.018 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.019 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.019 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.020 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.025 I llm_load_print_meta: n_ff             = 16384
0.00.627.026 I llm_load_print_meta: n_expert         = 0
0.00.627.026 I llm_load_print_meta: n_expert_used    = 0
0.00.627.027 I llm_load_print_meta: causal attn      = 1
0.00.627.027 I llm_load_print_meta: pooling type     = 0
0.00.627.027 I llm_load_print_meta: rope type        = 2
0.00.627.028 I llm_load_print_meta: rope scaling     = linear
0.00.627.029 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.030 I llm_load_print_meta: freq_scale_train = 1
0.00.627.031 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.031 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.031 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.032 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.032 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.033 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.033 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.034 I llm_load_print_meta: model type       = 2B
0.00.627.036 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.627.048 I llm_load_print_meta: model params     = 2.51 B
0.00.627.050 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.627.051 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.052 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.064 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.065 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.065 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.069 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.070 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.077 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.078 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.079 I llm_load_print_meta: max token length = 93
0.00.627.265 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.688.378 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.688.387 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.688.388 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.688.389 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.688.389 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.688.390 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.693.999 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.006 I llama_new_context_with_model: n_batch    = 2048
0.00.694.006 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.007 I llama_new_context_with_model: flash_attn = 0
0.00.694.009 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.010 I llama_new_context_with_model: freq_scale = 1
0.00.723.126 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.181 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.297 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.689 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.694 I llama_new_context_with_model: graph nodes  = 601
0.00.724.695 I llama_new_context_with_model: graph splits = 1
0.00.724.710 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.308.073 I main: llama threadpool init, n_threads = 4
0.01.308.086 I 
0.01.308.198 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.308.202 I 
0.01.308.387 I sampler seed: 4038580746
0.01.308.399 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.308.405 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.308.408 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.308.409 I 
 seconded.

I understand that you are trying to say that I am violating your rules. I am not violating your rules. I am simply following my own

0.12.265.034 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.13 tokens per second)
0.12.265.038 I llama_perf_context_print:        load time =    1305.24 ms
0.12.265.040 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.265.042 I llama_perf_context_print:        eval time =   10862.34 ms /    32 runs   (  339.45 ms per token,     2.95 tokens per second)
0.12.265.043 I llama_perf_context_print:       total time =   10956.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3964 (4c9388fb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199361.97 ms
main:    total time = 199361.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 3964 (4c9388fb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.818 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.908 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.922 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.923 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.927 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.929 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.931 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.932 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.933 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.951 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.955 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.956 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.957 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.958 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.783 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.102 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.279.658 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.279.665 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.279.667 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.279.668 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.279.669 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.279.670 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.279.671 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.279.675 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.279.676 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.279.684 I llama_model_loader: - type  f32:   37 tensors
0.00.279.688 I llama_model_loader: - type q4_K:  108 tensors
0.00.279.689 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.076 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.973 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.877 I llm_load_vocab: special tokens cache size = 5
0.00.608.761 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.834 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.835 I llm_load_print_meta: arch             = gemma
0.00.608.836 I llm_load_print_meta: vocab type       = SPM
0.00.608.836 I llm_load_print_meta: n_vocab          = 256000
0.00.608.838 I llm_load_print_meta: n_merges         = 0
0.00.608.839 I llm_load_print_meta: vocab_only       = 0
0.00.608.839 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.840 I llm_load_print_meta: n_embd           = 2048
0.00.608.840 I llm_load_print_meta: n_layer          = 18
0.00.608.905 I llm_load_print_meta: n_head           = 8
0.00.608.911 I llm_load_print_meta: n_head_kv        = 1
0.00.608.912 I llm_load_print_meta: n_rot            = 256
0.00.608.912 I llm_load_print_meta: n_swa            = 0
0.00.608.913 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.913 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.918 I llm_load_print_meta: n_gqa            = 8
0.00.608.924 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.929 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.953 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.955 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.956 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.956 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.957 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.966 I llm_load_print_meta: n_ff             = 16384
0.00.608.966 I llm_load_print_meta: n_expert         = 0
0.00.608.967 I llm_load_print_meta: n_expert_used    = 0
0.00.608.974 I llm_load_print_meta: causal attn      = 1
0.00.608.974 I llm_load_print_meta: pooling type     = 0
0.00.608.975 I llm_load_print_meta: rope type        = 2
0.00.608.975 I llm_load_print_meta: rope scaling     = linear
0.00.608.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.978 I llm_load_print_meta: freq_scale_train = 1
0.00.608.978 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.979 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.979 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.979 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.980 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.980 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.980 I llm_load_print_meta: model type       = 2B
0.00.608.981 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.982 I llm_load_print_meta: model params     = 2.51 B
0.00.608.983 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.983 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.984 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.985 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.986 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.987 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.987 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.987 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.993 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.994 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.995 I llm_load_print_meta: max token length = 93
0.00.609.160 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.089 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.673.712 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.719 I llama_new_context_with_model: n_batch    = 2048
0.00.673.719 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.720 I llama_new_context_with_model: flash_attn = 0
0.00.673.723 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.724 I llama_new_context_with_model: freq_scale = 1
0.00.702.885 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.929 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.042 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.378 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.383 I llama_new_context_with_model: graph nodes  = 601
0.00.704.383 I llama_new_context_with_model: graph splits = 1
0.00.704.399 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.632 I main: llama threadpool init, n_threads = 4
0.01.286.645 I 
0.01.286.757 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.761 I 
0.01.286.935 I sampler seed: 1038813961
0.01.286.947 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.953 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.286.956 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.957 I 
 increasities and the impact on the company's financial performance.

**Answer:**

**1. Declining Employee Morale and Productivity:**

* Un

0.12.221.108 I llama_perf_sampler_print:    sampling time =      49.52 ms /    33 runs   (    1.50 ms per token,   666.45 tokens per second)
0.12.221.111 I llama_perf_context_print:        load time =    1283.77 ms
0.12.221.135 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.221.137 I llama_perf_context_print:        eval time =   10838.80 ms /    32 runs   (  338.71 ms per token,     2.95 tokens per second)
0.12.221.138 I llama_perf_context_print:       total time =   10934.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.142s
user	50m13.053s
sys	0m6.430s
