+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4369 (9ba29597) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.022.237 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.245 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.256 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.264 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.265 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.269 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.270 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.270 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.271 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.272 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.273 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.277 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.278 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.279 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.279 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.280 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.682 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.904 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.798 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.805 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.805 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.806 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.807 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.808 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.808 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.810 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.810 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.811 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.812 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.813 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.816 I llama_model_loader: - type  f32:   37 tensors
0.00.132.817 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.401 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.794 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.261 I llm_load_vocab: special tokens cache size = 5
0.00.272.100 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.115 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.117 I llm_load_print_meta: arch             = gemma
0.00.272.117 I llm_load_print_meta: vocab type       = SPM
0.00.272.118 I llm_load_print_meta: n_vocab          = 256000
0.00.272.118 I llm_load_print_meta: n_merges         = 0
0.00.272.119 I llm_load_print_meta: vocab_only       = 0
0.00.272.119 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.119 I llm_load_print_meta: n_embd           = 2048
0.00.272.119 I llm_load_print_meta: n_layer          = 18
0.00.272.131 I llm_load_print_meta: n_head           = 8
0.00.272.132 I llm_load_print_meta: n_head_kv        = 1
0.00.272.132 I llm_load_print_meta: n_rot            = 256
0.00.272.133 I llm_load_print_meta: n_swa            = 0
0.00.272.133 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.133 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.135 I llm_load_print_meta: n_gqa            = 8
0.00.272.136 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.137 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.139 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.140 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.142 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.143 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.143 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.144 I llm_load_print_meta: n_ff             = 16384
0.00.272.145 I llm_load_print_meta: n_expert         = 0
0.00.272.146 I llm_load_print_meta: n_expert_used    = 0
0.00.272.146 I llm_load_print_meta: causal attn      = 1
0.00.272.147 I llm_load_print_meta: pooling type     = 0
0.00.272.147 I llm_load_print_meta: rope type        = 2
0.00.272.148 I llm_load_print_meta: rope scaling     = linear
0.00.272.151 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.152 I llm_load_print_meta: freq_scale_train = 1
0.00.272.153 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.153 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.153 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.154 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.154 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.154 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.155 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.155 I llm_load_print_meta: model type       = 2B
0.00.272.157 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.158 I llm_load_print_meta: model params     = 2.51 B
0.00.272.159 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.159 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.160 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.161 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.164 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.164 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.164 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.165 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.165 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.165 I llm_load_print_meta: max token length = 93
0.00.372.435 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.372.441 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.372.442 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.372.443 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.372.443 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.372.444 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.377.770 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.776 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.776 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.776 I llama_new_context_with_model: n_batch       = 2048
0.00.377.777 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.777 I llama_new_context_with_model: flash_attn    = 0
0.00.377.779 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.780 I llama_new_context_with_model: freq_scale    = 1
0.00.377.781 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.800 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.393.273 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.288 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.389 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.698 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.704 I llama_new_context_with_model: graph nodes  = 601
0.00.394.705 I llama_new_context_with_model: graph splits = 1
0.00.394.708 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.394.708 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.722 I main: llama threadpool init, n_threads = 4
0.00.483.738 I 
0.00.483.812 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.483.816 I 
0.00.483.849 I sampler seed: 4274957000
0.00.483.860 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.872 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.876 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.877 I 
 increamically.

I am sorry, I am not able to generate responses that are disrespectful or insensitive. [end of text]


0.02.030.786 I llama_perf_sampler_print:    sampling time =       3.27 ms /    23 runs   (    0.14 ms per token,  7035.79 tokens per second)
0.02.030.788 I llama_perf_context_print:        load time =     482.97 ms
0.02.030.789 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.030.791 I llama_perf_context_print:        eval time =    1534.00 ms /    22 runs   (   69.73 ms per token,    14.34 tokens per second)
0.02.030.792 I llama_perf_context_print:       total time =    1547.07 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.532 I build: 4369 (9ba29597) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.704 I main: llama backend init
0.00.000.713 I main: load the model and apply lora adapter, if any
0.00.021.305 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.322 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.328 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.332 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.336 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.336 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.337 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.338 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.339 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.339 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.342 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.343 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.344 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.344 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.345 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.661 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.719 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.725 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.726 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.726 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.727 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.727 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.728 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.731 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.733 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.736 I llama_model_loader: - type  f32:   37 tensors
0.00.131.738 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.392 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.565 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.073 I llm_load_vocab: special tokens cache size = 5
0.00.264.139 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.157 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.158 I llm_load_print_meta: arch             = gemma
0.00.264.159 I llm_load_print_meta: vocab type       = SPM
0.00.264.160 I llm_load_print_meta: n_vocab          = 256000
0.00.264.160 I llm_load_print_meta: n_merges         = 0
0.00.264.160 I llm_load_print_meta: vocab_only       = 0
0.00.264.161 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.161 I llm_load_print_meta: n_embd           = 2048
0.00.264.161 I llm_load_print_meta: n_layer          = 18
0.00.264.174 I llm_load_print_meta: n_head           = 8
0.00.264.175 I llm_load_print_meta: n_head_kv        = 1
0.00.264.176 I llm_load_print_meta: n_rot            = 256
0.00.264.176 I llm_load_print_meta: n_swa            = 0
0.00.264.176 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.178 I llm_load_print_meta: n_gqa            = 8
0.00.264.178 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.179 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.180 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.181 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.182 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.182 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.183 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.184 I llm_load_print_meta: n_ff             = 16384
0.00.264.184 I llm_load_print_meta: n_expert         = 0
0.00.264.184 I llm_load_print_meta: n_expert_used    = 0
0.00.264.185 I llm_load_print_meta: causal attn      = 1
0.00.264.185 I llm_load_print_meta: pooling type     = 0
0.00.264.185 I llm_load_print_meta: rope type        = 2
0.00.264.185 I llm_load_print_meta: rope scaling     = linear
0.00.264.187 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.188 I llm_load_print_meta: freq_scale_train = 1
0.00.264.188 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.188 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.189 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.189 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.189 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.189 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.190 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.190 I llm_load_print_meta: model type       = 2B
0.00.264.192 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.192 I llm_load_print_meta: model params     = 2.51 B
0.00.264.193 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.194 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.194 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.195 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.195 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.195 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.196 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.196 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.196 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.197 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.197 I llm_load_print_meta: max token length = 93
0.00.356.097 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.211 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.217 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.217 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.218 I llama_new_context_with_model: n_batch       = 2048
0.00.361.218 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.219 I llama_new_context_with_model: flash_attn    = 0
0.00.361.221 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.222 I llama_new_context_with_model: freq_scale    = 1
0.00.361.223 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.243 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.375.870 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.884 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.974 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.233 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.240 I llama_new_context_with_model: graph nodes  = 601
0.00.377.240 I llama_new_context_with_model: graph splits = 1
0.00.377.243 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.377.243 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.762 I main: llama threadpool init, n_threads = 4
0.00.457.779 I 
0.00.457.852 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.457.855 I 
0.00.457.888 I sampler seed: 1063427516
0.00.457.899 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.911 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.915 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.915 I 
 increasities in a way that is both impactful and visually engaging. [end of text]


0.01.413.361 I llama_perf_sampler_print:    sampling time =       2.23 ms /    15 runs   (    0.15 ms per token,  6711.41 tokens per second)
0.01.413.363 I llama_perf_context_print:        load time =     457.03 ms
0.01.413.364 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.413.366 I llama_perf_context_print:        eval time =     946.51 ms /    14 runs   (   67.61 ms per token,    14.79 tokens per second)
0.01.413.366 I llama_perf_context_print:       total time =     955.61 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.540 I build: 4369 (9ba29597) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.022.535 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.546 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.554 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.560 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.564 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.565 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.565 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.567 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.567 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.568 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.573 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.573 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.574 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.574 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.575 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.239 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.370 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.333 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.339 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.340 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.341 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.342 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.343 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.345 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.346 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.346 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.347 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.349 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.352 I llama_model_loader: - type  f32:   37 tensors
0.00.133.353 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.368 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.925 I llm_load_vocab: special tokens cache size = 5
0.00.277.154 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.168 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.169 I llm_load_print_meta: arch             = gemma
0.00.277.169 I llm_load_print_meta: vocab type       = SPM
0.00.277.170 I llm_load_print_meta: n_vocab          = 256000
0.00.277.171 I llm_load_print_meta: n_merges         = 0
0.00.277.171 I llm_load_print_meta: vocab_only       = 0
0.00.277.172 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.172 I llm_load_print_meta: n_embd           = 2048
0.00.277.172 I llm_load_print_meta: n_layer          = 18
0.00.277.184 I llm_load_print_meta: n_head           = 8
0.00.277.185 I llm_load_print_meta: n_head_kv        = 1
0.00.277.185 I llm_load_print_meta: n_rot            = 256
0.00.277.185 I llm_load_print_meta: n_swa            = 0
0.00.277.186 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.186 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.187 I llm_load_print_meta: n_gqa            = 8
0.00.277.188 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.189 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.189 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.191 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.192 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.192 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.193 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.194 I llm_load_print_meta: n_ff             = 16384
0.00.277.194 I llm_load_print_meta: n_expert         = 0
0.00.277.195 I llm_load_print_meta: n_expert_used    = 0
0.00.277.195 I llm_load_print_meta: causal attn      = 1
0.00.277.195 I llm_load_print_meta: pooling type     = 0
0.00.277.195 I llm_load_print_meta: rope type        = 2
0.00.277.196 I llm_load_print_meta: rope scaling     = linear
0.00.277.197 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.198 I llm_load_print_meta: freq_scale_train = 1
0.00.277.198 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.198 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.198 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.199 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.199 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.199 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.199 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.200 I llm_load_print_meta: model type       = 2B
0.00.277.202 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.202 I llm_load_print_meta: model params     = 2.51 B
0.00.277.203 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.203 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.204 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.204 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.205 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.205 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.206 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.206 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.207 I llm_load_print_meta: max token length = 93
0.00.355.382 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.355.389 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.390 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.355.391 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.355.391 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.392 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.360.582 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.588 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.589 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.589 I llama_new_context_with_model: n_batch       = 2048
0.00.360.590 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.590 I llama_new_context_with_model: flash_attn    = 0
0.00.360.592 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.594 I llama_new_context_with_model: freq_scale    = 1
0.00.360.594 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.612 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.374.829 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.841 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.931 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.214 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.221 I llama_new_context_with_model: graph nodes  = 601
0.00.376.222 I llama_new_context_with_model: graph splits = 1
0.00.376.224 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.376.224 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.098 I main: llama threadpool init, n_threads = 4
0.00.460.115 I 
0.00.460.187 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.190 I 
0.00.460.223 I sampler seed: 2784061958
0.00.460.234 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.244 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.248 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.248 I 
 increasities, while simultaneously providing a platform for the exploration of the ethical implications of AI.

The increasing sophistication of AI necessitates a comprehensive and nuanced understanding of its

0.02.723.821 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6710.04 tokens per second)
0.02.723.824 I llama_perf_context_print:        load time =     459.34 ms
0.02.723.825 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.723.827 I llama_perf_context_print:        eval time =    2244.19 ms /    32 runs   (   70.13 ms per token,    14.26 tokens per second)
0.02.723.827 I llama_perf_context_print:       total time =    2263.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.473 I build: 4369 (9ba29597) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.695 I main: llama backend init
0.00.000.703 I main: load the model and apply lora adapter, if any
0.00.021.206 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.215 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.222 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.227 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.228 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.231 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.231 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.233 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.234 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.234 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.238 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.239 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.240 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.241 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.937 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.128 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.168 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.175 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.175 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.176 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.176 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.177 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.178 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.181 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.181 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.182 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.182 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.183 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.187 I llama_model_loader: - type  f32:   37 tensors
0.00.132.188 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.917 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.435 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.994 I llm_load_vocab: special tokens cache size = 5
0.00.269.963 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.980 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.982 I llm_load_print_meta: arch             = gemma
0.00.269.982 I llm_load_print_meta: vocab type       = SPM
0.00.269.983 I llm_load_print_meta: n_vocab          = 256000
0.00.269.983 I llm_load_print_meta: n_merges         = 0
0.00.269.983 I llm_load_print_meta: vocab_only       = 0
0.00.269.984 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.984 I llm_load_print_meta: n_embd           = 2048
0.00.269.984 I llm_load_print_meta: n_layer          = 18
0.00.269.995 I llm_load_print_meta: n_head           = 8
0.00.269.996 I llm_load_print_meta: n_head_kv        = 1
0.00.269.997 I llm_load_print_meta: n_rot            = 256
0.00.269.997 I llm_load_print_meta: n_swa            = 0
0.00.269.997 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.998 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.998 I llm_load_print_meta: n_gqa            = 8
0.00.269.999 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.000 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.001 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.002 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.003 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.003 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.003 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.004 I llm_load_print_meta: n_ff             = 16384
0.00.270.005 I llm_load_print_meta: n_expert         = 0
0.00.270.005 I llm_load_print_meta: n_expert_used    = 0
0.00.270.005 I llm_load_print_meta: causal attn      = 1
0.00.270.006 I llm_load_print_meta: pooling type     = 0
0.00.270.006 I llm_load_print_meta: rope type        = 2
0.00.270.006 I llm_load_print_meta: rope scaling     = linear
0.00.270.008 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.009 I llm_load_print_meta: freq_scale_train = 1
0.00.270.009 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.009 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.010 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.010 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.010 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.010 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.011 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.011 I llm_load_print_meta: model type       = 2B
0.00.270.013 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.013 I llm_load_print_meta: model params     = 2.51 B
0.00.270.014 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.014 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.015 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.015 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.015 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.016 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.016 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.016 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.017 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.017 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.017 I llm_load_print_meta: max token length = 93
0.00.341.104 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.111 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.411 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.418 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.419 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.419 I llama_new_context_with_model: n_batch       = 2048
0.00.346.419 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.420 I llama_new_context_with_model: flash_attn    = 0
0.00.346.422 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.423 I llama_new_context_with_model: freq_scale    = 1
0.00.346.424 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.445 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.361.420 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.433 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.534 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.832 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.837 I llama_new_context_with_model: graph nodes  = 601
0.00.362.838 I llama_new_context_with_model: graph splits = 1
0.00.362.840 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.362.840 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.819 I main: llama threadpool init, n_threads = 4
0.00.451.834 I 
0.00.451.906 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.910 I 
0.00.451.942 I sampler seed: 3330978942
0.00.451.953 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.955 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.956 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.956 I 
 increasities in the realm of consciousness, and the implications for philosophical inquiry.

**Introduction:**

The concept of consciousness has been a central topic of philosophical inquiry

0.02.888.307 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6643.85 tokens per second)
0.02.888.310 I llama_perf_context_print:        load time =     451.10 ms
0.02.888.311 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.888.312 I llama_perf_context_print:        eval time =    2417.28 ms /    32 runs   (   75.54 ms per token,    13.24 tokens per second)
0.02.888.313 I llama_perf_context_print:       total time =    2436.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.960s
user	0m31.719s
sys	0m9.301s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4369 (9ba29597)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40251.97 ms
main:    total time = 40251.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.550 I build: 4369 (9ba29597) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.613 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.624 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.636 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.641 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.642 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.646 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.647 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.647 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.648 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.648 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.649 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.653 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.653 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.654 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.655 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.380 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.511 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.576 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.583 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.584 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.584 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.585 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.586 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.586 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.588 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.589 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.589 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.590 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.591 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.594 I llama_model_loader: - type  f32:   37 tensors
0.00.132.595 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.596 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.926 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.448 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.055 I llm_load_vocab: special tokens cache size = 5
0.00.273.905 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.921 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.922 I llm_load_print_meta: arch             = gemma
0.00.273.922 I llm_load_print_meta: vocab type       = SPM
0.00.273.923 I llm_load_print_meta: n_vocab          = 256000
0.00.273.923 I llm_load_print_meta: n_merges         = 0
0.00.273.923 I llm_load_print_meta: vocab_only       = 0
0.00.273.924 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.924 I llm_load_print_meta: n_embd           = 2048
0.00.273.925 I llm_load_print_meta: n_layer          = 18
0.00.273.936 I llm_load_print_meta: n_head           = 8
0.00.273.937 I llm_load_print_meta: n_head_kv        = 1
0.00.273.938 I llm_load_print_meta: n_rot            = 256
0.00.273.938 I llm_load_print_meta: n_swa            = 0
0.00.273.939 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.939 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.940 I llm_load_print_meta: n_gqa            = 8
0.00.273.941 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.942 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.943 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.944 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.945 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.945 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.945 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.947 I llm_load_print_meta: n_ff             = 16384
0.00.273.947 I llm_load_print_meta: n_expert         = 0
0.00.273.947 I llm_load_print_meta: n_expert_used    = 0
0.00.273.947 I llm_load_print_meta: causal attn      = 1
0.00.273.948 I llm_load_print_meta: pooling type     = 0
0.00.273.948 I llm_load_print_meta: rope type        = 2
0.00.273.949 I llm_load_print_meta: rope scaling     = linear
0.00.273.950 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.951 I llm_load_print_meta: freq_scale_train = 1
0.00.273.951 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.952 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.952 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.952 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.955 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.956 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.956 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.957 I llm_load_print_meta: model type       = 2B
0.00.273.958 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.959 I llm_load_print_meta: model params     = 2.51 B
0.00.273.960 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.960 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.961 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.961 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.961 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.962 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.962 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.963 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.963 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.964 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.964 I llm_load_print_meta: max token length = 93
0.00.335.365 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.335.372 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.335.372 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.335.373 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.335.373 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.335.374 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.735 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.741 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.742 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.742 I llama_new_context_with_model: n_batch       = 2048
0.00.340.743 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.743 I llama_new_context_with_model: flash_attn    = 0
0.00.340.746 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.747 I llama_new_context_with_model: freq_scale    = 1
0.00.340.748 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.768 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.355.739 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.754 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.851 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.103 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.109 I llama_new_context_with_model: graph nodes  = 601
0.00.357.110 I llama_new_context_with_model: graph splits = 1
0.00.357.113 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.513 I main: llama threadpool init, n_threads = 4
0.00.432.527 I 
0.00.432.604 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.432.604 I 
0.00.432.637 I sampler seed: 2654904750
0.00.432.645 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.647 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.648 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.648 I 
 increasively and playfully.

I shriek and giggle like a child.
I wiggle my nose and wiggle my toes.
I lick my lips and lick my

0.02.040.752 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6466.78 tokens per second)
0.02.040.755 I llama_perf_context_print:        load time =     431.75 ms
0.02.040.756 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.040.758 I llama_perf_context_print:        eval time =    1589.19 ms /    32 runs   (   49.66 ms per token,    20.14 tokens per second)
0.02.040.759 I llama_perf_context_print:       total time =    1608.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4369 (9ba29597)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40240.11 ms
main:    total time = 40240.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.173 I build: 4369 (9ba29597) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.020.658 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.676 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.683 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.683 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.687 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.688 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.689 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.689 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.690 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.691 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.694 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.695 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.696 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.696 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.697 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.098 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.859 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.806 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.812 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.813 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.814 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.815 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.816 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.817 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.821 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.821 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.825 I llama_model_loader: - type  f32:   37 tensors
0.00.130.826 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.827 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.992 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.292 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.904 I llm_load_vocab: special tokens cache size = 5
0.00.270.795 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.809 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.811 I llm_load_print_meta: arch             = gemma
0.00.270.811 I llm_load_print_meta: vocab type       = SPM
0.00.270.812 I llm_load_print_meta: n_vocab          = 256000
0.00.270.812 I llm_load_print_meta: n_merges         = 0
0.00.270.813 I llm_load_print_meta: vocab_only       = 0
0.00.270.813 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.813 I llm_load_print_meta: n_embd           = 2048
0.00.270.814 I llm_load_print_meta: n_layer          = 18
0.00.270.823 I llm_load_print_meta: n_head           = 8
0.00.270.824 I llm_load_print_meta: n_head_kv        = 1
0.00.270.825 I llm_load_print_meta: n_rot            = 256
0.00.270.825 I llm_load_print_meta: n_swa            = 0
0.00.270.825 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.826 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.827 I llm_load_print_meta: n_gqa            = 8
0.00.270.828 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.829 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.829 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.831 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.831 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.831 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.832 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.833 I llm_load_print_meta: n_ff             = 16384
0.00.270.833 I llm_load_print_meta: n_expert         = 0
0.00.270.834 I llm_load_print_meta: n_expert_used    = 0
0.00.270.834 I llm_load_print_meta: causal attn      = 1
0.00.270.834 I llm_load_print_meta: pooling type     = 0
0.00.270.835 I llm_load_print_meta: rope type        = 2
0.00.270.835 I llm_load_print_meta: rope scaling     = linear
0.00.270.836 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.837 I llm_load_print_meta: freq_scale_train = 1
0.00.270.837 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.838 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.838 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.838 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.838 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.838 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.839 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.839 I llm_load_print_meta: model type       = 2B
0.00.270.841 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.841 I llm_load_print_meta: model params     = 2.51 B
0.00.270.843 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.843 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.843 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.844 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.844 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.844 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.845 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.845 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.845 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.846 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.846 I llm_load_print_meta: max token length = 93
0.00.329.961 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.336.235 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.241 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.242 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.242 I llama_new_context_with_model: n_batch       = 2048
0.00.336.243 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.243 I llama_new_context_with_model: flash_attn    = 0
0.00.336.246 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.247 I llama_new_context_with_model: freq_scale    = 1
0.00.336.248 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.336.269 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.351.297 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.312 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.407 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.672 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.679 I llama_new_context_with_model: graph nodes  = 601
0.00.352.679 I llama_new_context_with_model: graph splits = 1
0.00.352.682 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.682 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.380 I main: llama threadpool init, n_threads = 4
0.00.427.396 I 
0.00.427.468 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.471 I 
0.00.427.503 I sampler seed: 3189309109
0.00.427.515 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.528 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.531 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.532 I 
 squaRED, the world's largest open-source blockchain network, is poised to revolutionize the way businesses and governments interact.

**Here are some potential

0.01.998.032 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6473.13 tokens per second)
0.01.998.035 I llama_perf_context_print:        load time =     426.99 ms
0.01.998.036 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.998.037 I llama_perf_context_print:        eval time =    1551.95 ms /    32 runs   (   48.50 ms per token,    20.62 tokens per second)
0.01.998.038 I llama_perf_context_print:       total time =    1570.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.315s
user	10m24.201s
sys	0m6.902s
