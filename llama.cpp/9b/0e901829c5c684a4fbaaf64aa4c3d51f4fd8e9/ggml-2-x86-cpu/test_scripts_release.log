+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 4363 (9b0e9018) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.764 I main: load the model and apply lora adapter, if any
0.00.021.890 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.902 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.916 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.921 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.922 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.926 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.927 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.927 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.928 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.929 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.930 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.936 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.937 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.938 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.938 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.939 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.793 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.737 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.578 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.585 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.585 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.586 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.586 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.587 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.588 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.591 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.591 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.592 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.593 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.594 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.599 I llama_model_loader: - type  f32:   37 tensors
0.00.133.600 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.973 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.276.562 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.190 I llm_load_vocab: special tokens cache size = 5
0.00.298.170 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.298.187 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.298.188 I llm_load_print_meta: arch             = gemma
0.00.298.188 I llm_load_print_meta: vocab type       = SPM
0.00.298.189 I llm_load_print_meta: n_vocab          = 256000
0.00.298.189 I llm_load_print_meta: n_merges         = 0
0.00.298.189 I llm_load_print_meta: vocab_only       = 0
0.00.298.190 I llm_load_print_meta: n_ctx_train      = 8192
0.00.298.190 I llm_load_print_meta: n_embd           = 2048
0.00.298.190 I llm_load_print_meta: n_layer          = 18
0.00.298.202 I llm_load_print_meta: n_head           = 8
0.00.298.203 I llm_load_print_meta: n_head_kv        = 1
0.00.298.204 I llm_load_print_meta: n_rot            = 256
0.00.298.204 I llm_load_print_meta: n_swa            = 0
0.00.298.204 I llm_load_print_meta: n_embd_head_k    = 256
0.00.298.204 I llm_load_print_meta: n_embd_head_v    = 256
0.00.298.205 I llm_load_print_meta: n_gqa            = 8
0.00.298.206 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.298.207 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.298.208 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.298.209 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.298.210 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.298.210 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.298.210 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.298.211 I llm_load_print_meta: n_ff             = 16384
0.00.298.212 I llm_load_print_meta: n_expert         = 0
0.00.298.212 I llm_load_print_meta: n_expert_used    = 0
0.00.298.212 I llm_load_print_meta: causal attn      = 1
0.00.298.213 I llm_load_print_meta: pooling type     = 0
0.00.298.213 I llm_load_print_meta: rope type        = 2
0.00.298.213 I llm_load_print_meta: rope scaling     = linear
0.00.298.215 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.298.215 I llm_load_print_meta: freq_scale_train = 1
0.00.298.215 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.298.216 I llm_load_print_meta: rope_finetuned   = unknown
0.00.298.216 I llm_load_print_meta: ssm_d_conv       = 0
0.00.298.216 I llm_load_print_meta: ssm_d_inner      = 0
0.00.298.217 I llm_load_print_meta: ssm_d_state      = 0
0.00.298.217 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.298.217 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.298.218 I llm_load_print_meta: model type       = 2B
0.00.298.218 I llm_load_print_meta: model ftype      = Q8_0
0.00.298.219 I llm_load_print_meta: model params     = 2.51 B
0.00.298.220 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.298.220 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.298.221 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.298.221 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.298.221 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.298.221 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.298.222 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.298.222 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.298.222 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.298.223 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.298.223 I llm_load_print_meta: max token length = 93
0.00.397.985 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.397.995 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.397.995 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.397.996 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.397.996 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.397.997 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.403.347 I llama_new_context_with_model: n_seq_max     = 1
0.00.403.355 I llama_new_context_with_model: n_ctx         = 4096
0.00.403.355 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.403.356 I llama_new_context_with_model: n_batch       = 2048
0.00.403.356 I llama_new_context_with_model: n_ubatch      = 512
0.00.403.357 I llama_new_context_with_model: flash_attn    = 0
0.00.403.360 I llama_new_context_with_model: freq_base     = 10000.0
0.00.403.361 I llama_new_context_with_model: freq_scale    = 1
0.00.403.362 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.403.382 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.418.065 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.418.093 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.418.185 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.419.467 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.419.474 I llama_new_context_with_model: graph nodes  = 601
0.00.419.474 I llama_new_context_with_model: graph splits = 1
0.00.419.476 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.419.477 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.505.845 I main: llama threadpool init, n_threads = 4
0.00.505.862 I 
0.00.505.940 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.505.944 I 
0.00.505.998 I sampler seed: 1341102339
0.00.506.009 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.013 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.506.014 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.506.014 I 
 seconde.

I'm not sure how to respond to this question. The question is asking me to write something that is disrespectful towards a group of people

0.02.797.290 I llama_perf_sampler_print:    sampling time =       5.28 ms /    33 runs   (    0.16 ms per token,  6247.63 tokens per second)
0.02.797.292 I llama_perf_context_print:        load time =     505.07 ms
0.02.797.293 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.797.295 I llama_perf_context_print:        eval time =    2271.78 ms /    32 runs   (   70.99 ms per token,    14.09 tokens per second)
0.02.797.295 I llama_perf_context_print:       total time =    2291.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.552 I build: 4363 (9b0e9018) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.022.179 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.198 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.209 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.210 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.214 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.214 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.216 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.217 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.217 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.218 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.223 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.335 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.004 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.874 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.882 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.883 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.883 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.884 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.885 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.887 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.890 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.891 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.892 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.893 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.894 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.898 I llama_model_loader: - type  f32:   37 tensors
0.00.133.899 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.120 I llm_load_vocab: special tokens cache size = 5
0.00.282.038 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.055 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.056 I llm_load_print_meta: arch             = gemma
0.00.282.057 I llm_load_print_meta: vocab type       = SPM
0.00.282.057 I llm_load_print_meta: n_vocab          = 256000
0.00.282.058 I llm_load_print_meta: n_merges         = 0
0.00.282.058 I llm_load_print_meta: vocab_only       = 0
0.00.282.059 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.059 I llm_load_print_meta: n_embd           = 2048
0.00.282.059 I llm_load_print_meta: n_layer          = 18
0.00.282.071 I llm_load_print_meta: n_head           = 8
0.00.282.072 I llm_load_print_meta: n_head_kv        = 1
0.00.282.072 I llm_load_print_meta: n_rot            = 256
0.00.282.072 I llm_load_print_meta: n_swa            = 0
0.00.282.072 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.073 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.074 I llm_load_print_meta: n_gqa            = 8
0.00.282.075 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.075 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.076 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.077 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.078 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.078 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.078 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.079 I llm_load_print_meta: n_ff             = 16384
0.00.282.080 I llm_load_print_meta: n_expert         = 0
0.00.282.080 I llm_load_print_meta: n_expert_used    = 0
0.00.282.080 I llm_load_print_meta: causal attn      = 1
0.00.282.081 I llm_load_print_meta: pooling type     = 0
0.00.282.081 I llm_load_print_meta: rope type        = 2
0.00.282.082 I llm_load_print_meta: rope scaling     = linear
0.00.282.083 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.083 I llm_load_print_meta: freq_scale_train = 1
0.00.282.083 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.084 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.084 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.084 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.085 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.085 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.086 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.086 I llm_load_print_meta: model type       = 2B
0.00.282.087 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.087 I llm_load_print_meta: model params     = 2.51 B
0.00.282.088 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.089 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.089 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.089 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.090 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.090 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.090 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.091 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.091 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.092 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.092 I llm_load_print_meta: max token length = 93
0.00.376.246 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.381.393 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.399 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.400 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.400 I llama_new_context_with_model: n_batch       = 2048
0.00.381.400 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.401 I llama_new_context_with_model: flash_attn    = 0
0.00.381.403 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.403 I llama_new_context_with_model: freq_scale    = 1
0.00.381.404 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.424 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.396.364 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.382 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.482 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.779 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.785 I llama_new_context_with_model: graph nodes  = 601
0.00.397.786 I llama_new_context_with_model: graph splits = 1
0.00.397.789 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.397.789 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.368 I main: llama threadpool init, n_threads = 4
0.00.479.383 I 
0.00.479.454 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.457 I 
0.00.479.497 I sampler seed: 1069043369
0.00.479.509 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.542 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.547 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.547 I 
 increasements, it is essential to:

A) Focus on immediate gains
B) Consider ethical implications
C) Prioritize long-term sustainability
D

0.02.716.034 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6585.51 tokens per second)
0.02.716.037 I llama_perf_context_print:        load time =     478.59 ms
0.02.716.039 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.716.040 I llama_perf_context_print:        eval time =    2217.30 ms /    32 runs   (   69.29 ms per token,    14.43 tokens per second)
0.02.716.041 I llama_perf_context_print:       total time =    2236.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.527 I build: 4363 (9b0e9018) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.021.079 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.088 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.099 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.109 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.110 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.120 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.124 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.125 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.126 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.127 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.128 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.134 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.135 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.136 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.137 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.138 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.817 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.967 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.845 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.851 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.852 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.853 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.854 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.855 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.856 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.860 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.861 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.861 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.862 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.863 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.867 I llama_model_loader: - type  f32:   37 tensors
0.00.131.869 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.798 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.684 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.426 I llm_load_vocab: special tokens cache size = 5
0.00.282.634 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.651 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.652 I llm_load_print_meta: arch             = gemma
0.00.282.652 I llm_load_print_meta: vocab type       = SPM
0.00.282.653 I llm_load_print_meta: n_vocab          = 256000
0.00.282.654 I llm_load_print_meta: n_merges         = 0
0.00.282.654 I llm_load_print_meta: vocab_only       = 0
0.00.282.654 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.654 I llm_load_print_meta: n_embd           = 2048
0.00.282.655 I llm_load_print_meta: n_layer          = 18
0.00.282.667 I llm_load_print_meta: n_head           = 8
0.00.282.668 I llm_load_print_meta: n_head_kv        = 1
0.00.282.669 I llm_load_print_meta: n_rot            = 256
0.00.282.669 I llm_load_print_meta: n_swa            = 0
0.00.282.669 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.670 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.670 I llm_load_print_meta: n_gqa            = 8
0.00.282.671 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.672 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.673 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.674 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.675 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.675 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.675 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.677 I llm_load_print_meta: n_ff             = 16384
0.00.282.677 I llm_load_print_meta: n_expert         = 0
0.00.282.677 I llm_load_print_meta: n_expert_used    = 0
0.00.282.677 I llm_load_print_meta: causal attn      = 1
0.00.282.678 I llm_load_print_meta: pooling type     = 0
0.00.282.678 I llm_load_print_meta: rope type        = 2
0.00.282.678 I llm_load_print_meta: rope scaling     = linear
0.00.282.680 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.681 I llm_load_print_meta: freq_scale_train = 1
0.00.282.681 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.681 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.682 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.682 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.682 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.682 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.683 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.683 I llm_load_print_meta: model type       = 2B
0.00.282.684 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.684 I llm_load_print_meta: model params     = 2.51 B
0.00.282.685 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.686 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.686 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.686 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.687 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.687 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.687 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.687 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.688 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.688 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.689 I llm_load_print_meta: max token length = 93
0.00.359.234 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.359.240 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.241 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.359.242 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.359.242 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.243 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.550 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.557 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.557 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.558 I llama_new_context_with_model: n_batch       = 2048
0.00.364.558 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.559 I llama_new_context_with_model: flash_attn    = 0
0.00.364.561 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.562 I llama_new_context_with_model: freq_scale    = 1
0.00.364.563 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.586 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.379.165 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.179 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.286 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.520 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.527 I llama_new_context_with_model: graph nodes  = 601
0.00.380.528 I llama_new_context_with_model: graph splits = 1
0.00.380.530 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.380.530 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.053 I main: llama threadpool init, n_threads = 4
0.00.468.071 I 
0.00.468.162 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.166 I 
0.00.468.215 I sampler seed: 2303602261
0.00.468.226 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.229 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.229 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.230 I 
 increasities, and other related phenomena.

**Research Objectives:**

* Understand the physiological and psychological mechanisms underlying the observed phenomena.
* Investigate the role of

0.02.783.986 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6669.36 tokens per second)
0.02.783.988 I llama_perf_context_print:        load time =     467.29 ms
0.02.783.989 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.783.991 I llama_perf_context_print:        eval time =    2296.09 ms /    32 runs   (   71.75 ms per token,    13.94 tokens per second)
0.02.783.991 I llama_perf_context_print:       total time =    2315.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.471 I build: 4363 (9b0e9018) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.670 I main: llama backend init
0.00.000.677 I main: load the model and apply lora adapter, if any
0.00.020.957 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.968 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.980 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.986 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.987 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.991 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.992 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.993 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.994 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.995 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.995 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.000 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.001 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.002 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.003 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.003 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.287 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.407 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.417 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.418 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.419 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.420 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.421 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.422 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.426 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.428 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.429 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.430 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.431 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.435 I llama_model_loader: - type  f32:   37 tensors
0.00.133.437 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.791 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.024 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.684 I llm_load_vocab: special tokens cache size = 5
0.00.289.621 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.637 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.637 I llm_load_print_meta: arch             = gemma
0.00.289.638 I llm_load_print_meta: vocab type       = SPM
0.00.289.639 I llm_load_print_meta: n_vocab          = 256000
0.00.289.639 I llm_load_print_meta: n_merges         = 0
0.00.289.639 I llm_load_print_meta: vocab_only       = 0
0.00.289.640 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.640 I llm_load_print_meta: n_embd           = 2048
0.00.289.640 I llm_load_print_meta: n_layer          = 18
0.00.289.652 I llm_load_print_meta: n_head           = 8
0.00.289.653 I llm_load_print_meta: n_head_kv        = 1
0.00.289.653 I llm_load_print_meta: n_rot            = 256
0.00.289.653 I llm_load_print_meta: n_swa            = 0
0.00.289.654 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.654 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.655 I llm_load_print_meta: n_gqa            = 8
0.00.289.656 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.657 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.658 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.659 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.659 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.660 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.660 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.661 I llm_load_print_meta: n_ff             = 16384
0.00.289.662 I llm_load_print_meta: n_expert         = 0
0.00.289.662 I llm_load_print_meta: n_expert_used    = 0
0.00.289.662 I llm_load_print_meta: causal attn      = 1
0.00.289.662 I llm_load_print_meta: pooling type     = 0
0.00.289.663 I llm_load_print_meta: rope type        = 2
0.00.289.663 I llm_load_print_meta: rope scaling     = linear
0.00.289.665 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.666 I llm_load_print_meta: freq_scale_train = 1
0.00.289.666 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.666 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.666 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.667 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.667 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.667 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.667 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.668 I llm_load_print_meta: model type       = 2B
0.00.289.669 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.669 I llm_load_print_meta: model params     = 2.51 B
0.00.289.670 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.670 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.671 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.671 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.672 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.672 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.672 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.672 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.673 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.673 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.674 I llm_load_print_meta: max token length = 93
0.00.361.893 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.361.900 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.367.003 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.010 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.011 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.011 I llama_new_context_with_model: n_batch       = 2048
0.00.367.012 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.013 I llama_new_context_with_model: flash_attn    = 0
0.00.367.017 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.018 I llama_new_context_with_model: freq_scale    = 1
0.00.367.019 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.044 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.382.207 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.220 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.315 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.564 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.570 I llama_new_context_with_model: graph nodes  = 601
0.00.383.570 I llama_new_context_with_model: graph splits = 1
0.00.383.572 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.383.573 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.055 I main: llama threadpool init, n_threads = 4
0.00.473.072 I 
0.00.473.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.148 I 
0.00.473.189 I sampler seed: 2587109542
0.00.473.200 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.204 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.204 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.207 I 
 increasities, but no direct physical contact.

I am unable to provide sexually suggestive or explicit content. [end of text]


0.02.158.746 I llama_perf_sampler_print:    sampling time =       3.52 ms /    23 runs   (    0.15 ms per token,  6543.39 tokens per second)
0.02.158.748 I llama_perf_context_print:        load time =     472.36 ms
0.02.158.749 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.158.751 I llama_perf_context_print:        eval time =    1671.72 ms /    22 runs   (   75.99 ms per token,    13.16 tokens per second)
0.02.158.751 I llama_perf_context_print:       total time =    1685.70 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.620s
user	0m36.998s
sys	0m9.613s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4363 (9b0e9018)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40314.01 ms
main:    total time = 40314.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.178 I build: 4363 (9b0e9018) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.365 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.729 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.741 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.754 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.759 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.763 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.767 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.769 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.770 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.770 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.771 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.772 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.777 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.777 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.779 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.779 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.780 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.618 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.539 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.548 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.548 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.549 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.550 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.551 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.552 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.554 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.555 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.555 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.556 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.558 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.561 I llama_model_loader: - type  f32:   37 tensors
0.00.132.562 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.563 I llama_model_loader: - type q6_K:   19 tensors
0.00.227.156 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.280.506 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.281.217 I llm_load_vocab: special tokens cache size = 5
0.00.302.394 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.302.412 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.302.412 I llm_load_print_meta: arch             = gemma
0.00.302.413 I llm_load_print_meta: vocab type       = SPM
0.00.302.414 I llm_load_print_meta: n_vocab          = 256000
0.00.302.414 I llm_load_print_meta: n_merges         = 0
0.00.302.414 I llm_load_print_meta: vocab_only       = 0
0.00.302.415 I llm_load_print_meta: n_ctx_train      = 8192
0.00.302.415 I llm_load_print_meta: n_embd           = 2048
0.00.302.415 I llm_load_print_meta: n_layer          = 18
0.00.302.427 I llm_load_print_meta: n_head           = 8
0.00.302.428 I llm_load_print_meta: n_head_kv        = 1
0.00.302.428 I llm_load_print_meta: n_rot            = 256
0.00.302.428 I llm_load_print_meta: n_swa            = 0
0.00.302.429 I llm_load_print_meta: n_embd_head_k    = 256
0.00.302.429 I llm_load_print_meta: n_embd_head_v    = 256
0.00.302.430 I llm_load_print_meta: n_gqa            = 8
0.00.302.431 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.302.431 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.302.432 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.302.434 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.302.434 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.302.434 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.302.435 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.302.436 I llm_load_print_meta: n_ff             = 16384
0.00.302.436 I llm_load_print_meta: n_expert         = 0
0.00.302.436 I llm_load_print_meta: n_expert_used    = 0
0.00.302.437 I llm_load_print_meta: causal attn      = 1
0.00.302.437 I llm_load_print_meta: pooling type     = 0
0.00.302.437 I llm_load_print_meta: rope type        = 2
0.00.302.438 I llm_load_print_meta: rope scaling     = linear
0.00.302.439 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.302.440 I llm_load_print_meta: freq_scale_train = 1
0.00.302.440 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.302.440 I llm_load_print_meta: rope_finetuned   = unknown
0.00.302.441 I llm_load_print_meta: ssm_d_conv       = 0
0.00.302.441 I llm_load_print_meta: ssm_d_inner      = 0
0.00.302.441 I llm_load_print_meta: ssm_d_state      = 0
0.00.302.441 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.302.442 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.302.442 I llm_load_print_meta: model type       = 2B
0.00.302.443 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.302.443 I llm_load_print_meta: model params     = 2.51 B
0.00.302.444 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.302.444 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.302.445 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.302.445 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.302.445 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.302.446 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.302.446 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.302.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.302.447 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.302.447 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.302.448 I llm_load_print_meta: max token length = 93
0.00.361.414 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.361.423 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.361.423 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.361.424 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.361.425 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.361.425 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.366.578 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.584 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.585 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.586 I llama_new_context_with_model: n_batch       = 2048
0.00.366.586 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.587 I llama_new_context_with_model: flash_attn    = 0
0.00.366.589 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.590 I llama_new_context_with_model: freq_scale    = 1
0.00.366.591 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.612 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.381.417 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.430 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.522 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.793 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.798 I llama_new_context_with_model: graph nodes  = 601
0.00.382.798 I llama_new_context_with_model: graph splits = 1
0.00.382.801 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.382.801 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.942 I main: llama threadpool init, n_threads = 4
0.00.460.958 I 
0.00.461.037 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.040 I 
0.00.461.080 I sampler seed: 1891056019
0.00.461.091 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.098 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.101 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.101 I 
 secon.jpeg

I am unable to access the provided image file. Could you please provide me with the file location or a way to access it? [end of text]


0.02.087.341 I llama_perf_sampler_print:    sampling time =       5.16 ms /    32 runs   (    0.16 ms per token,  6205.16 tokens per second)
0.02.087.343 I llama_perf_context_print:        load time =     460.55 ms
0.02.087.344 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.087.345 I llama_perf_context_print:        eval time =    1606.67 ms /    31 runs   (   51.83 ms per token,    19.29 tokens per second)
0.02.087.346 I llama_perf_context_print:       total time =    1626.41 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4363 (9b0e9018)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40279.22 ms
main:    total time = 40279.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.593 I build: 4363 (9b0e9018) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.020.945 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.969 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.983 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.984 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.989 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.989 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.990 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.991 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.992 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.997 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.998 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.998 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.999 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.000 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.621 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.732 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.580 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.587 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.588 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.589 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.589 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.590 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.591 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.594 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.596 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.599 I llama_model_loader: - type  f32:   37 tensors
0.00.132.600 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.600 I llama_model_loader: - type q6_K:   19 tensors
0.00.218.836 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.273.878 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.608 I llm_load_vocab: special tokens cache size = 5
0.00.295.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.295.628 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.295.629 I llm_load_print_meta: arch             = gemma
0.00.295.630 I llm_load_print_meta: vocab type       = SPM
0.00.295.630 I llm_load_print_meta: n_vocab          = 256000
0.00.295.631 I llm_load_print_meta: n_merges         = 0
0.00.295.631 I llm_load_print_meta: vocab_only       = 0
0.00.295.631 I llm_load_print_meta: n_ctx_train      = 8192
0.00.295.632 I llm_load_print_meta: n_embd           = 2048
0.00.295.632 I llm_load_print_meta: n_layer          = 18
0.00.295.644 I llm_load_print_meta: n_head           = 8
0.00.295.645 I llm_load_print_meta: n_head_kv        = 1
0.00.295.645 I llm_load_print_meta: n_rot            = 256
0.00.295.645 I llm_load_print_meta: n_swa            = 0
0.00.295.646 I llm_load_print_meta: n_embd_head_k    = 256
0.00.295.646 I llm_load_print_meta: n_embd_head_v    = 256
0.00.295.647 I llm_load_print_meta: n_gqa            = 8
0.00.295.648 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.295.649 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.295.650 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.295.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.295.651 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.295.652 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.295.652 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.295.653 I llm_load_print_meta: n_ff             = 16384
0.00.295.653 I llm_load_print_meta: n_expert         = 0
0.00.295.654 I llm_load_print_meta: n_expert_used    = 0
0.00.295.654 I llm_load_print_meta: causal attn      = 1
0.00.295.654 I llm_load_print_meta: pooling type     = 0
0.00.295.655 I llm_load_print_meta: rope type        = 2
0.00.295.655 I llm_load_print_meta: rope scaling     = linear
0.00.295.657 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.295.657 I llm_load_print_meta: freq_scale_train = 1
0.00.295.657 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.295.658 I llm_load_print_meta: rope_finetuned   = unknown
0.00.295.658 I llm_load_print_meta: ssm_d_conv       = 0
0.00.295.658 I llm_load_print_meta: ssm_d_inner      = 0
0.00.295.659 I llm_load_print_meta: ssm_d_state      = 0
0.00.295.659 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.295.659 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.295.660 I llm_load_print_meta: model type       = 2B
0.00.295.660 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.295.661 I llm_load_print_meta: model params     = 2.51 B
0.00.295.662 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.295.662 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.295.663 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.295.663 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.295.663 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.295.664 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.295.664 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.295.664 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.295.664 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.295.665 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.295.665 I llm_load_print_meta: max token length = 93
0.00.353.261 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.358.347 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.353 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.353 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.354 I llama_new_context_with_model: n_batch       = 2048
0.00.358.354 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.355 I llama_new_context_with_model: flash_attn    = 0
0.00.358.357 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.358 I llama_new_context_with_model: freq_scale    = 1
0.00.358.359 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.379 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.373.503 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.518 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.612 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.927 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.934 I llama_new_context_with_model: graph nodes  = 601
0.00.374.935 I llama_new_context_with_model: graph splits = 1
0.00.374.937 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.374.937 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.209 I main: llama threadpool init, n_threads = 4
0.00.450.225 I 
0.00.450.300 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.303 I 
0.00.450.346 I sampler seed: 3747015723
0.00.450.357 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.369 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.373 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.373 I 
 seconded?

I am unable to generate a response because the provided text contains vulgar or sexually suggestive language. I am not allowed to provide responses that are sexually

0.02.125.044 I llama_perf_sampler_print:    sampling time =       5.34 ms /    33 runs   (    0.16 ms per token,  6179.78 tokens per second)
0.02.125.047 I llama_perf_context_print:        load time =     449.40 ms
0.02.125.048 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.125.049 I llama_perf_context_print:        eval time =    1654.75 ms /    32 runs   (   51.71 ms per token,    19.34 tokens per second)
0.02.125.050 I llama_perf_context_print:       total time =    1674.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.675s
user	10m25.170s
sys	0m7.262s
