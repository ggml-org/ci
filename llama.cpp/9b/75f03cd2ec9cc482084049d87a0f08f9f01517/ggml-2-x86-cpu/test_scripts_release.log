+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4122 (9b75f03c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.731 I main: load the model and apply lora adapter, if any
0.00.021.376 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.387 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.395 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.403 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.407 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.412 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.413 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.413 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.414 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.414 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.415 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.418 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.419 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.419 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.420 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.420 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.966 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.636 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.463 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.469 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.470 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.470 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.471 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.472 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.472 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.475 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.475 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.476 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.477 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.478 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.480 I llama_model_loader: - type  f32:   37 tensors
0.00.131.481 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.077 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.172 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.657 I llm_load_vocab: special tokens cache size = 5
0.00.280.250 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.266 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.266 I llm_load_print_meta: arch             = gemma
0.00.280.267 I llm_load_print_meta: vocab type       = SPM
0.00.280.267 I llm_load_print_meta: n_vocab          = 256000
0.00.280.268 I llm_load_print_meta: n_merges         = 0
0.00.280.268 I llm_load_print_meta: vocab_only       = 0
0.00.280.268 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.269 I llm_load_print_meta: n_embd           = 2048
0.00.280.269 I llm_load_print_meta: n_layer          = 18
0.00.280.280 I llm_load_print_meta: n_head           = 8
0.00.280.281 I llm_load_print_meta: n_head_kv        = 1
0.00.280.281 I llm_load_print_meta: n_rot            = 256
0.00.280.281 I llm_load_print_meta: n_swa            = 0
0.00.280.282 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.282 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.283 I llm_load_print_meta: n_gqa            = 8
0.00.280.284 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.285 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.285 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.286 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.287 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.288 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.288 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.289 I llm_load_print_meta: n_ff             = 16384
0.00.280.289 I llm_load_print_meta: n_expert         = 0
0.00.280.289 I llm_load_print_meta: n_expert_used    = 0
0.00.280.290 I llm_load_print_meta: causal attn      = 1
0.00.280.290 I llm_load_print_meta: pooling type     = 0
0.00.280.290 I llm_load_print_meta: rope type        = 2
0.00.280.291 I llm_load_print_meta: rope scaling     = linear
0.00.280.292 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.292 I llm_load_print_meta: freq_scale_train = 1
0.00.280.293 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.293 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.293 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.293 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.294 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.294 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.294 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.295 I llm_load_print_meta: model type       = 2B
0.00.280.295 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.296 I llm_load_print_meta: model params     = 2.51 B
0.00.280.297 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.297 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.298 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.298 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.298 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.299 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.299 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.299 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.299 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.300 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.300 I llm_load_print_meta: max token length = 93
0.00.379.655 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.379.662 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.379.663 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.379.663 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.379.664 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.379.664 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.384.880 I llama_new_context_with_model: n_seq_max     = 1
0.00.384.886 I llama_new_context_with_model: n_ctx         = 4096
0.00.384.887 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.384.887 I llama_new_context_with_model: n_batch       = 2048
0.00.384.887 I llama_new_context_with_model: n_ubatch      = 512
0.00.384.888 I llama_new_context_with_model: flash_attn    = 0
0.00.384.889 I llama_new_context_with_model: freq_base     = 10000.0
0.00.384.890 I llama_new_context_with_model: freq_scale    = 1
0.00.384.891 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.166 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.180 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.281 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.543 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.551 I llama_new_context_with_model: graph nodes  = 601
0.00.400.551 I llama_new_context_with_model: graph splits = 1
0.00.400.552 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.871 I main: llama threadpool init, n_threads = 4
0.00.484.883 I 
0.00.484.959 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.484.962 I 
0.00.485.004 I sampler seed: 1972347506
0.00.485.014 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.021 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.485.025 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.025 I 
 maneuvously,
To find the one who walks a lonely path.

**Who is the speaker?**

The given poem suggests that the speaker is

0.02.716.975 I llama_perf_sampler_print:    sampling time =       4.68 ms /    33 runs   (    0.14 ms per token,  7049.78 tokens per second)
0.02.716.977 I llama_perf_context_print:        load time =     484.12 ms
0.02.716.978 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.716.980 I llama_perf_context_print:        eval time =    2213.99 ms /    32 runs   (   69.19 ms per token,    14.45 tokens per second)
0.02.716.980 I llama_perf_context_print:       total time =    2232.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.544 I build: 4122 (9b75f03c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.000.764 I main: load the model and apply lora adapter, if any
0.00.021.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.267 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.273 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.274 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.278 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.279 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.281 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.281 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.283 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.283 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.289 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.290 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.291 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.292 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.293 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.906 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.309 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.169 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.176 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.177 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.177 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.178 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.179 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.179 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.182 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.182 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.183 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.184 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.185 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.188 I llama_model_loader: - type  f32:   37 tensors
0.00.131.190 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.781 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.912 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.405 I llm_load_vocab: special tokens cache size = 5
0.00.258.998 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.014 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.014 I llm_load_print_meta: arch             = gemma
0.00.259.015 I llm_load_print_meta: vocab type       = SPM
0.00.259.015 I llm_load_print_meta: n_vocab          = 256000
0.00.259.016 I llm_load_print_meta: n_merges         = 0
0.00.259.016 I llm_load_print_meta: vocab_only       = 0
0.00.259.017 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.017 I llm_load_print_meta: n_embd           = 2048
0.00.259.017 I llm_load_print_meta: n_layer          = 18
0.00.259.029 I llm_load_print_meta: n_head           = 8
0.00.259.030 I llm_load_print_meta: n_head_kv        = 1
0.00.259.030 I llm_load_print_meta: n_rot            = 256
0.00.259.031 I llm_load_print_meta: n_swa            = 0
0.00.259.031 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.031 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.032 I llm_load_print_meta: n_gqa            = 8
0.00.259.033 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.034 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.035 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.036 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.037 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.037 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.037 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.038 I llm_load_print_meta: n_ff             = 16384
0.00.259.038 I llm_load_print_meta: n_expert         = 0
0.00.259.039 I llm_load_print_meta: n_expert_used    = 0
0.00.259.039 I llm_load_print_meta: causal attn      = 1
0.00.259.039 I llm_load_print_meta: pooling type     = 0
0.00.259.040 I llm_load_print_meta: rope type        = 2
0.00.259.040 I llm_load_print_meta: rope scaling     = linear
0.00.259.042 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.042 I llm_load_print_meta: freq_scale_train = 1
0.00.259.043 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.043 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.043 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.044 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.044 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.044 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.044 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.045 I llm_load_print_meta: model type       = 2B
0.00.259.045 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.046 I llm_load_print_meta: model params     = 2.51 B
0.00.259.047 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.048 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.048 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.049 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.049 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.049 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.049 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.050 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.050 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.051 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.051 I llm_load_print_meta: max token length = 93
0.00.354.436 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.359.666 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.672 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.672 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.672 I llama_new_context_with_model: n_batch       = 2048
0.00.359.673 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.673 I llama_new_context_with_model: flash_attn    = 0
0.00.359.676 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.677 I llama_new_context_with_model: freq_scale    = 1
0.00.359.678 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.137 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.153 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.248 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.526 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.532 I llama_new_context_with_model: graph nodes  = 601
0.00.376.533 I llama_new_context_with_model: graph splits = 1
0.00.376.535 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.466 I main: llama threadpool init, n_threads = 4
0.00.460.481 I 
0.00.460.562 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.566 I 
0.00.460.616 I sampler seed: 576252422
0.00.460.628 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.632 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.632 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.632 I 
 increadibly and can be used for a variety of applications, including:

a) Food preparation
b) Cleaning
c) Medical treatment
d) Sports

0.02.623.433 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6853.58 tokens per second)
0.02.623.435 I llama_perf_context_print:        load time =     459.68 ms
0.02.623.437 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.623.438 I llama_perf_context_print:        eval time =    2144.27 ms /    32 runs   (   67.01 ms per token,    14.92 tokens per second)
0.02.623.439 I llama_perf_context_print:       total time =    2162.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.570 I build: 4122 (9b75f03c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.000.795 I main: load the model and apply lora adapter, if any
0.00.023.078 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.090 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.102 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.113 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.118 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.123 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.124 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.125 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.127 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.128 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.129 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.134 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.135 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.136 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.136 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.138 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.640 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.136.915 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.143.759 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.143.765 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.143.766 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.143.767 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.143.768 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.143.768 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.143.769 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.143.772 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.143.773 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.143.774 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.143.774 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.143.775 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.143.779 I llama_model_loader: - type  f32:   37 tensors
0.00.143.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.360 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.198 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.724 I llm_load_vocab: special tokens cache size = 5
0.00.278.223 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.238 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.238 I llm_load_print_meta: arch             = gemma
0.00.278.239 I llm_load_print_meta: vocab type       = SPM
0.00.278.240 I llm_load_print_meta: n_vocab          = 256000
0.00.278.240 I llm_load_print_meta: n_merges         = 0
0.00.278.240 I llm_load_print_meta: vocab_only       = 0
0.00.278.241 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.241 I llm_load_print_meta: n_embd           = 2048
0.00.278.241 I llm_load_print_meta: n_layer          = 18
0.00.278.252 I llm_load_print_meta: n_head           = 8
0.00.278.253 I llm_load_print_meta: n_head_kv        = 1
0.00.278.253 I llm_load_print_meta: n_rot            = 256
0.00.278.253 I llm_load_print_meta: n_swa            = 0
0.00.278.254 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.254 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.255 I llm_load_print_meta: n_gqa            = 8
0.00.278.256 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.257 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.258 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.259 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.259 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.260 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.260 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.261 I llm_load_print_meta: n_ff             = 16384
0.00.278.261 I llm_load_print_meta: n_expert         = 0
0.00.278.261 I llm_load_print_meta: n_expert_used    = 0
0.00.278.262 I llm_load_print_meta: causal attn      = 1
0.00.278.262 I llm_load_print_meta: pooling type     = 0
0.00.278.262 I llm_load_print_meta: rope type        = 2
0.00.278.263 I llm_load_print_meta: rope scaling     = linear
0.00.278.264 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.265 I llm_load_print_meta: freq_scale_train = 1
0.00.278.265 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.265 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.266 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.266 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.266 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.266 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.267 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.267 I llm_load_print_meta: model type       = 2B
0.00.278.268 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.268 I llm_load_print_meta: model params     = 2.51 B
0.00.278.269 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.270 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.270 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.270 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.271 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.271 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.271 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.272 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.272 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.273 I llm_load_print_meta: max token length = 93
0.00.359.556 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.359.564 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.565 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.359.565 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.359.566 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.566 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.757 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.763 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.764 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.764 I llama_new_context_with_model: n_batch       = 2048
0.00.364.765 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.765 I llama_new_context_with_model: flash_attn    = 0
0.00.364.767 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.768 I llama_new_context_with_model: freq_scale    = 1
0.00.364.770 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.453 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.468 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.565 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.828 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.834 I llama_new_context_with_model: graph nodes  = 601
0.00.380.834 I llama_new_context_with_model: graph splits = 1
0.00.380.836 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.190 I main: llama threadpool init, n_threads = 4
0.00.467.204 I 
0.00.467.279 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.467.282 I 
0.00.467.324 I sampler seed: 3685865011
0.00.467.334 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.336 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.337 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.337 I 
 seconally.

I am so confused and overwhelmed with the amount of information I am receiving. It is difficult to process and retain all the knowledge I am acquiring

0.02.711.709 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6926.95 tokens per second)
0.02.711.711 I llama_perf_context_print:        load time =     466.37 ms
0.02.711.712 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.711.714 I llama_perf_context_print:        eval time =    2225.43 ms /    32 runs   (   69.54 ms per token,    14.38 tokens per second)
0.02.711.715 I llama_perf_context_print:       total time =    2244.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.555 I build: 4122 (9b75f03c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.000.753 I main: load the model and apply lora adapter, if any
0.00.021.091 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.100 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.108 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.113 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.114 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.118 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.119 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.119 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.120 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.120 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.121 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.127 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.128 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.128 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.129 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.734 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.131 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.014 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.020 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.021 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.022 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.022 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.023 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.024 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.026 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.027 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.027 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.028 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.029 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.032 I llama_model_loader: - type  f32:   37 tensors
0.00.132.033 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.038 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.372 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.940 I llm_load_vocab: special tokens cache size = 5
0.00.269.373 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.389 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.389 I llm_load_print_meta: arch             = gemma
0.00.269.390 I llm_load_print_meta: vocab type       = SPM
0.00.269.390 I llm_load_print_meta: n_vocab          = 256000
0.00.269.391 I llm_load_print_meta: n_merges         = 0
0.00.269.391 I llm_load_print_meta: vocab_only       = 0
0.00.269.391 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.391 I llm_load_print_meta: n_embd           = 2048
0.00.269.392 I llm_load_print_meta: n_layer          = 18
0.00.269.403 I llm_load_print_meta: n_head           = 8
0.00.269.405 I llm_load_print_meta: n_head_kv        = 1
0.00.269.405 I llm_load_print_meta: n_rot            = 256
0.00.269.406 I llm_load_print_meta: n_swa            = 0
0.00.269.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.407 I llm_load_print_meta: n_gqa            = 8
0.00.269.408 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.409 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.409 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.411 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.411 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.411 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.412 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.413 I llm_load_print_meta: n_ff             = 16384
0.00.269.413 I llm_load_print_meta: n_expert         = 0
0.00.269.413 I llm_load_print_meta: n_expert_used    = 0
0.00.269.414 I llm_load_print_meta: causal attn      = 1
0.00.269.414 I llm_load_print_meta: pooling type     = 0
0.00.269.414 I llm_load_print_meta: rope type        = 2
0.00.269.415 I llm_load_print_meta: rope scaling     = linear
0.00.269.416 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.417 I llm_load_print_meta: freq_scale_train = 1
0.00.269.417 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.417 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.418 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.418 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.418 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.418 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.419 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.419 I llm_load_print_meta: model type       = 2B
0.00.269.420 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.420 I llm_load_print_meta: model params     = 2.51 B
0.00.269.421 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.422 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.422 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.422 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.423 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.423 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.423 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.424 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.424 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.425 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.425 I llm_load_print_meta: max token length = 93
0.00.340.477 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.340.481 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.345.602 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.608 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.608 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.608 I llama_new_context_with_model: n_batch       = 2048
0.00.345.609 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.609 I llama_new_context_with_model: flash_attn    = 0
0.00.345.611 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.612 I llama_new_context_with_model: freq_scale    = 1
0.00.345.613 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.691 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.705 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.799 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.185 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.189 I llama_new_context_with_model: graph nodes  = 601
0.00.361.190 I llama_new_context_with_model: graph splits = 1
0.00.361.191 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.215 I main: llama threadpool init, n_threads = 4
0.00.449.226 I 
0.00.449.299 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.302 I 
0.00.449.348 I sampler seed: 464561702
0.00.449.359 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.363 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.363 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.366 I 
 increasels for a living. She's a skilled weaver and has a passion for creating beautiful tapestries.

What is the profession of the woman?



0.02.865.031 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6358.38 tokens per second)
0.02.865.033 I llama_perf_context_print:        load time =     448.44 ms
0.02.865.034 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.865.036 I llama_perf_context_print:        eval time =    2396.72 ms /    32 runs   (   74.90 ms per token,    13.35 tokens per second)
0.02.865.037 I llama_perf_context_print:       total time =    2415.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.281s
user	0m39.047s
sys	0m9.296s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4122 (9b75f03c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40168.26 ms
main:    total time = 40168.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4122 (9b75f03c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.021.160 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.170 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.182 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.183 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.187 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.187 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.188 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.189 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.189 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.190 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.193 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.194 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.194 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.195 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.195 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.788 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.329 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.172 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.178 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.179 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.180 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.181 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.182 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.184 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.185 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.186 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.187 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.188 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.191 I llama_model_loader: - type  f32:   37 tensors
0.00.131.192 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.192 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.736 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.722 I llm_load_vocab: special tokens cache size = 5
0.00.283.176 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.192 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.192 I llm_load_print_meta: arch             = gemma
0.00.283.193 I llm_load_print_meta: vocab type       = SPM
0.00.283.193 I llm_load_print_meta: n_vocab          = 256000
0.00.283.193 I llm_load_print_meta: n_merges         = 0
0.00.283.194 I llm_load_print_meta: vocab_only       = 0
0.00.283.194 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.194 I llm_load_print_meta: n_embd           = 2048
0.00.283.195 I llm_load_print_meta: n_layer          = 18
0.00.283.205 I llm_load_print_meta: n_head           = 8
0.00.283.206 I llm_load_print_meta: n_head_kv        = 1
0.00.283.207 I llm_load_print_meta: n_rot            = 256
0.00.283.207 I llm_load_print_meta: n_swa            = 0
0.00.283.207 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.208 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.209 I llm_load_print_meta: n_gqa            = 8
0.00.283.210 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.210 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.211 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.213 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.213 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.213 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.214 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.214 I llm_load_print_meta: n_ff             = 16384
0.00.283.215 I llm_load_print_meta: n_expert         = 0
0.00.283.215 I llm_load_print_meta: n_expert_used    = 0
0.00.283.215 I llm_load_print_meta: causal attn      = 1
0.00.283.216 I llm_load_print_meta: pooling type     = 0
0.00.283.216 I llm_load_print_meta: rope type        = 2
0.00.283.216 I llm_load_print_meta: rope scaling     = linear
0.00.283.218 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.218 I llm_load_print_meta: freq_scale_train = 1
0.00.283.219 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.219 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.219 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.219 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.220 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.220 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.220 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.221 I llm_load_print_meta: model type       = 2B
0.00.283.222 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.283.222 I llm_load_print_meta: model params     = 2.51 B
0.00.283.223 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.283.223 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.224 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.224 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.232 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.232 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.233 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.233 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.233 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.234 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.234 I llm_load_print_meta: max token length = 93
0.00.342.406 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.342.413 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.342.414 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.342.414 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.342.415 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.342.416 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.347.658 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.664 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.665 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.665 I llama_new_context_with_model: n_batch       = 2048
0.00.347.665 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.666 I llama_new_context_with_model: flash_attn    = 0
0.00.347.669 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.670 I llama_new_context_with_model: freq_scale    = 1
0.00.347.671 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.369 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.384 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.474 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.744 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.748 I llama_new_context_with_model: graph nodes  = 601
0.00.363.748 I llama_new_context_with_model: graph splits = 1
0.00.363.750 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.167 I main: llama threadpool init, n_threads = 4
0.00.438.181 I 
0.00.438.257 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.261 I 
0.00.438.304 I sampler seed: 1452603058
0.00.438.315 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.318 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.319 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.320 I 
 encompates a range of products and services, including:

**1. Payroll services:**

* Payroll processing
* Time tracking
* Reporting and analytics


0.02.005.070 I llama_perf_sampler_print:    sampling time =       5.27 ms /    33 runs   (    0.16 ms per token,  6258.30 tokens per second)
0.02.005.072 I llama_perf_context_print:        load time =     437.40 ms
0.02.005.073 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.005.075 I llama_perf_context_print:        eval time =    1547.99 ms /    32 runs   (   48.37 ms per token,    20.67 tokens per second)
0.02.005.076 I llama_perf_context_print:       total time =    1566.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4122 (9b75f03c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40142.15 ms
main:    total time = 40142.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.530 I build: 4122 (9b75f03c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.066 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.080 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.086 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.087 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.091 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.091 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.092 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.092 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.093 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.093 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.097 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.097 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.098 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.098 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.099 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.389 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.109 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.951 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.958 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.959 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.959 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.960 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.961 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.961 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.963 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.964 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.967 I llama_model_loader: - type  f32:   37 tensors
0.00.130.968 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.969 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.226 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.737 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.444 I llm_load_vocab: special tokens cache size = 5
0.00.273.247 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.268 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.269 I llm_load_print_meta: arch             = gemma
0.00.273.269 I llm_load_print_meta: vocab type       = SPM
0.00.273.270 I llm_load_print_meta: n_vocab          = 256000
0.00.273.291 I llm_load_print_meta: n_merges         = 0
0.00.273.293 I llm_load_print_meta: vocab_only       = 0
0.00.273.293 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.293 I llm_load_print_meta: n_embd           = 2048
0.00.273.294 I llm_load_print_meta: n_layer          = 18
0.00.273.307 I llm_load_print_meta: n_head           = 8
0.00.273.308 I llm_load_print_meta: n_head_kv        = 1
0.00.273.309 I llm_load_print_meta: n_rot            = 256
0.00.273.309 I llm_load_print_meta: n_swa            = 0
0.00.273.309 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.310 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.311 I llm_load_print_meta: n_gqa            = 8
0.00.273.312 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.313 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.314 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.316 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.316 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.316 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.317 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.318 I llm_load_print_meta: n_ff             = 16384
0.00.273.319 I llm_load_print_meta: n_expert         = 0
0.00.273.319 I llm_load_print_meta: n_expert_used    = 0
0.00.273.319 I llm_load_print_meta: causal attn      = 1
0.00.273.319 I llm_load_print_meta: pooling type     = 0
0.00.273.320 I llm_load_print_meta: rope type        = 2
0.00.273.320 I llm_load_print_meta: rope scaling     = linear
0.00.273.322 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.323 I llm_load_print_meta: freq_scale_train = 1
0.00.273.323 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.323 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.324 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.324 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.324 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.325 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.325 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.326 I llm_load_print_meta: model type       = 2B
0.00.273.327 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.328 I llm_load_print_meta: model params     = 2.51 B
0.00.273.329 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.329 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.330 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.330 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.330 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.331 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.331 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.332 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.333 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.333 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.334 I llm_load_print_meta: max token length = 93
0.00.329.153 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.334.166 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.172 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.173 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.173 I llama_new_context_with_model: n_batch       = 2048
0.00.334.173 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.174 I llama_new_context_with_model: flash_attn    = 0
0.00.334.176 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.176 I llama_new_context_with_model: freq_scale    = 1
0.00.334.177 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.559 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.572 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.683 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.981 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.987 I llama_new_context_with_model: graph nodes  = 601
0.00.349.988 I llama_new_context_with_model: graph splits = 1
0.00.349.989 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.234 I main: llama threadpool init, n_threads = 4
0.00.424.249 I 
0.00.424.326 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.424.329 I 
0.00.424.371 I sampler seed: 1320974440
0.00.424.383 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.390 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.393 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.393 I 
 increasities have shown that the association between language diversity and cognitive performance is complex and multifaceted, encompassing various cognitive processes.

**a) Discuss the various cognitive processes

0.01.965.205 I llama_perf_sampler_print:    sampling time =       5.31 ms /    33 runs   (    0.16 ms per token,  6217.03 tokens per second)
0.01.965.207 I llama_perf_context_print:        load time =     423.47 ms
0.01.965.208 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.965.210 I llama_perf_context_print:        eval time =    1522.39 ms /    32 runs   (   47.57 ms per token,    21.02 tokens per second)
0.01.965.211 I llama_perf_context_print:       total time =    1540.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.056s
user	10m23.636s
sys	0m6.866s
