+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.547 I build: 4391 (9ba399df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.227 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.234 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.242 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.247 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.248 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.250 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.251 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.252 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.252 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.253 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.257 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.258 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.258 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.259 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.933 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.158 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.165 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.166 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.167 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.168 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.169 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.170 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.173 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.174 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.175 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.175 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.176 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.180 I llama_model_loader: - type  f32:   37 tensors
0.00.131.181 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.682 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.995 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.572 I llm_load_vocab: special tokens cache size = 5
0.00.268.416 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.433 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.434 I llm_load_print_meta: arch             = gemma
0.00.268.435 I llm_load_print_meta: vocab type       = SPM
0.00.268.436 I llm_load_print_meta: n_vocab          = 256000
0.00.268.436 I llm_load_print_meta: n_merges         = 0
0.00.268.436 I llm_load_print_meta: vocab_only       = 0
0.00.268.437 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.437 I llm_load_print_meta: n_embd           = 2048
0.00.268.438 I llm_load_print_meta: n_layer          = 18
0.00.268.448 I llm_load_print_meta: n_head           = 8
0.00.268.449 I llm_load_print_meta: n_head_kv        = 1
0.00.268.450 I llm_load_print_meta: n_rot            = 256
0.00.268.450 I llm_load_print_meta: n_swa            = 0
0.00.268.451 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.451 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.452 I llm_load_print_meta: n_gqa            = 8
0.00.268.453 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.454 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.455 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.457 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.457 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.457 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.458 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.459 I llm_load_print_meta: n_ff             = 16384
0.00.268.459 I llm_load_print_meta: n_expert         = 0
0.00.268.460 I llm_load_print_meta: n_expert_used    = 0
0.00.268.460 I llm_load_print_meta: causal attn      = 1
0.00.268.461 I llm_load_print_meta: pooling type     = 0
0.00.268.461 I llm_load_print_meta: rope type        = 2
0.00.268.461 I llm_load_print_meta: rope scaling     = linear
0.00.268.463 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.464 I llm_load_print_meta: freq_scale_train = 1
0.00.268.464 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.465 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.466 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.466 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.466 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.467 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.467 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.468 I llm_load_print_meta: model type       = 2B
0.00.268.468 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.469 I llm_load_print_meta: model params     = 2.51 B
0.00.268.470 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.470 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.471 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.471 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.472 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.472 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.472 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.473 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.473 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.474 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.474 I llm_load_print_meta: max token length = 93
0.00.369.770 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.776 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.777 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.778 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.778 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.779 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.102 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.110 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.110 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.110 I llama_new_context_with_model: n_batch       = 2048
0.00.375.111 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.111 I llama_new_context_with_model: flash_attn    = 0
0.00.375.115 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.116 I llama_new_context_with_model: freq_scale    = 1
0.00.375.118 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.140 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.390.638 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.651 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.747 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.035 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.040 I llama_new_context_with_model: graph nodes  = 601
0.00.392.041 I llama_new_context_with_model: graph splits = 1
0.00.392.044 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.044 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.832 I main: llama threadpool init, n_threads = 4
0.00.482.847 I 
0.00.482.924 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.482.927 I 
0.00.482.970 I sampler seed: 2200037533
0.00.482.982 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.988 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.992 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.992 I 
 increamically. [end of text]


0.00.768.250 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7800.31 tokens per second)
0.00.768.253 I llama_perf_context_print:        load time =     482.07 ms
0.00.768.254 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.768.256 I llama_perf_context_print:        eval time =     281.88 ms /     4 runs   (   70.47 ms per token,    14.19 tokens per second)
0.00.768.256 I llama_perf_context_print:       total time =     285.43 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.541 I build: 4391 (9ba399df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.021.167 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.179 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.186 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.187 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.190 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.190 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.192 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.192 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.193 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.193 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.199 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.200 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.200 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.201 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.202 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.007 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.520 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.386 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.393 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.394 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.395 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.395 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.396 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.397 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.399 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.400 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.400 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.402 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.403 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.407 I llama_model_loader: - type  f32:   37 tensors
0.00.130.408 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.695 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.143 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.724 I llm_load_vocab: special tokens cache size = 5
0.00.274.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.757 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.758 I llm_load_print_meta: arch             = gemma
0.00.274.759 I llm_load_print_meta: vocab type       = SPM
0.00.274.759 I llm_load_print_meta: n_vocab          = 256000
0.00.274.760 I llm_load_print_meta: n_merges         = 0
0.00.274.760 I llm_load_print_meta: vocab_only       = 0
0.00.274.760 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.761 I llm_load_print_meta: n_embd           = 2048
0.00.274.761 I llm_load_print_meta: n_layer          = 18
0.00.274.774 I llm_load_print_meta: n_head           = 8
0.00.274.775 I llm_load_print_meta: n_head_kv        = 1
0.00.274.775 I llm_load_print_meta: n_rot            = 256
0.00.274.776 I llm_load_print_meta: n_swa            = 0
0.00.274.776 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.776 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.777 I llm_load_print_meta: n_gqa            = 8
0.00.274.778 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.781 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.781 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.782 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.782 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.783 I llm_load_print_meta: n_ff             = 16384
0.00.274.783 I llm_load_print_meta: n_expert         = 0
0.00.274.783 I llm_load_print_meta: n_expert_used    = 0
0.00.274.783 I llm_load_print_meta: causal attn      = 1
0.00.274.784 I llm_load_print_meta: pooling type     = 0
0.00.274.784 I llm_load_print_meta: rope type        = 2
0.00.274.785 I llm_load_print_meta: rope scaling     = linear
0.00.274.786 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.787 I llm_load_print_meta: freq_scale_train = 1
0.00.274.787 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.788 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.788 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.788 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.788 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.789 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.789 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.789 I llm_load_print_meta: model type       = 2B
0.00.274.790 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.790 I llm_load_print_meta: model params     = 2.51 B
0.00.274.791 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.792 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.792 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.793 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.793 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.793 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.793 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.794 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.794 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.795 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.795 I llm_load_print_meta: max token length = 93
0.00.370.986 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.376.356 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.364 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.364 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.364 I llama_new_context_with_model: n_batch       = 2048
0.00.376.365 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.365 I llama_new_context_with_model: flash_attn    = 0
0.00.376.369 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.370 I llama_new_context_with_model: freq_scale    = 1
0.00.376.370 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.392 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.391.282 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.297 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.396 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.655 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.661 I llama_new_context_with_model: graph nodes  = 601
0.00.392.662 I llama_new_context_with_model: graph splits = 1
0.00.392.665 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.665 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.957 I main: llama threadpool init, n_threads = 4
0.00.476.973 I 
0.00.477.057 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.061 I 
0.00.477.123 I sampler seed: 2571248434
0.00.477.137 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.144 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.147 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.147 I 
 increadibly and the narrator feels like he's going to vomit.

**Narrator:** The acrid tang of desperation gnawed at my insides, a fester

0.02.707.039 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6731.95 tokens per second)
0.02.707.043 I llama_perf_context_print:        load time =     476.18 ms
0.02.707.044 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.707.046 I llama_perf_context_print:        eval time =    2210.22 ms /    32 runs   (   69.07 ms per token,    14.48 tokens per second)
0.02.707.047 I llama_perf_context_print:       total time =    2230.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 4391 (9ba399df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.762 I main: load the model and apply lora adapter, if any
0.00.021.659 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.671 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.678 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.688 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.694 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.700 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.701 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.702 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.703 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.703 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.704 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.709 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.709 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.710 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.711 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.712 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.371 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.098 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.105 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.106 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.107 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.107 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.108 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.109 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.111 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.113 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.114 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.114 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.115 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.120 I llama_model_loader: - type  f32:   37 tensors
0.00.132.121 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.425 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.047 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.644 I llm_load_vocab: special tokens cache size = 5
0.00.274.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.340 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.340 I llm_load_print_meta: arch             = gemma
0.00.274.341 I llm_load_print_meta: vocab type       = SPM
0.00.274.342 I llm_load_print_meta: n_vocab          = 256000
0.00.274.342 I llm_load_print_meta: n_merges         = 0
0.00.274.342 I llm_load_print_meta: vocab_only       = 0
0.00.274.343 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.343 I llm_load_print_meta: n_embd           = 2048
0.00.274.343 I llm_load_print_meta: n_layer          = 18
0.00.274.355 I llm_load_print_meta: n_head           = 8
0.00.274.356 I llm_load_print_meta: n_head_kv        = 1
0.00.274.357 I llm_load_print_meta: n_rot            = 256
0.00.274.357 I llm_load_print_meta: n_swa            = 0
0.00.274.358 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.358 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.359 I llm_load_print_meta: n_gqa            = 8
0.00.274.360 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.361 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.362 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.364 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.364 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.364 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.365 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.365 I llm_load_print_meta: n_ff             = 16384
0.00.274.366 I llm_load_print_meta: n_expert         = 0
0.00.274.366 I llm_load_print_meta: n_expert_used    = 0
0.00.274.367 I llm_load_print_meta: causal attn      = 1
0.00.274.367 I llm_load_print_meta: pooling type     = 0
0.00.274.367 I llm_load_print_meta: rope type        = 2
0.00.274.368 I llm_load_print_meta: rope scaling     = linear
0.00.274.369 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.370 I llm_load_print_meta: freq_scale_train = 1
0.00.274.370 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.370 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.371 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.371 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.371 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.372 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.372 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.373 I llm_load_print_meta: model type       = 2B
0.00.274.373 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.374 I llm_load_print_meta: model params     = 2.51 B
0.00.274.375 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.375 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.376 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.376 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.377 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.377 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.377 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.377 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.378 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.378 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.379 I llm_load_print_meta: max token length = 93
0.00.354.151 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.159 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.160 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.161 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.161 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.162 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.348 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.355 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.356 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.356 I llama_new_context_with_model: n_batch       = 2048
0.00.359.356 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.357 I llama_new_context_with_model: flash_attn    = 0
0.00.359.359 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.360 I llama_new_context_with_model: freq_scale    = 1
0.00.359.361 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.381 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.374.917 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.933 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.028 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.320 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.326 I llama_new_context_with_model: graph nodes  = 601
0.00.376.326 I llama_new_context_with_model: graph splits = 1
0.00.376.328 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.376.329 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.623 I main: llama threadpool init, n_threads = 4
0.00.460.639 I 
0.00.460.720 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.725 I 
0.00.460.783 I sampler seed: 259526966
0.00.460.795 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.805 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.809 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.810 I 
 seconally after a pause.

I am unable to answer this question because the context does not provide any information regarding the specific pause or the nature of the question

0.02.740.360 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6626.51 tokens per second)
0.02.740.362 I llama_perf_context_print:        load time =     459.84 ms
0.02.740.363 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.740.365 I llama_perf_context_print:        eval time =    2259.79 ms /    32 runs   (   70.62 ms per token,    14.16 tokens per second)
0.02.740.365 I llama_perf_context_print:       total time =    2279.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.547 I build: 4391 (9ba399df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.029 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.036 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.044 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.052 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.056 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.059 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.061 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.061 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.063 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.063 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.064 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.068 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.069 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.069 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.070 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.071 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.008 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.754 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.597 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.604 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.605 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.605 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.606 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.607 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.608 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.610 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.611 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.612 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.612 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.613 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.616 I llama_model_loader: - type  f32:   37 tensors
0.00.131.617 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.953 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.870 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.519 I llm_load_vocab: special tokens cache size = 5
0.00.276.375 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.394 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.395 I llm_load_print_meta: arch             = gemma
0.00.276.395 I llm_load_print_meta: vocab type       = SPM
0.00.276.396 I llm_load_print_meta: n_vocab          = 256000
0.00.276.396 I llm_load_print_meta: n_merges         = 0
0.00.276.397 I llm_load_print_meta: vocab_only       = 0
0.00.276.397 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.398 I llm_load_print_meta: n_embd           = 2048
0.00.276.398 I llm_load_print_meta: n_layer          = 18
0.00.276.412 I llm_load_print_meta: n_head           = 8
0.00.276.413 I llm_load_print_meta: n_head_kv        = 1
0.00.276.413 I llm_load_print_meta: n_rot            = 256
0.00.276.413 I llm_load_print_meta: n_swa            = 0
0.00.276.414 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.415 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.416 I llm_load_print_meta: n_gqa            = 8
0.00.276.417 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.418 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.419 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.421 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.421 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.422 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.422 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.423 I llm_load_print_meta: n_ff             = 16384
0.00.276.424 I llm_load_print_meta: n_expert         = 0
0.00.276.424 I llm_load_print_meta: n_expert_used    = 0
0.00.276.425 I llm_load_print_meta: causal attn      = 1
0.00.276.425 I llm_load_print_meta: pooling type     = 0
0.00.276.426 I llm_load_print_meta: rope type        = 2
0.00.276.428 I llm_load_print_meta: rope scaling     = linear
0.00.276.430 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.431 I llm_load_print_meta: freq_scale_train = 1
0.00.276.431 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.432 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.432 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.433 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.433 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.433 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.433 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.434 I llm_load_print_meta: model type       = 2B
0.00.276.435 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.435 I llm_load_print_meta: model params     = 2.51 B
0.00.276.436 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.438 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.438 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.439 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.440 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.440 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.440 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.440 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.441 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.441 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.442 I llm_load_print_meta: max token length = 93
0.00.347.833 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.347.841 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.352.921 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.927 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.927 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.928 I llama_new_context_with_model: n_batch       = 2048
0.00.352.928 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.929 I llama_new_context_with_model: flash_attn    = 0
0.00.352.931 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.932 I llama_new_context_with_model: freq_scale    = 1
0.00.352.933 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.953 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.367.536 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.550 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.645 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.001 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.005 I llama_new_context_with_model: graph nodes  = 601
0.00.369.006 I llama_new_context_with_model: graph splits = 1
0.00.369.009 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.009 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.618 I main: llama threadpool init, n_threads = 4
0.00.468.639 I 
0.00.468.739 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.743 I 
0.00.468.792 I sampler seed: 1843753973
0.00.468.807 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.813 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.814 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.814 I 
 increasities with the intent to explore their effects. [end of text]


0.01.312.091 I llama_perf_sampler_print:    sampling time =       1.78 ms /    12 runs   (    0.15 ms per token,  6734.01 tokens per second)
0.01.312.093 I llama_perf_context_print:        load time =     467.84 ms
0.01.312.094 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.312.096 I llama_perf_context_print:        eval time =     835.62 ms /    11 runs   (   75.97 ms per token,    13.16 tokens per second)
0.01.312.096 I llama_perf_context_print:       total time =     843.48 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.534s
user	0m25.557s
sys	0m9.437s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4391 (9ba399df)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40408.52 ms
main:    total time = 40408.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 4391 (9ba399df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.735 I main: load the model and apply lora adapter, if any
0.00.021.062 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.072 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.083 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.090 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.092 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.095 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.096 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.096 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.097 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.097 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.098 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.101 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.102 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.103 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.104 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.376 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.508 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.320 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.326 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.327 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.328 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.329 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.332 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.332 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.333 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.334 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.335 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.338 I llama_model_loader: - type  f32:   37 tensors
0.00.130.339 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.339 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.610 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.648 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.170 I llm_load_vocab: special tokens cache size = 5
0.00.265.818 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.836 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.836 I llm_load_print_meta: arch             = gemma
0.00.265.837 I llm_load_print_meta: vocab type       = SPM
0.00.265.837 I llm_load_print_meta: n_vocab          = 256000
0.00.265.837 I llm_load_print_meta: n_merges         = 0
0.00.265.837 I llm_load_print_meta: vocab_only       = 0
0.00.265.838 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.838 I llm_load_print_meta: n_embd           = 2048
0.00.265.838 I llm_load_print_meta: n_layer          = 18
0.00.265.850 I llm_load_print_meta: n_head           = 8
0.00.265.851 I llm_load_print_meta: n_head_kv        = 1
0.00.265.852 I llm_load_print_meta: n_rot            = 256
0.00.265.852 I llm_load_print_meta: n_swa            = 0
0.00.265.853 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.853 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.854 I llm_load_print_meta: n_gqa            = 8
0.00.265.856 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.857 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.860 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.861 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.862 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.862 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.862 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.863 I llm_load_print_meta: n_ff             = 16384
0.00.265.864 I llm_load_print_meta: n_expert         = 0
0.00.265.864 I llm_load_print_meta: n_expert_used    = 0
0.00.265.864 I llm_load_print_meta: causal attn      = 1
0.00.265.865 I llm_load_print_meta: pooling type     = 0
0.00.265.865 I llm_load_print_meta: rope type        = 2
0.00.265.866 I llm_load_print_meta: rope scaling     = linear
0.00.265.867 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.868 I llm_load_print_meta: freq_scale_train = 1
0.00.265.869 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.869 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.869 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.870 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.870 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.871 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.871 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.871 I llm_load_print_meta: model type       = 2B
0.00.265.872 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.873 I llm_load_print_meta: model params     = 2.51 B
0.00.265.874 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.874 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.875 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.875 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.876 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.876 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.876 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.877 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.878 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.878 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.879 I llm_load_print_meta: max token length = 93
0.00.325.765 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.774 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.775 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.775 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.776 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.776 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.330.892 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.897 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.898 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.898 I llama_new_context_with_model: n_batch       = 2048
0.00.330.899 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.899 I llama_new_context_with_model: flash_attn    = 0
0.00.330.901 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.902 I llama_new_context_with_model: freq_scale    = 1
0.00.330.903 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.330.922 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.345.072 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.085 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.173 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.501 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.505 I llama_new_context_with_model: graph nodes  = 601
0.00.346.506 I llama_new_context_with_model: graph splits = 1
0.00.346.508 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.508 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.806 I main: llama threadpool init, n_threads = 4
0.00.422.819 I 
0.00.422.892 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.895 I 
0.00.422.937 I sampler seed: 3470868445
0.00.422.949 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.959 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.963 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.963 I 
 fufilling and humming are the first two terms of a sequence. Which term will be the last?

The sequence is generated by the rule:

$$T

0.02.039.039 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6473.13 tokens per second)
0.02.039.041 I llama_perf_context_print:        load time =     422.06 ms
0.02.039.042 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.039.043 I llama_perf_context_print:        eval time =    1597.59 ms /    32 runs   (   49.92 ms per token,    20.03 tokens per second)
0.02.039.044 I llama_perf_context_print:       total time =    1616.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4391 (9ba399df)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40222.09 ms
main:    total time = 40222.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.540 I build: 4391 (9ba399df) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.021.254 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.266 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.275 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.276 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.279 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.280 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.280 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.281 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.281 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.282 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.285 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.286 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.287 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.287 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.288 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.496 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.926 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.789 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.796 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.797 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.798 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.799 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.800 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.804 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.805 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.808 I llama_model_loader: - type  f32:   37 tensors
0.00.130.809 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.810 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.176 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.789 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.449 I llm_load_vocab: special tokens cache size = 5
0.00.277.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.437 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.438 I llm_load_print_meta: arch             = gemma
0.00.277.438 I llm_load_print_meta: vocab type       = SPM
0.00.277.439 I llm_load_print_meta: n_vocab          = 256000
0.00.277.439 I llm_load_print_meta: n_merges         = 0
0.00.277.440 I llm_load_print_meta: vocab_only       = 0
0.00.277.440 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.441 I llm_load_print_meta: n_embd           = 2048
0.00.277.441 I llm_load_print_meta: n_layer          = 18
0.00.277.452 I llm_load_print_meta: n_head           = 8
0.00.277.453 I llm_load_print_meta: n_head_kv        = 1
0.00.277.453 I llm_load_print_meta: n_rot            = 256
0.00.277.453 I llm_load_print_meta: n_swa            = 0
0.00.277.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.454 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.455 I llm_load_print_meta: n_gqa            = 8
0.00.277.456 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.457 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.457 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.459 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.460 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.460 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.460 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.461 I llm_load_print_meta: n_ff             = 16384
0.00.277.462 I llm_load_print_meta: n_expert         = 0
0.00.277.462 I llm_load_print_meta: n_expert_used    = 0
0.00.277.462 I llm_load_print_meta: causal attn      = 1
0.00.277.463 I llm_load_print_meta: pooling type     = 0
0.00.277.463 I llm_load_print_meta: rope type        = 2
0.00.277.464 I llm_load_print_meta: rope scaling     = linear
0.00.277.465 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.466 I llm_load_print_meta: freq_scale_train = 1
0.00.277.466 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.467 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.468 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.468 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.468 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.469 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.469 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.470 I llm_load_print_meta: model type       = 2B
0.00.277.470 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.471 I llm_load_print_meta: model params     = 2.51 B
0.00.277.472 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.472 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.473 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.473 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.474 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.475 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.475 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.475 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.476 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.477 I llm_load_print_meta: max token length = 93
0.00.335.465 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.340.580 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.587 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.587 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.588 I llama_new_context_with_model: n_batch       = 2048
0.00.340.588 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.589 I llama_new_context_with_model: flash_attn    = 0
0.00.340.591 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.592 I llama_new_context_with_model: freq_scale    = 1
0.00.340.593 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.612 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.355.309 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.323 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.415 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.643 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.650 I llama_new_context_with_model: graph nodes  = 601
0.00.356.650 I llama_new_context_with_model: graph splits = 1
0.00.356.652 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.356.652 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.020 I main: llama threadpool init, n_threads = 4
0.00.431.036 I 
0.00.431.112 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.431.112 I 
0.00.431.153 I sampler seed: 1353317241
0.00.431.162 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.164 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.431.165 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.431.165 I 
 seconded arms around a weathered wooden chest, whispering secrets into its worn leather.

The air was thick with the scent of old books, leather, and age

0.02.005.749 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6487.12 tokens per second)
0.02.005.752 I llama_perf_context_print:        load time =     430.27 ms
0.02.005.754 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.005.756 I llama_perf_context_print:        eval time =    1556.02 ms /    32 runs   (   48.63 ms per token,    20.57 tokens per second)
0.02.005.757 I llama_perf_context_print:       total time =    1574.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.479s
user	10m24.319s
sys	0m6.961s
