+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
I build: 3761 (1c2f5958) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.875 I main: llama backend init
0.00.001.968 I main: load the model and apply lora adapter, if any
0.00.022.480 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.527 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.537 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.542 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.543 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.546 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.547 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.548 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.548 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.549 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.549 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.554 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.554 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.555 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.555 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.556 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.482 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.130 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.928 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.934 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.935 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.936 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.937 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.938 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.939 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.943 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.945 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.947 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.951 I llama_model_loader: - type  f32:   37 tensors
0.00.134.954 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.570 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.296 I llm_load_vocab: special tokens cache size = 5
0.00.218.941 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.954 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.955 I llm_load_print_meta: arch             = gemma
0.00.218.955 I llm_load_print_meta: vocab type       = SPM
0.00.218.956 I llm_load_print_meta: n_vocab          = 256000
0.00.218.957 I llm_load_print_meta: n_merges         = 0
0.00.218.957 I llm_load_print_meta: vocab_only       = 0
0.00.218.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.958 I llm_load_print_meta: n_embd           = 2048
0.00.218.958 I llm_load_print_meta: n_layer          = 18
0.00.218.968 I llm_load_print_meta: n_head           = 8
0.00.218.969 I llm_load_print_meta: n_head_kv        = 1
0.00.218.970 I llm_load_print_meta: n_rot            = 256
0.00.218.970 I llm_load_print_meta: n_swa            = 0
0.00.218.970 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.971 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.972 I llm_load_print_meta: n_gqa            = 8
0.00.218.973 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.973 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.974 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.976 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.977 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.977 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.978 I llm_load_print_meta: n_ff             = 16384
0.00.218.979 I llm_load_print_meta: n_expert         = 0
0.00.218.979 I llm_load_print_meta: n_expert_used    = 0
0.00.218.979 I llm_load_print_meta: causal attn      = 1
0.00.218.979 I llm_load_print_meta: pooling type     = 0
0.00.218.980 I llm_load_print_meta: rope type        = 2
0.00.218.980 I llm_load_print_meta: rope scaling     = linear
0.00.218.982 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.982 I llm_load_print_meta: freq_scale_train = 1
0.00.218.982 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.983 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.983 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.984 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.984 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.984 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.985 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.985 I llm_load_print_meta: model type       = 2B
0.00.218.986 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.987 I llm_load_print_meta: model params     = 2.51 B
0.00.218.987 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.988 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.988 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.988 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.989 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.989 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.989 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.990 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.990 I llm_load_print_meta: max token length = 93
0.00.219.014 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.319.812 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.319.817 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.319.817 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.319.818 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.319.819 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.319.819 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.324.883 I llama_new_context_with_model: n_ctx      = 8192
0.00.324.890 I llama_new_context_with_model: n_batch    = 2048
0.00.324.890 I llama_new_context_with_model: n_ubatch   = 512
0.00.324.891 I llama_new_context_with_model: flash_attn = 0
0.00.324.895 I llama_new_context_with_model: freq_base  = 10000.0
0.00.324.896 I llama_new_context_with_model: freq_scale = 1
0.00.355.308 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.355.323 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.355.416 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.313 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.356.322 I llama_new_context_with_model: graph nodes  = 601
0.00.356.322 I llama_new_context_with_model: graph splits = 1
0.00.356.324 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.979 I main: llama threadpool init, n_threads = 4
0.00.447.991 I 
0.00.448.065 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.448.069 I 
0.00.448.108 I sampler seed: 3944641772
0.00.448.117 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.119 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.448.120 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.728.477 I llama_perf_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7739.94 tokens per second)
0.00.728.481 I llama_perf_print:        load time =     228.98 ms
0.00.728.482 I llama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
0.00.728.485 I llama_perf_print:        eval time =     277.06 ms /     4 runs   (   69.26 ms per token,    14.44 tokens per second)
0.00.728.486 I llama_perf_print:       total time =     279.72 ms /     4 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
I build: 3761 (1c2f5958) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.887 I main: llama backend init
0.00.002.002 I main: load the model and apply lora adapter, if any
0.00.021.821 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.832 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.843 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.843 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.847 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.847 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.848 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.849 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.850 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.850 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.855 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.856 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.857 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.857 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.858 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.887 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.364 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.230 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.237 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.238 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.238 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.238 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.240 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.240 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.243 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.244 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.245 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.246 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.134.246 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.250 I llama_model_loader: - type  f32:   37 tensors
0.00.134.254 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.121 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.809 I llm_load_vocab: special tokens cache size = 5
0.00.217.382 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.398 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.399 I llm_load_print_meta: arch             = gemma
0.00.217.399 I llm_load_print_meta: vocab type       = SPM
0.00.217.400 I llm_load_print_meta: n_vocab          = 256000
0.00.217.402 I llm_load_print_meta: n_merges         = 0
0.00.217.403 I llm_load_print_meta: vocab_only       = 0
0.00.217.403 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.403 I llm_load_print_meta: n_embd           = 2048
0.00.217.404 I llm_load_print_meta: n_layer          = 18
0.00.217.417 I llm_load_print_meta: n_head           = 8
0.00.217.419 I llm_load_print_meta: n_head_kv        = 1
0.00.217.419 I llm_load_print_meta: n_rot            = 256
0.00.217.420 I llm_load_print_meta: n_swa            = 0
0.00.217.420 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.420 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.422 I llm_load_print_meta: n_gqa            = 8
0.00.217.423 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.424 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.425 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.428 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.430 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.431 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.431 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.432 I llm_load_print_meta: n_ff             = 16384
0.00.217.432 I llm_load_print_meta: n_expert         = 0
0.00.217.433 I llm_load_print_meta: n_expert_used    = 0
0.00.217.433 I llm_load_print_meta: causal attn      = 1
0.00.217.433 I llm_load_print_meta: pooling type     = 0
0.00.217.433 I llm_load_print_meta: rope type        = 2
0.00.217.433 I llm_load_print_meta: rope scaling     = linear
0.00.217.435 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.436 I llm_load_print_meta: freq_scale_train = 1
0.00.217.436 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.437 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.437 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.439 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.440 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.440 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.440 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.441 I llm_load_print_meta: model type       = 2B
0.00.217.441 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.442 I llm_load_print_meta: model params     = 2.51 B
0.00.217.443 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.444 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.444 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.445 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.445 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.446 I llm_load_print_meta: max token length = 93
0.00.217.478 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.309.172 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.314.119 I llama_new_context_with_model: n_ctx      = 8192
0.00.314.125 I llama_new_context_with_model: n_batch    = 2048
0.00.314.126 I llama_new_context_with_model: n_ubatch   = 512
0.00.314.126 I llama_new_context_with_model: flash_attn = 0
0.00.314.128 I llama_new_context_with_model: freq_base  = 10000.0
0.00.314.129 I llama_new_context_with_model: freq_scale = 1
0.00.344.159 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.344.175 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.344.272 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.190 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.345.198 I llama_new_context_with_model: graph nodes  = 601
0.00.345.198 I llama_new_context_with_model: graph splits = 1
0.00.345.200 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.314 I main: llama threadpool init, n_threads = 4
0.00.433.327 I 
0.00.433.402 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.433.405 I 
0.00.433.435 I sampler seed: 1165833282
0.00.433.445 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.447 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.433.448 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and all that jazz.

The provided text is grammatically incorrect and contains misspelled words. The speaker is attempting to write in a poetic or metaphorical style

0.02.609.199 I llama_perf_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6346.15 tokens per second)
0.02.609.204 I llama_perf_print:        load time =     215.86 ms
0.02.609.206 I llama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
0.02.609.208 I llama_perf_print:        eval time =    2156.53 ms /    32 runs   (   67.39 ms per token,    14.84 tokens per second)
0.02.609.209 I llama_perf_print:       total time =    2175.67 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
I build: 3761 (1c2f5958) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.919 I main: llama backend init
0.00.002.016 I main: load the model and apply lora adapter, if any
0.00.022.040 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.089 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.096 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.102 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.103 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.106 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.107 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.108 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.109 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.109 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.111 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.116 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.117 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.118 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.118 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.119 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.205 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.107 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.957 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.964 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.964 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.965 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.966 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.967 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.967 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.970 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.971 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.972 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.972 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.973 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.977 I llama_model_loader: - type  f32:   37 tensors
0.00.135.980 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.243 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.206.002 I llm_load_vocab: special tokens cache size = 5
0.00.224.538 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.224.554 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.224.554 I llm_load_print_meta: arch             = gemma
0.00.224.555 I llm_load_print_meta: vocab type       = SPM
0.00.224.556 I llm_load_print_meta: n_vocab          = 256000
0.00.224.556 I llm_load_print_meta: n_merges         = 0
0.00.224.556 I llm_load_print_meta: vocab_only       = 0
0.00.224.557 I llm_load_print_meta: n_ctx_train      = 8192
0.00.224.557 I llm_load_print_meta: n_embd           = 2048
0.00.224.557 I llm_load_print_meta: n_layer          = 18
0.00.224.570 I llm_load_print_meta: n_head           = 8
0.00.224.571 I llm_load_print_meta: n_head_kv        = 1
0.00.224.571 I llm_load_print_meta: n_rot            = 256
0.00.224.571 I llm_load_print_meta: n_swa            = 0
0.00.224.571 I llm_load_print_meta: n_embd_head_k    = 256
0.00.224.572 I llm_load_print_meta: n_embd_head_v    = 256
0.00.224.573 I llm_load_print_meta: n_gqa            = 8
0.00.224.574 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.224.574 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.224.575 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.224.577 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.224.577 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.224.577 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.224.578 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.224.579 I llm_load_print_meta: n_ff             = 16384
0.00.224.579 I llm_load_print_meta: n_expert         = 0
0.00.224.579 I llm_load_print_meta: n_expert_used    = 0
0.00.224.579 I llm_load_print_meta: causal attn      = 1
0.00.224.580 I llm_load_print_meta: pooling type     = 0
0.00.224.580 I llm_load_print_meta: rope type        = 2
0.00.224.580 I llm_load_print_meta: rope scaling     = linear
0.00.224.581 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.224.582 I llm_load_print_meta: freq_scale_train = 1
0.00.224.582 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.224.583 I llm_load_print_meta: rope_finetuned   = unknown
0.00.224.583 I llm_load_print_meta: ssm_d_conv       = 0
0.00.224.583 I llm_load_print_meta: ssm_d_inner      = 0
0.00.224.583 I llm_load_print_meta: ssm_d_state      = 0
0.00.224.584 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.224.584 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.224.585 I llm_load_print_meta: model type       = 2B
0.00.224.585 I llm_load_print_meta: model ftype      = Q8_0
0.00.224.586 I llm_load_print_meta: model params     = 2.51 B
0.00.224.587 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.224.587 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.224.588 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.224.588 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.224.588 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.224.588 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.224.589 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.224.589 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.224.590 I llm_load_print_meta: max token length = 93
0.00.224.609 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.300.141 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.300.149 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.300.150 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.300.151 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.300.151 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.300.152 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.305.162 I llama_new_context_with_model: n_ctx      = 8192
0.00.305.169 I llama_new_context_with_model: n_batch    = 2048
0.00.305.170 I llama_new_context_with_model: n_ubatch   = 512
0.00.305.170 I llama_new_context_with_model: flash_attn = 0
0.00.305.173 I llama_new_context_with_model: freq_base  = 10000.0
0.00.305.174 I llama_new_context_with_model: freq_scale = 1
0.00.335.834 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.335.849 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.335.942 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.336.816 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.336.824 I llama_new_context_with_model: graph nodes  = 601
0.00.336.824 I llama_new_context_with_model: graph splits = 1
0.00.336.826 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.343 I main: llama threadpool init, n_threads = 4
0.00.429.353 I 
0.00.429.425 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.429.428 I 
0.00.429.464 I sampler seed: 2251187879
0.00.429.473 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.476 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.429.476 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and the challenges of implementing restorative justice.

**Answer:**

**1. Declaring Intentions and Identifying Victims and Offenders:**

* Establish

0.02.692.974 I llama_perf_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6915.34 tokens per second)
0.02.692.980 I llama_perf_print:        load time =     204.75 ms
0.02.692.982 I llama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
0.02.692.984 I llama_perf_print:        eval time =    2244.59 ms /    32 runs   (   70.14 ms per token,    14.26 tokens per second)
0.02.692.987 I llama_perf_print:       total time =    2263.62 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
I build: 3761 (1c2f5958) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.930 I main: llama backend init
0.00.002.064 I main: load the model and apply lora adapter, if any
0.00.021.773 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.838 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.849 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.855 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.860 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.864 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.865 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.867 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.868 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.869 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.870 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.875 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.876 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.877 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.878 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.880 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.091 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.490 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.358 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.366 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.366 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.367 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.368 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.369 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.369 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.372 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.373 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.374 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.375 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.134.376 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.380 I llama_model_loader: - type  f32:   37 tensors
0.00.134.386 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.795 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.527 I llm_load_vocab: special tokens cache size = 5
0.00.217.978 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.993 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.994 I llm_load_print_meta: arch             = gemma
0.00.217.994 I llm_load_print_meta: vocab type       = SPM
0.00.217.995 I llm_load_print_meta: n_vocab          = 256000
0.00.217.995 I llm_load_print_meta: n_merges         = 0
0.00.217.996 I llm_load_print_meta: vocab_only       = 0
0.00.217.996 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.997 I llm_load_print_meta: n_embd           = 2048
0.00.217.997 I llm_load_print_meta: n_layer          = 18
0.00.218.009 I llm_load_print_meta: n_head           = 8
0.00.218.010 I llm_load_print_meta: n_head_kv        = 1
0.00.218.011 I llm_load_print_meta: n_rot            = 256
0.00.218.011 I llm_load_print_meta: n_swa            = 0
0.00.218.011 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.011 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.012 I llm_load_print_meta: n_gqa            = 8
0.00.218.013 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.014 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.015 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.016 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.016 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.016 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.017 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.018 I llm_load_print_meta: n_ff             = 16384
0.00.218.018 I llm_load_print_meta: n_expert         = 0
0.00.218.018 I llm_load_print_meta: n_expert_used    = 0
0.00.218.019 I llm_load_print_meta: causal attn      = 1
0.00.218.019 I llm_load_print_meta: pooling type     = 0
0.00.218.019 I llm_load_print_meta: rope type        = 2
0.00.218.019 I llm_load_print_meta: rope scaling     = linear
0.00.218.021 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.021 I llm_load_print_meta: freq_scale_train = 1
0.00.218.022 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.022 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.022 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.023 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.023 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.023 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.024 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.024 I llm_load_print_meta: model type       = 2B
0.00.218.025 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.026 I llm_load_print_meta: model params     = 2.51 B
0.00.218.026 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.026 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.027 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.027 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.027 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.028 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.028 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.028 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.029 I llm_load_print_meta: max token length = 93
0.00.218.048 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.288.587 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.288.595 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.293.623 I llama_new_context_with_model: n_ctx      = 8192
0.00.293.631 I llama_new_context_with_model: n_batch    = 2048
0.00.293.631 I llama_new_context_with_model: n_ubatch   = 512
0.00.293.631 I llama_new_context_with_model: flash_attn = 0
0.00.293.635 I llama_new_context_with_model: freq_base  = 10000.0
0.00.293.636 I llama_new_context_with_model: freq_scale = 1
0.00.323.478 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.323.492 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.323.592 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.324.480 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.324.487 I llama_new_context_with_model: graph nodes  = 601
0.00.324.487 I llama_new_context_with_model: graph splits = 1
0.00.324.489 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.346 I main: llama threadpool init, n_threads = 4
0.00.420.357 I 
0.00.420.447 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.420.451 I 
0.00.420.493 I sampler seed: 527213968
0.00.420.502 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.505 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.420.505 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously. 

I am unable to generate a response that is both creative and informative. [end of text]


0.02.028.402 I llama_perf_print:    sampling time =       3.30 ms /    22 runs   (    0.15 ms per token,  6674.76 tokens per second)
0.02.028.407 I llama_perf_print:        load time =     202.31 ms
0.02.028.408 I llama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
0.02.028.410 I llama_perf_print:        eval time =    1595.58 ms /    21 runs   (   75.98 ms per token,    13.16 tokens per second)
0.02.028.410 I llama_perf_print:       total time =    1607.86 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.023s
user	0m27.970s
sys	0m9.526s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3761 (1c2f5958)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32086.73 ms
main:    total time = 32086.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
I build: 3761 (1c2f5958) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.862 I main: llama backend init
0.00.001.974 I main: load the model and apply lora adapter, if any
0.00.022.089 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.136 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.147 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.152 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.153 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.156 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.156 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.157 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.158 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.158 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.159 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.162 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.162 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.163 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.163 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.164 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.023 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.589 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.421 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.427 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.427 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.428 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.429 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.430 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.433 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.434 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.435 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.436 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.439 I llama_model_loader: - type  f32:   37 tensors
0.00.134.442 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.443 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.715 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.428 I llm_load_vocab: special tokens cache size = 5
0.00.218.814 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.827 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.828 I llm_load_print_meta: arch             = gemma
0.00.218.828 I llm_load_print_meta: vocab type       = SPM
0.00.218.829 I llm_load_print_meta: n_vocab          = 256000
0.00.218.829 I llm_load_print_meta: n_merges         = 0
0.00.218.830 I llm_load_print_meta: vocab_only       = 0
0.00.218.830 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.830 I llm_load_print_meta: n_embd           = 2048
0.00.218.831 I llm_load_print_meta: n_layer          = 18
0.00.218.842 I llm_load_print_meta: n_head           = 8
0.00.218.843 I llm_load_print_meta: n_head_kv        = 1
0.00.218.843 I llm_load_print_meta: n_rot            = 256
0.00.218.844 I llm_load_print_meta: n_swa            = 0
0.00.218.844 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.844 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.845 I llm_load_print_meta: n_gqa            = 8
0.00.218.846 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.847 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.848 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.849 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.850 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.851 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.851 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.852 I llm_load_print_meta: n_ff             = 16384
0.00.218.852 I llm_load_print_meta: n_expert         = 0
0.00.218.852 I llm_load_print_meta: n_expert_used    = 0
0.00.218.853 I llm_load_print_meta: causal attn      = 1
0.00.218.853 I llm_load_print_meta: pooling type     = 0
0.00.218.853 I llm_load_print_meta: rope type        = 2
0.00.218.853 I llm_load_print_meta: rope scaling     = linear
0.00.218.855 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.855 I llm_load_print_meta: freq_scale_train = 1
0.00.218.855 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.856 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.856 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.857 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.857 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.857 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.858 I llm_load_print_meta: model type       = 2B
0.00.218.858 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.218.859 I llm_load_print_meta: model params     = 2.51 B
0.00.218.860 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.218.860 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.860 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.861 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.861 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.861 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.862 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.862 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.862 I llm_load_print_meta: max token length = 93
0.00.218.886 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.276.722 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.276.729 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.276.730 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.276.731 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.276.731 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.276.732 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.281.644 I llama_new_context_with_model: n_ctx      = 8192
0.00.281.650 I llama_new_context_with_model: n_batch    = 2048
0.00.281.650 I llama_new_context_with_model: n_ubatch   = 512
0.00.281.651 I llama_new_context_with_model: flash_attn = 0
0.00.281.653 I llama_new_context_with_model: freq_base  = 10000.0
0.00.281.654 I llama_new_context_with_model: freq_scale = 1
0.00.310.619 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.310.633 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.310.725 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.311.597 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.311.605 I llama_new_context_with_model: graph nodes  = 601
0.00.311.606 I llama_new_context_with_model: graph splits = 1
0.00.311.608 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.393.136 I main: llama threadpool init, n_threads = 4
0.00.393.149 I 
0.00.393.226 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.393.230 I 
0.00.393.266 I sampler seed: 1390243384
0.00.393.276 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.393.278 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.393.279 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneurages. These are a group of individuals with a shared belief in conspiracy theories, misinformation, and disinformation.

**Characteristics of a Conspiracy Theory:**

*

0.01.995.545 I llama_perf_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6925.50 tokens per second)
0.01.995.551 I llama_perf_print:        load time =     174.26 ms
0.01.995.552 I llama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
0.01.995.554 I llama_perf_print:        eval time =    1584.67 ms /    32 runs   (   49.52 ms per token,    20.19 tokens per second)
0.01.995.555 I llama_perf_print:       total time =    1602.28 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3761 (1c2f5958)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32015.61 ms
main:    total time = 32015.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
I build: 3761 (1c2f5958) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.945 I main: llama backend init
0.00.002.087 I main: load the model and apply lora adapter, if any
0.00.021.910 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.927 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.928 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.931 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.932 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.932 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.933 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.934 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.934 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.938 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.939 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.940 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.940 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.940 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.079 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.133 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.990 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.997 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.999 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.000 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.002 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.003 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.006 I llama_model_loader: - type  f32:   37 tensors
0.00.134.009 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.009 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.585 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.206.339 I llm_load_vocab: special tokens cache size = 5
0.00.224.819 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.224.834 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.224.835 I llm_load_print_meta: arch             = gemma
0.00.224.835 I llm_load_print_meta: vocab type       = SPM
0.00.224.836 I llm_load_print_meta: n_vocab          = 256000
0.00.224.837 I llm_load_print_meta: n_merges         = 0
0.00.224.837 I llm_load_print_meta: vocab_only       = 0
0.00.224.837 I llm_load_print_meta: n_ctx_train      = 8192
0.00.224.838 I llm_load_print_meta: n_embd           = 2048
0.00.224.838 I llm_load_print_meta: n_layer          = 18
0.00.224.850 I llm_load_print_meta: n_head           = 8
0.00.224.851 I llm_load_print_meta: n_head_kv        = 1
0.00.224.852 I llm_load_print_meta: n_rot            = 256
0.00.224.852 I llm_load_print_meta: n_swa            = 0
0.00.224.852 I llm_load_print_meta: n_embd_head_k    = 256
0.00.224.853 I llm_load_print_meta: n_embd_head_v    = 256
0.00.224.853 I llm_load_print_meta: n_gqa            = 8
0.00.224.855 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.224.856 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.224.856 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.224.858 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.224.858 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.224.859 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.224.859 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.224.860 I llm_load_print_meta: n_ff             = 16384
0.00.224.861 I llm_load_print_meta: n_expert         = 0
0.00.224.861 I llm_load_print_meta: n_expert_used    = 0
0.00.224.861 I llm_load_print_meta: causal attn      = 1
0.00.224.862 I llm_load_print_meta: pooling type     = 0
0.00.224.862 I llm_load_print_meta: rope type        = 2
0.00.224.862 I llm_load_print_meta: rope scaling     = linear
0.00.224.864 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.224.865 I llm_load_print_meta: freq_scale_train = 1
0.00.224.865 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.224.865 I llm_load_print_meta: rope_finetuned   = unknown
0.00.224.866 I llm_load_print_meta: ssm_d_conv       = 0
0.00.224.866 I llm_load_print_meta: ssm_d_inner      = 0
0.00.224.866 I llm_load_print_meta: ssm_d_state      = 0
0.00.224.867 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.224.867 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.224.867 I llm_load_print_meta: model type       = 2B
0.00.224.868 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.224.869 I llm_load_print_meta: model params     = 2.51 B
0.00.224.869 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.224.870 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.224.870 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.224.871 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.224.871 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.224.871 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.224.872 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.224.872 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.224.872 I llm_load_print_meta: max token length = 93
0.00.224.892 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.280.990 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.285.898 I llama_new_context_with_model: n_ctx      = 8192
0.00.285.904 I llama_new_context_with_model: n_batch    = 2048
0.00.285.905 I llama_new_context_with_model: n_ubatch   = 512
0.00.285.906 I llama_new_context_with_model: flash_attn = 0
0.00.285.908 I llama_new_context_with_model: freq_base  = 10000.0
0.00.285.909 I llama_new_context_with_model: freq_scale = 1
0.00.315.693 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.315.708 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.315.800 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.316.670 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.316.678 I llama_new_context_with_model: graph nodes  = 601
0.00.316.678 I llama_new_context_with_model: graph splits = 1
0.00.316.680 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.397.911 I main: llama threadpool init, n_threads = 4
0.00.397.923 I 
0.00.397.993 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.397.996 I 
0.00.398.033 I sampler seed: 848303002
0.00.398.042 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.398.045 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.398.046 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and puns with puns to make the riddle fun.

Who has the most livers in their body?

A) A baker
B) An accountant

0.02.038.200 I llama_perf_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6931.32 tokens per second)
0.02.038.205 I llama_perf_print:        load time =     173.03 ms
0.02.038.207 I llama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
0.02.038.209 I llama_perf_print:        eval time =    1621.74 ms /    32 runs   (   50.68 ms per token,    19.73 tokens per second)
0.02.038.210 I llama_perf_print:       total time =    1639.93 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.993s
user	8m14.674s
sys	0m6.903s
