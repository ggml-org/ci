+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4260 (40c6d79f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.383 I main: load the model and apply lora adapter, if any
0.00.020.665 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.674 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.682 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.690 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.693 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.698 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.698 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.699 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.699 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.700 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.700 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.704 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.704 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.705 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.705 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.706 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.171 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.352 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.358 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.359 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.359 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.360 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.361 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.361 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.364 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.365 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.366 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.367 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.367 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.371 I llama_model_loader: - type  f32:   37 tensors
0.00.130.372 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.673 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.131 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.742 I llm_load_vocab: special tokens cache size = 5
0.00.266.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.843 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.844 I llm_load_print_meta: arch             = gemma
0.00.266.845 I llm_load_print_meta: vocab type       = SPM
0.00.266.846 I llm_load_print_meta: n_vocab          = 256000
0.00.266.846 I llm_load_print_meta: n_merges         = 0
0.00.266.847 I llm_load_print_meta: vocab_only       = 0
0.00.266.847 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.847 I llm_load_print_meta: n_embd           = 2048
0.00.266.847 I llm_load_print_meta: n_layer          = 18
0.00.266.860 I llm_load_print_meta: n_head           = 8
0.00.266.861 I llm_load_print_meta: n_head_kv        = 1
0.00.266.861 I llm_load_print_meta: n_rot            = 256
0.00.266.862 I llm_load_print_meta: n_swa            = 0
0.00.266.862 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.862 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.863 I llm_load_print_meta: n_gqa            = 8
0.00.266.864 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.865 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.866 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.867 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.868 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.868 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.868 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.869 I llm_load_print_meta: n_ff             = 16384
0.00.266.870 I llm_load_print_meta: n_expert         = 0
0.00.266.870 I llm_load_print_meta: n_expert_used    = 0
0.00.266.870 I llm_load_print_meta: causal attn      = 1
0.00.266.870 I llm_load_print_meta: pooling type     = 0
0.00.266.871 I llm_load_print_meta: rope type        = 2
0.00.266.871 I llm_load_print_meta: rope scaling     = linear
0.00.266.873 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.873 I llm_load_print_meta: freq_scale_train = 1
0.00.266.874 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.874 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.875 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.875 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.875 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.875 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.876 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.876 I llm_load_print_meta: model type       = 2B
0.00.266.877 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.878 I llm_load_print_meta: model params     = 2.51 B
0.00.266.879 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.879 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.879 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.880 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.881 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.881 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.882 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.882 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.882 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.883 I llm_load_print_meta: max token length = 93
0.00.368.009 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.015 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.015 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.016 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.016 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.017 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.163 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.169 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.170 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.170 I llama_new_context_with_model: n_batch       = 2048
0.00.373.171 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.171 I llama_new_context_with_model: flash_attn    = 0
0.00.373.174 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.174 I llama_new_context_with_model: freq_scale    = 1
0.00.373.175 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.967 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.984 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.084 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.306 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.313 I llama_new_context_with_model: graph nodes  = 601
0.00.389.313 I llama_new_context_with_model: graph splits = 1
0.00.389.316 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.520 I main: llama threadpool init, n_threads = 4
0.00.474.536 I 
0.00.474.607 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.611 I 
0.00.474.656 I sampler seed: 4052945836
0.00.474.666 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.670 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.671 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.671 I 
 increasities and their consequences, particularly focusing on the specific case of the COVID-19 pandemic.

**Answer:**

**Introduction:**

A spike in

0.02.737.200 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6353.48 tokens per second)
0.02.737.202 I llama_perf_context_print:        load time =     474.12 ms
0.02.737.204 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.737.205 I llama_perf_context_print:        eval time =    2243.47 ms /    32 runs   (   70.11 ms per token,    14.26 tokens per second)
0.02.737.206 I llama_perf_context_print:       total time =    2262.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.575 I build: 4260 (40c6d79f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.778 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.021.413 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.428 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.435 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.436 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.439 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.440 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.441 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.441 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.442 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.442 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.446 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.447 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.448 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.449 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.450 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.809 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.301 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.165 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.170 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.171 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.172 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.172 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.174 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.174 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.177 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.177 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.178 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.178 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.179 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.181 I llama_model_loader: - type  f32:   37 tensors
0.00.131.182 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.921 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.925 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.577 I llm_load_vocab: special tokens cache size = 5
0.00.261.722 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.740 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.740 I llm_load_print_meta: arch             = gemma
0.00.261.741 I llm_load_print_meta: vocab type       = SPM
0.00.261.742 I llm_load_print_meta: n_vocab          = 256000
0.00.261.742 I llm_load_print_meta: n_merges         = 0
0.00.261.742 I llm_load_print_meta: vocab_only       = 0
0.00.261.743 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.743 I llm_load_print_meta: n_embd           = 2048
0.00.261.743 I llm_load_print_meta: n_layer          = 18
0.00.261.755 I llm_load_print_meta: n_head           = 8
0.00.261.756 I llm_load_print_meta: n_head_kv        = 1
0.00.261.756 I llm_load_print_meta: n_rot            = 256
0.00.261.756 I llm_load_print_meta: n_swa            = 0
0.00.261.756 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.757 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.758 I llm_load_print_meta: n_gqa            = 8
0.00.261.759 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.759 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.760 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.762 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.762 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.763 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.763 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.764 I llm_load_print_meta: n_ff             = 16384
0.00.261.764 I llm_load_print_meta: n_expert         = 0
0.00.261.765 I llm_load_print_meta: n_expert_used    = 0
0.00.261.765 I llm_load_print_meta: causal attn      = 1
0.00.261.765 I llm_load_print_meta: pooling type     = 0
0.00.261.765 I llm_load_print_meta: rope type        = 2
0.00.261.766 I llm_load_print_meta: rope scaling     = linear
0.00.261.767 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.768 I llm_load_print_meta: freq_scale_train = 1
0.00.261.768 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.769 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.769 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.770 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.770 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.770 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.770 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.771 I llm_load_print_meta: model type       = 2B
0.00.261.771 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.772 I llm_load_print_meta: model params     = 2.51 B
0.00.261.773 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.773 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.773 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.774 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.774 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.775 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.775 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.775 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.776 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.776 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.776 I llm_load_print_meta: max token length = 93
0.00.357.920 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.302 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.308 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.309 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.309 I llama_new_context_with_model: n_batch       = 2048
0.00.363.309 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.310 I llama_new_context_with_model: flash_attn    = 0
0.00.363.312 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.313 I llama_new_context_with_model: freq_scale    = 1
0.00.363.314 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.908 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.924 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.019 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.288 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.295 I llama_new_context_with_model: graph nodes  = 601
0.00.379.295 I llama_new_context_with_model: graph splits = 1
0.00.379.297 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.473 I main: llama threadpool init, n_threads = 4
0.00.462.489 I 
0.00.462.568 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.462.573 I 
0.00.462.627 I sampler seed: 364737707
0.00.462.639 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.642 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.643 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.645 I 
 seconally.

I am a large language model, trained by Google. I am capable of understanding and generating human-quality text in multiple languages.

**

0.02.647.037 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7093.72 tokens per second)
0.02.647.040 I llama_perf_context_print:        load time =     461.67 ms
0.02.647.041 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.647.042 I llama_perf_context_print:        eval time =    2165.75 ms /    32 runs   (   67.68 ms per token,    14.78 tokens per second)
0.02.647.043 I llama_perf_context_print:       total time =    2184.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.553 I build: 4260 (40c6d79f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.331 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.342 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.350 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.355 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.361 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.364 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.365 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.366 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.366 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.367 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.367 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.373 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.373 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.374 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.375 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.375 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.494 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.004 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.812 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.818 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.819 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.820 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.820 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.824 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.825 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.826 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.827 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.831 I llama_model_loader: - type  f32:   37 tensors
0.00.130.832 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.497 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.621 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.135 I llm_load_vocab: special tokens cache size = 5
0.00.260.176 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.190 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.191 I llm_load_print_meta: arch             = gemma
0.00.260.191 I llm_load_print_meta: vocab type       = SPM
0.00.260.192 I llm_load_print_meta: n_vocab          = 256000
0.00.260.192 I llm_load_print_meta: n_merges         = 0
0.00.260.193 I llm_load_print_meta: vocab_only       = 0
0.00.260.193 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.193 I llm_load_print_meta: n_embd           = 2048
0.00.260.194 I llm_load_print_meta: n_layer          = 18
0.00.260.206 I llm_load_print_meta: n_head           = 8
0.00.260.207 I llm_load_print_meta: n_head_kv        = 1
0.00.260.207 I llm_load_print_meta: n_rot            = 256
0.00.260.207 I llm_load_print_meta: n_swa            = 0
0.00.260.208 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.208 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.209 I llm_load_print_meta: n_gqa            = 8
0.00.260.210 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.211 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.212 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.214 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.214 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.215 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.215 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.216 I llm_load_print_meta: n_ff             = 16384
0.00.260.216 I llm_load_print_meta: n_expert         = 0
0.00.260.217 I llm_load_print_meta: n_expert_used    = 0
0.00.260.217 I llm_load_print_meta: causal attn      = 1
0.00.260.218 I llm_load_print_meta: pooling type     = 0
0.00.260.218 I llm_load_print_meta: rope type        = 2
0.00.260.219 I llm_load_print_meta: rope scaling     = linear
0.00.260.222 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.222 I llm_load_print_meta: freq_scale_train = 1
0.00.260.223 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.223 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.224 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.224 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.225 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.225 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.225 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.226 I llm_load_print_meta: model type       = 2B
0.00.260.229 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.230 I llm_load_print_meta: model params     = 2.51 B
0.00.260.231 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.231 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.231 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.232 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.232 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.233 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.233 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.234 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.234 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.252 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.253 I llm_load_print_meta: max token length = 93
0.00.335.077 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.335.085 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.335.086 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.335.086 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.335.087 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.335.088 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.340.297 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.302 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.303 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.303 I llama_new_context_with_model: n_batch       = 2048
0.00.340.303 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.304 I llama_new_context_with_model: flash_attn    = 0
0.00.340.306 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.307 I llama_new_context_with_model: freq_scale    = 1
0.00.340.308 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.809 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.822 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.913 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.225 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.229 I llama_new_context_with_model: graph nodes  = 601
0.00.356.229 I llama_new_context_with_model: graph splits = 1
0.00.356.231 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.074 I main: llama threadpool init, n_threads = 4
0.00.443.090 I 
0.00.443.162 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.443.165 I 
0.00.443.208 I sampler seed: 4106272967
0.00.443.219 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.223 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.225 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.225 I 
 increasities

I am unable to generate a response that contains sexually suggestive or inappropriate content. [end of text]


0.01.793.016 I llama_perf_sampler_print:    sampling time =       3.05 ms /    20 runs   (    0.15 ms per token,  6563.83 tokens per second)
0.01.793.018 I llama_perf_context_print:        load time =     442.30 ms
0.01.793.019 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.793.021 I llama_perf_context_print:        eval time =    1337.86 ms /    19 runs   (   70.41 ms per token,    14.20 tokens per second)
0.01.793.021 I llama_perf_context_print:       total time =    1349.95 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.539 I build: 4260 (40c6d79f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.232 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.241 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.249 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.263 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.265 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.266 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.271 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.272 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.273 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.274 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.280 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.314 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.213 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.219 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.220 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.220 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.221 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.221 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.222 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.224 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.224 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.225 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.225 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.226 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.229 I llama_model_loader: - type  f32:   37 tensors
0.00.132.230 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.937 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.097 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.599 I llm_load_vocab: special tokens cache size = 5
0.00.265.387 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.403 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.404 I llm_load_print_meta: arch             = gemma
0.00.265.405 I llm_load_print_meta: vocab type       = SPM
0.00.265.406 I llm_load_print_meta: n_vocab          = 256000
0.00.265.406 I llm_load_print_meta: n_merges         = 0
0.00.265.406 I llm_load_print_meta: vocab_only       = 0
0.00.265.407 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.407 I llm_load_print_meta: n_embd           = 2048
0.00.265.407 I llm_load_print_meta: n_layer          = 18
0.00.265.418 I llm_load_print_meta: n_head           = 8
0.00.265.419 I llm_load_print_meta: n_head_kv        = 1
0.00.265.419 I llm_load_print_meta: n_rot            = 256
0.00.265.420 I llm_load_print_meta: n_swa            = 0
0.00.265.420 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.420 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.421 I llm_load_print_meta: n_gqa            = 8
0.00.265.422 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.423 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.424 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.425 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.426 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.426 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.427 I llm_load_print_meta: n_ff             = 16384
0.00.265.427 I llm_load_print_meta: n_expert         = 0
0.00.265.428 I llm_load_print_meta: n_expert_used    = 0
0.00.265.428 I llm_load_print_meta: causal attn      = 1
0.00.265.428 I llm_load_print_meta: pooling type     = 0
0.00.265.429 I llm_load_print_meta: rope type        = 2
0.00.265.429 I llm_load_print_meta: rope scaling     = linear
0.00.265.430 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.431 I llm_load_print_meta: freq_scale_train = 1
0.00.265.431 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.432 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.432 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.432 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.433 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.433 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.433 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.434 I llm_load_print_meta: model type       = 2B
0.00.265.434 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.435 I llm_load_print_meta: model params     = 2.51 B
0.00.265.436 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.436 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.437 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.437 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.437 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.438 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.438 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.438 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.439 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.439 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.440 I llm_load_print_meta: max token length = 93
0.00.337.379 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.386 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.607 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.613 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.613 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.614 I llama_new_context_with_model: n_batch       = 2048
0.00.342.614 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.614 I llama_new_context_with_model: flash_attn    = 0
0.00.342.616 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.617 I llama_new_context_with_model: freq_scale    = 1
0.00.342.618 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.717 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.729 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.821 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.077 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.082 I llama_new_context_with_model: graph nodes  = 601
0.00.358.082 I llama_new_context_with_model: graph splits = 1
0.00.358.085 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.597 I main: llama threadpool init, n_threads = 4
0.00.445.612 I 
0.00.445.684 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.687 I 
0.00.445.729 I sampler seed: 2500889292
0.00.445.741 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.744 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.744 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.744 I 
 increasels, and the enigmatic Whisperwind!

The Whispering Spire, a majestic landmark shrouded in mystery, loomed large over the city. Its jagged rock

0.02.848.817 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6622.52 tokens per second)
0.02.848.819 I llama_perf_context_print:        load time =     444.84 ms
0.02.848.820 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.848.821 I llama_perf_context_print:        eval time =    2383.18 ms /    32 runs   (   74.47 ms per token,    13.43 tokens per second)
0.02.848.822 I llama_perf_context_print:       total time =    2403.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.694s
user	0m35.613s
sys	0m9.378s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4260 (40c6d79f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40197.18 ms
main:    total time = 40197.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.550 I build: 4260 (40c6d79f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.400 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.410 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.419 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.423 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.427 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.431 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.432 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.432 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.433 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.433 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.434 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.437 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.437 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.438 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.438 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.439 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.942 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.627 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.554 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.560 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.561 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.562 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.562 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.563 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.564 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.566 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.566 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.567 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.568 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.569 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.572 I llama_model_loader: - type  f32:   37 tensors
0.00.130.573 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.573 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.833 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.076 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.590 I llm_load_vocab: special tokens cache size = 5
0.00.259.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.436 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.437 I llm_load_print_meta: arch             = gemma
0.00.259.437 I llm_load_print_meta: vocab type       = SPM
0.00.259.438 I llm_load_print_meta: n_vocab          = 256000
0.00.259.439 I llm_load_print_meta: n_merges         = 0
0.00.259.439 I llm_load_print_meta: vocab_only       = 0
0.00.259.440 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.440 I llm_load_print_meta: n_embd           = 2048
0.00.259.440 I llm_load_print_meta: n_layer          = 18
0.00.259.452 I llm_load_print_meta: n_head           = 8
0.00.259.453 I llm_load_print_meta: n_head_kv        = 1
0.00.259.453 I llm_load_print_meta: n_rot            = 256
0.00.259.453 I llm_load_print_meta: n_swa            = 0
0.00.259.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.454 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.455 I llm_load_print_meta: n_gqa            = 8
0.00.259.456 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.457 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.458 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.459 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.460 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.460 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.460 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.461 I llm_load_print_meta: n_ff             = 16384
0.00.259.462 I llm_load_print_meta: n_expert         = 0
0.00.259.462 I llm_load_print_meta: n_expert_used    = 0
0.00.259.462 I llm_load_print_meta: causal attn      = 1
0.00.259.462 I llm_load_print_meta: pooling type     = 0
0.00.259.463 I llm_load_print_meta: rope type        = 2
0.00.259.463 I llm_load_print_meta: rope scaling     = linear
0.00.259.464 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.465 I llm_load_print_meta: freq_scale_train = 1
0.00.259.465 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.466 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.466 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.466 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.467 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.467 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.467 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.468 I llm_load_print_meta: model type       = 2B
0.00.259.468 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.469 I llm_load_print_meta: model params     = 2.51 B
0.00.259.470 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.470 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.470 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.471 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.472 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.472 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.472 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.473 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.473 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.474 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.474 I llm_load_print_meta: max token length = 93
0.00.320.473 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.320.479 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.320.479 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.320.480 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.320.481 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.320.481 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.325.699 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.705 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.705 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.706 I llama_new_context_with_model: n_batch       = 2048
0.00.325.706 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.707 I llama_new_context_with_model: flash_attn    = 0
0.00.325.709 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.710 I llama_new_context_with_model: freq_scale    = 1
0.00.325.711 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.301 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.315 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.407 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.611 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.617 I llama_new_context_with_model: graph nodes  = 601
0.00.341.618 I llama_new_context_with_model: graph splits = 1
0.00.341.620 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.062 I main: llama threadpool init, n_threads = 4
0.00.417.080 I 
0.00.417.156 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.417.159 I 
0.00.417.206 I sampler seed: 2837588441
0.00.417.217 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.222 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.222 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.222 I 
 increasities of the Milky Way by the Large Magellanic Cloud and the Small Magellanic Cloud. [end of text]


0.01.497.392 I llama_perf_sampler_print:    sampling time =       3.45 ms /    23 runs   (    0.15 ms per token,  6662.80 tokens per second)
0.01.497.396 I llama_perf_context_print:        load time =     416.29 ms
0.01.497.397 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.497.399 I llama_perf_context_print:        eval time =    1066.98 ms /    22 runs   (   48.50 ms per token,    20.62 tokens per second)
0.01.497.400 I llama_perf_context_print:       total time =    1080.34 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4260 (40c6d79f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40186.55 ms
main:    total time = 40186.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.206 I build: 4260 (40c6d79f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.422 I main: llama backend init
0.00.000.428 I main: load the model and apply lora adapter, if any
0.00.020.777 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.791 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.797 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.798 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.802 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.805 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.806 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.807 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.807 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.808 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.811 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.812 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.812 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.812 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.813 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.538 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.679 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.818 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.824 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.825 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.825 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.826 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.827 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.827 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.830 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.831 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.834 I llama_model_loader: - type  f32:   37 tensors
0.00.131.835 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.835 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.917 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.343 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.036 I llm_load_vocab: special tokens cache size = 5
0.00.270.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.292 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.293 I llm_load_print_meta: arch             = gemma
0.00.270.293 I llm_load_print_meta: vocab type       = SPM
0.00.270.294 I llm_load_print_meta: n_vocab          = 256000
0.00.270.295 I llm_load_print_meta: n_merges         = 0
0.00.270.295 I llm_load_print_meta: vocab_only       = 0
0.00.270.296 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.296 I llm_load_print_meta: n_embd           = 2048
0.00.270.296 I llm_load_print_meta: n_layer          = 18
0.00.270.310 I llm_load_print_meta: n_head           = 8
0.00.270.311 I llm_load_print_meta: n_head_kv        = 1
0.00.270.311 I llm_load_print_meta: n_rot            = 256
0.00.270.311 I llm_load_print_meta: n_swa            = 0
0.00.270.312 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.312 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.313 I llm_load_print_meta: n_gqa            = 8
0.00.270.314 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.315 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.316 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.317 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.317 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.318 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.318 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.319 I llm_load_print_meta: n_ff             = 16384
0.00.270.319 I llm_load_print_meta: n_expert         = 0
0.00.270.320 I llm_load_print_meta: n_expert_used    = 0
0.00.270.320 I llm_load_print_meta: causal attn      = 1
0.00.270.320 I llm_load_print_meta: pooling type     = 0
0.00.270.321 I llm_load_print_meta: rope type        = 2
0.00.270.321 I llm_load_print_meta: rope scaling     = linear
0.00.270.322 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.323 I llm_load_print_meta: freq_scale_train = 1
0.00.270.323 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.323 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.324 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.324 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.324 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.324 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.325 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.325 I llm_load_print_meta: model type       = 2B
0.00.270.326 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.326 I llm_load_print_meta: model params     = 2.51 B
0.00.270.327 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.327 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.328 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.328 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.329 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.329 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.330 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.330 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.330 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.331 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.331 I llm_load_print_meta: max token length = 93
0.00.324.972 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.064 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.070 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.070 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.070 I llama_new_context_with_model: n_batch       = 2048
0.00.330.071 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.071 I llama_new_context_with_model: flash_attn    = 0
0.00.330.074 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.074 I llama_new_context_with_model: freq_scale    = 1
0.00.330.075 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.613 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.626 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.716 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.998 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.003 I llama_new_context_with_model: graph nodes  = 601
0.00.346.004 I llama_new_context_with_model: graph splits = 1
0.00.346.006 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.760 I main: llama threadpool init, n_threads = 4
0.00.419.776 I 
0.00.419.846 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.849 I 
0.00.419.898 I sampler seed: 2733075728
0.00.419.909 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.921 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.924 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.924 I 
 seconded, and a lone survivor huddled in the dimly lit cave. They huddled together for warmth, whispering in hushed voices.

The silence was thick with unspoken

0.01.973.966 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6447.83 tokens per second)
0.01.973.969 I llama_perf_context_print:        load time =     419.31 ms
0.01.973.971 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.973.973 I llama_perf_context_print:        eval time =    1535.13 ms /    32 runs   (   47.97 ms per token,    20.85 tokens per second)
0.01.973.974 I llama_perf_context_print:       total time =    1554.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.675s
user	10m21.760s
sys	0m6.889s
