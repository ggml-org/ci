+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 4313 (4064c0e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.610 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.620 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.627 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.632 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.633 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.636 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.637 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.638 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.639 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.640 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.641 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.646 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.646 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.647 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.648 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.648 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.449 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.082 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.939 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.945 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.945 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.946 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.946 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.948 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.948 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.950 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.951 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.952 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.953 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.954 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.957 I llama_model_loader: - type  f32:   37 tensors
0.00.131.958 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.754 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.294 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.905 I llm_load_vocab: special tokens cache size = 5
0.00.276.503 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.518 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.519 I llm_load_print_meta: arch             = gemma
0.00.276.519 I llm_load_print_meta: vocab type       = SPM
0.00.276.520 I llm_load_print_meta: n_vocab          = 256000
0.00.276.520 I llm_load_print_meta: n_merges         = 0
0.00.276.521 I llm_load_print_meta: vocab_only       = 0
0.00.276.521 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.521 I llm_load_print_meta: n_embd           = 2048
0.00.276.521 I llm_load_print_meta: n_layer          = 18
0.00.276.533 I llm_load_print_meta: n_head           = 8
0.00.276.534 I llm_load_print_meta: n_head_kv        = 1
0.00.276.534 I llm_load_print_meta: n_rot            = 256
0.00.276.535 I llm_load_print_meta: n_swa            = 0
0.00.276.535 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.535 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.536 I llm_load_print_meta: n_gqa            = 8
0.00.276.537 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.538 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.539 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.540 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.541 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.541 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.541 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.542 I llm_load_print_meta: n_ff             = 16384
0.00.276.542 I llm_load_print_meta: n_expert         = 0
0.00.276.543 I llm_load_print_meta: n_expert_used    = 0
0.00.276.543 I llm_load_print_meta: causal attn      = 1
0.00.276.543 I llm_load_print_meta: pooling type     = 0
0.00.276.544 I llm_load_print_meta: rope type        = 2
0.00.276.544 I llm_load_print_meta: rope scaling     = linear
0.00.276.546 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.546 I llm_load_print_meta: freq_scale_train = 1
0.00.276.547 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.547 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.547 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.548 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.548 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.548 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.549 I llm_load_print_meta: model type       = 2B
0.00.276.549 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.550 I llm_load_print_meta: model params     = 2.51 B
0.00.276.551 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.551 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.552 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.552 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.553 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.553 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.553 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.554 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.554 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.555 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.555 I llm_load_print_meta: max token length = 93
0.00.377.256 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.377.265 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.377.266 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.377.266 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.377.267 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.377.268 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.521 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.539 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.539 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.540 I llama_new_context_with_model: n_batch       = 2048
0.00.382.540 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.541 I llama_new_context_with_model: flash_attn    = 0
0.00.382.543 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.544 I llama_new_context_with_model: freq_scale    = 1
0.00.382.545 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.397.008 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.025 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.114 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.369 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.376 I llama_new_context_with_model: graph nodes  = 601
0.00.398.376 I llama_new_context_with_model: graph splits = 1
0.00.398.378 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.373 I main: llama threadpool init, n_threads = 4
0.00.484.388 I 
0.00.484.462 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.465 I 
0.00.484.506 I sampler seed: 1703903982
0.00.484.517 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.524 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.527 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.527 I 
 increasities, such as the "Great Leap Forward" in China, often lead to unintended consequences. What are the potential unintended consequences of large-scale economic interventions

0.02.760.913 I llama_perf_sampler_print:    sampling time =       5.78 ms /    33 runs   (    0.18 ms per token,  5706.38 tokens per second)
0.02.760.915 I llama_perf_context_print:        load time =     483.62 ms
0.02.760.916 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.760.918 I llama_perf_context_print:        eval time =    2255.76 ms /    32 runs   (   70.49 ms per token,    14.19 tokens per second)
0.02.760.918 I llama_perf_context_print:       total time =    2276.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.180 I build: 4313 (4064c0e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.382 I main: llama backend init
0.00.000.389 I main: load the model and apply lora adapter, if any
0.00.020.816 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.831 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.843 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.844 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.848 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.849 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.850 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.851 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.853 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.859 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.860 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.861 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.861 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.862 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.198 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.867 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.077 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.084 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.085 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.086 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.087 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.088 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.089 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.093 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.094 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.095 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.096 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.097 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.100 I llama_model_loader: - type  f32:   37 tensors
0.00.132.101 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.299 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.841 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.357 I llm_load_vocab: special tokens cache size = 5
0.00.263.865 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.882 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.883 I llm_load_print_meta: arch             = gemma
0.00.263.884 I llm_load_print_meta: vocab type       = SPM
0.00.263.885 I llm_load_print_meta: n_vocab          = 256000
0.00.263.885 I llm_load_print_meta: n_merges         = 0
0.00.263.885 I llm_load_print_meta: vocab_only       = 0
0.00.263.886 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.886 I llm_load_print_meta: n_embd           = 2048
0.00.263.887 I llm_load_print_meta: n_layer          = 18
0.00.263.907 I llm_load_print_meta: n_head           = 8
0.00.263.908 I llm_load_print_meta: n_head_kv        = 1
0.00.263.909 I llm_load_print_meta: n_rot            = 256
0.00.263.910 I llm_load_print_meta: n_swa            = 0
0.00.263.910 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.911 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.913 I llm_load_print_meta: n_gqa            = 8
0.00.263.914 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.915 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.916 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.918 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.919 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.919 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.922 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.923 I llm_load_print_meta: n_ff             = 16384
0.00.263.923 I llm_load_print_meta: n_expert         = 0
0.00.263.924 I llm_load_print_meta: n_expert_used    = 0
0.00.263.924 I llm_load_print_meta: causal attn      = 1
0.00.263.924 I llm_load_print_meta: pooling type     = 0
0.00.263.924 I llm_load_print_meta: rope type        = 2
0.00.263.925 I llm_load_print_meta: rope scaling     = linear
0.00.263.926 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.927 I llm_load_print_meta: freq_scale_train = 1
0.00.263.927 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.928 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.929 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.929 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.929 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.930 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.930 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.931 I llm_load_print_meta: model type       = 2B
0.00.263.931 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.932 I llm_load_print_meta: model params     = 2.51 B
0.00.263.933 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.934 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.934 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.935 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.935 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.936 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.937 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.937 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.937 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.938 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.938 I llm_load_print_meta: max token length = 93
0.00.358.885 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.046 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.050 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.051 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.051 I llama_new_context_with_model: n_batch       = 2048
0.00.364.052 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.052 I llama_new_context_with_model: flash_attn    = 0
0.00.364.055 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.056 I llama_new_context_with_model: freq_scale    = 1
0.00.364.056 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.080 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.095 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.192 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.472 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.476 I llama_new_context_with_model: graph nodes  = 601
0.00.380.477 I llama_new_context_with_model: graph splits = 1
0.00.380.479 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.016 I main: llama threadpool init, n_threads = 4
0.00.462.031 I 
0.00.462.104 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.107 I 
0.00.462.149 I sampler seed: 1142322532
0.00.462.160 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.172 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.175 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.176 I 
 increasities by the ancient Greeks and Romans, and their modern descendants.

**Answer:**

**Ancient Greek and Roman Philosophy**

The ideas and principles of

0.02.671.448 I llama_perf_sampler_print:    sampling time =       5.47 ms /    33 runs   (    0.17 ms per token,  6030.70 tokens per second)
0.02.671.450 I llama_perf_context_print:        load time =     461.61 ms
0.02.671.452 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.671.453 I llama_perf_context_print:        eval time =    2188.91 ms /    32 runs   (   68.40 ms per token,    14.62 tokens per second)
0.02.671.454 I llama_perf_context_print:       total time =    2209.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.189 I build: 4313 (4064c0e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.397 I main: llama backend init
0.00.000.405 I main: load the model and apply lora adapter, if any
0.00.022.205 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.216 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.223 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.232 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.236 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.240 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.241 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.242 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.242 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.243 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.243 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.248 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.249 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.249 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.250 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.250 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.512 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.376 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.159 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.165 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.166 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.167 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.168 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.169 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.169 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.172 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.173 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.174 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.175 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.175 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.179 I llama_model_loader: - type  f32:   37 tensors
0.00.135.181 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.760 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.987 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.886 I llm_load_vocab: special tokens cache size = 5
0.00.277.404 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.426 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.427 I llm_load_print_meta: arch             = gemma
0.00.277.428 I llm_load_print_meta: vocab type       = SPM
0.00.277.429 I llm_load_print_meta: n_vocab          = 256000
0.00.277.430 I llm_load_print_meta: n_merges         = 0
0.00.277.430 I llm_load_print_meta: vocab_only       = 0
0.00.277.430 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.431 I llm_load_print_meta: n_embd           = 2048
0.00.277.431 I llm_load_print_meta: n_layer          = 18
0.00.277.443 I llm_load_print_meta: n_head           = 8
0.00.277.444 I llm_load_print_meta: n_head_kv        = 1
0.00.277.444 I llm_load_print_meta: n_rot            = 256
0.00.277.445 I llm_load_print_meta: n_swa            = 0
0.00.277.445 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.446 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.447 I llm_load_print_meta: n_gqa            = 8
0.00.277.448 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.449 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.451 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.451 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.451 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.452 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.453 I llm_load_print_meta: n_ff             = 16384
0.00.277.453 I llm_load_print_meta: n_expert         = 0
0.00.277.453 I llm_load_print_meta: n_expert_used    = 0
0.00.277.454 I llm_load_print_meta: causal attn      = 1
0.00.277.454 I llm_load_print_meta: pooling type     = 0
0.00.277.455 I llm_load_print_meta: rope type        = 2
0.00.277.455 I llm_load_print_meta: rope scaling     = linear
0.00.277.457 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.457 I llm_load_print_meta: freq_scale_train = 1
0.00.277.457 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.458 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.458 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.458 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.459 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.459 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.459 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.460 I llm_load_print_meta: model type       = 2B
0.00.277.460 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.461 I llm_load_print_meta: model params     = 2.51 B
0.00.277.462 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.462 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.463 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.464 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.464 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.464 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.465 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.466 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.466 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.467 I llm_load_print_meta: max token length = 93
0.00.355.179 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.355.184 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.185 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.355.186 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.355.186 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.187 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.360.306 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.313 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.314 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.314 I llama_new_context_with_model: n_batch       = 2048
0.00.360.314 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.315 I llama_new_context_with_model: flash_attn    = 0
0.00.360.317 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.318 I llama_new_context_with_model: freq_scale    = 1
0.00.360.319 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.597 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.615 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.708 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.991 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.997 I llama_new_context_with_model: graph nodes  = 601
0.00.375.997 I llama_new_context_with_model: graph splits = 1
0.00.375.999 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.490 I main: llama threadpool init, n_threads = 4
0.00.461.507 I 
0.00.461.584 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.587 I 
0.00.461.630 I sampler seed: 2636301604
0.00.461.641 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.644 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.645 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.645 I 
 increasities in the anime "Love Live! School Idol Project."

While I understand the context and premise of the anime, I am unable to comprehend the meaning

0.02.752.086 I llama_perf_sampler_print:    sampling time =       5.47 ms /    33 runs   (    0.17 ms per token,  6030.70 tokens per second)
0.02.752.089 I llama_perf_context_print:        load time =     461.07 ms
0.02.752.090 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.752.091 I llama_perf_context_print:        eval time =    2270.76 ms /    32 runs   (   70.96 ms per token,    14.09 tokens per second)
0.02.752.092 I llama_perf_context_print:       total time =    2290.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.545 I build: 4313 (4064c0e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.020.936 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.946 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.954 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.963 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.964 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.968 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.969 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.969 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.970 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.970 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.972 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.977 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.978 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.980 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.980 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.981 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.081 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.451 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.324 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.331 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.332 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.333 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.335 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.336 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.340 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.341 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.342 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.342 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.343 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.347 I llama_model_loader: - type  f32:   37 tensors
0.00.131.348 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.487 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.156 I llm_load_vocab: special tokens cache size = 5
0.00.269.888 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.904 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.904 I llm_load_print_meta: arch             = gemma
0.00.269.905 I llm_load_print_meta: vocab type       = SPM
0.00.269.906 I llm_load_print_meta: n_vocab          = 256000
0.00.269.906 I llm_load_print_meta: n_merges         = 0
0.00.269.907 I llm_load_print_meta: vocab_only       = 0
0.00.269.907 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.907 I llm_load_print_meta: n_embd           = 2048
0.00.269.907 I llm_load_print_meta: n_layer          = 18
0.00.269.918 I llm_load_print_meta: n_head           = 8
0.00.269.919 I llm_load_print_meta: n_head_kv        = 1
0.00.269.919 I llm_load_print_meta: n_rot            = 256
0.00.269.920 I llm_load_print_meta: n_swa            = 0
0.00.269.920 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.921 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.921 I llm_load_print_meta: n_gqa            = 8
0.00.269.922 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.923 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.924 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.926 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.927 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.927 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.927 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.928 I llm_load_print_meta: n_ff             = 16384
0.00.269.929 I llm_load_print_meta: n_expert         = 0
0.00.269.929 I llm_load_print_meta: n_expert_used    = 0
0.00.269.930 I llm_load_print_meta: causal attn      = 1
0.00.269.930 I llm_load_print_meta: pooling type     = 0
0.00.269.930 I llm_load_print_meta: rope type        = 2
0.00.269.930 I llm_load_print_meta: rope scaling     = linear
0.00.269.932 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.932 I llm_load_print_meta: freq_scale_train = 1
0.00.269.933 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.933 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.933 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.934 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.934 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.934 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.934 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.935 I llm_load_print_meta: model type       = 2B
0.00.269.935 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.936 I llm_load_print_meta: model params     = 2.51 B
0.00.269.937 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.937 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.938 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.938 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.938 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.939 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.939 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.939 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.939 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.940 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.940 I llm_load_print_meta: max token length = 93
0.00.340.784 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.340.792 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.345.901 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.907 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.908 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.908 I llama_new_context_with_model: n_batch       = 2048
0.00.345.908 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.909 I llama_new_context_with_model: flash_attn    = 0
0.00.345.911 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.912 I llama_new_context_with_model: freq_scale    = 1
0.00.345.913 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.259 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.273 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.364 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.641 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.647 I llama_new_context_with_model: graph nodes  = 601
0.00.361.648 I llama_new_context_with_model: graph splits = 1
0.00.361.650 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.198 I main: llama threadpool init, n_threads = 4
0.00.451.217 I 
0.00.451.313 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.317 I 
0.00.451.372 I sampler seed: 2932344998
0.00.451.387 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.400 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.402 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.403 I 
 increasively.

I'm feeling overwhelmed. I need help.

**Solution:**

* Identify your stressors and prioritize them.
* Seek professional help

0.02.906.292 I llama_perf_sampler_print:    sampling time =       6.10 ms /    33 runs   (    0.18 ms per token,  5408.95 tokens per second)
0.02.906.295 I llama_perf_context_print:        load time =     450.42 ms
0.02.906.296 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.906.297 I llama_perf_context_print:        eval time =    2434.31 ms /    32 runs   (   76.07 ms per token,    13.15 tokens per second)
0.02.906.298 I llama_perf_context_print:       total time =    2455.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.824s
user	0m39.942s
sys	0m9.397s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4313 (4064c0e3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40242.62 ms
main:    total time = 40242.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.184 I build: 4313 (4064c0e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.383 I main: llama backend init
0.00.000.390 I main: load the model and apply lora adapter, if any
0.00.020.678 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.690 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.699 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.707 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.711 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.714 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.715 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.716 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.716 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.717 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.722 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.722 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.723 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.724 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.724 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.987 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.900 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.909 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.910 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.910 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.911 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.912 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.913 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.916 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.916 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.917 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.917 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.918 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.921 I llama_model_loader: - type  f32:   37 tensors
0.00.130.922 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.923 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.336 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.988 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.592 I llm_load_vocab: special tokens cache size = 5
0.00.276.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.290 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.290 I llm_load_print_meta: arch             = gemma
0.00.276.291 I llm_load_print_meta: vocab type       = SPM
0.00.276.292 I llm_load_print_meta: n_vocab          = 256000
0.00.276.292 I llm_load_print_meta: n_merges         = 0
0.00.276.292 I llm_load_print_meta: vocab_only       = 0
0.00.276.293 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.302 I llm_load_print_meta: n_embd           = 2048
0.00.276.302 I llm_load_print_meta: n_layer          = 18
0.00.276.313 I llm_load_print_meta: n_head           = 8
0.00.276.314 I llm_load_print_meta: n_head_kv        = 1
0.00.276.315 I llm_load_print_meta: n_rot            = 256
0.00.276.315 I llm_load_print_meta: n_swa            = 0
0.00.276.316 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.316 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.317 I llm_load_print_meta: n_gqa            = 8
0.00.276.318 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.319 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.320 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.322 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.322 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.322 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.323 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.324 I llm_load_print_meta: n_ff             = 16384
0.00.276.324 I llm_load_print_meta: n_expert         = 0
0.00.276.324 I llm_load_print_meta: n_expert_used    = 0
0.00.276.325 I llm_load_print_meta: causal attn      = 1
0.00.276.325 I llm_load_print_meta: pooling type     = 0
0.00.276.325 I llm_load_print_meta: rope type        = 2
0.00.276.326 I llm_load_print_meta: rope scaling     = linear
0.00.276.327 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.328 I llm_load_print_meta: freq_scale_train = 1
0.00.276.328 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.328 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.329 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.329 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.329 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.330 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.330 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.331 I llm_load_print_meta: model type       = 2B
0.00.276.331 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.333 I llm_load_print_meta: model params     = 2.51 B
0.00.276.333 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.334 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.334 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.334 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.335 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.335 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.336 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.336 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.336 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.337 I llm_load_print_meta: max token length = 93
0.00.335.576 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.335.583 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.335.584 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.335.585 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.335.585 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.335.586 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.684 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.691 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.692 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.692 I llama_new_context_with_model: n_batch       = 2048
0.00.340.692 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.693 I llama_new_context_with_model: flash_attn    = 0
0.00.340.696 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.696 I llama_new_context_with_model: freq_scale    = 1
0.00.340.698 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.313 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.327 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.430 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.719 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.726 I llama_new_context_with_model: graph nodes  = 601
0.00.356.726 I llama_new_context_with_model: graph splits = 1
0.00.356.729 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.632 I main: llama threadpool init, n_threads = 4
0.00.434.647 I 
0.00.434.725 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.434.728 I 
0.00.434.773 I sampler seed: 1706919023
0.00.434.785 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.788 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.789 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.789 I 
 increasities in the following passage:

"In the realm of artificial intelligence, the field of machine learning has witnessed remarkable advancements in recent years. From the development

0.02.059.919 I llama_perf_sampler_print:    sampling time =       5.62 ms /    33 runs   (    0.17 ms per token,  5866.67 tokens per second)
0.02.059.921 I llama_perf_context_print:        load time =     434.23 ms
0.02.059.923 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.059.924 I llama_perf_context_print:        eval time =    1605.44 ms /    32 runs   (   50.17 ms per token,    19.93 tokens per second)
0.02.059.925 I llama_perf_context_print:       total time =    1625.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4313 (4064c0e3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40205.70 ms
main:    total time = 40205.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.557 I build: 4313 (4064c0e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.168 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.185 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.192 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.193 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.199 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.200 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.201 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.202 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.203 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.203 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.208 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.209 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.209 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.210 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.211 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.760 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.554 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.416 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.423 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.424 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.425 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.426 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.427 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.428 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.432 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.436 I llama_model_loader: - type  f32:   37 tensors
0.00.131.438 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.438 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.766 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.932 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.533 I llm_load_vocab: special tokens cache size = 5
0.00.279.257 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.275 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.276 I llm_load_print_meta: arch             = gemma
0.00.279.276 I llm_load_print_meta: vocab type       = SPM
0.00.279.277 I llm_load_print_meta: n_vocab          = 256000
0.00.279.278 I llm_load_print_meta: n_merges         = 0
0.00.279.278 I llm_load_print_meta: vocab_only       = 0
0.00.279.278 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.279 I llm_load_print_meta: n_embd           = 2048
0.00.279.279 I llm_load_print_meta: n_layer          = 18
0.00.279.291 I llm_load_print_meta: n_head           = 8
0.00.279.292 I llm_load_print_meta: n_head_kv        = 1
0.00.279.292 I llm_load_print_meta: n_rot            = 256
0.00.279.292 I llm_load_print_meta: n_swa            = 0
0.00.279.293 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.293 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.294 I llm_load_print_meta: n_gqa            = 8
0.00.279.295 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.296 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.297 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.298 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.299 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.299 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.300 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.301 I llm_load_print_meta: n_ff             = 16384
0.00.279.301 I llm_load_print_meta: n_expert         = 0
0.00.279.301 I llm_load_print_meta: n_expert_used    = 0
0.00.279.301 I llm_load_print_meta: causal attn      = 1
0.00.279.302 I llm_load_print_meta: pooling type     = 0
0.00.279.302 I llm_load_print_meta: rope type        = 2
0.00.279.302 I llm_load_print_meta: rope scaling     = linear
0.00.279.304 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.305 I llm_load_print_meta: freq_scale_train = 1
0.00.279.306 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.306 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.306 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.307 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.307 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.307 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.307 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.308 I llm_load_print_meta: model type       = 2B
0.00.279.308 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.310 I llm_load_print_meta: model params     = 2.51 B
0.00.279.310 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.311 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.311 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.311 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.312 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.312 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.313 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.313 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.313 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.314 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.314 I llm_load_print_meta: max token length = 93
0.00.337.783 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.342.978 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.983 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.984 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.984 I llama_new_context_with_model: n_batch       = 2048
0.00.342.985 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.986 I llama_new_context_with_model: flash_attn    = 0
0.00.342.988 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.989 I llama_new_context_with_model: freq_scale    = 1
0.00.342.990 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.770 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.784 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.880 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.104 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.111 I llama_new_context_with_model: graph nodes  = 601
0.00.360.111 I llama_new_context_with_model: graph splits = 1
0.00.360.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.872 I main: llama threadpool init, n_threads = 4
0.00.437.891 I 
0.00.437.994 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.437.997 I 
0.00.438.047 I sampler seed: 1662014865
0.00.438.058 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.062 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.063 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.065 I 
 increasities! [end of text]


0.00.643.027 I llama_perf_sampler_print:    sampling time =       0.70 ms /     5 runs   (    0.14 ms per token,  7194.24 tokens per second)
0.00.643.030 I llama_perf_context_print:        load time =     437.08 ms
0.00.643.031 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.643.032 I llama_perf_context_print:        eval time =     201.46 ms /     4 runs   (   50.36 ms per token,    19.86 tokens per second)
0.00.643.033 I llama_perf_context_print:       total time =     205.16 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.979s
user	10m18.978s
sys	0m7.116s
