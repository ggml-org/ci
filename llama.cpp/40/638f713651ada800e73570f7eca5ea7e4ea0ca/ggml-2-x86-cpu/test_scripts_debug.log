+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.635 I build: 3758 (40638f71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.024.988 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.273 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.284 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.286 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.289 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.291 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.292 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.293 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.294 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.295 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.302 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.303 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.304 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.305 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.309 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.263 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.045 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.180 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.190 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.191 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.192 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.193 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.194 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.195 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.198 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.199 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.200 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.200 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.202 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.211 I llama_model_loader: - type  f32:   37 tensors
0.00.197.216 I llama_model_loader: - type q8_0:  127 tensors
0.00.500.657 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.720 I llm_load_vocab: special tokens cache size = 5
0.00.560.554 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.560.614 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.560.615 I llm_load_print_meta: arch             = gemma
0.00.560.615 I llm_load_print_meta: vocab type       = SPM
0.00.560.616 I llm_load_print_meta: n_vocab          = 256000
0.00.560.619 I llm_load_print_meta: n_merges         = 0
0.00.560.619 I llm_load_print_meta: vocab_only       = 0
0.00.560.620 I llm_load_print_meta: n_ctx_train      = 8192
0.00.560.620 I llm_load_print_meta: n_embd           = 2048
0.00.560.620 I llm_load_print_meta: n_layer          = 18
0.00.560.655 I llm_load_print_meta: n_head           = 8
0.00.560.662 I llm_load_print_meta: n_head_kv        = 1
0.00.560.663 I llm_load_print_meta: n_rot            = 256
0.00.560.663 I llm_load_print_meta: n_swa            = 0
0.00.560.663 I llm_load_print_meta: n_embd_head_k    = 256
0.00.560.664 I llm_load_print_meta: n_embd_head_v    = 256
0.00.560.668 I llm_load_print_meta: n_gqa            = 8
0.00.560.673 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.560.678 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.560.679 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.560.680 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.560.681 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.560.681 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.560.681 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.560.686 I llm_load_print_meta: n_ff             = 16384
0.00.560.686 I llm_load_print_meta: n_expert         = 0
0.00.560.687 I llm_load_print_meta: n_expert_used    = 0
0.00.560.687 I llm_load_print_meta: causal attn      = 1
0.00.560.688 I llm_load_print_meta: pooling type     = 0
0.00.560.688 I llm_load_print_meta: rope type        = 2
0.00.560.689 I llm_load_print_meta: rope scaling     = linear
0.00.560.690 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.560.691 I llm_load_print_meta: freq_scale_train = 1
0.00.560.691 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.560.691 I llm_load_print_meta: rope_finetuned   = unknown
0.00.560.692 I llm_load_print_meta: ssm_d_conv       = 0
0.00.560.692 I llm_load_print_meta: ssm_d_inner      = 0
0.00.560.692 I llm_load_print_meta: ssm_d_state      = 0
0.00.560.693 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.560.693 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.560.693 I llm_load_print_meta: model type       = 2B
0.00.560.694 I llm_load_print_meta: model ftype      = Q8_0
0.00.560.695 I llm_load_print_meta: model params     = 2.51 B
0.00.560.696 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.560.696 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.560.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.560.697 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.560.698 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.560.698 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.560.698 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.560.699 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.560.699 I llm_load_print_meta: max token length = 93
0.00.560.886 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.660.619 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.660.628 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.660.629 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.660.630 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.660.630 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.660.631 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.666.358 I llama_new_context_with_model: n_ctx      = 8192
0.00.666.366 I llama_new_context_with_model: n_batch    = 2048
0.00.666.367 I llama_new_context_with_model: n_ubatch   = 512
0.00.666.367 I llama_new_context_with_model: flash_attn = 0
0.00.666.371 I llama_new_context_with_model: freq_base  = 10000.0
0.00.666.372 I llama_new_context_with_model: freq_scale = 1
0.00.696.196 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.240 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.351 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.697.712 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.697.719 I llama_new_context_with_model: graph nodes  = 601
0.00.697.719 I llama_new_context_with_model: graph splits = 1
0.00.697.736 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.556 I main: llama threadpool init, n_threads = 4
0.01.314.569 I 
0.01.314.663 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.667 I 
0.01.314.842 I sampler seed: 3216648841
0.01.314.853 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.860 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.314.861 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities?

I am unable to answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.10.172.211 I llama_perf_sampler_print:    sampling time =      32.37 ms /    22 runs   (    1.47 ms per token,   679.56 tokens per second)
0.10.172.215 I llama_perf_context_print:        load time =    1311.68 ms
0.10.172.217 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.172.219 I llama_perf_context_print:        eval time =    8803.08 ms /    21 runs   (  419.19 ms per token,     2.39 tokens per second)
0.10.172.220 I llama_perf_context_print:       total time =    8857.67 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.630 I build: 3758 (40638f71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.025.319 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.412 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.428 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.431 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.435 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.436 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.437 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.439 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.439 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.440 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.448 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.449 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.452 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.043 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.594 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.764 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.771 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.772 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.773 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.774 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.775 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.776 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.779 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.780 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.781 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.782 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.783 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.792 I llama_model_loader: - type  f32:   37 tensors
0.00.196.796 I llama_model_loader: - type q8_0:  127 tensors
0.00.503.574 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.636 I llm_load_vocab: special tokens cache size = 5
0.00.563.444 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.506 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.507 I llm_load_print_meta: arch             = gemma
0.00.563.508 I llm_load_print_meta: vocab type       = SPM
0.00.563.508 I llm_load_print_meta: n_vocab          = 256000
0.00.563.511 I llm_load_print_meta: n_merges         = 0
0.00.563.511 I llm_load_print_meta: vocab_only       = 0
0.00.563.512 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.512 I llm_load_print_meta: n_embd           = 2048
0.00.563.512 I llm_load_print_meta: n_layer          = 18
0.00.563.546 I llm_load_print_meta: n_head           = 8
0.00.563.554 I llm_load_print_meta: n_head_kv        = 1
0.00.563.554 I llm_load_print_meta: n_rot            = 256
0.00.563.554 I llm_load_print_meta: n_swa            = 0
0.00.563.555 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.555 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.560 I llm_load_print_meta: n_gqa            = 8
0.00.563.564 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.569 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.595 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.597 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.598 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.598 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.599 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.604 I llm_load_print_meta: n_ff             = 16384
0.00.563.605 I llm_load_print_meta: n_expert         = 0
0.00.563.605 I llm_load_print_meta: n_expert_used    = 0
0.00.563.606 I llm_load_print_meta: causal attn      = 1
0.00.563.606 I llm_load_print_meta: pooling type     = 0
0.00.563.607 I llm_load_print_meta: rope type        = 2
0.00.563.607 I llm_load_print_meta: rope scaling     = linear
0.00.563.617 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.618 I llm_load_print_meta: freq_scale_train = 1
0.00.563.618 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.619 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.619 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.619 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.620 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.620 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.620 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.628 I llm_load_print_meta: model type       = 2B
0.00.563.629 I llm_load_print_meta: model ftype      = Q8_0
0.00.563.631 I llm_load_print_meta: model params     = 2.51 B
0.00.563.635 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.563.636 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.636 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.644 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.645 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.645 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.646 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.646 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.647 I llm_load_print_meta: max token length = 93
0.00.563.827 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.289 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.664.143 I llama_new_context_with_model: n_ctx      = 8192
0.00.664.152 I llama_new_context_with_model: n_batch    = 2048
0.00.664.152 I llama_new_context_with_model: n_ubatch   = 512
0.00.664.153 I llama_new_context_with_model: flash_attn = 0
0.00.664.157 I llama_new_context_with_model: freq_base  = 10000.0
0.00.664.158 I llama_new_context_with_model: freq_scale = 1
0.00.695.321 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.695.365 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.695.477 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.696.853 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.696.860 I llama_new_context_with_model: graph nodes  = 601
0.00.696.861 I llama_new_context_with_model: graph splits = 1
0.00.696.876 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.437 I main: llama threadpool init, n_threads = 4
0.01.333.448 I 
0.01.333.542 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.546 I 
0.01.333.698 I sampler seed: 1700023907
0.01.333.709 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.714 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.333.715 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, which are a common type of parasitic infection caused by bacteria, viruses, or fungi.

**What are the most common symptoms associated with a increa

0.14.922.914 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.00 tokens per second)
0.14.922.916 I llama_perf_context_print:        load time =    1330.57 ms
0.14.922.918 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.922.919 I llama_perf_context_print:        eval time =   13507.29 ms /    32 runs   (  422.10 ms per token,     2.37 tokens per second)
0.14.922.920 I llama_perf_context_print:       total time =   13589.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.664 I build: 3758 (40638f71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.002.835 I main: load the model and apply lora adapter, if any
0.00.024.748 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.967 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.064 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.076 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.077 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.082 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.083 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.084 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.085 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.086 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.086 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.096 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.098 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.100 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.101 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.103 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.811 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.556 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.695 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.704 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.705 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.706 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.707 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.708 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.708 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.712 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.712 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.713 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.714 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.715 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.724 I llama_model_loader: - type  f32:   37 tensors
0.00.195.729 I llama_model_loader: - type q8_0:  127 tensors
0.00.503.674 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.786 I llm_load_vocab: special tokens cache size = 5
0.00.567.514 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.575 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.576 I llm_load_print_meta: arch             = gemma
0.00.567.577 I llm_load_print_meta: vocab type       = SPM
0.00.567.578 I llm_load_print_meta: n_vocab          = 256000
0.00.567.580 I llm_load_print_meta: n_merges         = 0
0.00.567.581 I llm_load_print_meta: vocab_only       = 0
0.00.567.581 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.582 I llm_load_print_meta: n_embd           = 2048
0.00.567.582 I llm_load_print_meta: n_layer          = 18
0.00.567.617 I llm_load_print_meta: n_head           = 8
0.00.567.624 I llm_load_print_meta: n_head_kv        = 1
0.00.567.625 I llm_load_print_meta: n_rot            = 256
0.00.567.625 I llm_load_print_meta: n_swa            = 0
0.00.567.626 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.626 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.630 I llm_load_print_meta: n_gqa            = 8
0.00.567.635 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.640 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.641 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.642 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.642 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.643 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.643 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.648 I llm_load_print_meta: n_ff             = 16384
0.00.567.648 I llm_load_print_meta: n_expert         = 0
0.00.567.649 I llm_load_print_meta: n_expert_used    = 0
0.00.567.649 I llm_load_print_meta: causal attn      = 1
0.00.567.649 I llm_load_print_meta: pooling type     = 0
0.00.567.650 I llm_load_print_meta: rope type        = 2
0.00.567.650 I llm_load_print_meta: rope scaling     = linear
0.00.567.651 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.652 I llm_load_print_meta: freq_scale_train = 1
0.00.567.653 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.653 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.653 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.654 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.654 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.654 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.655 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.655 I llm_load_print_meta: model type       = 2B
0.00.567.657 I llm_load_print_meta: model ftype      = Q8_0
0.00.567.657 I llm_load_print_meta: model params     = 2.51 B
0.00.567.658 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.567.659 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.659 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.660 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.660 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.661 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.661 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.662 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.662 I llm_load_print_meta: max token length = 93
0.00.567.840 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.644.581 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.644.593 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.644.594 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.644.595 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.644.595 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.644.596 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.650.373 I llama_new_context_with_model: n_ctx      = 8192
0.00.650.381 I llama_new_context_with_model: n_batch    = 2048
0.00.650.381 I llama_new_context_with_model: n_ubatch   = 512
0.00.650.382 I llama_new_context_with_model: flash_attn = 0
0.00.650.385 I llama_new_context_with_model: freq_base  = 10000.0
0.00.650.386 I llama_new_context_with_model: freq_scale = 1
0.00.680.625 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.680.668 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.680.779 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.682.161 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.682.169 I llama_new_context_with_model: graph nodes  = 601
0.00.682.170 I llama_new_context_with_model: graph splits = 1
0.00.682.187 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.782 I main: llama threadpool init, n_threads = 4
0.01.297.794 I 
0.01.297.894 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.899 I 
0.01.298.057 I sampler seed: 1912044527
0.01.298.068 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.072 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.298.073 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities from the 18th century. [end of text]


0.05.969.676 I llama_perf_sampler_print:    sampling time =      17.02 ms /    12 runs   (    1.42 ms per token,   704.85 tokens per second)
0.05.969.679 I llama_perf_context_print:        load time =    1294.86 ms
0.05.969.680 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.969.682 I llama_perf_context_print:        eval time =    4642.30 ms /    11 runs   (  422.03 ms per token,     2.37 tokens per second)
0.05.969.682 I llama_perf_context_print:       total time =    4671.90 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.668 I build: 3758 (40638f71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.024.966 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.170 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.261 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.273 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.275 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.280 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.281 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.282 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.283 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.284 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.284 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.291 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.293 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.294 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.295 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.297 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.128 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.873 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.915 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.924 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.924 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.925 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.926 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.927 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.928 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.931 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.932 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.932 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.933 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.195.934 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.942 I llama_model_loader: - type  f32:   37 tensors
0.00.195.946 I llama_model_loader: - type q8_0:  127 tensors
0.00.504.556 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.575 I llm_load_vocab: special tokens cache size = 5
0.00.565.600 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.565.658 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.565.662 I llm_load_print_meta: arch             = gemma
0.00.565.663 I llm_load_print_meta: vocab type       = SPM
0.00.565.664 I llm_load_print_meta: n_vocab          = 256000
0.00.565.667 I llm_load_print_meta: n_merges         = 0
0.00.565.667 I llm_load_print_meta: vocab_only       = 0
0.00.565.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.565.669 I llm_load_print_meta: n_embd           = 2048
0.00.565.670 I llm_load_print_meta: n_layer          = 18
0.00.565.706 I llm_load_print_meta: n_head           = 8
0.00.565.716 I llm_load_print_meta: n_head_kv        = 1
0.00.565.717 I llm_load_print_meta: n_rot            = 256
0.00.565.717 I llm_load_print_meta: n_swa            = 0
0.00.565.718 I llm_load_print_meta: n_embd_head_k    = 256
0.00.565.719 I llm_load_print_meta: n_embd_head_v    = 256
0.00.565.724 I llm_load_print_meta: n_gqa            = 8
0.00.565.728 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.565.735 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.565.736 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.565.738 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.565.738 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.565.739 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.565.739 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.565.744 I llm_load_print_meta: n_ff             = 16384
0.00.565.744 I llm_load_print_meta: n_expert         = 0
0.00.565.745 I llm_load_print_meta: n_expert_used    = 0
0.00.565.746 I llm_load_print_meta: causal attn      = 1
0.00.565.746 I llm_load_print_meta: pooling type     = 0
0.00.565.746 I llm_load_print_meta: rope type        = 2
0.00.565.747 I llm_load_print_meta: rope scaling     = linear
0.00.565.749 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.565.751 I llm_load_print_meta: freq_scale_train = 1
0.00.565.752 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.565.752 I llm_load_print_meta: rope_finetuned   = unknown
0.00.565.753 I llm_load_print_meta: ssm_d_conv       = 0
0.00.565.753 I llm_load_print_meta: ssm_d_inner      = 0
0.00.565.753 I llm_load_print_meta: ssm_d_state      = 0
0.00.565.753 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.565.754 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.565.754 I llm_load_print_meta: model type       = 2B
0.00.565.756 I llm_load_print_meta: model ftype      = Q8_0
0.00.565.756 I llm_load_print_meta: model params     = 2.51 B
0.00.565.758 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.565.758 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.565.759 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.565.770 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.565.771 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.565.781 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.565.791 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.565.792 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.565.793 I llm_load_print_meta: max token length = 93
0.00.565.965 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.636.990 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.637.002 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.642.572 I llama_new_context_with_model: n_ctx      = 8192
0.00.642.580 I llama_new_context_with_model: n_batch    = 2048
0.00.642.580 I llama_new_context_with_model: n_ubatch   = 512
0.00.642.581 I llama_new_context_with_model: flash_attn = 0
0.00.642.584 I llama_new_context_with_model: freq_base  = 10000.0
0.00.642.585 I llama_new_context_with_model: freq_scale = 1
0.00.671.720 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.671.761 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.671.875 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.310 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.318 I llama_new_context_with_model: graph nodes  = 601
0.00.673.318 I llama_new_context_with_model: graph splits = 1
0.00.673.336 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.608 I main: llama threadpool init, n_threads = 4
0.01.286.622 I 
0.01.286.717 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.720 I 
0.01.286.880 I sampler seed: 4062653426
0.01.286.906 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.913 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.286.914 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly.

I am unable to understand the provided text. Please provide additional context or clarify the text for me to understand it. [end of text]


0.13.016.751 I llama_perf_sampler_print:    sampling time =      43.09 ms /    29 runs   (    1.49 ms per token,   672.93 tokens per second)
0.13.016.754 I llama_perf_context_print:        load time =    1283.72 ms
0.13.016.756 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.016.775 I llama_perf_context_print:        eval time =   11657.46 ms /    28 runs   (  416.34 ms per token,     2.40 tokens per second)
0.13.016.777 I llama_perf_context_print:       total time =   11730.15 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m53.809s
user	2m48.018s
sys	0m9.547s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3758 (40638f71)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200248.97 ms
main:    total time = 200248.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.657 I build: 3758 (40638f71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.834 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.028 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.123 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.135 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.137 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.142 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.143 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.143 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.144 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.145 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.146 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.154 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.154 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.155 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.157 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.158 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.160 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.195 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.338 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.347 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.348 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.349 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.350 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.351 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.351 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.354 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.355 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.356 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.357 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.358 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.367 I llama_model_loader: - type  f32:   37 tensors
0.00.197.371 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.371 I llama_model_loader: - type q6_K:   19 tensors
0.00.514.429 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.499 I llm_load_vocab: special tokens cache size = 5
0.00.576.233 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.576.295 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.576.296 I llm_load_print_meta: arch             = gemma
0.00.576.297 I llm_load_print_meta: vocab type       = SPM
0.00.576.298 I llm_load_print_meta: n_vocab          = 256000
0.00.576.300 I llm_load_print_meta: n_merges         = 0
0.00.576.301 I llm_load_print_meta: vocab_only       = 0
0.00.576.301 I llm_load_print_meta: n_ctx_train      = 8192
0.00.576.301 I llm_load_print_meta: n_embd           = 2048
0.00.576.302 I llm_load_print_meta: n_layer          = 18
0.00.576.336 I llm_load_print_meta: n_head           = 8
0.00.576.342 I llm_load_print_meta: n_head_kv        = 1
0.00.576.343 I llm_load_print_meta: n_rot            = 256
0.00.576.343 I llm_load_print_meta: n_swa            = 0
0.00.576.344 I llm_load_print_meta: n_embd_head_k    = 256
0.00.576.344 I llm_load_print_meta: n_embd_head_v    = 256
0.00.576.349 I llm_load_print_meta: n_gqa            = 8
0.00.576.353 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.576.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.576.359 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.576.360 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.576.361 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.576.361 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.576.361 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.576.366 I llm_load_print_meta: n_ff             = 16384
0.00.576.366 I llm_load_print_meta: n_expert         = 0
0.00.576.367 I llm_load_print_meta: n_expert_used    = 0
0.00.576.367 I llm_load_print_meta: causal attn      = 1
0.00.576.368 I llm_load_print_meta: pooling type     = 0
0.00.576.368 I llm_load_print_meta: rope type        = 2
0.00.576.368 I llm_load_print_meta: rope scaling     = linear
0.00.576.369 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.576.370 I llm_load_print_meta: freq_scale_train = 1
0.00.576.370 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.576.371 I llm_load_print_meta: rope_finetuned   = unknown
0.00.576.371 I llm_load_print_meta: ssm_d_conv       = 0
0.00.576.371 I llm_load_print_meta: ssm_d_inner      = 0
0.00.576.372 I llm_load_print_meta: ssm_d_state      = 0
0.00.576.372 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.576.372 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.576.373 I llm_load_print_meta: model type       = 2B
0.00.576.374 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.576.375 I llm_load_print_meta: model params     = 2.51 B
0.00.576.375 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.576.376 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.576.376 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.576.377 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.576.377 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.576.377 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.576.378 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.576.378 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.576.378 I llm_load_print_meta: max token length = 93
0.00.576.553 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.635.519 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.635.531 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.635.531 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.635.532 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.635.533 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.635.533 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.641.197 I llama_new_context_with_model: n_ctx      = 8192
0.00.641.205 I llama_new_context_with_model: n_batch    = 2048
0.00.641.206 I llama_new_context_with_model: n_ubatch   = 512
0.00.641.206 I llama_new_context_with_model: flash_attn = 0
0.00.641.210 I llama_new_context_with_model: freq_base  = 10000.0
0.00.641.211 I llama_new_context_with_model: freq_scale = 1
0.00.672.011 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.672.051 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.672.165 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.524 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.530 I llama_new_context_with_model: graph nodes  = 601
0.00.673.531 I llama_new_context_with_model: graph splits = 1
0.00.673.548 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.250.284 I main: llama threadpool init, n_threads = 4
0.01.250.299 I 
0.01.250.392 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.250.396 I 
0.01.250.552 I sampler seed: 2674204572
0.01.250.562 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.250.570 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.250.572 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and the resultant changes in the ecological communities of the Great Lakes.

**Answer the following questions based on the provided text:**

**1. What

0.12.237.612 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.90 tokens per second)
0.12.237.615 I llama_perf_context_print:        load time =    1247.40 ms
0.12.237.617 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.237.618 I llama_perf_context_print:        eval time =   10904.78 ms /    32 runs   (  340.77 ms per token,     2.93 tokens per second)
0.12.237.619 I llama_perf_context_print:       total time =   10987.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3758 (40638f71)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199843.51 ms
main:    total time = 199843.51 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.636 I build: 3758 (40638f71) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.025.124 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.224 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.240 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.250 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.251 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.252 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.254 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.263 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.264 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.265 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.279 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.283 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.362 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.955 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.128 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.137 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.138 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.139 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.140 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.141 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.142 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.145 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.146 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.154 I llama_model_loader: - type  f32:   37 tensors
0.00.197.158 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.159 I llama_model_loader: - type q6_K:   19 tensors
0.00.496.677 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.731 I llm_load_vocab: special tokens cache size = 5
0.00.556.662 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.556.718 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.556.719 I llm_load_print_meta: arch             = gemma
0.00.556.720 I llm_load_print_meta: vocab type       = SPM
0.00.556.721 I llm_load_print_meta: n_vocab          = 256000
0.00.556.723 I llm_load_print_meta: n_merges         = 0
0.00.556.724 I llm_load_print_meta: vocab_only       = 0
0.00.556.724 I llm_load_print_meta: n_ctx_train      = 8192
0.00.556.725 I llm_load_print_meta: n_embd           = 2048
0.00.556.725 I llm_load_print_meta: n_layer          = 18
0.00.556.758 I llm_load_print_meta: n_head           = 8
0.00.556.766 I llm_load_print_meta: n_head_kv        = 1
0.00.556.766 I llm_load_print_meta: n_rot            = 256
0.00.556.766 I llm_load_print_meta: n_swa            = 0
0.00.556.767 I llm_load_print_meta: n_embd_head_k    = 256
0.00.556.767 I llm_load_print_meta: n_embd_head_v    = 256
0.00.556.772 I llm_load_print_meta: n_gqa            = 8
0.00.556.776 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.556.781 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.556.782 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.556.784 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.556.784 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.556.785 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.556.785 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.556.815 I llm_load_print_meta: n_ff             = 16384
0.00.556.816 I llm_load_print_meta: n_expert         = 0
0.00.556.816 I llm_load_print_meta: n_expert_used    = 0
0.00.556.817 I llm_load_print_meta: causal attn      = 1
0.00.556.817 I llm_load_print_meta: pooling type     = 0
0.00.556.818 I llm_load_print_meta: rope type        = 2
0.00.556.818 I llm_load_print_meta: rope scaling     = linear
0.00.556.819 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.556.820 I llm_load_print_meta: freq_scale_train = 1
0.00.556.829 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.556.830 I llm_load_print_meta: rope_finetuned   = unknown
0.00.556.830 I llm_load_print_meta: ssm_d_conv       = 0
0.00.556.831 I llm_load_print_meta: ssm_d_inner      = 0
0.00.556.835 I llm_load_print_meta: ssm_d_state      = 0
0.00.556.836 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.556.836 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.556.837 I llm_load_print_meta: model type       = 2B
0.00.556.838 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.556.839 I llm_load_print_meta: model params     = 2.51 B
0.00.556.839 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.556.840 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.556.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.556.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.556.842 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.556.842 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.556.843 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.556.844 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.556.844 I llm_load_print_meta: max token length = 93
0.00.557.015 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.615.251 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.620.808 I llama_new_context_with_model: n_ctx      = 8192
0.00.620.816 I llama_new_context_with_model: n_batch    = 2048
0.00.620.816 I llama_new_context_with_model: n_ubatch   = 512
0.00.620.817 I llama_new_context_with_model: flash_attn = 0
0.00.620.820 I llama_new_context_with_model: freq_base  = 10000.0
0.00.620.821 I llama_new_context_with_model: freq_scale = 1
0.00.651.498 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.651.539 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.651.650 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.653.014 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.653.021 I llama_new_context_with_model: graph nodes  = 601
0.00.653.022 I llama_new_context_with_model: graph splits = 1
0.00.653.037 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.226.977 I main: llama threadpool init, n_threads = 4
0.01.226.989 I 
0.01.227.079 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.227.083 I 
0.01.227.230 I sampler seed: 2227608081
0.01.227.241 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.227.247 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.227.247 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneustalline patterns and swirls in the sediment layer at the base of a sedimentary basin.

**a) What type of sedimentary structures are present?**

**

0.12.067.930 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.68 tokens per second)
0.12.067.933 I llama_perf_context_print:        load time =    1224.10 ms
0.12.067.934 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.067.936 I llama_perf_context_print:        eval time =   10756.17 ms /    32 runs   (  336.13 ms per token,     2.98 tokens per second)
0.12.067.937 I llama_perf_context_print:       total time =   10840.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.278s
user	50m23.416s
sys	0m6.424s
