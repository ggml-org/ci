+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 3973 (40f25557) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.812 I main: load the model and apply lora adapter, if any
0.00.025.231 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.451 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.549 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.561 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.569 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.572 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.574 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.575 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.576 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.577 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.584 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.586 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.588 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.589 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.590 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.207 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.519 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.849 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.862 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.863 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.864 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.865 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.866 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.867 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.871 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.872 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.887 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.896 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.908 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.918 I llama_model_loader: - type  f32:   37 tensors
0.00.271.922 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.772 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.557.051 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.558.131 I llm_load_vocab: special tokens cache size = 5
0.00.659.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.659.503 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.659.504 I llm_load_print_meta: arch             = gemma
0.00.659.504 I llm_load_print_meta: vocab type       = SPM
0.00.659.505 I llm_load_print_meta: n_vocab          = 256000
0.00.659.507 I llm_load_print_meta: n_merges         = 0
0.00.659.508 I llm_load_print_meta: vocab_only       = 0
0.00.659.508 I llm_load_print_meta: n_ctx_train      = 8192
0.00.659.509 I llm_load_print_meta: n_embd           = 2048
0.00.659.509 I llm_load_print_meta: n_layer          = 18
0.00.659.575 I llm_load_print_meta: n_head           = 8
0.00.659.583 I llm_load_print_meta: n_head_kv        = 1
0.00.659.583 I llm_load_print_meta: n_rot            = 256
0.00.659.584 I llm_load_print_meta: n_swa            = 0
0.00.659.584 I llm_load_print_meta: n_embd_head_k    = 256
0.00.659.584 I llm_load_print_meta: n_embd_head_v    = 256
0.00.659.589 I llm_load_print_meta: n_gqa            = 8
0.00.659.593 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.659.600 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.659.601 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.659.602 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.659.603 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.659.603 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.659.603 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.659.608 I llm_load_print_meta: n_ff             = 16384
0.00.659.609 I llm_load_print_meta: n_expert         = 0
0.00.659.609 I llm_load_print_meta: n_expert_used    = 0
0.00.659.610 I llm_load_print_meta: causal attn      = 1
0.00.659.611 I llm_load_print_meta: pooling type     = 0
0.00.659.611 I llm_load_print_meta: rope type        = 2
0.00.659.611 I llm_load_print_meta: rope scaling     = linear
0.00.659.613 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.659.613 I llm_load_print_meta: freq_scale_train = 1
0.00.659.614 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.659.619 I llm_load_print_meta: rope_finetuned   = unknown
0.00.659.620 I llm_load_print_meta: ssm_d_conv       = 0
0.00.659.620 I llm_load_print_meta: ssm_d_inner      = 0
0.00.659.620 I llm_load_print_meta: ssm_d_state      = 0
0.00.659.621 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.659.621 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.659.644 I llm_load_print_meta: model type       = 2B
0.00.659.646 I llm_load_print_meta: model ftype      = Q8_0
0.00.659.647 I llm_load_print_meta: model params     = 2.51 B
0.00.659.648 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.659.657 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.659.658 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.659.661 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.659.662 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.659.663 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.659.663 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.659.664 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.659.670 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.659.671 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.659.672 I llm_load_print_meta: max token length = 93
0.00.659.845 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.761.810 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.761.825 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.761.825 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.761.826 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.761.827 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.761.827 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.767.756 I llama_new_context_with_model: n_ctx      = 8192
0.00.767.765 I llama_new_context_with_model: n_batch    = 2048
0.00.767.766 I llama_new_context_with_model: n_ubatch   = 512
0.00.767.767 I llama_new_context_with_model: flash_attn = 0
0.00.767.772 I llama_new_context_with_model: freq_base  = 10000.0
0.00.767.773 I llama_new_context_with_model: freq_scale = 1
0.00.800.920 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.800.969 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.801.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.802.592 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.802.597 I llama_new_context_with_model: graph nodes  = 601
0.00.802.597 I llama_new_context_with_model: graph splits = 1
0.00.802.614 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.414.350 I main: llama threadpool init, n_threads = 4
0.01.414.364 I 
0.01.414.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.414.482 I 
0.01.414.666 I sampler seed: 265390720
0.01.414.679 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.414.686 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.414.690 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.414.690 I 
 maneuvrability error, also known as the "curse of dimensionality," is a common challenge in machine learning when dealing with high-dimensional data.

**Causes

0.14.832.290 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.76 tokens per second)
0.14.832.295 I llama_perf_context_print:        load time =    1411.42 ms
0.14.832.297 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.832.299 I llama_perf_context_print:        eval time =   13321.46 ms /    32 runs   (  416.30 ms per token,     2.40 tokens per second)
0.14.832.300 I llama_perf_context_print:       total time =   13417.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 3973 (40f25557) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.025.399 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.501 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.518 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.523 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.528 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.529 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.531 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.532 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.533 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.534 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.541 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.542 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.543 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.544 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.545 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.333 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.328 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.691 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.702 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.706 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.707 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.708 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.712 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.728 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.731 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.732 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.743 I llama_model_loader: - type  f32:   37 tensors
0.00.271.748 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.672 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.972 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.042 I llm_load_vocab: special tokens cache size = 5
0.00.634.263 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.634.338 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.634.339 I llm_load_print_meta: arch             = gemma
0.00.634.340 I llm_load_print_meta: vocab type       = SPM
0.00.634.340 I llm_load_print_meta: n_vocab          = 256000
0.00.634.343 I llm_load_print_meta: n_merges         = 0
0.00.634.343 I llm_load_print_meta: vocab_only       = 0
0.00.634.344 I llm_load_print_meta: n_ctx_train      = 8192
0.00.634.344 I llm_load_print_meta: n_embd           = 2048
0.00.634.345 I llm_load_print_meta: n_layer          = 18
0.00.634.409 I llm_load_print_meta: n_head           = 8
0.00.634.416 I llm_load_print_meta: n_head_kv        = 1
0.00.634.417 I llm_load_print_meta: n_rot            = 256
0.00.634.418 I llm_load_print_meta: n_swa            = 0
0.00.634.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.634.418 I llm_load_print_meta: n_embd_head_v    = 256
0.00.634.423 I llm_load_print_meta: n_gqa            = 8
0.00.634.428 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.634.433 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.634.434 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.634.435 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.634.436 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.634.436 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.634.437 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.634.444 I llm_load_print_meta: n_ff             = 16384
0.00.634.445 I llm_load_print_meta: n_expert         = 0
0.00.634.445 I llm_load_print_meta: n_expert_used    = 0
0.00.634.445 I llm_load_print_meta: causal attn      = 1
0.00.634.446 I llm_load_print_meta: pooling type     = 0
0.00.634.446 I llm_load_print_meta: rope type        = 2
0.00.634.446 I llm_load_print_meta: rope scaling     = linear
0.00.634.448 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.634.448 I llm_load_print_meta: freq_scale_train = 1
0.00.634.449 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.634.449 I llm_load_print_meta: rope_finetuned   = unknown
0.00.634.449 I llm_load_print_meta: ssm_d_conv       = 0
0.00.634.450 I llm_load_print_meta: ssm_d_inner      = 0
0.00.634.450 I llm_load_print_meta: ssm_d_state      = 0
0.00.634.450 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.634.450 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.634.451 I llm_load_print_meta: model type       = 2B
0.00.634.452 I llm_load_print_meta: model ftype      = Q8_0
0.00.634.453 I llm_load_print_meta: model params     = 2.51 B
0.00.634.453 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.634.454 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.634.454 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.634.455 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.634.455 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.634.455 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.634.456 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.634.456 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.634.462 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.634.463 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.634.464 I llm_load_print_meta: max token length = 93
0.00.634.646 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.728.603 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.734.392 I llama_new_context_with_model: n_ctx      = 8192
0.00.734.401 I llama_new_context_with_model: n_batch    = 2048
0.00.734.402 I llama_new_context_with_model: n_ubatch   = 512
0.00.734.403 I llama_new_context_with_model: flash_attn = 0
0.00.734.406 I llama_new_context_with_model: freq_base  = 10000.0
0.00.734.407 I llama_new_context_with_model: freq_scale = 1
0.00.765.865 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.765.910 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.766.028 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.767.465 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.767.470 I llama_new_context_with_model: graph nodes  = 601
0.00.767.470 I llama_new_context_with_model: graph splits = 1
0.00.767.486 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.380.779 I main: llama threadpool init, n_threads = 4
0.01.380.793 I 
0.01.380.912 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.380.916 I 
0.01.381.109 I sampler seed: 1525347028
0.01.381.120 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.381.127 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.381.128 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.381.128 I 
 maneuvled.

I understand that the question is asking about a misspelling, but I am unable to provide assistance with this request as it involves potentially harmful

0.14.903.652 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.83 tokens per second)
0.14.903.667 I llama_perf_context_print:        load time =    1377.84 ms
0.14.903.669 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.903.671 I llama_perf_context_print:        eval time =   13428.39 ms /    32 runs   (  419.64 ms per token,     2.38 tokens per second)
0.14.903.672 I llama_perf_context_print:       total time =   13522.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 3973 (40f25557) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.806 I main: load the model and apply lora adapter, if any
0.00.024.693 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.894 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.985 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.997 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.998 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.003 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.004 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.005 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.006 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.007 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.008 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.015 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.019 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.020 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.021 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.022 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.771 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.621 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.915 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.916 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.918 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.918 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.920 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.921 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.925 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.926 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.927 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.928 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.929 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.938 I llama_model_loader: - type  f32:   37 tensors
0.00.270.942 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.577 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.117 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.121 I llm_load_vocab: special tokens cache size = 5
0.00.619.510 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.583 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.584 I llm_load_print_meta: arch             = gemma
0.00.619.584 I llm_load_print_meta: vocab type       = SPM
0.00.619.585 I llm_load_print_meta: n_vocab          = 256000
0.00.619.587 I llm_load_print_meta: n_merges         = 0
0.00.619.588 I llm_load_print_meta: vocab_only       = 0
0.00.619.588 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.589 I llm_load_print_meta: n_embd           = 2048
0.00.619.589 I llm_load_print_meta: n_layer          = 18
0.00.619.651 I llm_load_print_meta: n_head           = 8
0.00.619.659 I llm_load_print_meta: n_head_kv        = 1
0.00.619.659 I llm_load_print_meta: n_rot            = 256
0.00.619.660 I llm_load_print_meta: n_swa            = 0
0.00.619.660 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.660 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.665 I llm_load_print_meta: n_gqa            = 8
0.00.619.669 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.674 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.675 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.677 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.677 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.677 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.678 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.683 I llm_load_print_meta: n_ff             = 16384
0.00.619.683 I llm_load_print_meta: n_expert         = 0
0.00.619.683 I llm_load_print_meta: n_expert_used    = 0
0.00.619.684 I llm_load_print_meta: causal attn      = 1
0.00.619.684 I llm_load_print_meta: pooling type     = 0
0.00.619.685 I llm_load_print_meta: rope type        = 2
0.00.619.685 I llm_load_print_meta: rope scaling     = linear
0.00.619.686 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.713 I llm_load_print_meta: freq_scale_train = 1
0.00.619.714 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.715 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.715 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.716 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.716 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.717 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.717 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.718 I llm_load_print_meta: model type       = 2B
0.00.619.719 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.719 I llm_load_print_meta: model params     = 2.51 B
0.00.619.720 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.721 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.722 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.723 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.723 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.724 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.729 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.729 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.735 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.737 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.738 I llm_load_print_meta: max token length = 93
0.00.619.919 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.697.880 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.697.892 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.697.893 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.697.894 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.697.894 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.697.895 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.703.634 I llama_new_context_with_model: n_ctx      = 8192
0.00.703.641 I llama_new_context_with_model: n_batch    = 2048
0.00.703.642 I llama_new_context_with_model: n_ubatch   = 512
0.00.703.642 I llama_new_context_with_model: flash_attn = 0
0.00.703.645 I llama_new_context_with_model: freq_base  = 10000.0
0.00.703.645 I llama_new_context_with_model: freq_scale = 1
0.00.733.259 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.303 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.733.427 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.907 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.734.912 I llama_new_context_with_model: graph nodes  = 601
0.00.734.913 I llama_new_context_with_model: graph splits = 1
0.00.734.929 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.344 I main: llama threadpool init, n_threads = 4
0.01.348.357 I 
0.01.348.459 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.463 I 
0.01.348.641 I sampler seed: 1495976658
0.01.348.653 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.661 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.662 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.662 I 
 increasities, and other sexually suggestive content is not allowed. [end of text]


0.06.809.611 I llama_perf_sampler_print:    sampling time =      20.03 ms /    14 runs   (    1.43 ms per token,   698.85 tokens per second)
0.06.809.614 I llama_perf_context_print:        load time =    1345.45 ms
0.06.809.616 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.809.629 I llama_perf_context_print:        eval time =    5421.89 ms /    13 runs   (  417.07 ms per token,     2.40 tokens per second)
0.06.809.630 I llama_perf_context_print:       total time =    5461.28 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 3973 (40f25557) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.002.878 I main: load the model and apply lora adapter, if any
0.00.024.855 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.074 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.172 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.185 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.187 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.192 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.197 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.198 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.199 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.201 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.202 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.214 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.215 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.216 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.217 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.218 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.252 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.288 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.657 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.667 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.668 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.669 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.670 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.671 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.672 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.676 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.677 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.678 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.679 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.680 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.688 I llama_model_loader: - type  f32:   37 tensors
0.00.271.692 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.974 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.651 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.616 I llm_load_vocab: special tokens cache size = 5
0.00.607.959 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.031 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.032 I llm_load_print_meta: arch             = gemma
0.00.608.033 I llm_load_print_meta: vocab type       = SPM
0.00.608.034 I llm_load_print_meta: n_vocab          = 256000
0.00.608.036 I llm_load_print_meta: n_merges         = 0
0.00.608.037 I llm_load_print_meta: vocab_only       = 0
0.00.608.037 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.038 I llm_load_print_meta: n_embd           = 2048
0.00.608.038 I llm_load_print_meta: n_layer          = 18
0.00.608.099 I llm_load_print_meta: n_head           = 8
0.00.608.106 I llm_load_print_meta: n_head_kv        = 1
0.00.608.108 I llm_load_print_meta: n_rot            = 256
0.00.608.108 I llm_load_print_meta: n_swa            = 0
0.00.608.109 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.109 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.114 I llm_load_print_meta: n_gqa            = 8
0.00.608.118 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.123 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.124 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.125 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.126 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.127 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.127 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.134 I llm_load_print_meta: n_ff             = 16384
0.00.608.135 I llm_load_print_meta: n_expert         = 0
0.00.608.136 I llm_load_print_meta: n_expert_used    = 0
0.00.608.136 I llm_load_print_meta: causal attn      = 1
0.00.608.137 I llm_load_print_meta: pooling type     = 0
0.00.608.138 I llm_load_print_meta: rope type        = 2
0.00.608.138 I llm_load_print_meta: rope scaling     = linear
0.00.608.140 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.141 I llm_load_print_meta: freq_scale_train = 1
0.00.608.142 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.142 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.147 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.148 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.148 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.149 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.153 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.154 I llm_load_print_meta: model type       = 2B
0.00.608.155 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.156 I llm_load_print_meta: model params     = 2.51 B
0.00.608.157 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.158 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.159 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.161 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.163 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.164 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.165 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.173 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.174 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.175 I llm_load_print_meta: max token length = 93
0.00.608.356 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.092 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.680.103 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.685.784 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.792 I llama_new_context_with_model: n_batch    = 2048
0.00.685.793 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.793 I llama_new_context_with_model: flash_attn = 0
0.00.685.796 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.797 I llama_new_context_with_model: freq_scale = 1
0.00.716.384 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.430 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.547 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.941 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.946 I llama_new_context_with_model: graph nodes  = 601
0.00.717.946 I llama_new_context_with_model: graph splits = 1
0.00.717.962 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.849 I main: llama threadpool init, n_threads = 4
0.01.333.864 I 
0.01.333.986 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.991 I 
0.01.334.174 I sampler seed: 117584489
0.01.334.186 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.334.193 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.334.196 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.334.196 I 
 increably. The more I eat, the less my willpower to resist sugary treats increases.

I need help with the following:

* Analyze the given text

0.14.990.311 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.17 tokens per second)
0.14.990.314 I llama_perf_context_print:        load time =    1330.87 ms
0.14.990.326 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.990.329 I llama_perf_context_print:        eval time =   13560.63 ms /    32 runs   (  423.77 ms per token,     2.36 tokens per second)
0.14.990.330 I llama_perf_context_print:       total time =   13656.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.517s
user	3m17.071s
sys	0m9.564s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3973 (40f25557)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200975.86 ms
main:    total time = 200975.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 3973 (40f25557) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.847 I main: load the model and apply lora adapter, if any
0.00.024.586 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.809 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.904 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.916 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.918 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.922 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.926 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.927 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.928 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.929 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.930 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.938 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.939 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.941 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.941 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.289 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.212 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.452 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.462 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.463 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.464 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.465 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.466 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.467 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.471 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.472 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.473 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.474 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.475 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.484 I llama_model_loader: - type  f32:   37 tensors
0.00.270.488 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.489 I llama_model_loader: - type q6_K:   19 tensors
0.00.470.909 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.541.740 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.542.815 I llm_load_vocab: special tokens cache size = 5
0.00.643.404 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.643.474 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.643.476 I llm_load_print_meta: arch             = gemma
0.00.643.476 I llm_load_print_meta: vocab type       = SPM
0.00.643.477 I llm_load_print_meta: n_vocab          = 256000
0.00.643.480 I llm_load_print_meta: n_merges         = 0
0.00.643.480 I llm_load_print_meta: vocab_only       = 0
0.00.643.481 I llm_load_print_meta: n_ctx_train      = 8192
0.00.643.481 I llm_load_print_meta: n_embd           = 2048
0.00.643.481 I llm_load_print_meta: n_layer          = 18
0.00.643.547 I llm_load_print_meta: n_head           = 8
0.00.643.554 I llm_load_print_meta: n_head_kv        = 1
0.00.643.556 I llm_load_print_meta: n_rot            = 256
0.00.643.565 I llm_load_print_meta: n_swa            = 0
0.00.643.565 I llm_load_print_meta: n_embd_head_k    = 256
0.00.643.566 I llm_load_print_meta: n_embd_head_v    = 256
0.00.643.583 I llm_load_print_meta: n_gqa            = 8
0.00.643.590 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.643.595 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.643.597 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.643.598 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.643.598 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.643.599 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.643.599 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.643.604 I llm_load_print_meta: n_ff             = 16384
0.00.643.605 I llm_load_print_meta: n_expert         = 0
0.00.643.605 I llm_load_print_meta: n_expert_used    = 0
0.00.643.606 I llm_load_print_meta: causal attn      = 1
0.00.643.607 I llm_load_print_meta: pooling type     = 0
0.00.643.607 I llm_load_print_meta: rope type        = 2
0.00.643.607 I llm_load_print_meta: rope scaling     = linear
0.00.643.609 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.643.610 I llm_load_print_meta: freq_scale_train = 1
0.00.643.610 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.643.610 I llm_load_print_meta: rope_finetuned   = unknown
0.00.643.611 I llm_load_print_meta: ssm_d_conv       = 0
0.00.643.611 I llm_load_print_meta: ssm_d_inner      = 0
0.00.643.611 I llm_load_print_meta: ssm_d_state      = 0
0.00.643.612 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.643.613 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.643.613 I llm_load_print_meta: model type       = 2B
0.00.643.614 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.643.615 I llm_load_print_meta: model params     = 2.51 B
0.00.643.616 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.643.616 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.643.617 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.643.617 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.643.618 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.643.619 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.643.619 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.643.619 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.643.625 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.643.627 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.643.627 I llm_load_print_meta: max token length = 93
0.00.643.791 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.703.620 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.703.631 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.703.632 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.703.632 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.703.633 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.703.634 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.709.305 I llama_new_context_with_model: n_ctx      = 8192
0.00.709.313 I llama_new_context_with_model: n_batch    = 2048
0.00.709.314 I llama_new_context_with_model: n_ubatch   = 512
0.00.709.315 I llama_new_context_with_model: flash_attn = 0
0.00.709.318 I llama_new_context_with_model: freq_base  = 10000.0
0.00.709.319 I llama_new_context_with_model: freq_scale = 1
0.00.738.813 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.738.854 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.738.972 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.375 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.740.380 I llama_new_context_with_model: graph nodes  = 601
0.00.740.380 I llama_new_context_with_model: graph splits = 1
0.00.740.396 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.928 I main: llama threadpool init, n_threads = 4
0.01.319.941 I 
0.01.320.055 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.320.055 I 
0.01.320.239 I sampler seed: 1276958161
0.01.320.252 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.258 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.320.260 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.260 I 
 increasities are the most common type of harassment in the United States. They can include physical, verbal, and nonverbal forms of abuse.

**Physical harassment**

0.12.277.404 I llama_perf_sampler_print:    sampling time =      49.47 ms /    33 runs   (    1.50 ms per token,   667.08 tokens per second)
0.12.277.408 I llama_perf_context_print:        load time =    1316.99 ms
0.12.277.409 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.277.411 I llama_perf_context_print:        eval time =   10862.08 ms /    32 runs   (  339.44 ms per token,     2.95 tokens per second)
0.12.277.411 I llama_perf_context_print:       total time =   10957.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3973 (40f25557)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199267.19 ms
main:    total time = 199267.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 3973 (40f25557) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.024.664 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.756 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.769 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.771 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.775 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.776 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.777 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.778 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.778 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.779 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.787 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.788 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.789 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.790 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.791 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.140 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.492 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.750 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.757 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.758 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.760 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.761 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.762 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.763 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.767 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.768 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.777 I llama_model_loader: - type  f32:   37 tensors
0.00.269.781 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.781 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.715 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.915 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.874 I llm_load_vocab: special tokens cache size = 5
0.00.613.797 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.875 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.876 I llm_load_print_meta: arch             = gemma
0.00.613.876 I llm_load_print_meta: vocab type       = SPM
0.00.613.877 I llm_load_print_meta: n_vocab          = 256000
0.00.613.879 I llm_load_print_meta: n_merges         = 0
0.00.613.880 I llm_load_print_meta: vocab_only       = 0
0.00.613.880 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.881 I llm_load_print_meta: n_embd           = 2048
0.00.613.881 I llm_load_print_meta: n_layer          = 18
0.00.613.945 I llm_load_print_meta: n_head           = 8
0.00.613.951 I llm_load_print_meta: n_head_kv        = 1
0.00.613.952 I llm_load_print_meta: n_rot            = 256
0.00.613.952 I llm_load_print_meta: n_swa            = 0
0.00.613.953 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.953 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.957 I llm_load_print_meta: n_gqa            = 8
0.00.613.962 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.967 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.968 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.970 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.970 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.970 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.971 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.975 I llm_load_print_meta: n_ff             = 16384
0.00.613.976 I llm_load_print_meta: n_expert         = 0
0.00.613.976 I llm_load_print_meta: n_expert_used    = 0
0.00.613.977 I llm_load_print_meta: causal attn      = 1
0.00.613.977 I llm_load_print_meta: pooling type     = 0
0.00.613.977 I llm_load_print_meta: rope type        = 2
0.00.613.978 I llm_load_print_meta: rope scaling     = linear
0.00.613.979 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.980 I llm_load_print_meta: freq_scale_train = 1
0.00.613.980 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.981 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.981 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.981 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.981 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.982 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.982 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.983 I llm_load_print_meta: model type       = 2B
0.00.613.983 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.613.984 I llm_load_print_meta: model params     = 2.51 B
0.00.613.985 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.613.985 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.986 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.986 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.987 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.987 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.988 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.988 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.994 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.019 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.020 I llm_load_print_meta: max token length = 93
0.00.614.191 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.671.673 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.677.390 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.399 I llama_new_context_with_model: n_batch    = 2048
0.00.677.399 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.400 I llama_new_context_with_model: flash_attn = 0
0.00.677.403 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.404 I llama_new_context_with_model: freq_scale = 1
0.00.708.572 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.708.616 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.708.729 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.056 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.061 I llama_new_context_with_model: graph nodes  = 601
0.00.710.061 I llama_new_context_with_model: graph splits = 1
0.00.710.078 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.289.609 I main: llama threadpool init, n_threads = 4
0.01.289.622 I 
0.01.289.731 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.289.735 I 
0.01.289.917 I sampler seed: 2067461883
0.01.289.928 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.289.935 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.289.935 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.289.936 I 
 maneurages in the context of the COVID-19 pandemic.

**Context:**

The COVID-19 pandemic has caused widespread disruptions to social and economic

0.12.279.312 I llama_perf_sampler_print:    sampling time =      50.81 ms /    33 runs   (    1.54 ms per token,   649.53 tokens per second)
0.12.279.315 I llama_perf_context_print:        load time =    1286.75 ms
0.12.279.316 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.279.318 I llama_perf_context_print:        eval time =   10893.43 ms /    32 runs   (  340.42 ms per token,     2.94 tokens per second)
0.12.279.319 I llama_perf_context_print:       total time =   10989.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.803s
user	50m24.177s
sys	0m6.743s
