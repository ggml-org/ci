+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.562 I build: 4017 (40e71726) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.022.532 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.543 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.551 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.561 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.565 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.569 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.570 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.570 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.571 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.571 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.572 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.577 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.577 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.578 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.578 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.579 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.890 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.484 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.312 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.318 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.319 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.320 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.321 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.321 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.322 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.325 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.325 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.326 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.326 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.328 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.331 I llama_model_loader: - type  f32:   37 tensors
0.00.132.332 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.503 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.707 I llm_load_vocab: special tokens cache size = 5
0.00.275.491 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.508 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.509 I llm_load_print_meta: arch             = gemma
0.00.275.510 I llm_load_print_meta: vocab type       = SPM
0.00.275.510 I llm_load_print_meta: n_vocab          = 256000
0.00.275.511 I llm_load_print_meta: n_merges         = 0
0.00.275.511 I llm_load_print_meta: vocab_only       = 0
0.00.275.511 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.512 I llm_load_print_meta: n_embd           = 2048
0.00.275.512 I llm_load_print_meta: n_layer          = 18
0.00.275.525 I llm_load_print_meta: n_head           = 8
0.00.275.526 I llm_load_print_meta: n_head_kv        = 1
0.00.275.526 I llm_load_print_meta: n_rot            = 256
0.00.275.527 I llm_load_print_meta: n_swa            = 0
0.00.275.527 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.527 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.528 I llm_load_print_meta: n_gqa            = 8
0.00.275.529 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.530 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.532 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.533 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.534 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.534 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.535 I llm_load_print_meta: n_ff             = 16384
0.00.275.536 I llm_load_print_meta: n_expert         = 0
0.00.275.536 I llm_load_print_meta: n_expert_used    = 0
0.00.275.536 I llm_load_print_meta: causal attn      = 1
0.00.275.537 I llm_load_print_meta: pooling type     = 0
0.00.275.537 I llm_load_print_meta: rope type        = 2
0.00.275.537 I llm_load_print_meta: rope scaling     = linear
0.00.275.538 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.539 I llm_load_print_meta: freq_scale_train = 1
0.00.275.539 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.540 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.540 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.540 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.540 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.541 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.541 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.541 I llm_load_print_meta: model type       = 2B
0.00.275.542 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.543 I llm_load_print_meta: model params     = 2.51 B
0.00.275.543 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.544 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.544 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.545 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.545 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.545 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.546 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.546 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.547 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.547 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.547 I llm_load_print_meta: max token length = 93
0.00.377.141 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.377.149 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.377.150 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.377.150 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.377.151 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.377.152 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.278 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.285 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.285 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.286 I llama_new_context_with_model: n_batch       = 2048
0.00.382.286 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.287 I llama_new_context_with_model: flash_attn    = 0
0.00.382.289 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.290 I llama_new_context_with_model: freq_scale    = 1
0.00.382.291 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.563 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.576 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.665 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.897 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.902 I llama_new_context_with_model: graph nodes  = 601
0.00.397.902 I llama_new_context_with_model: graph splits = 1
0.00.397.905 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.326 I main: llama threadpool init, n_threads = 4
0.00.483.339 I 
0.00.483.412 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.483.415 I 
0.00.483.461 I sampler seed: 1209339763
0.00.483.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.475 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.476 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.477 I 
 increadibly, but it is also true that it is not possible to understand the universe without acknowledging the existence of some sort of higher purpose or meaning.

The

0.02.745.391 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6792.92 tokens per second)
0.02.745.394 I llama_perf_context_print:        load time =     481.44 ms
0.02.745.396 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.745.397 I llama_perf_context_print:        eval time =    2243.42 ms /    32 runs   (   70.11 ms per token,    14.26 tokens per second)
0.02.745.398 I llama_perf_context_print:       total time =    2262.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 4017 (40e71726) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.001.896 I main: load the model and apply lora adapter, if any
0.00.021.936 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.949 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.956 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.957 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.960 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.961 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.965 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.965 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.966 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.966 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.971 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.972 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.972 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.974 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.127 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.984 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.823 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.831 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.831 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.832 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.832 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.833 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.834 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.837 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.837 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.838 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.840 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.840 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.845 I llama_model_loader: - type  f32:   37 tensors
0.00.131.846 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.460 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.056 I llm_load_vocab: special tokens cache size = 5
0.00.269.525 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.541 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.542 I llm_load_print_meta: arch             = gemma
0.00.269.542 I llm_load_print_meta: vocab type       = SPM
0.00.269.543 I llm_load_print_meta: n_vocab          = 256000
0.00.269.543 I llm_load_print_meta: n_merges         = 0
0.00.269.544 I llm_load_print_meta: vocab_only       = 0
0.00.269.544 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.544 I llm_load_print_meta: n_embd           = 2048
0.00.269.545 I llm_load_print_meta: n_layer          = 18
0.00.269.558 I llm_load_print_meta: n_head           = 8
0.00.269.559 I llm_load_print_meta: n_head_kv        = 1
0.00.269.560 I llm_load_print_meta: n_rot            = 256
0.00.269.560 I llm_load_print_meta: n_swa            = 0
0.00.269.560 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.561 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.562 I llm_load_print_meta: n_gqa            = 8
0.00.269.562 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.563 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.564 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.566 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.566 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.566 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.567 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.567 I llm_load_print_meta: n_ff             = 16384
0.00.269.568 I llm_load_print_meta: n_expert         = 0
0.00.269.568 I llm_load_print_meta: n_expert_used    = 0
0.00.269.568 I llm_load_print_meta: causal attn      = 1
0.00.269.569 I llm_load_print_meta: pooling type     = 0
0.00.269.569 I llm_load_print_meta: rope type        = 2
0.00.269.569 I llm_load_print_meta: rope scaling     = linear
0.00.269.571 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.572 I llm_load_print_meta: freq_scale_train = 1
0.00.269.572 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.573 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.573 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.574 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.574 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.574 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.574 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.575 I llm_load_print_meta: model type       = 2B
0.00.269.575 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.576 I llm_load_print_meta: model params     = 2.51 B
0.00.269.577 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.577 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.578 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.578 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.579 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.579 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.579 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.580 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.580 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.580 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.581 I llm_load_print_meta: max token length = 93
0.00.366.476 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.591 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.597 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.597 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.598 I llama_new_context_with_model: n_batch       = 2048
0.00.371.598 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.599 I llama_new_context_with_model: flash_attn    = 0
0.00.371.601 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.602 I llama_new_context_with_model: freq_scale    = 1
0.00.371.603 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.428 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.444 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.532 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.760 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.766 I llama_new_context_with_model: graph nodes  = 601
0.00.387.767 I llama_new_context_with_model: graph splits = 1
0.00.387.769 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.428 I main: llama threadpool init, n_threads = 4
0.00.469.441 I 
0.00.469.518 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.521 I 
0.00.469.561 I sampler seed: 1004953174
0.00.469.572 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.576 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.577 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.577 I 
 increasities to the following question:

The question is: Determine the range and behavior of the function:

$$f(x) = x^4 -

0.02.688.225 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7064.87 tokens per second)
0.02.688.228 I llama_perf_context_print:        load time =     467.51 ms
0.02.688.229 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.688.230 I llama_perf_context_print:        eval time =    2199.75 ms /    32 runs   (   68.74 ms per token,    14.55 tokens per second)
0.02.688.231 I llama_perf_context_print:       total time =    2218.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.621 I build: 4017 (40e71726) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.841 I main: llama backend init
0.00.001.922 I main: load the model and apply lora adapter, if any
0.00.022.423 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.433 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.441 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.446 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.447 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.451 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.452 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.453 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.453 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.454 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.455 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.459 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.459 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.460 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.460 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.461 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.821 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.038 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.875 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.881 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.882 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.883 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.884 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.885 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.886 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.889 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.890 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.891 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.892 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.896 I llama_model_loader: - type  f32:   37 tensors
0.00.131.897 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.304 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.060 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.701 I llm_load_vocab: special tokens cache size = 5
0.00.264.162 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.175 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.176 I llm_load_print_meta: arch             = gemma
0.00.264.177 I llm_load_print_meta: vocab type       = SPM
0.00.264.177 I llm_load_print_meta: n_vocab          = 256000
0.00.264.178 I llm_load_print_meta: n_merges         = 0
0.00.264.178 I llm_load_print_meta: vocab_only       = 0
0.00.264.178 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.179 I llm_load_print_meta: n_embd           = 2048
0.00.264.179 I llm_load_print_meta: n_layer          = 18
0.00.264.189 I llm_load_print_meta: n_head           = 8
0.00.264.190 I llm_load_print_meta: n_head_kv        = 1
0.00.264.190 I llm_load_print_meta: n_rot            = 256
0.00.264.190 I llm_load_print_meta: n_swa            = 0
0.00.264.191 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.191 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.192 I llm_load_print_meta: n_gqa            = 8
0.00.264.193 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.194 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.195 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.196 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.196 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.197 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.197 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.198 I llm_load_print_meta: n_ff             = 16384
0.00.264.198 I llm_load_print_meta: n_expert         = 0
0.00.264.198 I llm_load_print_meta: n_expert_used    = 0
0.00.264.199 I llm_load_print_meta: causal attn      = 1
0.00.264.199 I llm_load_print_meta: pooling type     = 0
0.00.264.199 I llm_load_print_meta: rope type        = 2
0.00.264.200 I llm_load_print_meta: rope scaling     = linear
0.00.264.201 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.202 I llm_load_print_meta: freq_scale_train = 1
0.00.264.202 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.203 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.203 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.203 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.203 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.203 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.204 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.204 I llm_load_print_meta: model type       = 2B
0.00.264.205 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.205 I llm_load_print_meta: model params     = 2.51 B
0.00.264.206 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.207 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.207 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.208 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.208 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.208 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.208 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.209 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.209 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.209 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.210 I llm_load_print_meta: max token length = 93
0.00.359.225 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.359.233 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.359.234 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.359.235 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.359.236 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.359.236 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.520 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.526 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.526 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.527 I llama_new_context_with_model: n_batch       = 2048
0.00.364.527 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.527 I llama_new_context_with_model: flash_attn    = 0
0.00.364.531 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.532 I llama_new_context_with_model: freq_scale    = 1
0.00.364.533 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.220 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.233 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.327 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.599 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.607 I llama_new_context_with_model: graph nodes  = 601
0.00.381.607 I llama_new_context_with_model: graph splits = 1
0.00.381.609 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.387 I main: llama threadpool init, n_threads = 4
0.00.469.401 I 
0.00.469.474 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.477 I 
0.00.469.517 I sampler seed: 2288575961
0.00.469.528 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.531 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.533 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.533 I 
 increasities to ensure the accuracy and consistency of data analysis.

**Question:** What is the role of data validation in ensuring data integrity?

**A.**

0.02.622.857 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6672.06 tokens per second)
0.02.622.859 I llama_perf_context_print:        load time =     467.44 ms
0.02.622.861 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.622.862 I llama_perf_context_print:        eval time =    2133.95 ms /    32 runs   (   66.69 ms per token,    15.00 tokens per second)
0.02.622.863 I llama_perf_context_print:       total time =    2153.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.547 I build: 4017 (40e71726) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.001.860 I main: load the model and apply lora adapter, if any
0.00.023.530 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.539 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.547 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.552 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.553 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.557 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.558 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.559 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.559 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.560 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.560 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.564 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.565 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.565 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.566 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.566 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.085 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.599 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.542 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.549 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.549 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.550 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.551 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.552 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.552 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.555 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.556 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.557 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.557 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.137.558 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.561 I llama_model_loader: - type  f32:   37 tensors
0.00.137.562 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.811 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.390 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.977 I llm_load_vocab: special tokens cache size = 5
0.00.276.738 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.755 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.755 I llm_load_print_meta: arch             = gemma
0.00.276.756 I llm_load_print_meta: vocab type       = SPM
0.00.276.756 I llm_load_print_meta: n_vocab          = 256000
0.00.276.757 I llm_load_print_meta: n_merges         = 0
0.00.276.757 I llm_load_print_meta: vocab_only       = 0
0.00.276.758 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.758 I llm_load_print_meta: n_embd           = 2048
0.00.276.758 I llm_load_print_meta: n_layer          = 18
0.00.276.770 I llm_load_print_meta: n_head           = 8
0.00.276.771 I llm_load_print_meta: n_head_kv        = 1
0.00.276.772 I llm_load_print_meta: n_rot            = 256
0.00.276.772 I llm_load_print_meta: n_swa            = 0
0.00.276.772 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.773 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.774 I llm_load_print_meta: n_gqa            = 8
0.00.276.775 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.776 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.777 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.778 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.779 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.779 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.780 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.782 I llm_load_print_meta: n_ff             = 16384
0.00.276.783 I llm_load_print_meta: n_expert         = 0
0.00.276.783 I llm_load_print_meta: n_expert_used    = 0
0.00.276.784 I llm_load_print_meta: causal attn      = 1
0.00.276.784 I llm_load_print_meta: pooling type     = 0
0.00.276.785 I llm_load_print_meta: rope type        = 2
0.00.276.785 I llm_load_print_meta: rope scaling     = linear
0.00.276.787 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.787 I llm_load_print_meta: freq_scale_train = 1
0.00.276.788 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.788 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.789 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.789 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.789 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.789 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.790 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.791 I llm_load_print_meta: model type       = 2B
0.00.276.792 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.792 I llm_load_print_meta: model params     = 2.51 B
0.00.276.794 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.794 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.794 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.795 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.795 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.796 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.797 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.797 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.797 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.798 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.798 I llm_load_print_meta: max token length = 93
0.00.348.415 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.348.422 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.353.577 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.582 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.582 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.583 I llama_new_context_with_model: n_batch       = 2048
0.00.353.583 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.583 I llama_new_context_with_model: flash_attn    = 0
0.00.353.586 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.587 I llama_new_context_with_model: freq_scale    = 1
0.00.353.588 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.953 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.968 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.064 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.355 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.361 I llama_new_context_with_model: graph nodes  = 601
0.00.369.361 I llama_new_context_with_model: graph splits = 1
0.00.369.363 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.073 I main: llama threadpool init, n_threads = 4
0.00.458.086 I 
0.00.458.162 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.458.164 I 
0.00.458.206 I sampler seed: 2579820063
0.00.458.218 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.222 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.223 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.223 I 
 increamically.

**Assistant**

I understand. I will ensure that I provide you with accurate and relevant information promptly. [end of text]


0.02.353.068 I llama_perf_sampler_print:    sampling time =       4.61 ms /    27 runs   (    0.17 ms per token,  5854.29 tokens per second)
0.02.353.072 I llama_perf_context_print:        load time =     456.19 ms
0.02.353.073 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.353.075 I llama_perf_context_print:        eval time =    1877.76 ms /    26 runs   (   72.22 ms per token,    13.85 tokens per second)
0.02.353.077 I llama_perf_context_print:       total time =    1895.00 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.990s
user	0m36.973s
sys	0m9.512s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (40e71726)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32247.97 ms
main:    total time = 32247.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.588 I build: 4017 (40e71726) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.793 I main: llama backend init
0.00.001.890 I main: load the model and apply lora adapter, if any
0.00.022.496 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.505 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.514 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.518 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.519 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.523 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.525 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.525 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.526 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.527 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.528 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.533 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.534 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.534 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.535 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.536 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.855 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.704 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.711 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.712 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.713 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.713 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.714 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.715 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.718 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.718 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.719 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.720 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.721 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.725 I llama_model_loader: - type  f32:   37 tensors
0.00.132.725 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.726 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.846 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.914 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.461 I llm_load_vocab: special tokens cache size = 5
0.00.269.100 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.115 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.115 I llm_load_print_meta: arch             = gemma
0.00.269.116 I llm_load_print_meta: vocab type       = SPM
0.00.269.116 I llm_load_print_meta: n_vocab          = 256000
0.00.269.117 I llm_load_print_meta: n_merges         = 0
0.00.269.117 I llm_load_print_meta: vocab_only       = 0
0.00.269.118 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.118 I llm_load_print_meta: n_embd           = 2048
0.00.269.119 I llm_load_print_meta: n_layer          = 18
0.00.269.130 I llm_load_print_meta: n_head           = 8
0.00.269.131 I llm_load_print_meta: n_head_kv        = 1
0.00.269.132 I llm_load_print_meta: n_rot            = 256
0.00.269.132 I llm_load_print_meta: n_swa            = 0
0.00.269.133 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.133 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.134 I llm_load_print_meta: n_gqa            = 8
0.00.269.135 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.136 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.136 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.138 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.138 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.139 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.139 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.140 I llm_load_print_meta: n_ff             = 16384
0.00.269.140 I llm_load_print_meta: n_expert         = 0
0.00.269.140 I llm_load_print_meta: n_expert_used    = 0
0.00.269.141 I llm_load_print_meta: causal attn      = 1
0.00.269.141 I llm_load_print_meta: pooling type     = 0
0.00.269.141 I llm_load_print_meta: rope type        = 2
0.00.269.142 I llm_load_print_meta: rope scaling     = linear
0.00.269.143 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.144 I llm_load_print_meta: freq_scale_train = 1
0.00.269.144 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.145 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.145 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.145 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.145 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.146 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.146 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.146 I llm_load_print_meta: model type       = 2B
0.00.269.147 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.148 I llm_load_print_meta: model params     = 2.51 B
0.00.269.148 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.149 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.149 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.149 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.150 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.150 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.150 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.151 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.151 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.151 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.152 I llm_load_print_meta: max token length = 93
0.00.329.507 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.329.513 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.329.513 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.329.514 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.329.515 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.329.515 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.707 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.713 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.713 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.713 I llama_new_context_with_model: n_batch       = 2048
0.00.334.714 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.714 I llama_new_context_with_model: flash_attn    = 0
0.00.334.716 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.717 I llama_new_context_with_model: freq_scale    = 1
0.00.334.718 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.137 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.151 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.238 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.482 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.488 I llama_new_context_with_model: graph nodes  = 601
0.00.350.489 I llama_new_context_with_model: graph splits = 1
0.00.350.491 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.863 I main: llama threadpool init, n_threads = 4
0.00.425.875 I 
0.00.425.948 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.425.951 I 
0.00.425.989 I sampler seed: 208445562
0.00.426.000 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.002 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.003 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.003 I 
 strick by the wind and rain.

**Answer:** The poem is describing a stormy sea. [end of text]


0.01.459.075 I llama_perf_sampler_print:    sampling time =       3.09 ms /    21 runs   (    0.15 ms per token,  6798.32 tokens per second)
0.01.459.077 I llama_perf_context_print:        load time =     423.95 ms
0.01.459.078 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.459.080 I llama_perf_context_print:        eval time =    1020.76 ms /    20 runs   (   51.04 ms per token,    19.59 tokens per second)
0.01.459.080 I llama_perf_context_print:       total time =    1033.22 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (40e71726)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32010.91 ms
main:    total time = 32010.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.539 I build: 4017 (40e71726) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.850 I main: load the model and apply lora adapter, if any
0.00.022.596 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.611 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.618 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.619 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.622 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.623 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.624 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.624 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.625 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.626 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.630 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.631 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.631 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.632 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.632 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.117 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.619 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.435 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.441 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.441 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.442 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.442 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.443 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.444 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.446 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.447 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.449 I llama_model_loader: - type  f32:   37 tensors
0.00.132.450 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.450 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.978 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.622 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.200 I llm_load_vocab: special tokens cache size = 5
0.00.266.857 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.874 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.875 I llm_load_print_meta: arch             = gemma
0.00.266.876 I llm_load_print_meta: vocab type       = SPM
0.00.266.876 I llm_load_print_meta: n_vocab          = 256000
0.00.266.877 I llm_load_print_meta: n_merges         = 0
0.00.266.878 I llm_load_print_meta: vocab_only       = 0
0.00.266.878 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.878 I llm_load_print_meta: n_embd           = 2048
0.00.266.879 I llm_load_print_meta: n_layer          = 18
0.00.266.890 I llm_load_print_meta: n_head           = 8
0.00.266.891 I llm_load_print_meta: n_head_kv        = 1
0.00.266.891 I llm_load_print_meta: n_rot            = 256
0.00.266.892 I llm_load_print_meta: n_swa            = 0
0.00.266.892 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.892 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.893 I llm_load_print_meta: n_gqa            = 8
0.00.266.894 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.895 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.896 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.897 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.898 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.898 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.898 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.899 I llm_load_print_meta: n_ff             = 16384
0.00.266.899 I llm_load_print_meta: n_expert         = 0
0.00.266.900 I llm_load_print_meta: n_expert_used    = 0
0.00.266.900 I llm_load_print_meta: causal attn      = 1
0.00.266.900 I llm_load_print_meta: pooling type     = 0
0.00.266.901 I llm_load_print_meta: rope type        = 2
0.00.266.901 I llm_load_print_meta: rope scaling     = linear
0.00.266.903 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.903 I llm_load_print_meta: freq_scale_train = 1
0.00.266.903 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.904 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.904 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.904 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.905 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.905 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.905 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.905 I llm_load_print_meta: model type       = 2B
0.00.266.906 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.907 I llm_load_print_meta: model params     = 2.51 B
0.00.266.907 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.908 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.908 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.909 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.909 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.909 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.910 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.910 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.910 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.911 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.911 I llm_load_print_meta: max token length = 93
0.00.327.092 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.307 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.313 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.313 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.314 I llama_new_context_with_model: n_batch       = 2048
0.00.332.314 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.314 I llama_new_context_with_model: flash_attn    = 0
0.00.332.316 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.317 I llama_new_context_with_model: freq_scale    = 1
0.00.332.317 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.869 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.884 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.979 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.267 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.272 I llama_new_context_with_model: graph nodes  = 601
0.00.349.273 I llama_new_context_with_model: graph splits = 1
0.00.349.274 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.142 I main: llama threadpool init, n_threads = 4
0.00.424.156 I 
0.00.424.229 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.424.232 I 
0.00.424.273 I sampler seed: 2795998113
0.00.424.284 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.287 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.287 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.288 I 
 increasities, which involve a man and woman having a sexual relationship for the first time.

I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.01.962.131 I llama_perf_sampler_print:    sampling time =       4.72 ms /    32 runs   (    0.15 ms per token,  6781.10 tokens per second)
0.01.962.134 I llama_perf_context_print:        load time =     422.27 ms
0.01.962.135 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.962.137 I llama_perf_context_print:        eval time =    1520.01 ms /    31 runs   (   49.03 ms per token,    20.39 tokens per second)
0.01.962.139 I llama_perf_context_print:       total time =    1538.00 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.590s
user	8m11.608s
sys	0m7.102s
