+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.022.676 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.686 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.695 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.705 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.710 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.710 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.712 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.713 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.713 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.714 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.719 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.719 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.720 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.720 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.721 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.057 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.222 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.100 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.107 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.108 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.109 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.109 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.111 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.112 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.116 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.117 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.118 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.119 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.120 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.124 I llama_model_loader: - type  f32:   37 tensors
0.00.133.125 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.748 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.263 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.904 I llm_load_vocab: special tokens cache size = 5
0.00.294.275 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.297 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.298 I llm_load_print_meta: arch             = gemma
0.00.294.298 I llm_load_print_meta: vocab type       = SPM
0.00.294.300 I llm_load_print_meta: n_vocab          = 256000
0.00.294.300 I llm_load_print_meta: n_merges         = 0
0.00.294.301 I llm_load_print_meta: vocab_only       = 0
0.00.294.301 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.301 I llm_load_print_meta: n_embd           = 2048
0.00.294.302 I llm_load_print_meta: n_layer          = 18
0.00.294.313 I llm_load_print_meta: n_head           = 8
0.00.294.314 I llm_load_print_meta: n_head_kv        = 1
0.00.294.314 I llm_load_print_meta: n_rot            = 256
0.00.294.314 I llm_load_print_meta: n_swa            = 0
0.00.294.315 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.315 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.316 I llm_load_print_meta: n_gqa            = 8
0.00.294.317 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.318 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.319 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.320 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.321 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.321 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.321 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.322 I llm_load_print_meta: n_ff             = 16384
0.00.294.322 I llm_load_print_meta: n_expert         = 0
0.00.294.323 I llm_load_print_meta: n_expert_used    = 0
0.00.294.323 I llm_load_print_meta: causal attn      = 1
0.00.294.324 I llm_load_print_meta: pooling type     = 0
0.00.294.324 I llm_load_print_meta: rope type        = 2
0.00.294.324 I llm_load_print_meta: rope scaling     = linear
0.00.294.326 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.326 I llm_load_print_meta: freq_scale_train = 1
0.00.294.327 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.327 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.327 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.327 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.328 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.328 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.328 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.329 I llm_load_print_meta: model type       = 2B
0.00.294.329 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.330 I llm_load_print_meta: model params     = 2.51 B
0.00.294.331 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.331 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.331 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.332 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.332 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.333 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.333 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.333 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.334 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.334 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.335 I llm_load_print_meta: max token length = 93
0.00.392.592 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.392.601 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.392.602 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.392.602 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.392.603 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.392.603 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.397.983 I llama_new_context_with_model: n_seq_max     = 1
0.00.397.989 I llama_new_context_with_model: n_ctx         = 4096
0.00.397.989 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.397.989 I llama_new_context_with_model: n_batch       = 2048
0.00.397.990 I llama_new_context_with_model: n_ubatch      = 512
0.00.397.990 I llama_new_context_with_model: flash_attn    = 0
0.00.397.993 I llama_new_context_with_model: freq_base     = 10000.0
0.00.397.994 I llama_new_context_with_model: freq_scale    = 1
0.00.397.996 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.413.519 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.413.533 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.413.632 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.415.018 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.415.025 I llama_new_context_with_model: graph nodes  = 601
0.00.415.026 I llama_new_context_with_model: graph splits = 1
0.00.415.027 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.503.957 I main: llama threadpool init, n_threads = 4
0.00.503.972 I 
0.00.504.053 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.504.056 I 
0.00.504.101 I sampler seed: 4103339947
0.00.504.113 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.504.116 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.504.118 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.504.118 I 
 increably.

I am unable to answer this question as it contains sexually suggestive content. I am not able to provide responses that are sexually suggestive in nature.

0.02.835.792 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6741.57 tokens per second)
0.02.835.795 I llama_perf_context_print:        load time =     503.20 ms
0.02.835.797 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.835.799 I llama_perf_context_print:        eval time =    2312.43 ms /    32 runs   (   72.26 ms per token,    13.84 tokens per second)
0.02.835.799 I llama_perf_context_print:       total time =    2331.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.569 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.883 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.022.057 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.074 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.082 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.089 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.091 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.093 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.094 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.102 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.107 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.108 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.109 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.110 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.714 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.115 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.027 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.037 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.038 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.039 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.040 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.040 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.043 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.043 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.044 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.044 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.045 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.051 I llama_model_loader: - type  f32:   37 tensors
0.00.133.052 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.051 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.519 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.222 I llm_load_vocab: special tokens cache size = 5
0.00.289.438 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.459 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.460 I llm_load_print_meta: arch             = gemma
0.00.289.461 I llm_load_print_meta: vocab type       = SPM
0.00.289.461 I llm_load_print_meta: n_vocab          = 256000
0.00.289.462 I llm_load_print_meta: n_merges         = 0
0.00.289.462 I llm_load_print_meta: vocab_only       = 0
0.00.289.463 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.463 I llm_load_print_meta: n_embd           = 2048
0.00.289.463 I llm_load_print_meta: n_layer          = 18
0.00.289.476 I llm_load_print_meta: n_head           = 8
0.00.289.478 I llm_load_print_meta: n_head_kv        = 1
0.00.289.478 I llm_load_print_meta: n_rot            = 256
0.00.289.479 I llm_load_print_meta: n_swa            = 0
0.00.289.479 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.479 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.480 I llm_load_print_meta: n_gqa            = 8
0.00.289.481 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.482 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.483 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.484 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.485 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.485 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.485 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.486 I llm_load_print_meta: n_ff             = 16384
0.00.289.487 I llm_load_print_meta: n_expert         = 0
0.00.289.487 I llm_load_print_meta: n_expert_used    = 0
0.00.289.487 I llm_load_print_meta: causal attn      = 1
0.00.289.488 I llm_load_print_meta: pooling type     = 0
0.00.289.488 I llm_load_print_meta: rope type        = 2
0.00.289.488 I llm_load_print_meta: rope scaling     = linear
0.00.289.490 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.491 I llm_load_print_meta: freq_scale_train = 1
0.00.289.491 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.492 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.492 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.492 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.492 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.492 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.493 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.493 I llm_load_print_meta: model type       = 2B
0.00.289.494 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.495 I llm_load_print_meta: model params     = 2.51 B
0.00.289.496 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.496 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.496 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.497 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.497 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.497 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.498 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.498 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.499 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.499 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.499 I llm_load_print_meta: max token length = 93
0.00.384.399 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.389.839 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.846 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.846 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.846 I llama_new_context_with_model: n_batch       = 2048
0.00.389.847 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.847 I llama_new_context_with_model: flash_attn    = 0
0.00.389.850 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.851 I llama_new_context_with_model: freq_scale    = 1
0.00.389.852 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.031 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.047 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.138 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.435 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.441 I llama_new_context_with_model: graph nodes  = 601
0.00.406.442 I llama_new_context_with_model: graph splits = 1
0.00.406.443 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.217 I main: llama threadpool init, n_threads = 4
0.00.491.233 I 
0.00.491.324 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.327 I 
0.00.491.381 I sampler seed: 712221537
0.00.491.394 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.398 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.402 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.402 I 
 increasively in complexity. [end of text]


0.00.916.080 I llama_perf_sampler_print:    sampling time =       0.98 ms /     7 runs   (    0.14 ms per token,  7164.79 tokens per second)
0.00.916.082 I llama_perf_context_print:        load time =     490.30 ms
0.00.916.083 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.916.085 I llama_perf_context_print:        eval time =     420.02 ms /     6 runs   (   70.00 ms per token,    14.29 tokens per second)
0.00.916.086 I llama_perf_context_print:       total time =     424.87 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.626 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.846 I main: llama backend init
0.00.000.852 I main: load the model and apply lora adapter, if any
0.00.021.394 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.405 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.423 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.429 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.430 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.435 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.436 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.436 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.438 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.439 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.439 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.444 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.445 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.446 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.447 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.447 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.519 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.486 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.494 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.495 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.495 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.496 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.497 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.498 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.500 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.501 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.501 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.502 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.503 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.507 I llama_model_loader: - type  f32:   37 tensors
0.00.132.508 I llama_model_loader: - type q8_0:  127 tensors
0.00.229.706 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.282.839 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.283.569 I llm_load_vocab: special tokens cache size = 5
0.00.304.890 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.304.908 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.304.908 I llm_load_print_meta: arch             = gemma
0.00.304.909 I llm_load_print_meta: vocab type       = SPM
0.00.304.910 I llm_load_print_meta: n_vocab          = 256000
0.00.304.910 I llm_load_print_meta: n_merges         = 0
0.00.304.910 I llm_load_print_meta: vocab_only       = 0
0.00.304.911 I llm_load_print_meta: n_ctx_train      = 8192
0.00.304.911 I llm_load_print_meta: n_embd           = 2048
0.00.304.911 I llm_load_print_meta: n_layer          = 18
0.00.304.924 I llm_load_print_meta: n_head           = 8
0.00.304.925 I llm_load_print_meta: n_head_kv        = 1
0.00.304.926 I llm_load_print_meta: n_rot            = 256
0.00.304.926 I llm_load_print_meta: n_swa            = 0
0.00.304.926 I llm_load_print_meta: n_embd_head_k    = 256
0.00.304.926 I llm_load_print_meta: n_embd_head_v    = 256
0.00.304.927 I llm_load_print_meta: n_gqa            = 8
0.00.304.928 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.304.929 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.304.930 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.304.932 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.304.932 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.304.932 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.304.932 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.304.933 I llm_load_print_meta: n_ff             = 16384
0.00.304.934 I llm_load_print_meta: n_expert         = 0
0.00.304.934 I llm_load_print_meta: n_expert_used    = 0
0.00.304.934 I llm_load_print_meta: causal attn      = 1
0.00.304.935 I llm_load_print_meta: pooling type     = 0
0.00.304.935 I llm_load_print_meta: rope type        = 2
0.00.304.935 I llm_load_print_meta: rope scaling     = linear
0.00.304.937 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.304.937 I llm_load_print_meta: freq_scale_train = 1
0.00.304.938 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.304.938 I llm_load_print_meta: rope_finetuned   = unknown
0.00.304.938 I llm_load_print_meta: ssm_d_conv       = 0
0.00.304.939 I llm_load_print_meta: ssm_d_inner      = 0
0.00.304.939 I llm_load_print_meta: ssm_d_state      = 0
0.00.304.939 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.304.939 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.304.940 I llm_load_print_meta: model type       = 2B
0.00.304.940 I llm_load_print_meta: model ftype      = Q8_0
0.00.304.941 I llm_load_print_meta: model params     = 2.51 B
0.00.304.942 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.304.942 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.304.943 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.304.944 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.304.944 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.304.944 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.304.945 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.304.945 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.304.946 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.304.946 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.304.947 I llm_load_print_meta: max token length = 93
0.00.383.454 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.383.461 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.383.462 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.383.463 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.383.464 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.383.464 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.388.575 I llama_new_context_with_model: n_seq_max     = 1
0.00.388.583 I llama_new_context_with_model: n_ctx         = 4096
0.00.388.583 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.388.584 I llama_new_context_with_model: n_batch       = 2048
0.00.388.584 I llama_new_context_with_model: n_ubatch      = 512
0.00.388.585 I llama_new_context_with_model: flash_attn    = 0
0.00.388.588 I llama_new_context_with_model: freq_base     = 10000.0
0.00.388.589 I llama_new_context_with_model: freq_scale    = 1
0.00.388.589 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.403.542 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.403.555 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.403.647 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.000 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.006 I llama_new_context_with_model: graph nodes  = 601
0.00.405.006 I llama_new_context_with_model: graph splits = 1
0.00.405.008 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.510 I main: llama threadpool init, n_threads = 4
0.00.492.525 I 
0.00.492.619 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.622 I 
0.00.492.664 I sampler seed: 1774910062
0.00.492.676 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.678 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.679 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.679 I 
 increasively.

I'm sorry, but I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.02.232.042 I llama_perf_sampler_print:    sampling time =       3.82 ms /    25 runs   (    0.15 ms per token,  6537.66 tokens per second)
0.02.232.044 I llama_perf_context_print:        load time =     491.64 ms
0.02.232.045 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.232.046 I llama_perf_context_print:        eval time =    1724.57 ms /    24 runs   (   71.86 ms per token,    13.92 tokens per second)
0.02.232.047 I llama_perf_context_print:       total time =    1739.54 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.574 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.774 I main: load the model and apply lora adapter, if any
0.00.021.073 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.084 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.096 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.101 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.102 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.106 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.107 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.108 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.109 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.110 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.115 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.116 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.116 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.117 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.117 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.742 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.265 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.113 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.121 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.122 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.123 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.123 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.125 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.126 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.130 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.131 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.132 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.132 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.134 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.138 I llama_model_loader: - type  f32:   37 tensors
0.00.132.140 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.183 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.273.978 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.725 I llm_load_vocab: special tokens cache size = 5
0.00.296.081 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.296.099 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.296.100 I llm_load_print_meta: arch             = gemma
0.00.296.101 I llm_load_print_meta: vocab type       = SPM
0.00.296.123 I llm_load_print_meta: n_vocab          = 256000
0.00.296.124 I llm_load_print_meta: n_merges         = 0
0.00.296.124 I llm_load_print_meta: vocab_only       = 0
0.00.296.125 I llm_load_print_meta: n_ctx_train      = 8192
0.00.296.125 I llm_load_print_meta: n_embd           = 2048
0.00.296.125 I llm_load_print_meta: n_layer          = 18
0.00.296.138 I llm_load_print_meta: n_head           = 8
0.00.296.140 I llm_load_print_meta: n_head_kv        = 1
0.00.296.140 I llm_load_print_meta: n_rot            = 256
0.00.296.141 I llm_load_print_meta: n_swa            = 0
0.00.296.142 I llm_load_print_meta: n_embd_head_k    = 256
0.00.296.142 I llm_load_print_meta: n_embd_head_v    = 256
0.00.296.143 I llm_load_print_meta: n_gqa            = 8
0.00.296.144 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.296.145 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.296.146 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.296.148 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.296.149 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.296.149 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.296.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.296.150 I llm_load_print_meta: n_ff             = 16384
0.00.296.151 I llm_load_print_meta: n_expert         = 0
0.00.296.151 I llm_load_print_meta: n_expert_used    = 0
0.00.296.151 I llm_load_print_meta: causal attn      = 1
0.00.296.152 I llm_load_print_meta: pooling type     = 0
0.00.296.152 I llm_load_print_meta: rope type        = 2
0.00.296.152 I llm_load_print_meta: rope scaling     = linear
0.00.296.154 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.296.155 I llm_load_print_meta: freq_scale_train = 1
0.00.296.155 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.296.156 I llm_load_print_meta: rope_finetuned   = unknown
0.00.296.156 I llm_load_print_meta: ssm_d_conv       = 0
0.00.296.156 I llm_load_print_meta: ssm_d_inner      = 0
0.00.296.156 I llm_load_print_meta: ssm_d_state      = 0
0.00.296.167 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.296.168 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.296.168 I llm_load_print_meta: model type       = 2B
0.00.296.169 I llm_load_print_meta: model ftype      = Q8_0
0.00.296.170 I llm_load_print_meta: model params     = 2.51 B
0.00.296.171 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.296.171 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.296.172 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.296.175 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.296.175 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.296.175 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.296.176 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.296.176 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.296.177 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.296.177 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.296.177 I llm_load_print_meta: max token length = 93
0.00.367.086 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.367.094 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.372.421 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.428 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.429 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.429 I llama_new_context_with_model: n_batch       = 2048
0.00.372.429 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.430 I llama_new_context_with_model: flash_attn    = 0
0.00.372.433 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.434 I llama_new_context_with_model: freq_scale    = 1
0.00.372.435 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.593 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.608 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.711 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.144 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.150 I llama_new_context_with_model: graph nodes  = 601
0.00.389.151 I llama_new_context_with_model: graph splits = 1
0.00.389.152 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.742 I main: llama threadpool init, n_threads = 4
0.00.489.759 I 
0.00.489.852 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.857 I 
0.00.489.914 I sampler seed: 3275507740
0.00.489.926 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.929 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.930 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.931 I 
 increasively with the volume of the room. [end of text]


0.01.282.179 I llama_perf_sampler_print:    sampling time =       1.66 ms /    11 runs   (    0.15 ms per token,  6622.52 tokens per second)
0.01.282.181 I llama_perf_context_print:        load time =     488.95 ms
0.01.282.182 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.282.183 I llama_perf_context_print:        eval time =     785.54 ms /    10 runs   (   78.55 ms per token,    12.73 tokens per second)
0.01.282.184 I llama_perf_context_print:       total time =     792.44 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.440s
user	0m24.187s
sys	0m9.689s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4093 (4047be74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40288.62 ms
main:    total time = 40288.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.570 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.634 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.643 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.651 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.660 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.661 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.666 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.668 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.669 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.669 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.670 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.671 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.675 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.676 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.676 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.677 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.677 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.124 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.467 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.378 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.387 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.388 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.388 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.389 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.389 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.390 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.393 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.393 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.394 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.394 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.395 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.399 I llama_model_loader: - type  f32:   37 tensors
0.00.132.401 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.401 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.261 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.108 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.798 I llm_load_vocab: special tokens cache size = 5
0.00.291.099 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.119 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.120 I llm_load_print_meta: arch             = gemma
0.00.291.121 I llm_load_print_meta: vocab type       = SPM
0.00.291.121 I llm_load_print_meta: n_vocab          = 256000
0.00.291.122 I llm_load_print_meta: n_merges         = 0
0.00.291.122 I llm_load_print_meta: vocab_only       = 0
0.00.291.123 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.123 I llm_load_print_meta: n_embd           = 2048
0.00.291.123 I llm_load_print_meta: n_layer          = 18
0.00.291.137 I llm_load_print_meta: n_head           = 8
0.00.291.138 I llm_load_print_meta: n_head_kv        = 1
0.00.291.138 I llm_load_print_meta: n_rot            = 256
0.00.291.139 I llm_load_print_meta: n_swa            = 0
0.00.291.139 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.139 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.140 I llm_load_print_meta: n_gqa            = 8
0.00.291.141 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.142 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.143 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.144 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.145 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.145 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.146 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.147 I llm_load_print_meta: n_ff             = 16384
0.00.291.147 I llm_load_print_meta: n_expert         = 0
0.00.291.147 I llm_load_print_meta: n_expert_used    = 0
0.00.291.148 I llm_load_print_meta: causal attn      = 1
0.00.291.148 I llm_load_print_meta: pooling type     = 0
0.00.291.148 I llm_load_print_meta: rope type        = 2
0.00.291.149 I llm_load_print_meta: rope scaling     = linear
0.00.291.150 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.151 I llm_load_print_meta: freq_scale_train = 1
0.00.291.151 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.151 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.151 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.152 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.152 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.152 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.153 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.153 I llm_load_print_meta: model type       = 2B
0.00.291.153 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.291.154 I llm_load_print_meta: model params     = 2.51 B
0.00.291.155 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.291.155 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.156 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.156 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.157 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.157 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.157 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.158 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.158 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.159 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.159 I llm_load_print_meta: max token length = 93
0.00.350.752 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.350.761 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.350.761 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.350.762 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.350.763 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.350.763 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.356.000 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.007 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.008 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.008 I llama_new_context_with_model: n_batch       = 2048
0.00.356.009 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.009 I llama_new_context_with_model: flash_attn    = 0
0.00.356.012 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.013 I llama_new_context_with_model: freq_scale    = 1
0.00.356.014 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.247 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.262 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.359 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.687 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.694 I llama_new_context_with_model: graph nodes  = 601
0.00.372.694 I llama_new_context_with_model: graph splits = 1
0.00.372.696 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.509 I main: llama threadpool init, n_threads = 4
0.00.449.523 I 
0.00.449.598 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.601 I 
0.00.449.645 I sampler seed: 3421291238
0.00.449.658 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.661 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.663 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.663 I 
 maneupher! 

I am unable to access the requested webpage due to a firewall or other security restrictions. I would appreciate it if you could investigate the issue

0.02.153.257 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6460.45 tokens per second)
0.02.153.260 I llama_perf_context_print:        load time =     448.72 ms
0.02.153.262 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.153.264 I llama_perf_context_print:        eval time =    1683.63 ms /    32 runs   (   52.61 ms per token,    19.01 tokens per second)
0.02.153.264 I llama_perf_context_print:       total time =    1703.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4093 (4047be74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40236.00 ms
main:    total time = 40236.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.584 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.000.808 I main: load the model and apply lora adapter, if any
0.00.021.354 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.371 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.379 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.380 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.387 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.390 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.391 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.395 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.396 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.396 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.397 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.397 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.908 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.402 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.297 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.305 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.306 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.307 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.308 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.309 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.310 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.313 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.314 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.319 I llama_model_loader: - type  f32:   37 tensors
0.00.132.320 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.320 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.677 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.548 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.222 I llm_load_vocab: special tokens cache size = 5
0.00.291.448 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.471 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.472 I llm_load_print_meta: arch             = gemma
0.00.291.472 I llm_load_print_meta: vocab type       = SPM
0.00.291.473 I llm_load_print_meta: n_vocab          = 256000
0.00.291.473 I llm_load_print_meta: n_merges         = 0
0.00.291.473 I llm_load_print_meta: vocab_only       = 0
0.00.291.474 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.474 I llm_load_print_meta: n_embd           = 2048
0.00.291.475 I llm_load_print_meta: n_layer          = 18
0.00.291.487 I llm_load_print_meta: n_head           = 8
0.00.291.488 I llm_load_print_meta: n_head_kv        = 1
0.00.291.489 I llm_load_print_meta: n_rot            = 256
0.00.291.489 I llm_load_print_meta: n_swa            = 0
0.00.291.489 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.490 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.491 I llm_load_print_meta: n_gqa            = 8
0.00.291.492 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.492 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.493 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.494 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.495 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.495 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.495 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.496 I llm_load_print_meta: n_ff             = 16384
0.00.291.497 I llm_load_print_meta: n_expert         = 0
0.00.291.497 I llm_load_print_meta: n_expert_used    = 0
0.00.291.497 I llm_load_print_meta: causal attn      = 1
0.00.291.497 I llm_load_print_meta: pooling type     = 0
0.00.291.497 I llm_load_print_meta: rope type        = 2
0.00.291.498 I llm_load_print_meta: rope scaling     = linear
0.00.291.499 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.500 I llm_load_print_meta: freq_scale_train = 1
0.00.291.500 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.500 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.501 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.501 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.501 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.501 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.501 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.502 I llm_load_print_meta: model type       = 2B
0.00.291.503 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.291.503 I llm_load_print_meta: model params     = 2.51 B
0.00.291.504 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.291.504 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.505 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.505 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.506 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.506 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.506 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.507 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.507 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.508 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.508 I llm_load_print_meta: max token length = 93
0.00.349.237 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.354.604 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.612 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.612 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.613 I llama_new_context_with_model: n_batch       = 2048
0.00.354.613 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.614 I llama_new_context_with_model: flash_attn    = 0
0.00.354.618 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.619 I llama_new_context_with_model: freq_scale    = 1
0.00.354.620 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.547 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.564 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.657 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.919 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.925 I llama_new_context_with_model: graph nodes  = 601
0.00.372.926 I llama_new_context_with_model: graph splits = 1
0.00.372.928 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.527 I main: llama threadpool init, n_threads = 4
0.00.451.542 I 
0.00.451.624 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.627 I 
0.00.451.674 I sampler seed: 2943449854
0.00.451.684 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.688 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.689 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.689 I 
 seconded,
I am unable to generate the requested output. To assist you further, please provide more context or specify the desired output. [end of text]


0.01.966.343 I llama_perf_sampler_print:    sampling time =       4.60 ms /    30 runs   (    0.15 ms per token,  6526.00 tokens per second)
0.01.966.347 I llama_perf_context_print:        load time =     450.70 ms
0.01.966.348 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.966.350 I llama_perf_context_print:        eval time =    1496.59 ms /    29 runs   (   51.61 ms per token,    19.38 tokens per second)
0.01.966.351 I llama_perf_context_print:       total time =    1514.83 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.504s
user	10m24.698s
sys	0m7.332s
