+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.023.558 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.661 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.675 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.676 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.682 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.684 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.685 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.687 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.689 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.690 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.698 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.699 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.701 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.702 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.705 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.970 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.012 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.616 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.629 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.630 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.631 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.632 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.633 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.635 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.638 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.639 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.642 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.643 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.645 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.652 I llama_model_loader: - type  f32:   37 tensors
0.00.272.655 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.406 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.304 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.288 I llm_load_vocab: special tokens cache size = 5
0.00.651.243 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.651.325 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.651.326 I llm_load_print_meta: arch             = gemma
0.00.651.327 I llm_load_print_meta: vocab type       = SPM
0.00.651.328 I llm_load_print_meta: n_vocab          = 256000
0.00.651.330 I llm_load_print_meta: n_merges         = 0
0.00.651.330 I llm_load_print_meta: vocab_only       = 0
0.00.651.331 I llm_load_print_meta: n_ctx_train      = 8192
0.00.651.331 I llm_load_print_meta: n_embd           = 2048
0.00.651.332 I llm_load_print_meta: n_layer          = 18
0.00.651.398 I llm_load_print_meta: n_head           = 8
0.00.651.405 I llm_load_print_meta: n_head_kv        = 1
0.00.651.405 I llm_load_print_meta: n_rot            = 256
0.00.651.406 I llm_load_print_meta: n_swa            = 0
0.00.651.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.651.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.651.411 I llm_load_print_meta: n_gqa            = 8
0.00.651.416 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.651.422 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.651.423 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.651.431 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.651.432 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.651.432 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.651.434 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.651.440 I llm_load_print_meta: n_ff             = 16384
0.00.651.440 I llm_load_print_meta: n_expert         = 0
0.00.651.441 I llm_load_print_meta: n_expert_used    = 0
0.00.651.442 I llm_load_print_meta: causal attn      = 1
0.00.651.444 I llm_load_print_meta: pooling type     = 0
0.00.651.444 I llm_load_print_meta: rope type        = 2
0.00.651.445 I llm_load_print_meta: rope scaling     = linear
0.00.651.446 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.651.447 I llm_load_print_meta: freq_scale_train = 1
0.00.651.473 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.651.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.651.474 I llm_load_print_meta: ssm_d_conv       = 0
0.00.651.474 I llm_load_print_meta: ssm_d_inner      = 0
0.00.651.475 I llm_load_print_meta: ssm_d_state      = 0
0.00.651.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.651.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.651.477 I llm_load_print_meta: model type       = 2B
0.00.651.478 I llm_load_print_meta: model ftype      = Q8_0
0.00.651.481 I llm_load_print_meta: model params     = 2.51 B
0.00.651.482 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.651.483 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.651.483 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.651.484 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.651.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.651.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.651.485 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.651.485 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.651.499 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.651.501 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.651.509 I llm_load_print_meta: max token length = 93
0.00.751.962 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.751.970 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.751.971 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.751.972 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.751.973 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.751.973 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.757.895 I llama_new_context_with_model: n_seq_max     = 1
0.00.757.903 I llama_new_context_with_model: n_ctx         = 4096
0.00.757.904 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.757.904 I llama_new_context_with_model: n_batch       = 2048
0.00.757.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.757.905 I llama_new_context_with_model: flash_attn    = 0
0.00.757.907 I llama_new_context_with_model: freq_base     = 10000.0
0.00.757.908 I llama_new_context_with_model: freq_scale    = 1
0.00.757.908 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.772.845 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.772.885 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.772.999 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.775.664 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.775.668 I llama_new_context_with_model: graph nodes  = 601
0.00.775.669 I llama_new_context_with_model: graph splits = 1
0.00.775.692 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.383.495 I main: llama threadpool init, n_threads = 4
0.01.383.509 I 
0.01.383.616 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.383.616 I 
0.01.383.853 I sampler seed: 353520392
0.01.383.868 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.383.876 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.383.877 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.383.877 I 
 increamically. [end of text]


0.03.081.935 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.80 tokens per second)
0.03.081.949 I llama_perf_context_print:        load time =    1382.56 ms
0.03.081.951 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.081.953 I llama_perf_context_print:        eval time =    1685.34 ms /     4 runs   (  421.34 ms per token,     2.37 tokens per second)
0.03.081.955 I llama_perf_context_print:       total time =    1698.45 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.023.726 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.826 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.841 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.845 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.852 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.854 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.858 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.859 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.860 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.869 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.876 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.879 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.881 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.882 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.883 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.752 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.255 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.766 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.780 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.782 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.783 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.784 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.785 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.787 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.790 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.792 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.793 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.794 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.272.795 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.804 I llama_model_loader: - type  f32:   37 tensors
0.00.272.806 I llama_model_loader: - type q8_0:  127 tensors
0.00.495.011 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.564.491 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.565.574 I llm_load_vocab: special tokens cache size = 5
0.00.661.060 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.661.139 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.661.140 I llm_load_print_meta: arch             = gemma
0.00.661.141 I llm_load_print_meta: vocab type       = SPM
0.00.661.142 I llm_load_print_meta: n_vocab          = 256000
0.00.661.144 I llm_load_print_meta: n_merges         = 0
0.00.661.145 I llm_load_print_meta: vocab_only       = 0
0.00.661.145 I llm_load_print_meta: n_ctx_train      = 8192
0.00.661.146 I llm_load_print_meta: n_embd           = 2048
0.00.661.146 I llm_load_print_meta: n_layer          = 18
0.00.661.211 I llm_load_print_meta: n_head           = 8
0.00.661.218 I llm_load_print_meta: n_head_kv        = 1
0.00.661.218 I llm_load_print_meta: n_rot            = 256
0.00.661.219 I llm_load_print_meta: n_swa            = 0
0.00.661.220 I llm_load_print_meta: n_embd_head_k    = 256
0.00.661.221 I llm_load_print_meta: n_embd_head_v    = 256
0.00.661.225 I llm_load_print_meta: n_gqa            = 8
0.00.661.230 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.661.236 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.661.237 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.661.238 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.661.239 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.661.239 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.661.240 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.661.245 I llm_load_print_meta: n_ff             = 16384
0.00.661.246 I llm_load_print_meta: n_expert         = 0
0.00.661.246 I llm_load_print_meta: n_expert_used    = 0
0.00.661.256 I llm_load_print_meta: causal attn      = 1
0.00.661.257 I llm_load_print_meta: pooling type     = 0
0.00.661.258 I llm_load_print_meta: rope type        = 2
0.00.661.258 I llm_load_print_meta: rope scaling     = linear
0.00.661.259 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.661.260 I llm_load_print_meta: freq_scale_train = 1
0.00.661.261 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.661.261 I llm_load_print_meta: rope_finetuned   = unknown
0.00.661.262 I llm_load_print_meta: ssm_d_conv       = 0
0.00.661.262 I llm_load_print_meta: ssm_d_inner      = 0
0.00.661.263 I llm_load_print_meta: ssm_d_state      = 0
0.00.661.263 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.661.264 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.661.265 I llm_load_print_meta: model type       = 2B
0.00.661.266 I llm_load_print_meta: model ftype      = Q8_0
0.00.661.267 I llm_load_print_meta: model params     = 2.51 B
0.00.661.268 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.661.268 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.661.270 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.661.270 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.661.285 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.661.293 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.661.294 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.661.298 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.661.304 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.661.306 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.661.306 I llm_load_print_meta: max token length = 93
0.00.756.695 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.762.804 I llama_new_context_with_model: n_seq_max     = 1
0.00.762.811 I llama_new_context_with_model: n_ctx         = 4096
0.00.762.812 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.762.812 I llama_new_context_with_model: n_batch       = 2048
0.00.762.813 I llama_new_context_with_model: n_ubatch      = 512
0.00.762.813 I llama_new_context_with_model: flash_attn    = 0
0.00.762.816 I llama_new_context_with_model: freq_base     = 10000.0
0.00.762.817 I llama_new_context_with_model: freq_scale    = 1
0.00.762.818 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.778.624 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.778.669 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.778.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.781.437 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.781.441 I llama_new_context_with_model: graph nodes  = 601
0.00.781.442 I llama_new_context_with_model: graph splits = 1
0.00.781.465 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.392.793 I main: llama threadpool init, n_threads = 4
0.01.392.807 I 
0.01.392.918 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.392.922 I 
0.01.393.154 I sampler seed: 1743505744
0.01.393.167 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.393.175 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.393.176 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.393.176 I 
 seconals. 

I cannot answer this question as it contains sexually suggestive content. [end of text]


0.09.021.447 I llama_perf_sampler_print:    sampling time =      27.71 ms /    19 runs   (    1.46 ms per token,   685.60 tokens per second)
0.09.021.463 I llama_perf_context_print:        load time =    1391.82 ms
0.09.021.465 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.021.466 I llama_perf_context_print:        eval time =    7576.16 ms /    18 runs   (  420.90 ms per token,     2.38 tokens per second)
0.09.021.467 I llama_perf_context_print:       total time =    7628.67 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.505 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.520 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.627 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.628 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.635 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.636 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.637 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.638 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.639 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.641 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.657 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.661 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.662 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.663 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.664 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.790 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.549 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.270 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.284 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.285 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.286 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.287 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.289 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.293 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.294 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.295 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.296 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.273.298 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.308 I llama_model_loader: - type  f32:   37 tensors
0.00.273.311 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.662 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.546.595 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.547.580 I llm_load_vocab: special tokens cache size = 5
0.00.644.816 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.644.897 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.644.898 I llm_load_print_meta: arch             = gemma
0.00.644.898 I llm_load_print_meta: vocab type       = SPM
0.00.644.899 I llm_load_print_meta: n_vocab          = 256000
0.00.644.903 I llm_load_print_meta: n_merges         = 0
0.00.644.903 I llm_load_print_meta: vocab_only       = 0
0.00.644.904 I llm_load_print_meta: n_ctx_train      = 8192
0.00.644.904 I llm_load_print_meta: n_embd           = 2048
0.00.644.904 I llm_load_print_meta: n_layer          = 18
0.00.644.967 I llm_load_print_meta: n_head           = 8
0.00.644.973 I llm_load_print_meta: n_head_kv        = 1
0.00.644.974 I llm_load_print_meta: n_rot            = 256
0.00.644.974 I llm_load_print_meta: n_swa            = 0
0.00.644.975 I llm_load_print_meta: n_embd_head_k    = 256
0.00.644.975 I llm_load_print_meta: n_embd_head_v    = 256
0.00.644.979 I llm_load_print_meta: n_gqa            = 8
0.00.644.984 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.644.990 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.644.991 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.644.992 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.644.993 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.644.993 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.644.993 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.644.998 I llm_load_print_meta: n_ff             = 16384
0.00.644.999 I llm_load_print_meta: n_expert         = 0
0.00.644.999 I llm_load_print_meta: n_expert_used    = 0
0.00.644.999 I llm_load_print_meta: causal attn      = 1
0.00.645.000 I llm_load_print_meta: pooling type     = 0
0.00.645.000 I llm_load_print_meta: rope type        = 2
0.00.645.000 I llm_load_print_meta: rope scaling     = linear
0.00.645.002 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.645.002 I llm_load_print_meta: freq_scale_train = 1
0.00.645.003 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.645.003 I llm_load_print_meta: rope_finetuned   = unknown
0.00.645.003 I llm_load_print_meta: ssm_d_conv       = 0
0.00.645.004 I llm_load_print_meta: ssm_d_inner      = 0
0.00.645.004 I llm_load_print_meta: ssm_d_state      = 0
0.00.645.004 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.645.004 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.645.005 I llm_load_print_meta: model type       = 2B
0.00.645.006 I llm_load_print_meta: model ftype      = Q8_0
0.00.645.007 I llm_load_print_meta: model params     = 2.51 B
0.00.645.008 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.645.008 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.645.009 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.645.009 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.645.010 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.645.010 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.645.010 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.645.011 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.645.017 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.645.018 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.645.018 I llm_load_print_meta: max token length = 93
0.00.725.984 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.725.994 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.725.995 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.725.996 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.725.997 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.725.998 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.732.077 I llama_new_context_with_model: n_seq_max     = 1
0.00.732.084 I llama_new_context_with_model: n_ctx         = 4096
0.00.732.084 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.732.084 I llama_new_context_with_model: n_batch       = 2048
0.00.732.085 I llama_new_context_with_model: n_ubatch      = 512
0.00.732.085 I llama_new_context_with_model: flash_attn    = 0
0.00.732.089 I llama_new_context_with_model: freq_base     = 10000.0
0.00.732.089 I llama_new_context_with_model: freq_scale    = 1
0.00.732.090 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.747.396 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.747.435 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.747.551 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.750.127 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.750.132 I llama_new_context_with_model: graph nodes  = 601
0.00.750.132 I llama_new_context_with_model: graph splits = 1
0.00.750.156 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.833 I main: llama threadpool init, n_threads = 4
0.01.359.847 I 
0.01.359.954 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.958 I 
0.01.360.195 I sampler seed: 3214429356
0.01.360.207 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.215 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.360.218 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.218 I 
 increably.

I am unable to access the requested content. Please check your internet connection or try again later. [end of text]


0.11.584.741 I llama_perf_sampler_print:    sampling time =      36.93 ms /    25 runs   (    1.48 ms per token,   676.90 tokens per second)
0.11.584.744 I llama_perf_context_print:        load time =    1358.87 ms
0.11.584.746 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.584.760 I llama_perf_context_print:        eval time =   10156.80 ms /    24 runs   (  423.20 ms per token,     2.36 tokens per second)
0.11.584.761 I llama_perf_context_print:       total time =   10224.92 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.000.894 I main: load the model and apply lora adapter, if any
0.00.023.968 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.981 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.077 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.090 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.092 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.099 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.103 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.104 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.105 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.106 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.107 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.116 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.117 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.118 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.119 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.120 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.052 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.474 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.045 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.058 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.060 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.061 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.071 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.073 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.074 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.078 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.080 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.081 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.082 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.273.099 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.107 I llama_model_loader: - type  f32:   37 tensors
0.00.273.112 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.731 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.316 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.296 I llm_load_vocab: special tokens cache size = 5
0.00.651.932 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.652.007 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.652.008 I llm_load_print_meta: arch             = gemma
0.00.652.009 I llm_load_print_meta: vocab type       = SPM
0.00.652.010 I llm_load_print_meta: n_vocab          = 256000
0.00.652.012 I llm_load_print_meta: n_merges         = 0
0.00.652.013 I llm_load_print_meta: vocab_only       = 0
0.00.652.013 I llm_load_print_meta: n_ctx_train      = 8192
0.00.652.014 I llm_load_print_meta: n_embd           = 2048
0.00.652.014 I llm_load_print_meta: n_layer          = 18
0.00.652.077 I llm_load_print_meta: n_head           = 8
0.00.652.085 I llm_load_print_meta: n_head_kv        = 1
0.00.652.085 I llm_load_print_meta: n_rot            = 256
0.00.652.085 I llm_load_print_meta: n_swa            = 0
0.00.652.086 I llm_load_print_meta: n_embd_head_k    = 256
0.00.652.086 I llm_load_print_meta: n_embd_head_v    = 256
0.00.652.091 I llm_load_print_meta: n_gqa            = 8
0.00.652.095 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.652.101 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.652.102 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.652.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.652.104 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.652.104 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.652.104 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.652.109 I llm_load_print_meta: n_ff             = 16384
0.00.652.110 I llm_load_print_meta: n_expert         = 0
0.00.652.111 I llm_load_print_meta: n_expert_used    = 0
0.00.652.111 I llm_load_print_meta: causal attn      = 1
0.00.652.111 I llm_load_print_meta: pooling type     = 0
0.00.652.112 I llm_load_print_meta: rope type        = 2
0.00.652.112 I llm_load_print_meta: rope scaling     = linear
0.00.652.114 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.652.114 I llm_load_print_meta: freq_scale_train = 1
0.00.652.115 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.652.115 I llm_load_print_meta: rope_finetuned   = unknown
0.00.652.115 I llm_load_print_meta: ssm_d_conv       = 0
0.00.652.116 I llm_load_print_meta: ssm_d_inner      = 0
0.00.652.116 I llm_load_print_meta: ssm_d_state      = 0
0.00.652.116 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.652.117 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.652.117 I llm_load_print_meta: model type       = 2B
0.00.652.118 I llm_load_print_meta: model ftype      = Q8_0
0.00.652.120 I llm_load_print_meta: model params     = 2.51 B
0.00.652.121 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.652.133 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.652.134 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.652.135 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.652.136 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.652.150 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.652.151 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.652.152 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.652.157 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.652.158 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.652.159 I llm_load_print_meta: max token length = 93
0.00.724.919 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.724.928 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.730.912 I llama_new_context_with_model: n_seq_max     = 1
0.00.730.920 I llama_new_context_with_model: n_ctx         = 4096
0.00.730.921 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.730.921 I llama_new_context_with_model: n_batch       = 2048
0.00.730.921 I llama_new_context_with_model: n_ubatch      = 512
0.00.730.922 I llama_new_context_with_model: flash_attn    = 0
0.00.730.926 I llama_new_context_with_model: freq_base     = 10000.0
0.00.730.927 I llama_new_context_with_model: freq_scale    = 1
0.00.730.928 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.745.944 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.745.981 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.746.101 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.666 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.748.670 I llama_new_context_with_model: graph nodes  = 601
0.00.748.670 I llama_new_context_with_model: graph splits = 1
0.00.748.693 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.010 I main: llama threadpool init, n_threads = 4
0.01.357.025 I 
0.01.357.136 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.140 I 
0.01.357.369 I sampler seed: 1152853558
0.01.357.381 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.391 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.357.392 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.393 I 
 seconary data is data that is collected in addition to the primary data collected in a research study. It provides contextual information and enhances the understanding of the study'

0.14.908.384 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.32 tokens per second)
0.14.908.387 I llama_perf_context_print:        load time =    1356.01 ms
0.14.908.388 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.908.390 I llama_perf_context_print:        eval time =   13460.37 ms /    32 runs   (  420.64 ms per token,     2.38 tokens per second)
0.14.908.390 I llama_perf_context_print:       total time =   13551.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m48.486s
user	2m25.319s
sys	0m9.591s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4093 (4047be74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186125.85 ms
main:    total time = 186125.85 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.023.498 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.510 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.609 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.622 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.623 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.629 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.633 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.634 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.635 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.636 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.637 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.645 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.646 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.648 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.650 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.651 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.504 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.820 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.283 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.294 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.295 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.296 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.297 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.298 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.300 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.303 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.304 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.306 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.306 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.308 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.316 I llama_model_loader: - type  f32:   37 tensors
0.00.272.319 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.320 I llama_model_loader: - type q6_K:   19 tensors
0.00.475.792 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.257 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.205 I llm_load_vocab: special tokens cache size = 5
0.00.641.669 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.746 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.750 I llm_load_print_meta: arch             = gemma
0.00.641.751 I llm_load_print_meta: vocab type       = SPM
0.00.641.752 I llm_load_print_meta: n_vocab          = 256000
0.00.641.754 I llm_load_print_meta: n_merges         = 0
0.00.641.754 I llm_load_print_meta: vocab_only       = 0
0.00.641.755 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.755 I llm_load_print_meta: n_embd           = 2048
0.00.641.756 I llm_load_print_meta: n_layer          = 18
0.00.641.824 I llm_load_print_meta: n_head           = 8
0.00.641.833 I llm_load_print_meta: n_head_kv        = 1
0.00.641.834 I llm_load_print_meta: n_rot            = 256
0.00.641.834 I llm_load_print_meta: n_swa            = 0
0.00.641.835 I llm_load_print_meta: n_embd_head_k    = 256
0.00.641.837 I llm_load_print_meta: n_embd_head_v    = 256
0.00.641.842 I llm_load_print_meta: n_gqa            = 8
0.00.641.847 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.641.852 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.641.853 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.641.854 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.641.855 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.641.855 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.641.856 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.641.860 I llm_load_print_meta: n_ff             = 16384
0.00.641.861 I llm_load_print_meta: n_expert         = 0
0.00.641.861 I llm_load_print_meta: n_expert_used    = 0
0.00.641.862 I llm_load_print_meta: causal attn      = 1
0.00.641.862 I llm_load_print_meta: pooling type     = 0
0.00.641.862 I llm_load_print_meta: rope type        = 2
0.00.641.863 I llm_load_print_meta: rope scaling     = linear
0.00.641.864 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.641.865 I llm_load_print_meta: freq_scale_train = 1
0.00.641.865 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.641.865 I llm_load_print_meta: rope_finetuned   = unknown
0.00.641.866 I llm_load_print_meta: ssm_d_conv       = 0
0.00.641.866 I llm_load_print_meta: ssm_d_inner      = 0
0.00.641.866 I llm_load_print_meta: ssm_d_state      = 0
0.00.641.866 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.641.867 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.641.877 I llm_load_print_meta: model type       = 2B
0.00.641.881 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.641.881 I llm_load_print_meta: model params     = 2.51 B
0.00.641.882 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.641.882 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.641.883 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.641.884 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.641.884 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.641.885 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.641.885 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.641.885 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.641.891 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.641.893 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.641.893 I llm_load_print_meta: max token length = 93
0.00.704.690 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.704.699 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.704.699 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.704.700 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.704.701 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.704.701 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.710.439 I llama_new_context_with_model: n_seq_max     = 1
0.00.710.446 I llama_new_context_with_model: n_ctx         = 4096
0.00.710.447 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.710.447 I llama_new_context_with_model: n_batch       = 2048
0.00.710.447 I llama_new_context_with_model: n_ubatch      = 512
0.00.710.448 I llama_new_context_with_model: flash_attn    = 0
0.00.710.450 I llama_new_context_with_model: freq_base     = 10000.0
0.00.710.451 I llama_new_context_with_model: freq_scale    = 1
0.00.710.452 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.725.487 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.725.527 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.725.643 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.304 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.728.308 I llama_new_context_with_model: graph nodes  = 601
0.00.728.309 I llama_new_context_with_model: graph splits = 1
0.00.728.333 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.876 I main: llama threadpool init, n_threads = 4
0.01.317.892 I 
0.01.318.001 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.005 I 
0.01.318.239 I sampler seed: 543928006
0.01.318.252 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.259 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.318.262 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.262 I 
 seconally in the affirmative, but inconsistently with the antecedent.

**Affirmative:** The speaker is aware of the consequences of their actions.

**In

0.12.516.260 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.15 tokens per second)
0.12.516.265 I llama_perf_context_print:        load time =    1316.91 ms
0.12.516.267 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.516.268 I llama_perf_context_print:        eval time =   11107.22 ms /    32 runs   (  347.10 ms per token,     2.88 tokens per second)
0.12.516.269 I llama_perf_context_print:       total time =   11198.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4093 (4047be74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186123.80 ms
main:    total time = 186123.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.693 I build: 4093 (4047be74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.936 I main: llama backend init
0.00.000.944 I main: load the model and apply lora adapter, if any
0.00.023.599 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.732 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.750 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.755 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.763 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.768 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.770 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.772 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.774 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.775 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.786 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.791 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.793 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.795 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.796 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.762 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.613 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.133 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.146 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.147 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.148 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.149 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.150 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.151 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.155 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.156 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.165 I llama_model_loader: - type  f32:   37 tensors
0.00.272.167 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.167 I llama_model_loader: - type q6_K:   19 tensors
0.00.486.289 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.557.472 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.558.506 I llm_load_vocab: special tokens cache size = 5
0.00.659.086 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.659.178 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.659.183 I llm_load_print_meta: arch             = gemma
0.00.659.184 I llm_load_print_meta: vocab type       = SPM
0.00.659.185 I llm_load_print_meta: n_vocab          = 256000
0.00.659.188 I llm_load_print_meta: n_merges         = 0
0.00.659.189 I llm_load_print_meta: vocab_only       = 0
0.00.659.189 I llm_load_print_meta: n_ctx_train      = 8192
0.00.659.189 I llm_load_print_meta: n_embd           = 2048
0.00.659.190 I llm_load_print_meta: n_layer          = 18
0.00.659.259 I llm_load_print_meta: n_head           = 8
0.00.659.270 I llm_load_print_meta: n_head_kv        = 1
0.00.659.271 I llm_load_print_meta: n_rot            = 256
0.00.659.272 I llm_load_print_meta: n_swa            = 0
0.00.659.273 I llm_load_print_meta: n_embd_head_k    = 256
0.00.659.273 I llm_load_print_meta: n_embd_head_v    = 256
0.00.659.280 I llm_load_print_meta: n_gqa            = 8
0.00.659.287 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.659.296 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.659.301 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.659.303 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.659.304 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.659.305 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.659.306 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.659.314 I llm_load_print_meta: n_ff             = 16384
0.00.659.315 I llm_load_print_meta: n_expert         = 0
0.00.659.316 I llm_load_print_meta: n_expert_used    = 0
0.00.659.316 I llm_load_print_meta: causal attn      = 1
0.00.659.317 I llm_load_print_meta: pooling type     = 0
0.00.659.317 I llm_load_print_meta: rope type        = 2
0.00.659.319 I llm_load_print_meta: rope scaling     = linear
0.00.659.321 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.659.322 I llm_load_print_meta: freq_scale_train = 1
0.00.659.323 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.659.324 I llm_load_print_meta: rope_finetuned   = unknown
0.00.659.325 I llm_load_print_meta: ssm_d_conv       = 0
0.00.659.326 I llm_load_print_meta: ssm_d_inner      = 0
0.00.659.326 I llm_load_print_meta: ssm_d_state      = 0
0.00.659.327 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.659.328 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.659.329 I llm_load_print_meta: model type       = 2B
0.00.659.330 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.659.332 I llm_load_print_meta: model params     = 2.51 B
0.00.659.336 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.659.336 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.659.337 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.659.338 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.659.339 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.659.340 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.659.341 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.659.342 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.659.349 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.659.351 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.659.352 I llm_load_print_meta: max token length = 93
0.00.719.145 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.725.413 I llama_new_context_with_model: n_seq_max     = 1
0.00.725.422 I llama_new_context_with_model: n_ctx         = 4096
0.00.725.422 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.725.423 I llama_new_context_with_model: n_batch       = 2048
0.00.725.423 I llama_new_context_with_model: n_ubatch      = 512
0.00.725.423 I llama_new_context_with_model: flash_attn    = 0
0.00.725.427 I llama_new_context_with_model: freq_base     = 10000.0
0.00.725.428 I llama_new_context_with_model: freq_scale    = 1
0.00.725.428 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.735 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.782 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.741.933 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.524 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.744.528 I llama_new_context_with_model: graph nodes  = 601
0.00.744.528 I llama_new_context_with_model: graph splits = 1
0.00.744.552 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.581 I main: llama threadpool init, n_threads = 4
0.01.333.597 I 
0.01.333.718 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.722 I 
0.01.333.957 I sampler seed: 3359226770
0.01.333.969 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.977 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.333.978 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.978 I 
 seconded in the answer of the question.

The given sentence is: "The company's growth has been phenomenal, with revenues increasing by 50

0.12.536.283 I llama_perf_sampler_print:    sampling time =      49.75 ms /    33 runs   (    1.51 ms per token,   663.30 tokens per second)
0.12.536.301 I llama_perf_context_print:        load time =    1332.53 ms
0.12.536.302 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.536.304 I llama_perf_context_print:        eval time =   11110.85 ms /    32 runs   (  347.21 ms per token,     2.88 tokens per second)
0.12.536.305 I llama_perf_context_print:       total time =   11202.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.291s
user	46m43.377s
sys	0m6.485s
