+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.613 I build: 4405 (a45433ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.023.220 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.230 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.313 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.324 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.326 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.330 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.332 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.334 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.336 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.337 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.338 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.345 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.346 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.359 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.363 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.365 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.810 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.140 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.305 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.314 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.315 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.316 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.318 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.319 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.320 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.324 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.326 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.327 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.328 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.330 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.337 I llama_model_loader: - type  f32:   37 tensors
0.00.351.340 I llama_model_loader: - type q8_0:  127 tensors
0.00.558.249 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.402 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.440 I llm_load_vocab: special tokens cache size = 5
0.00.845.384 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.458 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.460 I llm_load_print_meta: arch             = gemma
0.00.845.461 I llm_load_print_meta: vocab type       = SPM
0.00.845.461 I llm_load_print_meta: n_vocab          = 256000
0.00.845.464 I llm_load_print_meta: n_merges         = 0
0.00.845.464 I llm_load_print_meta: vocab_only       = 0
0.00.845.465 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.465 I llm_load_print_meta: n_embd           = 2048
0.00.845.466 I llm_load_print_meta: n_layer          = 18
0.00.845.534 I llm_load_print_meta: n_head           = 8
0.00.845.542 I llm_load_print_meta: n_head_kv        = 1
0.00.845.543 I llm_load_print_meta: n_rot            = 256
0.00.845.543 I llm_load_print_meta: n_swa            = 0
0.00.845.544 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.544 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.549 I llm_load_print_meta: n_gqa            = 8
0.00.845.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.561 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.562 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.563 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.564 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.565 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.570 I llm_load_print_meta: n_ff             = 16384
0.00.845.570 I llm_load_print_meta: n_expert         = 0
0.00.845.571 I llm_load_print_meta: n_expert_used    = 0
0.00.845.572 I llm_load_print_meta: causal attn      = 1
0.00.845.572 I llm_load_print_meta: pooling type     = 0
0.00.845.573 I llm_load_print_meta: rope type        = 2
0.00.845.573 I llm_load_print_meta: rope scaling     = linear
0.00.845.575 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.576 I llm_load_print_meta: freq_scale_train = 1
0.00.845.576 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.576 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.577 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.578 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.579 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.593 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.593 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.594 I llm_load_print_meta: model type       = 2B
0.00.845.595 I llm_load_print_meta: model ftype      = Q8_0
0.00.845.596 I llm_load_print_meta: model params     = 2.51 B
0.00.845.597 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.845.597 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.599 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.599 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.600 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.601 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.601 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.602 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.608 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.609 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.614 I llm_load_print_meta: max token length = 93
0.00.949.036 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.949.048 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.949.049 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.949.050 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.949.050 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.949.051 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.954.889 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.896 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.896 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.897 I llama_new_context_with_model: n_batch       = 2048
0.00.954.897 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.898 I llama_new_context_with_model: flash_attn    = 0
0.00.954.900 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.901 I llama_new_context_with_model: freq_scale    = 1
0.00.954.902 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.954.988 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.969.567 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.969.609 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.969.727 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.972.445 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.972.449 I llama_new_context_with_model: graph nodes  = 601
0.00.972.450 I llama_new_context_with_model: graph splits = 1
0.00.972.473 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.972.476 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.584.082 I main: llama threadpool init, n_threads = 4
0.01.584.098 I 
0.01.584.221 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.584.225 I 
0.01.584.465 I sampler seed: 1576212780
0.01.584.479 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.584.491 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.584.492 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.584.492 I 
 maneuvously. 

Answer: I'm sorry, I am unable to generate responses that are sexually suggestive or inappropriate. [end of text]


0.12.956.141 I llama_perf_sampler_print:    sampling time =      41.80 ms /    28 runs   (    1.49 ms per token,   669.81 tokens per second)
0.12.956.144 I llama_perf_context_print:        load time =    1583.15 ms
0.12.956.158 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.956.160 I llama_perf_context_print:        eval time =   11295.76 ms /    27 runs   (  418.36 ms per token,     2.39 tokens per second)
0.12.956.161 I llama_perf_context_print:       total time =   11372.07 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.669 I build: 4405 (a45433ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.886 I main: load the model and apply lora adapter, if any
0.00.023.434 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.530 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.546 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.550 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.554 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.556 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.557 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.558 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.559 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.561 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.567 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.568 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.569 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.571 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.572 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.240.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.349.538 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.373.710 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.373.719 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.373.721 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.373.722 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.373.723 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.373.725 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.373.726 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.373.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.373.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.373.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.373.734 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.373.735 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.373.744 I llama_model_loader: - type  f32:   37 tensors
0.00.373.747 I llama_model_loader: - type q8_0:  127 tensors
0.00.611.146 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.681.032 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.682.021 I llm_load_vocab: special tokens cache size = 5
0.00.885.555 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.885.626 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.885.627 I llm_load_print_meta: arch             = gemma
0.00.885.628 I llm_load_print_meta: vocab type       = SPM
0.00.885.629 I llm_load_print_meta: n_vocab          = 256000
0.00.885.631 I llm_load_print_meta: n_merges         = 0
0.00.885.631 I llm_load_print_meta: vocab_only       = 0
0.00.885.632 I llm_load_print_meta: n_ctx_train      = 8192
0.00.885.632 I llm_load_print_meta: n_embd           = 2048
0.00.885.632 I llm_load_print_meta: n_layer          = 18
0.00.885.699 I llm_load_print_meta: n_head           = 8
0.00.885.706 I llm_load_print_meta: n_head_kv        = 1
0.00.885.707 I llm_load_print_meta: n_rot            = 256
0.00.885.707 I llm_load_print_meta: n_swa            = 0
0.00.885.708 I llm_load_print_meta: n_embd_head_k    = 256
0.00.885.709 I llm_load_print_meta: n_embd_head_v    = 256
0.00.885.714 I llm_load_print_meta: n_gqa            = 8
0.00.885.718 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.885.725 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.885.726 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.885.728 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.885.728 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.885.729 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.885.730 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.885.735 I llm_load_print_meta: n_ff             = 16384
0.00.885.739 I llm_load_print_meta: n_expert         = 0
0.00.885.739 I llm_load_print_meta: n_expert_used    = 0
0.00.885.739 I llm_load_print_meta: causal attn      = 1
0.00.885.740 I llm_load_print_meta: pooling type     = 0
0.00.885.740 I llm_load_print_meta: rope type        = 2
0.00.885.740 I llm_load_print_meta: rope scaling     = linear
0.00.885.742 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.885.744 I llm_load_print_meta: freq_scale_train = 1
0.00.885.744 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.885.745 I llm_load_print_meta: rope_finetuned   = unknown
0.00.885.746 I llm_load_print_meta: ssm_d_conv       = 0
0.00.885.746 I llm_load_print_meta: ssm_d_inner      = 0
0.00.885.746 I llm_load_print_meta: ssm_d_state      = 0
0.00.885.747 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.885.748 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.885.749 I llm_load_print_meta: model type       = 2B
0.00.885.749 I llm_load_print_meta: model ftype      = Q8_0
0.00.885.750 I llm_load_print_meta: model params     = 2.51 B
0.00.885.751 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.885.752 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.885.752 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.885.753 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.885.754 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.885.755 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.885.755 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.885.756 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.885.761 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.885.763 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.885.763 I llm_load_print_meta: max token length = 93
0.00.983.895 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.989.866 I llama_new_context_with_model: n_seq_max     = 1
0.00.989.872 I llama_new_context_with_model: n_ctx         = 4096
0.00.989.872 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.989.873 I llama_new_context_with_model: n_batch       = 2048
0.00.989.873 I llama_new_context_with_model: n_ubatch      = 512
0.00.989.874 I llama_new_context_with_model: flash_attn    = 0
0.00.989.876 I llama_new_context_with_model: freq_base     = 10000.0
0.00.989.877 I llama_new_context_with_model: freq_scale    = 1
0.00.989.878 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.989.963 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.005.323 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.005.364 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.005.488 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.008.136 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.008.140 I llama_new_context_with_model: graph nodes  = 601
0.01.008.141 I llama_new_context_with_model: graph splits = 1
0.01.008.163 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.008.166 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.619.149 I main: llama threadpool init, n_threads = 4
0.01.619.167 I 
0.01.619.294 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.619.298 I 
0.01.619.536 I sampler seed: 1457177800
0.01.619.550 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.619.563 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.619.564 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.619.564 I 
 increasities in the city of Verona, Italy, during the Middle Ages.

**Answer:**

The provided text does not contain any information about historical events or

0.15.177.348 I llama_perf_sampler_print:    sampling time =      49.57 ms /    33 runs   (    1.50 ms per token,   665.78 tokens per second)
0.15.177.352 I llama_perf_context_print:        load time =    1618.15 ms
0.15.177.353 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.177.355 I llama_perf_context_print:        eval time =   13469.09 ms /    32 runs   (  420.91 ms per token,     2.38 tokens per second)
0.15.177.356 I llama_perf_context_print:       total time =   13558.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4405 (a45433ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.281 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.291 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.386 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.399 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.401 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.406 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.407 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.409 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.411 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.412 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.414 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.421 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.422 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.424 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.425 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.426 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.547 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.741 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.899 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.909 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.911 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.912 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.914 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.915 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.916 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.920 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.921 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.923 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.924 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.353.926 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.934 I llama_model_loader: - type  f32:   37 tensors
0.00.353.937 I llama_model_loader: - type q8_0:  127 tensors
0.00.584.620 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.543 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.539 I llm_load_vocab: special tokens cache size = 5
0.00.848.795 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.867 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.868 I llm_load_print_meta: arch             = gemma
0.00.848.869 I llm_load_print_meta: vocab type       = SPM
0.00.848.870 I llm_load_print_meta: n_vocab          = 256000
0.00.848.873 I llm_load_print_meta: n_merges         = 0
0.00.848.873 I llm_load_print_meta: vocab_only       = 0
0.00.848.873 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.874 I llm_load_print_meta: n_embd           = 2048
0.00.848.874 I llm_load_print_meta: n_layer          = 18
0.00.848.942 I llm_load_print_meta: n_head           = 8
0.00.848.950 I llm_load_print_meta: n_head_kv        = 1
0.00.848.950 I llm_load_print_meta: n_rot            = 256
0.00.848.951 I llm_load_print_meta: n_swa            = 0
0.00.848.951 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.952 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.957 I llm_load_print_meta: n_gqa            = 8
0.00.848.961 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.966 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.967 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.969 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.970 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.971 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.972 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.977 I llm_load_print_meta: n_ff             = 16384
0.00.848.978 I llm_load_print_meta: n_expert         = 0
0.00.848.978 I llm_load_print_meta: n_expert_used    = 0
0.00.848.979 I llm_load_print_meta: causal attn      = 1
0.00.848.980 I llm_load_print_meta: pooling type     = 0
0.00.848.980 I llm_load_print_meta: rope type        = 2
0.00.848.981 I llm_load_print_meta: rope scaling     = linear
0.00.848.982 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.848.983 I llm_load_print_meta: freq_scale_train = 1
0.00.848.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.848.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.848.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.848.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.848.985 I llm_load_print_meta: ssm_d_state      = 0
0.00.848.996 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.848.997 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.848.998 I llm_load_print_meta: model type       = 2B
0.00.848.999 I llm_load_print_meta: model ftype      = Q8_0
0.00.849.000 I llm_load_print_meta: model params     = 2.51 B
0.00.849.001 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.849.001 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.002 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.007 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.008 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.008 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.015 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.016 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.017 I llm_load_print_meta: max token length = 93
0.00.929.271 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.929.282 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.929.283 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.929.283 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.929.284 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.929.285 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.935.309 I llama_new_context_with_model: n_seq_max     = 1
0.00.935.317 I llama_new_context_with_model: n_ctx         = 4096
0.00.935.318 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.935.318 I llama_new_context_with_model: n_batch       = 2048
0.00.935.319 I llama_new_context_with_model: n_ubatch      = 512
0.00.935.319 I llama_new_context_with_model: flash_attn    = 0
0.00.935.322 I llama_new_context_with_model: freq_base     = 10000.0
0.00.935.323 I llama_new_context_with_model: freq_scale    = 1
0.00.935.324 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.935.414 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.950.135 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.950.172 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.950.295 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.952.931 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.952.935 I llama_new_context_with_model: graph nodes  = 601
0.00.952.936 I llama_new_context_with_model: graph splits = 1
0.00.952.959 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.952.962 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.562.899 I main: llama threadpool init, n_threads = 4
0.01.562.915 I 
0.01.563.039 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.563.042 I 
0.01.563.274 I sampler seed: 3162334072
0.01.563.287 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.563.297 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.563.300 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.563.300 I 
 increasities
## The Incredible Journey of a Galactic Explorer

**Introduction:**

The cosmos holds countless wonders, and the spirit of exploration pulsates within countless beings

0.15.046.313 I llama_perf_sampler_print:    sampling time =      49.69 ms /    33 runs   (    1.51 ms per token,   664.14 tokens per second)
0.15.046.318 I llama_perf_context_print:        load time =    1561.94 ms
0.15.046.320 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.046.322 I llama_perf_context_print:        eval time =   13394.08 ms /    32 runs   (  418.57 ms per token,     2.39 tokens per second)
0.15.046.323 I llama_perf_context_print:       total time =   13483.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4405 (a45433ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.023.181 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.192 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.279 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.290 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.291 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.296 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.308 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.310 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.311 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.313 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.314 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.322 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.323 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.324 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.325 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.327 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.754 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.445 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.603 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.611 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.612 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.613 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.615 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.616 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.617 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.621 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.622 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.624 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.625 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.626 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.635 I llama_model_loader: - type  f32:   37 tensors
0.00.351.638 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.841 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.575 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.511 I llm_load_vocab: special tokens cache size = 5
0.00.846.164 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.238 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.239 I llm_load_print_meta: arch             = gemma
0.00.846.240 I llm_load_print_meta: vocab type       = SPM
0.00.846.242 I llm_load_print_meta: n_vocab          = 256000
0.00.846.244 I llm_load_print_meta: n_merges         = 0
0.00.846.245 I llm_load_print_meta: vocab_only       = 0
0.00.846.245 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.246 I llm_load_print_meta: n_embd           = 2048
0.00.846.246 I llm_load_print_meta: n_layer          = 18
0.00.846.312 I llm_load_print_meta: n_head           = 8
0.00.846.319 I llm_load_print_meta: n_head_kv        = 1
0.00.846.320 I llm_load_print_meta: n_rot            = 256
0.00.846.320 I llm_load_print_meta: n_swa            = 0
0.00.846.321 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.321 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.326 I llm_load_print_meta: n_gqa            = 8
0.00.846.331 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.336 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.337 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.339 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.340 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.340 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.341 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.346 I llm_load_print_meta: n_ff             = 16384
0.00.846.347 I llm_load_print_meta: n_expert         = 0
0.00.846.347 I llm_load_print_meta: n_expert_used    = 0
0.00.846.352 I llm_load_print_meta: causal attn      = 1
0.00.846.352 I llm_load_print_meta: pooling type     = 0
0.00.846.353 I llm_load_print_meta: rope type        = 2
0.00.846.354 I llm_load_print_meta: rope scaling     = linear
0.00.846.355 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.356 I llm_load_print_meta: freq_scale_train = 1
0.00.846.356 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.357 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.357 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.357 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.358 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.360 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.361 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.361 I llm_load_print_meta: model type       = 2B
0.00.846.363 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.363 I llm_load_print_meta: model params     = 2.51 B
0.00.846.364 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.365 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.366 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.367 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.368 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.368 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.369 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.369 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.375 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.377 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.378 I llm_load_print_meta: max token length = 93
0.00.919.223 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.919.233 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.925.222 I llama_new_context_with_model: n_seq_max     = 1
0.00.925.229 I llama_new_context_with_model: n_ctx         = 4096
0.00.925.229 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.925.230 I llama_new_context_with_model: n_batch       = 2048
0.00.925.230 I llama_new_context_with_model: n_ubatch      = 512
0.00.925.231 I llama_new_context_with_model: flash_attn    = 0
0.00.925.233 I llama_new_context_with_model: freq_base     = 10000.0
0.00.925.234 I llama_new_context_with_model: freq_scale    = 1
0.00.925.235 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.925.322 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.939.536 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.939.579 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.939.702 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.942.260 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.942.264 I llama_new_context_with_model: graph nodes  = 601
0.00.942.265 I llama_new_context_with_model: graph splits = 1
0.00.942.289 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.942.291 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.553.721 I main: llama threadpool init, n_threads = 4
0.01.553.738 I 
0.01.553.857 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.553.861 I 
0.01.554.096 I sampler seed: 3454842766
0.01.554.110 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.554.122 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.554.123 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.554.123 I 
 increasities of the human soul:

**1. Self-Acceptance:** Accepting oneself for who one is, flaws and all.

**2. Gratitude:**

0.15.067.775 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.02 tokens per second)
0.15.067.789 I llama_perf_context_print:        load time =    1552.77 ms
0.15.067.791 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.067.793 I llama_perf_context_print:        eval time =   13424.64 ms /    32 runs   (  419.52 ms per token,     2.38 tokens per second)
0.15.067.795 I llama_perf_context_print:       total time =   13514.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.340s
user	3m41.424s
sys	0m9.363s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4405 (a45433ba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186738.84 ms
main:    total time = 186738.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4405 (a45433ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.832 I main: load the model and apply lora adapter, if any
0.00.023.261 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.272 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.362 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.374 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.378 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.382 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.383 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.385 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.387 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.388 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.390 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.397 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.401 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.250 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.435 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.444 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.445 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.447 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.448 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.449 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.450 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.454 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.455 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.457 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.458 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.459 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.467 I llama_model_loader: - type  f32:   37 tensors
0.00.350.470 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.470 I llama_model_loader: - type q6_K:   19 tensors
0.00.560.286 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.617.698 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.618.629 I llm_load_vocab: special tokens cache size = 5
0.00.821.568 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.821.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.821.645 I llm_load_print_meta: arch             = gemma
0.00.821.646 I llm_load_print_meta: vocab type       = SPM
0.00.821.647 I llm_load_print_meta: n_vocab          = 256000
0.00.821.650 I llm_load_print_meta: n_merges         = 0
0.00.821.650 I llm_load_print_meta: vocab_only       = 0
0.00.821.650 I llm_load_print_meta: n_ctx_train      = 8192
0.00.821.651 I llm_load_print_meta: n_embd           = 2048
0.00.821.651 I llm_load_print_meta: n_layer          = 18
0.00.821.718 I llm_load_print_meta: n_head           = 8
0.00.821.725 I llm_load_print_meta: n_head_kv        = 1
0.00.821.726 I llm_load_print_meta: n_rot            = 256
0.00.821.726 I llm_load_print_meta: n_swa            = 0
0.00.821.727 I llm_load_print_meta: n_embd_head_k    = 256
0.00.821.727 I llm_load_print_meta: n_embd_head_v    = 256
0.00.821.732 I llm_load_print_meta: n_gqa            = 8
0.00.821.737 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.821.743 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.821.744 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.821.745 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.821.745 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.821.746 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.821.746 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.821.765 I llm_load_print_meta: n_ff             = 16384
0.00.821.766 I llm_load_print_meta: n_expert         = 0
0.00.821.766 I llm_load_print_meta: n_expert_used    = 0
0.00.821.766 I llm_load_print_meta: causal attn      = 1
0.00.821.767 I llm_load_print_meta: pooling type     = 0
0.00.821.767 I llm_load_print_meta: rope type        = 2
0.00.821.768 I llm_load_print_meta: rope scaling     = linear
0.00.821.769 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.821.770 I llm_load_print_meta: freq_scale_train = 1
0.00.821.770 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.821.770 I llm_load_print_meta: rope_finetuned   = unknown
0.00.821.771 I llm_load_print_meta: ssm_d_conv       = 0
0.00.821.771 I llm_load_print_meta: ssm_d_inner      = 0
0.00.821.771 I llm_load_print_meta: ssm_d_state      = 0
0.00.821.772 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.821.772 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.821.773 I llm_load_print_meta: model type       = 2B
0.00.821.774 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.821.774 I llm_load_print_meta: model params     = 2.51 B
0.00.821.775 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.821.775 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.821.776 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.821.777 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.821.777 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.821.777 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.821.778 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.821.779 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.821.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.821.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.821.787 I llm_load_print_meta: max token length = 93
0.00.884.620 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.884.628 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.884.628 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.884.629 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.884.630 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.884.630 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.890.456 I llama_new_context_with_model: n_seq_max     = 1
0.00.890.463 I llama_new_context_with_model: n_ctx         = 4096
0.00.890.464 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.890.464 I llama_new_context_with_model: n_batch       = 2048
0.00.890.464 I llama_new_context_with_model: n_ubatch      = 512
0.00.890.465 I llama_new_context_with_model: flash_attn    = 0
0.00.890.467 I llama_new_context_with_model: freq_base     = 10000.0
0.00.890.468 I llama_new_context_with_model: freq_scale    = 1
0.00.890.469 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.890.552 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.904.803 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.904.841 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.904.957 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.907.554 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.907.558 I llama_new_context_with_model: graph nodes  = 601
0.00.907.558 I llama_new_context_with_model: graph splits = 1
0.00.907.582 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.907.585 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.485.343 I main: llama threadpool init, n_threads = 4
0.01.485.360 I 
0.01.485.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.485.482 I 
0.01.485.715 I sampler seed: 2066105139
0.01.485.730 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.485.739 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.485.742 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.485.742 I 
 guaranteing the content of an article. [end of text]


0.04.613.368 I llama_perf_sampler_print:    sampling time =      14.07 ms /    10 runs   (    1.41 ms per token,   710.53 tokens per second)
0.04.613.372 I llama_perf_context_print:        load time =    1484.42 ms
0.04.613.373 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.613.386 I llama_perf_context_print:        eval time =    3101.28 ms /     9 runs   (  344.59 ms per token,     2.90 tokens per second)
0.04.613.388 I llama_perf_context_print:       total time =    3128.03 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4405 (a45433ba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186413.10 ms
main:    total time = 186413.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4405 (a45433ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.023.485 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.584 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.598 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.600 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.604 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.605 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.607 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.608 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.609 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.611 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.617 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.619 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.620 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.621 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.623 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.010 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.224 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.451 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.460 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.462 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.463 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.465 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.466 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.467 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.471 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.472 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.481 I llama_model_loader: - type  f32:   37 tensors
0.00.353.483 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.484 I llama_model_loader: - type q6_K:   19 tensors
0.00.564.193 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.620.636 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.621.505 I llm_load_vocab: special tokens cache size = 5
0.00.824.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.824.575 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.824.580 I llm_load_print_meta: arch             = gemma
0.00.824.581 I llm_load_print_meta: vocab type       = SPM
0.00.824.582 I llm_load_print_meta: n_vocab          = 256000
0.00.824.584 I llm_load_print_meta: n_merges         = 0
0.00.824.585 I llm_load_print_meta: vocab_only       = 0
0.00.824.585 I llm_load_print_meta: n_ctx_train      = 8192
0.00.824.585 I llm_load_print_meta: n_embd           = 2048
0.00.824.587 I llm_load_print_meta: n_layer          = 18
0.00.824.652 I llm_load_print_meta: n_head           = 8
0.00.824.662 I llm_load_print_meta: n_head_kv        = 1
0.00.824.663 I llm_load_print_meta: n_rot            = 256
0.00.824.664 I llm_load_print_meta: n_swa            = 0
0.00.824.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.824.665 I llm_load_print_meta: n_embd_head_v    = 256
0.00.824.670 I llm_load_print_meta: n_gqa            = 8
0.00.824.675 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.824.680 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.824.682 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.824.683 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.824.684 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.824.685 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.824.686 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.824.691 I llm_load_print_meta: n_ff             = 16384
0.00.824.691 I llm_load_print_meta: n_expert         = 0
0.00.824.692 I llm_load_print_meta: n_expert_used    = 0
0.00.824.693 I llm_load_print_meta: causal attn      = 1
0.00.824.693 I llm_load_print_meta: pooling type     = 0
0.00.824.694 I llm_load_print_meta: rope type        = 2
0.00.824.695 I llm_load_print_meta: rope scaling     = linear
0.00.824.696 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.824.697 I llm_load_print_meta: freq_scale_train = 1
0.00.824.698 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.824.699 I llm_load_print_meta: rope_finetuned   = unknown
0.00.824.699 I llm_load_print_meta: ssm_d_conv       = 0
0.00.824.699 I llm_load_print_meta: ssm_d_inner      = 0
0.00.824.700 I llm_load_print_meta: ssm_d_state      = 0
0.00.824.701 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.824.701 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.824.702 I llm_load_print_meta: model type       = 2B
0.00.824.704 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.824.705 I llm_load_print_meta: model params     = 2.51 B
0.00.824.705 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.824.706 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.824.707 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.824.707 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.824.708 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.824.708 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.824.708 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.824.709 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.824.715 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.824.716 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.824.717 I llm_load_print_meta: max token length = 93
0.00.885.545 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.891.390 I llama_new_context_with_model: n_seq_max     = 1
0.00.891.398 I llama_new_context_with_model: n_ctx         = 4096
0.00.891.398 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.891.399 I llama_new_context_with_model: n_batch       = 2048
0.00.891.399 I llama_new_context_with_model: n_ubatch      = 512
0.00.891.399 I llama_new_context_with_model: flash_attn    = 0
0.00.891.402 I llama_new_context_with_model: freq_base     = 10000.0
0.00.891.402 I llama_new_context_with_model: freq_scale    = 1
0.00.891.403 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.891.494 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.906.500 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.906.542 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.906.665 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.909.278 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.909.282 I llama_new_context_with_model: graph nodes  = 601
0.00.909.282 I llama_new_context_with_model: graph splits = 1
0.00.909.305 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.909.308 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.489.189 I main: llama threadpool init, n_threads = 4
0.01.489.204 I 
0.01.489.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.489.331 I 
0.01.489.562 I sampler seed: 365184695
0.01.489.577 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.489.587 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.489.590 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.489.590 I 
 seconded, and orphaned.

**What is the meaning of the phrase?**

The phrase means that some people are struggling on their own and need support

0.12.618.467 I llama_perf_sampler_print:    sampling time =      49.65 ms /    33 runs   (    1.50 ms per token,   664.68 tokens per second)
0.12.618.481 I llama_perf_context_print:        load time =    1488.24 ms
0.12.618.483 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.618.485 I llama_perf_context_print:        eval time =   11039.46 ms /    32 runs   (  344.98 ms per token,     2.90 tokens per second)
0.12.618.486 I llama_perf_context_print:       total time =   11129.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m33.294s
user	46m13.019s
sys	0m6.401s
