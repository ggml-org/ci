+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.635 I build: 4433 (a4dd4900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.832 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.021.339 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.349 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.357 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.362 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.366 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.369 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.370 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.371 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.372 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.373 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.374 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.377 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.378 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.379 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.722 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.708 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.472 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.477 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.478 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.479 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.480 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.481 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.481 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.484 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.484 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.485 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.486 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.487 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.490 I llama_model_loader: - type  f32:   37 tensors
0.00.129.491 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.179 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.973 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.564 I llm_load_vocab: special tokens cache size = 5
0.00.266.415 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.431 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.433 I llm_load_print_meta: arch             = gemma
0.00.266.433 I llm_load_print_meta: vocab type       = SPM
0.00.266.434 I llm_load_print_meta: n_vocab          = 256000
0.00.266.434 I llm_load_print_meta: n_merges         = 0
0.00.266.434 I llm_load_print_meta: vocab_only       = 0
0.00.266.435 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.435 I llm_load_print_meta: n_embd           = 2048
0.00.266.436 I llm_load_print_meta: n_layer          = 18
0.00.266.447 I llm_load_print_meta: n_head           = 8
0.00.266.449 I llm_load_print_meta: n_head_kv        = 1
0.00.266.449 I llm_load_print_meta: n_rot            = 256
0.00.266.450 I llm_load_print_meta: n_swa            = 0
0.00.266.450 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.450 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.452 I llm_load_print_meta: n_gqa            = 8
0.00.266.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.455 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.456 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.459 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.459 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.460 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.461 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.463 I llm_load_print_meta: n_ff             = 16384
0.00.266.463 I llm_load_print_meta: n_expert         = 0
0.00.266.463 I llm_load_print_meta: n_expert_used    = 0
0.00.266.464 I llm_load_print_meta: causal attn      = 1
0.00.266.464 I llm_load_print_meta: pooling type     = 0
0.00.266.464 I llm_load_print_meta: rope type        = 2
0.00.266.465 I llm_load_print_meta: rope scaling     = linear
0.00.266.467 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.467 I llm_load_print_meta: freq_scale_train = 1
0.00.266.468 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.468 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.469 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.469 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.470 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.470 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.470 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.472 I llm_load_print_meta: model type       = 2B
0.00.266.473 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.474 I llm_load_print_meta: model params     = 2.51 B
0.00.266.475 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.476 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.476 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.477 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.477 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.478 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.478 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.483 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.484 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.484 I llm_load_print_meta: max token length = 93
0.00.369.220 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.225 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.225 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.226 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.227 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.227 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.513 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.520 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.520 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.521 I llama_new_context_with_model: n_batch       = 2048
0.00.374.521 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.522 I llama_new_context_with_model: flash_attn    = 0
0.00.374.524 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.525 I llama_new_context_with_model: freq_scale    = 1
0.00.374.526 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.547 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.389.156 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.169 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.258 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.498 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.505 I llama_new_context_with_model: graph nodes  = 601
0.00.390.506 I llama_new_context_with_model: graph splits = 1
0.00.390.509 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.509 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.323 I main: llama threadpool init, n_threads = 4
0.00.475.338 I 
0.00.475.412 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.415 I 
0.00.475.449 I sampler seed: 738257255
0.00.475.461 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.472 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.475 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.476 I 
 increadibly to your question.

I am unable to provide an answer that violates our content policies. [end of text]


0.01.951.303 I llama_perf_sampler_print:    sampling time =       3.58 ms /    22 runs   (    0.16 ms per token,  6153.85 tokens per second)
0.01.951.305 I llama_perf_context_print:        load time =     474.47 ms
0.01.951.306 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.951.307 I llama_perf_context_print:        eval time =    1462.33 ms /    21 runs   (   69.63 ms per token,    14.36 tokens per second)
0.01.951.308 I llama_perf_context_print:       total time =    1475.99 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.175 I build: 4433 (a4dd4900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.363 I main: llama backend init
0.00.000.368 I main: load the model and apply lora adapter, if any
0.00.020.338 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.353 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.359 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.360 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.363 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.364 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.365 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.365 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.366 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.366 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.370 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.371 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.372 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.372 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.373 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.761 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.534 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.297 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.303 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.304 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.305 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.306 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.307 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.308 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.311 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.312 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.313 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.314 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.315 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.317 I llama_model_loader: - type  f32:   37 tensors
0.00.129.318 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.462 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.139 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.643 I llm_load_vocab: special tokens cache size = 5
0.00.260.454 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.471 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.472 I llm_load_print_meta: arch             = gemma
0.00.260.473 I llm_load_print_meta: vocab type       = SPM
0.00.260.473 I llm_load_print_meta: n_vocab          = 256000
0.00.260.474 I llm_load_print_meta: n_merges         = 0
0.00.260.474 I llm_load_print_meta: vocab_only       = 0
0.00.260.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.475 I llm_load_print_meta: n_embd           = 2048
0.00.260.475 I llm_load_print_meta: n_layer          = 18
0.00.260.486 I llm_load_print_meta: n_head           = 8
0.00.260.488 I llm_load_print_meta: n_head_kv        = 1
0.00.260.488 I llm_load_print_meta: n_rot            = 256
0.00.260.489 I llm_load_print_meta: n_swa            = 0
0.00.260.489 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.489 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.491 I llm_load_print_meta: n_gqa            = 8
0.00.260.493 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.494 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.495 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.497 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.498 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.500 I llm_load_print_meta: n_ff             = 16384
0.00.260.500 I llm_load_print_meta: n_expert         = 0
0.00.260.500 I llm_load_print_meta: n_expert_used    = 0
0.00.260.501 I llm_load_print_meta: causal attn      = 1
0.00.260.501 I llm_load_print_meta: pooling type     = 0
0.00.260.501 I llm_load_print_meta: rope type        = 2
0.00.260.502 I llm_load_print_meta: rope scaling     = linear
0.00.260.503 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.504 I llm_load_print_meta: freq_scale_train = 1
0.00.260.504 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.505 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.505 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.505 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.506 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.506 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.508 I llm_load_print_meta: model type       = 2B
0.00.260.509 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.510 I llm_load_print_meta: model params     = 2.51 B
0.00.260.510 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.511 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.511 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.511 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.512 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.513 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.513 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.513 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.514 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.514 I llm_load_print_meta: max token length = 93
0.00.357.496 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.566 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.573 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.573 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.573 I llama_new_context_with_model: n_batch       = 2048
0.00.362.574 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.574 I llama_new_context_with_model: flash_attn    = 0
0.00.362.576 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.577 I llama_new_context_with_model: freq_scale    = 1
0.00.362.578 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.598 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.377.018 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.032 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.128 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.368 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.374 I llama_new_context_with_model: graph nodes  = 601
0.00.378.375 I llama_new_context_with_model: graph splits = 1
0.00.378.378 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.378.379 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.834 I main: llama threadpool init, n_threads = 4
0.00.459.851 I 
0.00.459.927 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.930 I 
0.00.459.964 I sampler seed: 108899788
0.00.459.975 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.978 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.979 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.980 I 
 increasities, but the only way to truly understand the nature of this psychosis is through a firsthand account.

In a world of swirling mists and ethereal whispers,

0.02.646.713 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6493.51 tokens per second)
0.02.646.715 I llama_perf_context_print:        load time =     459.44 ms
0.02.646.716 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.646.718 I llama_perf_context_print:        eval time =    2167.82 ms /    32 runs   (   67.74 ms per token,    14.76 tokens per second)
0.02.646.718 I llama_perf_context_print:       total time =    2186.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.172 I build: 4433 (a4dd4900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.380 I main: llama backend init
0.00.000.388 I main: load the model and apply lora adapter, if any
0.00.020.508 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.519 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.527 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.533 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.537 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.540 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.541 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.542 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.544 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.545 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.546 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.551 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.551 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.552 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.553 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.554 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.211 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.364 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.204 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.210 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.210 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.211 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.212 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.213 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.213 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.215 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.216 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.218 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.219 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.219 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.223 I llama_model_loader: - type  f32:   37 tensors
0.00.130.224 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.455 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.397 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.948 I llm_load_vocab: special tokens cache size = 5
0.00.269.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.748 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.750 I llm_load_print_meta: arch             = gemma
0.00.269.750 I llm_load_print_meta: vocab type       = SPM
0.00.269.751 I llm_load_print_meta: n_vocab          = 256000
0.00.269.751 I llm_load_print_meta: n_merges         = 0
0.00.269.752 I llm_load_print_meta: vocab_only       = 0
0.00.269.752 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.753 I llm_load_print_meta: n_embd           = 2048
0.00.269.753 I llm_load_print_meta: n_layer          = 18
0.00.269.764 I llm_load_print_meta: n_head           = 8
0.00.269.767 I llm_load_print_meta: n_head_kv        = 1
0.00.269.767 I llm_load_print_meta: n_rot            = 256
0.00.269.768 I llm_load_print_meta: n_swa            = 0
0.00.269.768 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.768 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.770 I llm_load_print_meta: n_gqa            = 8
0.00.269.771 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.773 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.774 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.775 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.775 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.776 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.776 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.778 I llm_load_print_meta: n_ff             = 16384
0.00.269.778 I llm_load_print_meta: n_expert         = 0
0.00.269.779 I llm_load_print_meta: n_expert_used    = 0
0.00.269.779 I llm_load_print_meta: causal attn      = 1
0.00.269.779 I llm_load_print_meta: pooling type     = 0
0.00.269.779 I llm_load_print_meta: rope type        = 2
0.00.269.780 I llm_load_print_meta: rope scaling     = linear
0.00.269.781 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.782 I llm_load_print_meta: freq_scale_train = 1
0.00.269.782 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.782 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.782 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.783 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.783 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.784 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.784 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.786 I llm_load_print_meta: model type       = 2B
0.00.269.787 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.787 I llm_load_print_meta: model params     = 2.51 B
0.00.269.788 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.788 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.789 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.789 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.789 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.790 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.790 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.790 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.790 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.791 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.791 I llm_load_print_meta: max token length = 93
0.00.347.318 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.347.327 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.328 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.347.329 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.347.329 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.330 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.352.488 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.494 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.494 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.495 I llama_new_context_with_model: n_batch       = 2048
0.00.352.495 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.495 I llama_new_context_with_model: flash_attn    = 0
0.00.352.498 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.499 I llama_new_context_with_model: freq_scale    = 1
0.00.352.500 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.520 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.366.547 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.559 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.655 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.923 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.930 I llama_new_context_with_model: graph nodes  = 601
0.00.367.931 I llama_new_context_with_model: graph splits = 1
0.00.367.934 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.934 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.698 I main: llama threadpool init, n_threads = 4
0.00.454.713 I 
0.00.454.794 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.799 I 
0.00.454.846 I sampler seed: 3872910220
0.00.454.857 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.861 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.862 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.863 I 
 increasities, and a wide range of other topics. [end of text]


0.01.315.420 I llama_perf_sampler_print:    sampling time =       1.86 ms /    13 runs   (    0.14 ms per token,  6981.74 tokens per second)
0.01.315.423 I llama_perf_context_print:        load time =     454.29 ms
0.01.315.424 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.315.425 I llama_perf_context_print:        eval time =     852.94 ms /    12 runs   (   71.08 ms per token,    14.07 tokens per second)
0.01.315.426 I llama_perf_context_print:       total time =     860.73 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.552 I build: 4433 (a4dd4900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.021.005 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.015 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.023 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.028 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.029 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.031 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.033 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.033 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.034 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.034 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.035 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.038 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.039 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.039 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.041 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.041 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.634 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.127 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.912 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.918 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.919 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.920 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.920 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.922 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.923 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.925 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.926 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.926 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.927 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.928 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.930 I llama_model_loader: - type  f32:   37 tensors
0.00.129.931 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.663 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.622 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.125 I llm_load_vocab: special tokens cache size = 5
0.00.266.922 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.940 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.941 I llm_load_print_meta: arch             = gemma
0.00.266.942 I llm_load_print_meta: vocab type       = SPM
0.00.266.943 I llm_load_print_meta: n_vocab          = 256000
0.00.266.943 I llm_load_print_meta: n_merges         = 0
0.00.266.943 I llm_load_print_meta: vocab_only       = 0
0.00.266.944 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.944 I llm_load_print_meta: n_embd           = 2048
0.00.266.944 I llm_load_print_meta: n_layer          = 18
0.00.266.955 I llm_load_print_meta: n_head           = 8
0.00.266.957 I llm_load_print_meta: n_head_kv        = 1
0.00.266.958 I llm_load_print_meta: n_rot            = 256
0.00.266.958 I llm_load_print_meta: n_swa            = 0
0.00.266.958 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.958 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.960 I llm_load_print_meta: n_gqa            = 8
0.00.266.961 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.963 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.964 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.965 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.966 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.966 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.966 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.968 I llm_load_print_meta: n_ff             = 16384
0.00.266.968 I llm_load_print_meta: n_expert         = 0
0.00.266.969 I llm_load_print_meta: n_expert_used    = 0
0.00.266.969 I llm_load_print_meta: causal attn      = 1
0.00.266.969 I llm_load_print_meta: pooling type     = 0
0.00.266.970 I llm_load_print_meta: rope type        = 2
0.00.266.970 I llm_load_print_meta: rope scaling     = linear
0.00.266.971 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.972 I llm_load_print_meta: freq_scale_train = 1
0.00.266.972 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.973 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.973 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.973 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.973 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.974 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.974 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.976 I llm_load_print_meta: model type       = 2B
0.00.266.977 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.977 I llm_load_print_meta: model params     = 2.51 B
0.00.266.978 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.978 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.979 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.979 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.980 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.980 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.980 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.981 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.981 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.981 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.982 I llm_load_print_meta: max token length = 93
0.00.338.906 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.914 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.089 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.095 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.096 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.096 I llama_new_context_with_model: n_batch       = 2048
0.00.344.097 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.097 I llama_new_context_with_model: flash_attn    = 0
0.00.344.100 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.101 I llama_new_context_with_model: freq_scale    = 1
0.00.344.102 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.128 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.358.610 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.623 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.716 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.989 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.993 I llama_new_context_with_model: graph nodes  = 601
0.00.359.994 I llama_new_context_with_model: graph splits = 1
0.00.359.997 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.359.997 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.234 I main: llama threadpool init, n_threads = 4
0.00.446.254 I 
0.00.446.335 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.338 I 
0.00.446.381 I sampler seed: 2734622022
0.00.446.391 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.404 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.407 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.408 I 
 increasities in the 19th century, leading to a decline in agricultural productivity and rural poverty.

**Answer:**

The provided text discusses the negative

0.02.863.553 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6657.25 tokens per second)
0.02.863.555 I llama_perf_context_print:        load time =     445.46 ms
0.02.863.556 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.863.558 I llama_perf_context_print:        eval time =    2398.55 ms /    32 runs   (   74.95 ms per token,    13.34 tokens per second)
0.02.863.558 I llama_perf_context_print:       total time =    2417.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.248s
user	0m30.550s
sys	0m9.403s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4433 (a4dd4900)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40241.42 ms
main:    total time = 40241.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4433 (a4dd4900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.087 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.098 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.107 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.116 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.116 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.117 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.117 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.118 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.118 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.121 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.122 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.123 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.123 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.124 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.820 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.667 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.439 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.445 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.446 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.447 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.447 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.448 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.449 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.451 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.451 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.452 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.455 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.456 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.458 I llama_model_loader: - type  f32:   37 tensors
0.00.130.459 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.460 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.822 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.832 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.389 I llm_load_vocab: special tokens cache size = 5
0.00.265.268 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.285 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.286 I llm_load_print_meta: arch             = gemma
0.00.265.287 I llm_load_print_meta: vocab type       = SPM
0.00.265.288 I llm_load_print_meta: n_vocab          = 256000
0.00.265.288 I llm_load_print_meta: n_merges         = 0
0.00.265.288 I llm_load_print_meta: vocab_only       = 0
0.00.265.289 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.289 I llm_load_print_meta: n_embd           = 2048
0.00.265.289 I llm_load_print_meta: n_layer          = 18
0.00.265.299 I llm_load_print_meta: n_head           = 8
0.00.265.301 I llm_load_print_meta: n_head_kv        = 1
0.00.265.302 I llm_load_print_meta: n_rot            = 256
0.00.265.302 I llm_load_print_meta: n_swa            = 0
0.00.265.302 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.302 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.304 I llm_load_print_meta: n_gqa            = 8
0.00.265.305 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.307 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.308 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.309 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.310 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.310 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.310 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.312 I llm_load_print_meta: n_ff             = 16384
0.00.265.312 I llm_load_print_meta: n_expert         = 0
0.00.265.313 I llm_load_print_meta: n_expert_used    = 0
0.00.265.313 I llm_load_print_meta: causal attn      = 1
0.00.265.313 I llm_load_print_meta: pooling type     = 0
0.00.265.313 I llm_load_print_meta: rope type        = 2
0.00.265.314 I llm_load_print_meta: rope scaling     = linear
0.00.265.316 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.316 I llm_load_print_meta: freq_scale_train = 1
0.00.265.317 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.317 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.317 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.318 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.318 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.318 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.318 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.320 I llm_load_print_meta: model type       = 2B
0.00.265.321 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.322 I llm_load_print_meta: model params     = 2.51 B
0.00.265.322 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.322 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.323 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.323 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.324 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.325 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.325 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.325 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.326 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.326 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.326 I llm_load_print_meta: max token length = 93
0.00.326.234 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.240 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.241 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.241 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.242 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.242 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.354 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.361 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.361 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.361 I llama_new_context_with_model: n_batch       = 2048
0.00.331.362 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.362 I llama_new_context_with_model: flash_attn    = 0
0.00.331.364 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.365 I llama_new_context_with_model: freq_scale    = 1
0.00.331.366 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.384 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.346.149 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.161 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.250 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.481 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.486 I llama_new_context_with_model: graph nodes  = 601
0.00.347.487 I llama_new_context_with_model: graph splits = 1
0.00.347.490 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.347.491 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.480 I main: llama threadpool init, n_threads = 4
0.00.422.496 I 
0.00.422.571 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.574 I 
0.00.422.609 I sampler seed: 1351691514
0.00.422.622 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.627 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.628 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.628 I 
 increamically, but it never caught up with the relentless advance of time.

**Meaning:**

The passage conveys a sense of time's relentless passage and

0.02.020.660 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6510.16 tokens per second)
0.02.020.662 I llama_perf_context_print:        load time =     421.71 ms
0.02.020.663 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.020.665 I llama_perf_context_print:        eval time =    1579.57 ms /    32 runs   (   49.36 ms per token,    20.26 tokens per second)
0.02.020.665 I llama_perf_context_print:       total time =    1598.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4433 (a4dd4900)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40223.33 ms
main:    total time = 40223.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.555 I build: 4433 (a4dd4900) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.087 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.102 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.110 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.110 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.113 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.114 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.115 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.115 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.117 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.117 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.120 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.121 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.122 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.122 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.123 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.814 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.655 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.498 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.504 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.504 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.505 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.506 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.506 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.507 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.509 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.510 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.513 I llama_model_loader: - type  f32:   37 tensors
0.00.130.515 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.515 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.133 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.042 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.614 I llm_load_vocab: special tokens cache size = 5
0.00.276.428 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.446 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.448 I llm_load_print_meta: arch             = gemma
0.00.276.448 I llm_load_print_meta: vocab type       = SPM
0.00.276.449 I llm_load_print_meta: n_vocab          = 256000
0.00.276.449 I llm_load_print_meta: n_merges         = 0
0.00.276.449 I llm_load_print_meta: vocab_only       = 0
0.00.276.450 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.450 I llm_load_print_meta: n_embd           = 2048
0.00.276.450 I llm_load_print_meta: n_layer          = 18
0.00.276.462 I llm_load_print_meta: n_head           = 8
0.00.276.465 I llm_load_print_meta: n_head_kv        = 1
0.00.276.465 I llm_load_print_meta: n_rot            = 256
0.00.276.465 I llm_load_print_meta: n_swa            = 0
0.00.276.465 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.466 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.468 I llm_load_print_meta: n_gqa            = 8
0.00.276.470 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.471 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.472 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.474 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.475 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.476 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.478 I llm_load_print_meta: n_ff             = 16384
0.00.276.479 I llm_load_print_meta: n_expert         = 0
0.00.276.479 I llm_load_print_meta: n_expert_used    = 0
0.00.276.480 I llm_load_print_meta: causal attn      = 1
0.00.276.480 I llm_load_print_meta: pooling type     = 0
0.00.276.480 I llm_load_print_meta: rope type        = 2
0.00.276.481 I llm_load_print_meta: rope scaling     = linear
0.00.276.483 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.484 I llm_load_print_meta: freq_scale_train = 1
0.00.276.484 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.485 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.485 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.485 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.496 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.499 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.499 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.502 I llm_load_print_meta: model type       = 2B
0.00.276.503 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.504 I llm_load_print_meta: model params     = 2.51 B
0.00.276.504 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.505 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.505 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.505 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.506 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.506 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.506 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.507 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.507 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.508 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.508 I llm_load_print_meta: max token length = 93
0.00.335.866 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.340.896 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.903 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.904 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.904 I llama_new_context_with_model: n_batch       = 2048
0.00.340.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.905 I llama_new_context_with_model: flash_attn    = 0
0.00.340.908 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.909 I llama_new_context_with_model: freq_scale    = 1
0.00.340.909 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.930 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.355.876 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.892 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.983 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.257 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.263 I llama_new_context_with_model: graph nodes  = 601
0.00.357.263 I llama_new_context_with_model: graph splits = 1
0.00.357.266 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.267 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.952 I main: llama threadpool init, n_threads = 4
0.00.431.968 I 
0.00.432.043 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.432.046 I 
0.00.432.078 I sampler seed: 3408230425
0.00.432.089 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.092 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.092 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.093 I 
 squaRE, a global leader in high-quality, sustainable, and innovative materials and solutions, has committed to accelerating the development and deployment of its innovative biopolymer

0.01.981.629 I llama_perf_sampler_print:    sampling time =       5.65 ms /    33 runs   (    0.17 ms per token,  5837.61 tokens per second)
0.01.981.632 I llama_perf_context_print:        load time =     431.16 ms
0.01.981.633 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.981.634 I llama_perf_context_print:        eval time =    1530.52 ms /    32 runs   (   47.83 ms per token,    20.91 tokens per second)
0.01.981.635 I llama_perf_context_print:       total time =    1549.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.254s
user	10m23.934s
sys	0m6.852s
