+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4216 (273d8a03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.367 I main: llama backend init
0.00.000.374 I main: load the model and apply lora adapter, if any
0.00.020.710 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.719 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.726 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.732 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.735 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.736 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.737 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.738 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.738 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.739 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.742 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.743 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.744 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.744 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.744 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.172 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.795 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.617 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.624 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.626 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.626 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.627 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.628 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.630 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.631 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.632 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.633 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.634 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.638 I llama_model_loader: - type  f32:   37 tensors
0.00.129.639 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.260 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.010 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.482 I llm_load_vocab: special tokens cache size = 5
0.00.258.443 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.460 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.460 I llm_load_print_meta: arch             = gemma
0.00.258.461 I llm_load_print_meta: vocab type       = SPM
0.00.258.462 I llm_load_print_meta: n_vocab          = 256000
0.00.258.462 I llm_load_print_meta: n_merges         = 0
0.00.258.462 I llm_load_print_meta: vocab_only       = 0
0.00.258.463 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.463 I llm_load_print_meta: n_embd           = 2048
0.00.258.463 I llm_load_print_meta: n_layer          = 18
0.00.258.475 I llm_load_print_meta: n_head           = 8
0.00.258.476 I llm_load_print_meta: n_head_kv        = 1
0.00.258.477 I llm_load_print_meta: n_rot            = 256
0.00.258.477 I llm_load_print_meta: n_swa            = 0
0.00.258.477 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.477 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.478 I llm_load_print_meta: n_gqa            = 8
0.00.258.480 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.481 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.481 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.483 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.483 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.484 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.484 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.485 I llm_load_print_meta: n_ff             = 16384
0.00.258.485 I llm_load_print_meta: n_expert         = 0
0.00.258.486 I llm_load_print_meta: n_expert_used    = 0
0.00.258.486 I llm_load_print_meta: causal attn      = 1
0.00.258.486 I llm_load_print_meta: pooling type     = 0
0.00.258.487 I llm_load_print_meta: rope type        = 2
0.00.258.487 I llm_load_print_meta: rope scaling     = linear
0.00.258.489 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.489 I llm_load_print_meta: freq_scale_train = 1
0.00.258.489 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.490 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.490 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.490 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.491 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.491 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.491 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.492 I llm_load_print_meta: model type       = 2B
0.00.258.492 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.493 I llm_load_print_meta: model params     = 2.51 B
0.00.258.494 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.494 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.495 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.495 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.495 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.495 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.496 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.496 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.496 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.497 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.497 I llm_load_print_meta: max token length = 93
0.00.359.224 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.359.230 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.359.231 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.359.231 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.359.232 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.359.232 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.364.389 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.395 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.395 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.396 I llama_new_context_with_model: n_batch       = 2048
0.00.364.396 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.397 I llama_new_context_with_model: flash_attn    = 0
0.00.364.399 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.400 I llama_new_context_with_model: freq_scale    = 1
0.00.364.401 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.432 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.446 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.531 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.805 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.811 I llama_new_context_with_model: graph nodes  = 601
0.00.379.812 I llama_new_context_with_model: graph splits = 1
0.00.379.813 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.429 I main: llama threadpool init, n_threads = 4
0.00.464.443 I 
0.00.464.516 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.520 I 
0.00.464.561 I sampler seed: 2319370994
0.00.464.571 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.580 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.583 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.583 I 
 maneuvously.

I cannot answer this question as it contains inappropriate content. [end of text]


0.01.657.116 I llama_perf_sampler_print:    sampling time =       2.48 ms /    18 runs   (    0.14 ms per token,  7243.46 tokens per second)
0.01.657.119 I llama_perf_context_print:        load time =     464.04 ms
0.01.657.120 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.657.122 I llama_perf_context_print:        eval time =    1182.07 ms /    17 runs   (   69.53 ms per token,    14.38 tokens per second)
0.01.657.123 I llama_perf_context_print:       total time =    1192.70 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.453 I build: 4216 (273d8a03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.651 I main: llama backend init
0.00.000.658 I main: load the model and apply lora adapter, if any
0.00.020.990 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.003 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.010 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.010 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.014 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.015 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.016 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.017 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.017 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.018 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.022 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.025 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.025 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.026 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.027 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.267 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.757 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.552 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.558 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.559 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.560 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.561 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.562 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.563 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.566 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.567 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.568 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.569 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.570 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.574 I llama_model_loader: - type  f32:   37 tensors
0.00.129.575 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.143 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.923 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.515 I llm_load_vocab: special tokens cache size = 5
0.00.264.348 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.362 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.362 I llm_load_print_meta: arch             = gemma
0.00.264.363 I llm_load_print_meta: vocab type       = SPM
0.00.264.364 I llm_load_print_meta: n_vocab          = 256000
0.00.264.364 I llm_load_print_meta: n_merges         = 0
0.00.264.364 I llm_load_print_meta: vocab_only       = 0
0.00.264.365 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.365 I llm_load_print_meta: n_embd           = 2048
0.00.264.365 I llm_load_print_meta: n_layer          = 18
0.00.264.376 I llm_load_print_meta: n_head           = 8
0.00.264.377 I llm_load_print_meta: n_head_kv        = 1
0.00.264.378 I llm_load_print_meta: n_rot            = 256
0.00.264.378 I llm_load_print_meta: n_swa            = 0
0.00.264.378 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.378 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.379 I llm_load_print_meta: n_gqa            = 8
0.00.264.380 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.381 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.382 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.383 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.384 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.384 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.384 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.385 I llm_load_print_meta: n_ff             = 16384
0.00.264.386 I llm_load_print_meta: n_expert         = 0
0.00.264.386 I llm_load_print_meta: n_expert_used    = 0
0.00.264.386 I llm_load_print_meta: causal attn      = 1
0.00.264.387 I llm_load_print_meta: pooling type     = 0
0.00.264.387 I llm_load_print_meta: rope type        = 2
0.00.264.387 I llm_load_print_meta: rope scaling     = linear
0.00.264.389 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.389 I llm_load_print_meta: freq_scale_train = 1
0.00.264.390 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.390 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.391 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.391 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.391 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.391 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.392 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.392 I llm_load_print_meta: model type       = 2B
0.00.264.393 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.393 I llm_load_print_meta: model params     = 2.51 B
0.00.264.394 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.395 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.395 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.395 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.396 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.396 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.396 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.396 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.397 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.397 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.397 I llm_load_print_meta: max token length = 93
0.00.359.409 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.640 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.646 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.646 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.646 I llama_new_context_with_model: n_batch       = 2048
0.00.364.647 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.647 I llama_new_context_with_model: flash_attn    = 0
0.00.364.649 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.650 I llama_new_context_with_model: freq_scale    = 1
0.00.364.651 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.159 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.172 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.260 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.500 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.505 I llama_new_context_with_model: graph nodes  = 601
0.00.380.505 I llama_new_context_with_model: graph splits = 1
0.00.380.507 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.389 I main: llama threadpool init, n_threads = 4
0.00.461.405 I 
0.00.461.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.461.481 I 
0.00.461.526 I sampler seed: 965353441
0.00.461.537 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.550 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.554 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.554 I 
 increasities. [end of text]


0.00.734.963 I llama_perf_sampler_print:    sampling time =       0.59 ms /     5 runs   (    0.12 ms per token,  8417.51 tokens per second)
0.00.734.965 I llama_perf_context_print:        load time =     460.71 ms
0.00.734.966 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.734.968 I llama_perf_context_print:        eval time =     270.47 ms /     4 runs   (   67.62 ms per token,    14.79 tokens per second)
0.00.734.968 I llama_perf_context_print:       total time =     273.58 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.182 I build: 4216 (273d8a03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.381 I main: llama backend init
0.00.000.389 I main: load the model and apply lora adapter, if any
0.00.020.761 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.774 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.782 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.787 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.788 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.793 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.794 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.794 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.795 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.795 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.796 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.801 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.802 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.803 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.803 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.804 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.809 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.865 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.655 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.661 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.662 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.663 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.663 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.664 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.665 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.667 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.668 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.671 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.672 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.676 I llama_model_loader: - type  f32:   37 tensors
0.00.130.677 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.076 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.926 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.429 I llm_load_vocab: special tokens cache size = 5
0.00.264.269 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.283 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.284 I llm_load_print_meta: arch             = gemma
0.00.264.284 I llm_load_print_meta: vocab type       = SPM
0.00.264.285 I llm_load_print_meta: n_vocab          = 256000
0.00.264.286 I llm_load_print_meta: n_merges         = 0
0.00.264.286 I llm_load_print_meta: vocab_only       = 0
0.00.264.286 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.286 I llm_load_print_meta: n_embd           = 2048
0.00.264.287 I llm_load_print_meta: n_layer          = 18
0.00.264.298 I llm_load_print_meta: n_head           = 8
0.00.264.299 I llm_load_print_meta: n_head_kv        = 1
0.00.264.300 I llm_load_print_meta: n_rot            = 256
0.00.264.300 I llm_load_print_meta: n_swa            = 0
0.00.264.301 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.301 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.302 I llm_load_print_meta: n_gqa            = 8
0.00.264.303 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.304 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.304 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.306 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.306 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.306 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.307 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.308 I llm_load_print_meta: n_ff             = 16384
0.00.264.309 I llm_load_print_meta: n_expert         = 0
0.00.264.309 I llm_load_print_meta: n_expert_used    = 0
0.00.264.309 I llm_load_print_meta: causal attn      = 1
0.00.264.310 I llm_load_print_meta: pooling type     = 0
0.00.264.310 I llm_load_print_meta: rope type        = 2
0.00.264.310 I llm_load_print_meta: rope scaling     = linear
0.00.264.312 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.313 I llm_load_print_meta: freq_scale_train = 1
0.00.264.313 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.314 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.314 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.314 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.314 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.315 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.315 I llm_load_print_meta: model type       = 2B
0.00.264.316 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.317 I llm_load_print_meta: model params     = 2.51 B
0.00.264.317 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.318 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.318 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.318 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.319 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.319 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.319 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.319 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.320 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.320 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.320 I llm_load_print_meta: max token length = 93
0.00.338.233 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.338.238 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.239 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.338.239 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.338.240 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.241 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.343.322 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.328 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.329 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.329 I llama_new_context_with_model: n_batch       = 2048
0.00.343.330 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.330 I llama_new_context_with_model: flash_attn    = 0
0.00.343.332 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.334 I llama_new_context_with_model: freq_scale    = 1
0.00.343.335 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.588 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.602 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.703 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.097 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.103 I llama_new_context_with_model: graph nodes  = 601
0.00.359.103 I llama_new_context_with_model: graph splits = 1
0.00.359.105 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.016 I main: llama threadpool init, n_threads = 4
0.00.453.035 I 
0.00.453.116 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.453.121 I 
0.00.453.174 I sampler seed: 1750720236
0.00.453.185 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.189 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.189 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.191 I 
 increamically. [end of text]


0.00.746.853 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8223.68 tokens per second)
0.00.746.855 I llama_perf_context_print:        load time =     452.61 ms
0.00.746.856 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.746.858 I llama_perf_context_print:        eval time =     290.71 ms /     4 runs   (   72.68 ms per token,    13.76 tokens per second)
0.00.746.858 I llama_perf_context_print:       total time =     293.85 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.529 I build: 4216 (273d8a03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.021.128 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.138 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.146 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.156 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.160 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.166 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.166 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.167 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.168 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.168 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.169 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.173 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.174 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.174 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.175 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.175 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.598 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.376 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.191 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.197 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.198 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.198 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.199 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.199 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.200 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.202 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.203 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.204 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.205 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.206 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.209 I llama_model_loader: - type  f32:   37 tensors
0.00.130.210 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.379 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.677 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.311 I llm_load_vocab: special tokens cache size = 5
0.00.263.626 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.647 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.648 I llm_load_print_meta: arch             = gemma
0.00.263.648 I llm_load_print_meta: vocab type       = SPM
0.00.263.649 I llm_load_print_meta: n_vocab          = 256000
0.00.263.649 I llm_load_print_meta: n_merges         = 0
0.00.263.650 I llm_load_print_meta: vocab_only       = 0
0.00.263.650 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.650 I llm_load_print_meta: n_embd           = 2048
0.00.263.651 I llm_load_print_meta: n_layer          = 18
0.00.263.662 I llm_load_print_meta: n_head           = 8
0.00.263.663 I llm_load_print_meta: n_head_kv        = 1
0.00.263.663 I llm_load_print_meta: n_rot            = 256
0.00.263.664 I llm_load_print_meta: n_swa            = 0
0.00.263.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.664 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.665 I llm_load_print_meta: n_gqa            = 8
0.00.263.666 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.667 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.669 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.669 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.670 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.670 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.671 I llm_load_print_meta: n_ff             = 16384
0.00.263.671 I llm_load_print_meta: n_expert         = 0
0.00.263.672 I llm_load_print_meta: n_expert_used    = 0
0.00.263.672 I llm_load_print_meta: causal attn      = 1
0.00.263.672 I llm_load_print_meta: pooling type     = 0
0.00.263.673 I llm_load_print_meta: rope type        = 2
0.00.263.673 I llm_load_print_meta: rope scaling     = linear
0.00.263.674 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.675 I llm_load_print_meta: freq_scale_train = 1
0.00.263.675 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.675 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.676 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.676 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.676 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.677 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.677 I llm_load_print_meta: model type       = 2B
0.00.263.678 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.678 I llm_load_print_meta: model params     = 2.51 B
0.00.263.679 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.680 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.680 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.681 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.682 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.683 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.683 I llm_load_print_meta: max token length = 93
0.00.335.470 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.479 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.499 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.506 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.506 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.507 I llama_new_context_with_model: n_batch       = 2048
0.00.340.507 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.508 I llama_new_context_with_model: flash_attn    = 0
0.00.340.510 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.510 I llama_new_context_with_model: freq_scale    = 1
0.00.340.512 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.017 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.029 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.121 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.334 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.341 I llama_new_context_with_model: graph nodes  = 601
0.00.356.341 I llama_new_context_with_model: graph splits = 1
0.00.356.343 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.536 I main: llama threadpool init, n_threads = 4
0.00.445.552 I 
0.00.445.623 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.626 I 
0.00.445.670 I sampler seed: 261433451
0.00.445.681 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.684 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.685 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.685 I 
 increabling, but it's not working.

**Code:**

```
IEnumerator Update()
{
    while (running)
    {


0.02.844.151 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6575.01 tokens per second)
0.02.844.154 I llama_perf_context_print:        load time =     444.79 ms
0.02.844.155 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.844.156 I llama_perf_context_print:        eval time =    2379.60 ms /    32 runs   (   74.36 ms per token,    13.45 tokens per second)
0.02.844.157 I llama_perf_context_print:       total time =    2398.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m15.465s
user	0m19.546s
sys	0m9.278s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4216 (273d8a03)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40198.46 ms
main:    total time = 40198.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.167 I build: 4216 (273d8a03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.357 I main: llama backend init
0.00.000.363 I main: load the model and apply lora adapter, if any
0.00.020.688 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.699 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.707 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.713 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.717 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.720 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.721 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.722 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.723 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.726 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.726 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.727 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.727 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.728 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.217 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.591 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.374 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.380 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.381 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.381 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.382 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.383 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.384 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.386 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.387 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.388 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.389 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.390 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.392 I llama_model_loader: - type  f32:   37 tensors
0.00.129.393 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.394 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.869 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.093 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.782 I llm_load_vocab: special tokens cache size = 5
0.00.272.194 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.214 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.214 I llm_load_print_meta: arch             = gemma
0.00.272.215 I llm_load_print_meta: vocab type       = SPM
0.00.272.215 I llm_load_print_meta: n_vocab          = 256000
0.00.272.216 I llm_load_print_meta: n_merges         = 0
0.00.272.216 I llm_load_print_meta: vocab_only       = 0
0.00.272.217 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.217 I llm_load_print_meta: n_embd           = 2048
0.00.272.217 I llm_load_print_meta: n_layer          = 18
0.00.272.231 I llm_load_print_meta: n_head           = 8
0.00.272.232 I llm_load_print_meta: n_head_kv        = 1
0.00.272.233 I llm_load_print_meta: n_rot            = 256
0.00.272.233 I llm_load_print_meta: n_swa            = 0
0.00.272.233 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.233 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.234 I llm_load_print_meta: n_gqa            = 8
0.00.272.235 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.236 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.237 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.238 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.239 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.239 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.239 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.240 I llm_load_print_meta: n_ff             = 16384
0.00.272.241 I llm_load_print_meta: n_expert         = 0
0.00.272.241 I llm_load_print_meta: n_expert_used    = 0
0.00.272.241 I llm_load_print_meta: causal attn      = 1
0.00.272.241 I llm_load_print_meta: pooling type     = 0
0.00.272.242 I llm_load_print_meta: rope type        = 2
0.00.272.242 I llm_load_print_meta: rope scaling     = linear
0.00.272.244 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.244 I llm_load_print_meta: freq_scale_train = 1
0.00.272.244 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.245 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.245 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.245 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.246 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.246 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.246 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.247 I llm_load_print_meta: model type       = 2B
0.00.272.247 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.248 I llm_load_print_meta: model params     = 2.51 B
0.00.272.249 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.250 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.250 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.251 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.251 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.251 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.252 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.252 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.253 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.254 I llm_load_print_meta: max token length = 93
0.00.331.338 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.346 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.347 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.347 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.348 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.349 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.410 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.416 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.417 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.417 I llama_new_context_with_model: n_batch       = 2048
0.00.336.418 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.418 I llama_new_context_with_model: flash_attn    = 0
0.00.336.421 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.421 I llama_new_context_with_model: freq_scale    = 1
0.00.336.422 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.654 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.668 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.766 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.059 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.065 I llama_new_context_with_model: graph nodes  = 601
0.00.352.065 I llama_new_context_with_model: graph splits = 1
0.00.352.067 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.344 I main: llama threadpool init, n_threads = 4
0.00.427.360 I 
0.00.427.431 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.427.435 I 
0.00.427.480 I sampler seed: 2219217552
0.00.427.491 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.509 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.513 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.513 I 
 fufilling and mesmerizing are synonyms for:

A) Striking
B) Intense
C) Dull
D) Uneventful

The correct answer is B

0.02.016.226 I llama_perf_sampler_print:    sampling time =       5.23 ms /    33 runs   (    0.16 ms per token,  6307.34 tokens per second)
0.02.016.228 I llama_perf_context_print:        load time =     426.96 ms
0.02.016.231 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.016.233 I llama_perf_context_print:        eval time =    1569.36 ms /    32 runs   (   49.04 ms per token,    20.39 tokens per second)
0.02.016.233 I llama_perf_context_print:       total time =    1588.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4216 (273d8a03)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40177.04 ms
main:    total time = 40177.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4216 (273d8a03) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.463 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.477 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.484 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.485 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.489 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.490 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.490 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.491 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.491 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.492 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.496 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.497 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.497 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.503 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.503 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.083 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.990 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.840 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.847 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.847 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.848 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.848 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.849 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.850 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.852 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.853 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.857 I llama_model_loader: - type  f32:   37 tensors
0.00.130.858 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.858 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.948 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.948 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.703 I llm_load_vocab: special tokens cache size = 5
0.00.279.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.299 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.300 I llm_load_print_meta: arch             = gemma
0.00.279.300 I llm_load_print_meta: vocab type       = SPM
0.00.279.302 I llm_load_print_meta: n_vocab          = 256000
0.00.279.302 I llm_load_print_meta: n_merges         = 0
0.00.279.302 I llm_load_print_meta: vocab_only       = 0
0.00.279.303 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.303 I llm_load_print_meta: n_embd           = 2048
0.00.279.303 I llm_load_print_meta: n_layer          = 18
0.00.279.317 I llm_load_print_meta: n_head           = 8
0.00.279.318 I llm_load_print_meta: n_head_kv        = 1
0.00.279.319 I llm_load_print_meta: n_rot            = 256
0.00.279.319 I llm_load_print_meta: n_swa            = 0
0.00.279.319 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.319 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.320 I llm_load_print_meta: n_gqa            = 8
0.00.279.321 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.323 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.323 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.325 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.325 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.325 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.325 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.326 I llm_load_print_meta: n_ff             = 16384
0.00.279.327 I llm_load_print_meta: n_expert         = 0
0.00.279.327 I llm_load_print_meta: n_expert_used    = 0
0.00.279.327 I llm_load_print_meta: causal attn      = 1
0.00.279.328 I llm_load_print_meta: pooling type     = 0
0.00.279.328 I llm_load_print_meta: rope type        = 2
0.00.279.328 I llm_load_print_meta: rope scaling     = linear
0.00.279.330 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.330 I llm_load_print_meta: freq_scale_train = 1
0.00.279.331 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.332 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.332 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.332 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.333 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.333 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.333 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.334 I llm_load_print_meta: model type       = 2B
0.00.279.339 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.340 I llm_load_print_meta: model params     = 2.51 B
0.00.279.341 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.341 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.341 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.342 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.342 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.343 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.343 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.344 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.344 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.344 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.344 I llm_load_print_meta: max token length = 93
0.00.333.196 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.063 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.069 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.069 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.070 I llama_new_context_with_model: n_batch       = 2048
0.00.339.070 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.071 I llama_new_context_with_model: flash_attn    = 0
0.00.339.073 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.074 I llama_new_context_with_model: freq_scale    = 1
0.00.339.075 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.645 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.660 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.753 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.984 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.988 I llama_new_context_with_model: graph nodes  = 601
0.00.354.989 I llama_new_context_with_model: graph splits = 1
0.00.354.991 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.262 I main: llama threadpool init, n_threads = 4
0.00.429.279 I 
0.00.429.358 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.429.361 I 
0.00.429.408 I sampler seed: 2811869751
0.00.429.422 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.426 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.429 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.429 I 
 seconally to the questions in the prompt.

**Instructions:** Answer the following questions based on the prompt.

**1. What is the significance of the

0.01.996.741 I llama_perf_sampler_print:    sampling time =       5.96 ms /    33 runs   (    0.18 ms per token,  5540.63 tokens per second)
0.01.996.743 I llama_perf_context_print:        load time =     428.48 ms
0.01.996.745 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.996.746 I llama_perf_context_print:        eval time =    1547.48 ms /    32 runs   (   48.36 ms per token,    20.68 tokens per second)
0.01.996.746 I llama_perf_context_print:       total time =    1567.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.181s
user	10m24.272s
sys	0m6.806s
