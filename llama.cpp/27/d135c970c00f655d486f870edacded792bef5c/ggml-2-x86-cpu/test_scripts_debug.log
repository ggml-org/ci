+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.703 I build: 4598 (27d135c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.915 I main: llama backend init
0.00.000.925 I main: load the model and apply lora adapter, if any
0.00.086.453 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.465 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.565 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.587 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.592 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.599 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.601 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.603 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.604 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.606 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.608 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.615 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.619 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.621 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.622 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.624 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.655 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.394.310 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.313 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.330 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.333 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.335 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.337 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.339 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.343 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.345 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.347 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.349 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.351 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.417.360 I llama_model_loader: - type  f32:   37 tensors
0.00.417.362 I llama_model_loader: - type q8_0:  127 tensors
0.00.417.381 I print_info: file format = GGUF V3 (latest)
0.00.417.382 I print_info: file type   = Q8_0
0.00.417.385 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.710.179 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.842.469 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.843.549 I load: special tokens cache size = 5
0.01.063.616 I load: token to piece cache size = 1.6014 MB
0.01.063.699 I print_info: arch             = gemma
0.01.063.703 I print_info: vocab_only       = 0
0.01.063.704 I print_info: n_ctx_train      = 8192
0.01.063.704 I print_info: n_embd           = 2048
0.01.063.705 I print_info: n_layer          = 18
0.01.063.781 I print_info: n_head           = 8
0.01.063.791 I print_info: n_head_kv        = 1
0.01.063.793 I print_info: n_rot            = 256
0.01.063.793 I print_info: n_swa            = 0
0.01.063.794 I print_info: n_embd_head_k    = 256
0.01.063.794 I print_info: n_embd_head_v    = 256
0.01.063.799 I print_info: n_gqa            = 8
0.01.063.804 I print_info: n_embd_k_gqa     = 256
0.01.063.812 I print_info: n_embd_v_gqa     = 256
0.01.063.813 I print_info: f_norm_eps       = 0.0e+00
0.01.063.814 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.063.814 I print_info: f_clamp_kqv      = 0.0e+00
0.01.063.815 I print_info: f_max_alibi_bias = 0.0e+00
0.01.063.815 I print_info: f_logit_scale    = 0.0e+00
0.01.063.820 I print_info: n_ff             = 16384
0.01.063.821 I print_info: n_expert         = 0
0.01.063.822 I print_info: n_expert_used    = 0
0.01.063.822 I print_info: causal attn      = 1
0.01.063.823 I print_info: pooling type     = 0
0.01.063.824 I print_info: rope type        = 2
0.01.063.824 I print_info: rope scaling     = linear
0.01.063.826 I print_info: freq_base_train  = 10000.0
0.01.063.826 I print_info: freq_scale_train = 1
0.01.063.827 I print_info: n_ctx_orig_yarn  = 8192
0.01.063.827 I print_info: rope_finetuned   = unknown
0.01.063.828 I print_info: ssm_d_conv       = 0
0.01.063.828 I print_info: ssm_d_inner      = 0
0.01.063.828 I print_info: ssm_d_state      = 0
0.01.063.831 I print_info: ssm_dt_rank      = 0
0.01.063.832 I print_info: ssm_dt_b_c_rms   = 0
0.01.063.833 I print_info: model type       = 2B
0.01.063.834 I print_info: model params     = 2.51 B
0.01.063.834 I print_info: general.name     = gemma-1.1-2b-it
0.01.063.838 I print_info: vocab type       = SPM
0.01.063.839 I print_info: n_vocab          = 256000
0.01.063.842 I print_info: n_merges         = 0
0.01.063.843 I print_info: BOS token        = 2 '<bos>'
0.01.063.843 I print_info: EOS token        = 1 '<eos>'
0.01.063.844 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.063.854 I print_info: UNK token        = 3 '<unk>'
0.01.063.856 I print_info: PAD token        = 0 '<pad>'
0.01.063.857 I print_info: LF token         = 227 '<0x0A>'
0.01.063.864 I print_info: EOG token        = 1 '<eos>'
0.01.063.877 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.063.878 I print_info: max token length = 93
0.01.165.419 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.165.432 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.165.433 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.165.434 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.165.435 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.165.435 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
0.01.172.443 I llama_init_from_model: n_seq_max     = 1
0.01.172.451 I llama_init_from_model: n_ctx         = 4096
0.01.172.451 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.172.452 I llama_init_from_model: n_batch       = 2048
0.01.172.452 I llama_init_from_model: n_ubatch      = 512
0.01.172.453 I llama_init_from_model: flash_attn    = 0
0.01.172.456 I llama_init_from_model: freq_base     = 10000.0
0.01.172.457 I llama_init_from_model: freq_scale    = 1
0.01.172.458 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.172.552 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.187.994 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.188.038 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.188.166 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.191.813 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.191.817 I llama_init_from_model: graph nodes  = 601
0.01.191.818 I llama_init_from_model: graph splits = 1
0.01.191.845 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.191.849 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.824.605 I main: llama threadpool init, n_threads = 4
0.01.824.622 I 
0.01.824.719 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.824.723 I 
0.01.824.958 I sampler seed: 3568338487
0.01.824.972 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.824.984 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.824.986 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.824.986 I 
 increasively.

I am unable to answer the question as it contains harmful and potentially dangerous content. [end of text]


0.10.701.300 I llama_perf_sampler_print:    sampling time =      32.81 ms /    22 runs   (    1.49 ms per token,   670.57 tokens per second)
0.10.701.303 I llama_perf_context_print:        load time =    1797.88 ms
0.10.701.318 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.701.320 I llama_perf_context_print:        eval time =    8819.05 ms /    21 runs   (  419.95 ms per token,     2.38 tokens per second)
0.10.701.321 I llama_perf_context_print:       total time =    8902.35 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.738 I build: 4598 (27d135c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.954 I main: llama backend init
0.00.000.964 I main: load the model and apply lora adapter, if any
0.00.087.780 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.087.890 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.915 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.918 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.924 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.926 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.928 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.930 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.931 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.940 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.941 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.943 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.945 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.946 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.318.132 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.419.893 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.442.943 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.442.959 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.442.961 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.442.963 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.442.964 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.442.967 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.442.969 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.442.974 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.442.976 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.442.978 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.442.980 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.442.982 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.442.991 I llama_model_loader: - type  f32:   37 tensors
0.00.442.993 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.011 I print_info: file format = GGUF V3 (latest)
0.00.443.012 I print_info: file type   = Q8_0
0.00.443.015 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.757.046 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.889.223 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.890.246 I load: special tokens cache size = 5
0.01.124.767 I load: token to piece cache size = 1.6014 MB
0.01.124.853 I print_info: arch             = gemma
0.01.124.854 I print_info: vocab_only       = 0
0.01.124.854 I print_info: n_ctx_train      = 8192
0.01.124.854 I print_info: n_embd           = 2048
0.01.124.855 I print_info: n_layer          = 18
0.01.124.935 I print_info: n_head           = 8
0.01.124.942 I print_info: n_head_kv        = 1
0.01.124.942 I print_info: n_rot            = 256
0.01.124.943 I print_info: n_swa            = 0
0.01.124.943 I print_info: n_embd_head_k    = 256
0.01.124.944 I print_info: n_embd_head_v    = 256
0.01.124.948 I print_info: n_gqa            = 8
0.01.124.953 I print_info: n_embd_k_gqa     = 256
0.01.124.958 I print_info: n_embd_v_gqa     = 256
0.01.124.959 I print_info: f_norm_eps       = 0.0e+00
0.01.124.960 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.124.961 I print_info: f_clamp_kqv      = 0.0e+00
0.01.124.962 I print_info: f_max_alibi_bias = 0.0e+00
0.01.124.962 I print_info: f_logit_scale    = 0.0e+00
0.01.124.967 I print_info: n_ff             = 16384
0.01.124.967 I print_info: n_expert         = 0
0.01.124.968 I print_info: n_expert_used    = 0
0.01.124.968 I print_info: causal attn      = 1
0.01.124.968 I print_info: pooling type     = 0
0.01.124.969 I print_info: rope type        = 2
0.01.124.969 I print_info: rope scaling     = linear
0.01.124.971 I print_info: freq_base_train  = 10000.0
0.01.124.971 I print_info: freq_scale_train = 1
0.01.124.971 I print_info: n_ctx_orig_yarn  = 8192
0.01.124.972 I print_info: rope_finetuned   = unknown
0.01.124.972 I print_info: ssm_d_conv       = 0
0.01.124.972 I print_info: ssm_d_inner      = 0
0.01.124.973 I print_info: ssm_d_state      = 0
0.01.124.973 I print_info: ssm_dt_rank      = 0
0.01.124.974 I print_info: ssm_dt_b_c_rms   = 0
0.01.124.976 I print_info: model type       = 2B
0.01.124.977 I print_info: model params     = 2.51 B
0.01.124.977 I print_info: general.name     = gemma-1.1-2b-it
0.01.124.981 I print_info: vocab type       = SPM
0.01.124.983 I print_info: n_vocab          = 256000
0.01.124.985 I print_info: n_merges         = 0
0.01.124.986 I print_info: BOS token        = 2 '<bos>'
0.01.124.986 I print_info: EOS token        = 1 '<eos>'
0.01.124.987 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.124.987 I print_info: UNK token        = 3 '<unk>'
0.01.124.987 I print_info: PAD token        = 0 '<pad>'
0.01.124.988 I print_info: LF token         = 227 '<0x0A>'
0.01.124.994 I print_info: EOG token        = 1 '<eos>'
0.01.124.995 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.124.996 I print_info: max token length = 93
0.01.220.141 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
0.01.227.182 I llama_init_from_model: n_seq_max     = 1
0.01.227.190 I llama_init_from_model: n_ctx         = 4096
0.01.227.191 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.227.191 I llama_init_from_model: n_batch       = 2048
0.01.227.192 I llama_init_from_model: n_ubatch      = 512
0.01.227.192 I llama_init_from_model: flash_attn    = 0
0.01.227.196 I llama_init_from_model: freq_base     = 10000.0
0.01.227.196 I llama_init_from_model: freq_scale    = 1
0.01.227.197 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.227.292 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.243.468 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.243.510 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.243.647 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.247.342 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.247.347 I llama_init_from_model: graph nodes  = 601
0.01.247.347 I llama_init_from_model: graph splits = 1
0.01.247.374 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.247.377 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.887.287 I main: llama threadpool init, n_threads = 4
0.01.887.303 I 
0.01.887.400 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.887.404 I 
0.01.887.646 I sampler seed: 2538680828
0.01.887.659 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.887.668 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.887.669 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.887.670 I 
 increasities of the gods in Greek mythology?

**Answer:**

In Greek mythology, there were numerous instances of gods engaging in intense and awe-inspiring affairs

0.15.553.671 I llama_perf_sampler_print:    sampling time =      50.43 ms /    33 runs   (    1.53 ms per token,   654.40 tokens per second)
0.15.553.674 I llama_perf_context_print:        load time =    1860.59 ms
0.15.553.675 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.553.677 I llama_perf_context_print:        eval time =   13578.05 ms /    32 runs   (  424.31 ms per token,     2.36 tokens per second)
0.15.553.677 I llama_perf_context_print:       total time =   13691.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.753 I build: 4598 (27d135c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.973 I main: llama backend init
0.00.000.982 I main: load the model and apply lora adapter, if any
0.00.087.937 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.087.948 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.088.053 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.088.078 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.088.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.088.089 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.088.092 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.088.094 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.088.095 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.088.097 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.088.099 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.088.107 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.088.109 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.088.111 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.088.112 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.088.114 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.292.983 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.398.791 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.421.745 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.421.762 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.421.763 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.421.765 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.421.767 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.421.769 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.421.772 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.421.776 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.421.778 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.421.780 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.421.782 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.421.784 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.421.792 I llama_model_loader: - type  f32:   37 tensors
0.00.421.795 I llama_model_loader: - type q8_0:  127 tensors
0.00.421.813 I print_info: file format = GGUF V3 (latest)
0.00.421.815 I print_info: file type   = Q8_0
0.00.421.820 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.719.525 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.851.919 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.853.004 I load: special tokens cache size = 5
0.01.077.732 I load: token to piece cache size = 1.6014 MB
0.01.077.814 I print_info: arch             = gemma
0.01.077.819 I print_info: vocab_only       = 0
0.01.077.819 I print_info: n_ctx_train      = 8192
0.01.077.820 I print_info: n_embd           = 2048
0.01.077.820 I print_info: n_layer          = 18
0.01.077.897 I print_info: n_head           = 8
0.01.077.907 I print_info: n_head_kv        = 1
0.01.077.908 I print_info: n_rot            = 256
0.01.077.909 I print_info: n_swa            = 0
0.01.077.909 I print_info: n_embd_head_k    = 256
0.01.077.911 I print_info: n_embd_head_v    = 256
0.01.077.916 I print_info: n_gqa            = 8
0.01.077.922 I print_info: n_embd_k_gqa     = 256
0.01.077.927 I print_info: n_embd_v_gqa     = 256
0.01.077.930 I print_info: f_norm_eps       = 0.0e+00
0.01.077.932 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.077.932 I print_info: f_clamp_kqv      = 0.0e+00
0.01.077.933 I print_info: f_max_alibi_bias = 0.0e+00
0.01.077.933 I print_info: f_logit_scale    = 0.0e+00
0.01.077.938 I print_info: n_ff             = 16384
0.01.077.939 I print_info: n_expert         = 0
0.01.077.939 I print_info: n_expert_used    = 0
0.01.077.940 I print_info: causal attn      = 1
0.01.077.940 I print_info: pooling type     = 0
0.01.077.941 I print_info: rope type        = 2
0.01.077.941 I print_info: rope scaling     = linear
0.01.077.942 I print_info: freq_base_train  = 10000.0
0.01.077.943 I print_info: freq_scale_train = 1
0.01.077.943 I print_info: n_ctx_orig_yarn  = 8192
0.01.077.943 I print_info: rope_finetuned   = unknown
0.01.077.944 I print_info: ssm_d_conv       = 0
0.01.077.944 I print_info: ssm_d_inner      = 0
0.01.077.945 I print_info: ssm_d_state      = 0
0.01.077.945 I print_info: ssm_dt_rank      = 0
0.01.077.945 I print_info: ssm_dt_b_c_rms   = 0
0.01.077.959 I print_info: model type       = 2B
0.01.077.961 I print_info: model params     = 2.51 B
0.01.077.961 I print_info: general.name     = gemma-1.1-2b-it
0.01.077.966 I print_info: vocab type       = SPM
0.01.077.968 I print_info: n_vocab          = 256000
0.01.077.970 I print_info: n_merges         = 0
0.01.077.971 I print_info: BOS token        = 2 '<bos>'
0.01.077.971 I print_info: EOS token        = 1 '<eos>'
0.01.077.972 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.077.975 I print_info: UNK token        = 3 '<unk>'
0.01.077.976 I print_info: PAD token        = 0 '<pad>'
0.01.077.976 I print_info: LF token         = 227 '<0x0A>'
0.01.077.982 I print_info: EOG token        = 1 '<eos>'
0.01.077.984 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.077.985 I print_info: max token length = 93
0.01.154.957 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.154.971 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.154.972 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.154.972 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.154.973 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.154.974 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
0.01.161.780 I llama_init_from_model: n_seq_max     = 1
0.01.161.790 I llama_init_from_model: n_ctx         = 4096
0.01.161.791 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.161.792 I llama_init_from_model: n_batch       = 2048
0.01.161.792 I llama_init_from_model: n_ubatch      = 512
0.01.161.793 I llama_init_from_model: flash_attn    = 0
0.01.161.796 I llama_init_from_model: freq_base     = 10000.0
0.01.161.797 I llama_init_from_model: freq_scale    = 1
0.01.161.798 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.161.894 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.178.378 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.178.422 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.178.556 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.182.231 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.182.237 I llama_init_from_model: graph nodes  = 601
0.01.182.237 I llama_init_from_model: graph splits = 1
0.01.182.264 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.182.267 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.815.892 I main: llama threadpool init, n_threads = 4
0.01.815.908 I 
0.01.816.008 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.816.012 I 
0.01.816.246 I sampler seed: 1116646955
0.01.816.259 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.816.268 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.816.269 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.816.270 I 
 increasities and tragedies.

**Answer:** Death and tragedy.

Explanation:
The passage talks about how life is full of hardship and sorrow. It highlights

0.15.388.259 I llama_perf_sampler_print:    sampling time =      49.88 ms /    33 runs   (    1.51 ms per token,   661.53 tokens per second)
0.15.388.262 I llama_perf_context_print:        load time =    1789.22 ms
0.15.388.263 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.388.265 I llama_perf_context_print:        eval time =   13485.19 ms /    32 runs   (  421.41 ms per token,     2.37 tokens per second)
0.15.388.266 I llama_perf_context_print:       total time =   13597.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.794 I build: 4598 (27d135c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.019 I main: llama backend init
0.00.001.037 I main: load the model and apply lora adapter, if any
0.00.087.340 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.087.356 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.087.452 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.471 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.474 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.479 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.481 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.483 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.485 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.487 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.488 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.495 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.497 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.498 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.500 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.501 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.311.814 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.414.264 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.437.290 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.437.304 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.437.306 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.437.307 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.437.309 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.437.311 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.437.313 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.437.318 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.437.320 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.437.322 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.437.324 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.437.325 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.437.333 I llama_model_loader: - type  f32:   37 tensors
0.00.437.335 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.354 I print_info: file format = GGUF V3 (latest)
0.00.437.355 I print_info: file type   = Q8_0
0.00.437.358 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.745.189 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.876.595 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.877.792 I load: special tokens cache size = 5
0.01.107.190 I load: token to piece cache size = 1.6014 MB
0.01.107.277 I print_info: arch             = gemma
0.01.107.278 I print_info: vocab_only       = 0
0.01.107.279 I print_info: n_ctx_train      = 8192
0.01.107.279 I print_info: n_embd           = 2048
0.01.107.280 I print_info: n_layer          = 18
0.01.107.354 I print_info: n_head           = 8
0.01.107.360 I print_info: n_head_kv        = 1
0.01.107.361 I print_info: n_rot            = 256
0.01.107.361 I print_info: n_swa            = 0
0.01.107.361 I print_info: n_embd_head_k    = 256
0.01.107.362 I print_info: n_embd_head_v    = 256
0.01.107.367 I print_info: n_gqa            = 8
0.01.107.371 I print_info: n_embd_k_gqa     = 256
0.01.107.377 I print_info: n_embd_v_gqa     = 256
0.01.107.378 I print_info: f_norm_eps       = 0.0e+00
0.01.107.379 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.107.380 I print_info: f_clamp_kqv      = 0.0e+00
0.01.107.380 I print_info: f_max_alibi_bias = 0.0e+00
0.01.107.381 I print_info: f_logit_scale    = 0.0e+00
0.01.107.385 I print_info: n_ff             = 16384
0.01.107.386 I print_info: n_expert         = 0
0.01.107.386 I print_info: n_expert_used    = 0
0.01.107.387 I print_info: causal attn      = 1
0.01.107.387 I print_info: pooling type     = 0
0.01.107.387 I print_info: rope type        = 2
0.01.107.388 I print_info: rope scaling     = linear
0.01.107.390 I print_info: freq_base_train  = 10000.0
0.01.107.390 I print_info: freq_scale_train = 1
0.01.107.390 I print_info: n_ctx_orig_yarn  = 8192
0.01.107.391 I print_info: rope_finetuned   = unknown
0.01.107.392 I print_info: ssm_d_conv       = 0
0.01.107.392 I print_info: ssm_d_inner      = 0
0.01.107.393 I print_info: ssm_d_state      = 0
0.01.107.393 I print_info: ssm_dt_rank      = 0
0.01.107.393 I print_info: ssm_dt_b_c_rms   = 0
0.01.107.394 I print_info: model type       = 2B
0.01.107.395 I print_info: model params     = 2.51 B
0.01.107.396 I print_info: general.name     = gemma-1.1-2b-it
0.01.107.400 I print_info: vocab type       = SPM
0.01.107.429 I print_info: n_vocab          = 256000
0.01.107.432 I print_info: n_merges         = 0
0.01.107.433 I print_info: BOS token        = 2 '<bos>'
0.01.107.441 I print_info: EOS token        = 1 '<eos>'
0.01.107.448 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.107.449 I print_info: UNK token        = 3 '<unk>'
0.01.107.451 I print_info: PAD token        = 0 '<pad>'
0.01.107.451 I print_info: LF token         = 227 '<0x0A>'
0.01.107.458 I print_info: EOG token        = 1 '<eos>'
0.01.107.459 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.107.460 I print_info: max token length = 93
0.01.180.344 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.180.358 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
0.01.187.286 I llama_init_from_model: n_seq_max     = 1
0.01.187.296 I llama_init_from_model: n_ctx         = 4096
0.01.187.297 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.187.297 I llama_init_from_model: n_batch       = 2048
0.01.187.297 I llama_init_from_model: n_ubatch      = 512
0.01.187.298 I llama_init_from_model: flash_attn    = 0
0.01.187.301 I llama_init_from_model: freq_base     = 10000.0
0.01.187.302 I llama_init_from_model: freq_scale    = 1
0.01.187.303 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.187.394 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.203.694 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.203.735 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.203.869 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.207.232 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.207.237 I llama_init_from_model: graph nodes  = 601
0.01.207.237 I llama_init_from_model: graph splits = 1
0.01.207.264 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.207.265 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.844.601 I main: llama threadpool init, n_threads = 4
0.01.844.616 I 
0.01.844.714 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.844.718 I 
0.01.844.960 I sampler seed: 333724211
0.01.844.973 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.844.982 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.844.986 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.844.986 I 
 increadibly!

I am unable to generate text that is sexually suggestive in nature. [end of text]


0.09.503.362 I llama_perf_sampler_print:    sampling time =      28.15 ms /    19 runs   (    1.48 ms per token,   675.05 tokens per second)
0.09.503.365 I llama_perf_context_print:        load time =    1817.80 ms
0.09.503.378 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.503.380 I llama_perf_context_print:        eval time =    7608.69 ms /    18 runs   (  422.70 ms per token,     2.37 tokens per second)
0.09.503.381 I llama_perf_context_print:       total time =    7684.37 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.689s
user	3m11.290s
sys	0m9.828s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4598 (27d135c9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187613.22 ms
main:    total time = 187613.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.723 I build: 4598 (27d135c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.930 I main: llama backend init
0.00.000.938 I main: load the model and apply lora adapter, if any
0.00.087.166 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.087.182 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.087.287 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.307 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.310 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.316 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.318 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.321 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.322 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.324 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.333 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.334 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.337 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.314.617 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.416.679 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.439.841 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.439.859 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.439.861 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.439.863 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.439.864 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.439.866 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.439.869 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.439.873 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.439.875 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.439.877 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.439.879 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.439.880 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.439.882 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.439.890 I llama_model_loader: - type  f32:   37 tensors
0.00.439.892 I llama_model_loader: - type q4_K:  108 tensors
0.00.439.893 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.910 I print_info: file format = GGUF V3 (latest)
0.00.439.911 I print_info: file type   = Q4_K - Medium
0.00.439.914 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.735.651 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.866.770 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.867.817 I load: special tokens cache size = 5
0.01.103.501 I load: token to piece cache size = 1.6014 MB
0.01.103.596 I print_info: arch             = gemma
0.01.103.597 I print_info: vocab_only       = 0
0.01.103.598 I print_info: n_ctx_train      = 8192
0.01.103.599 I print_info: n_embd           = 2048
0.01.103.599 I print_info: n_layer          = 18
0.01.103.679 I print_info: n_head           = 8
0.01.103.686 I print_info: n_head_kv        = 1
0.01.103.687 I print_info: n_rot            = 256
0.01.103.687 I print_info: n_swa            = 0
0.01.103.687 I print_info: n_embd_head_k    = 256
0.01.103.688 I print_info: n_embd_head_v    = 256
0.01.103.692 I print_info: n_gqa            = 8
0.01.103.697 I print_info: n_embd_k_gqa     = 256
0.01.103.702 I print_info: n_embd_v_gqa     = 256
0.01.103.703 I print_info: f_norm_eps       = 0.0e+00
0.01.103.705 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.103.706 I print_info: f_clamp_kqv      = 0.0e+00
0.01.103.706 I print_info: f_max_alibi_bias = 0.0e+00
0.01.103.706 I print_info: f_logit_scale    = 0.0e+00
0.01.103.711 I print_info: n_ff             = 16384
0.01.103.712 I print_info: n_expert         = 0
0.01.103.712 I print_info: n_expert_used    = 0
0.01.103.713 I print_info: causal attn      = 1
0.01.103.713 I print_info: pooling type     = 0
0.01.103.713 I print_info: rope type        = 2
0.01.103.714 I print_info: rope scaling     = linear
0.01.103.715 I print_info: freq_base_train  = 10000.0
0.01.103.716 I print_info: freq_scale_train = 1
0.01.103.717 I print_info: n_ctx_orig_yarn  = 8192
0.01.103.717 I print_info: rope_finetuned   = unknown
0.01.103.717 I print_info: ssm_d_conv       = 0
0.01.103.718 I print_info: ssm_d_inner      = 0
0.01.103.718 I print_info: ssm_d_state      = 0
0.01.103.718 I print_info: ssm_dt_rank      = 0
0.01.103.719 I print_info: ssm_dt_b_c_rms   = 0
0.01.103.720 I print_info: model type       = 2B
0.01.103.721 I print_info: model params     = 2.51 B
0.01.103.721 I print_info: general.name     = gemma-1.1-2b-it
0.01.103.725 I print_info: vocab type       = SPM
0.01.103.726 I print_info: n_vocab          = 256000
0.01.103.728 I print_info: n_merges         = 0
0.01.103.729 I print_info: BOS token        = 2 '<bos>'
0.01.103.729 I print_info: EOS token        = 1 '<eos>'
0.01.103.730 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.103.731 I print_info: UNK token        = 3 '<unk>'
0.01.103.731 I print_info: PAD token        = 0 '<pad>'
0.01.103.732 I print_info: LF token         = 227 '<0x0A>'
0.01.103.738 I print_info: EOG token        = 1 '<eos>'
0.01.103.739 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.103.740 I print_info: max token length = 93
0.01.164.912 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.164.924 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.164.924 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.164.925 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.164.926 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.164.927 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
0.01.171.827 I llama_init_from_model: n_seq_max     = 1
0.01.171.837 I llama_init_from_model: n_ctx         = 4096
0.01.171.837 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.171.838 I llama_init_from_model: n_batch       = 2048
0.01.171.838 I llama_init_from_model: n_ubatch      = 512
0.01.171.839 I llama_init_from_model: flash_attn    = 0
0.01.171.842 I llama_init_from_model: freq_base     = 10000.0
0.01.171.843 I llama_init_from_model: freq_scale    = 1
0.01.171.843 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.171.937 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.188.475 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.188.516 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.188.673 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.192.031 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.192.035 I llama_init_from_model: graph nodes  = 601
0.01.192.035 I llama_init_from_model: graph splits = 1
0.01.192.062 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.192.065 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.799.432 I main: llama threadpool init, n_threads = 4
0.01.799.448 I 
0.01.799.548 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.799.548 I 
0.01.799.786 I sampler seed: 3312010364
0.01.799.802 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.799.810 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.799.814 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.799.814 I 
 increasities and the resulting social upheaval.

**Answer:** The provided text does not contain any information regarding the specifics of historical events, so I am unable to

0.12.989.797 I llama_perf_sampler_print:    sampling time =      49.87 ms /    33 runs   (    1.51 ms per token,   661.77 tokens per second)
0.12.989.800 I llama_perf_context_print:        load time =    1772.75 ms
0.12.989.801 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.989.803 I llama_perf_context_print:        eval time =   11103.80 ms /    32 runs   (  346.99 ms per token,     2.88 tokens per second)
0.12.989.818 I llama_perf_context_print:       total time =   11215.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4598 (27d135c9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187333.96 ms
main:    total time = 187333.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.690 I build: 4598 (27d135c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.911 I main: llama backend init
0.00.000.920 I main: load the model and apply lora adapter, if any
0.00.086.386 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.086.516 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.544 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.552 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.558 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.571 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.573 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.575 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.577 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.579 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.586 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.588 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.590 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.592 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.290.148 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.228 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.233 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.250 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.252 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.254 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.256 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.258 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.260 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.264 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.266 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.415.268 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.415.277 I llama_model_loader: - type  f32:   37 tensors
0.00.415.279 I llama_model_loader: - type q4_K:  108 tensors
0.00.415.279 I llama_model_loader: - type q6_K:   19 tensors
0.00.415.297 I print_info: file format = GGUF V3 (latest)
0.00.415.298 I print_info: file type   = Q4_K - Medium
0.00.415.301 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.719.291 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.852.891 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.853.998 I load: special tokens cache size = 5
0.01.084.085 I load: token to piece cache size = 1.6014 MB
0.01.084.166 I print_info: arch             = gemma
0.01.084.171 I print_info: vocab_only       = 0
0.01.084.171 I print_info: n_ctx_train      = 8192
0.01.084.172 I print_info: n_embd           = 2048
0.01.084.172 I print_info: n_layer          = 18
0.01.084.251 I print_info: n_head           = 8
0.01.084.261 I print_info: n_head_kv        = 1
0.01.084.262 I print_info: n_rot            = 256
0.01.084.262 I print_info: n_swa            = 0
0.01.084.264 I print_info: n_embd_head_k    = 256
0.01.084.265 I print_info: n_embd_head_v    = 256
0.01.084.270 I print_info: n_gqa            = 8
0.01.084.275 I print_info: n_embd_k_gqa     = 256
0.01.084.279 I print_info: n_embd_v_gqa     = 256
0.01.084.280 I print_info: f_norm_eps       = 0.0e+00
0.01.084.282 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.084.283 I print_info: f_clamp_kqv      = 0.0e+00
0.01.084.284 I print_info: f_max_alibi_bias = 0.0e+00
0.01.084.284 I print_info: f_logit_scale    = 0.0e+00
0.01.084.290 I print_info: n_ff             = 16384
0.01.084.301 I print_info: n_expert         = 0
0.01.084.303 I print_info: n_expert_used    = 0
0.01.084.303 I print_info: causal attn      = 1
0.01.084.304 I print_info: pooling type     = 0
0.01.084.305 I print_info: rope type        = 2
0.01.084.322 I print_info: rope scaling     = linear
0.01.084.330 I print_info: freq_base_train  = 10000.0
0.01.084.331 I print_info: freq_scale_train = 1
0.01.084.332 I print_info: n_ctx_orig_yarn  = 8192
0.01.084.333 I print_info: rope_finetuned   = unknown
0.01.084.333 I print_info: ssm_d_conv       = 0
0.01.084.334 I print_info: ssm_d_inner      = 0
0.01.084.334 I print_info: ssm_d_state      = 0
0.01.084.334 I print_info: ssm_dt_rank      = 0
0.01.084.335 I print_info: ssm_dt_b_c_rms   = 0
0.01.084.336 I print_info: model type       = 2B
0.01.084.337 I print_info: model params     = 2.51 B
0.01.084.338 I print_info: general.name     = gemma-1.1-2b-it
0.01.084.342 I print_info: vocab type       = SPM
0.01.084.344 I print_info: n_vocab          = 256000
0.01.084.346 I print_info: n_merges         = 0
0.01.084.347 I print_info: BOS token        = 2 '<bos>'
0.01.084.348 I print_info: EOS token        = 1 '<eos>'
0.01.084.349 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.084.349 I print_info: UNK token        = 3 '<unk>'
0.01.084.350 I print_info: PAD token        = 0 '<pad>'
0.01.084.350 I print_info: LF token         = 227 '<0x0A>'
0.01.084.357 I print_info: EOG token        = 1 '<eos>'
0.01.084.359 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.084.360 I print_info: max token length = 93
0.01.141.001 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
0.01.147.865 I llama_init_from_model: n_seq_max     = 1
0.01.147.873 I llama_init_from_model: n_ctx         = 4096
0.01.147.874 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.147.874 I llama_init_from_model: n_batch       = 2048
0.01.147.875 I llama_init_from_model: n_ubatch      = 512
0.01.147.875 I llama_init_from_model: flash_attn    = 0
0.01.147.879 I llama_init_from_model: freq_base     = 10000.0
0.01.147.880 I llama_init_from_model: freq_scale    = 1
0.01.147.881 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.147.969 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.164.292 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.164.338 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.164.463 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.167.807 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.167.811 I llama_init_from_model: graph nodes  = 601
0.01.167.812 I llama_init_from_model: graph splits = 1
0.01.167.838 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.167.841 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.776.615 I main: llama threadpool init, n_threads = 4
0.01.776.632 I 
0.01.776.728 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.776.732 I 
0.01.777.050 I sampler seed: 1559184183
0.01.777.065 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.777.077 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.777.078 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.777.078 I 
 effej. 

This is a question about a specific topic and requires a thorough response.

**Topic: The Role of Technology in Education**

**

0.12.997.301 I llama_perf_sampler_print:    sampling time =      49.82 ms /    33 runs   (    1.51 ms per token,   662.33 tokens per second)
0.12.997.305 I llama_perf_context_print:        load time =    1749.97 ms
0.12.997.306 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.997.308 I llama_perf_context_print:        eval time =   11131.96 ms /    32 runs   (  347.87 ms per token,     2.87 tokens per second)
0.12.997.309 I llama_perf_context_print:       total time =   11246.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m44.326s
user	46m54.996s
sys	0m6.641s
