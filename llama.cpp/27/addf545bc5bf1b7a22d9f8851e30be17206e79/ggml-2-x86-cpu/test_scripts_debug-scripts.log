+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3913 (27addf54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.759 I main: load the model and apply lora adapter, if any
0.00.024.779 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.991 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.074 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.085 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.086 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.090 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.092 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.094 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.095 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.097 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.104 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.105 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.106 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.107 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.108 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.872 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.401 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.299 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.307 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.308 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.309 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.310 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.312 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.313 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.317 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.317 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.319 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.320 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.321 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.328 I llama_model_loader: - type  f32:   37 tensors
0.00.268.332 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.397 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.150 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.219 I llm_load_vocab: special tokens cache size = 5
0.00.596.543 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.610 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.611 I llm_load_print_meta: arch             = gemma
0.00.596.612 I llm_load_print_meta: vocab type       = SPM
0.00.596.612 I llm_load_print_meta: n_vocab          = 256000
0.00.596.615 I llm_load_print_meta: n_merges         = 0
0.00.596.615 I llm_load_print_meta: vocab_only       = 0
0.00.596.615 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.616 I llm_load_print_meta: n_embd           = 2048
0.00.596.616 I llm_load_print_meta: n_layer          = 18
0.00.596.677 I llm_load_print_meta: n_head           = 8
0.00.596.684 I llm_load_print_meta: n_head_kv        = 1
0.00.596.685 I llm_load_print_meta: n_rot            = 256
0.00.596.686 I llm_load_print_meta: n_swa            = 0
0.00.596.686 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.687 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.692 I llm_load_print_meta: n_gqa            = 8
0.00.596.696 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.701 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.704 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.705 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.705 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.706 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.706 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.721 I llm_load_print_meta: n_ff             = 16384
0.00.596.726 I llm_load_print_meta: n_expert         = 0
0.00.596.726 I llm_load_print_meta: n_expert_used    = 0
0.00.596.726 I llm_load_print_meta: causal attn      = 1
0.00.596.727 I llm_load_print_meta: pooling type     = 0
0.00.596.727 I llm_load_print_meta: rope type        = 2
0.00.596.728 I llm_load_print_meta: rope scaling     = linear
0.00.596.730 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.731 I llm_load_print_meta: freq_scale_train = 1
0.00.596.731 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.732 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.733 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.733 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.733 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.734 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.735 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.735 I llm_load_print_meta: model type       = 2B
0.00.596.736 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.737 I llm_load_print_meta: model params     = 2.51 B
0.00.596.738 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.738 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.739 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.740 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.741 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.754 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.762 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.770 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.776 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.778 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.778 I llm_load_print_meta: max token length = 93
0.00.596.941 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.698.096 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.698.105 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.698.106 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.698.106 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.698.107 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.698.107 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.703.860 I llama_new_context_with_model: n_ctx      = 8192
0.00.703.867 I llama_new_context_with_model: n_batch    = 2048
0.00.703.867 I llama_new_context_with_model: n_ubatch   = 512
0.00.703.868 I llama_new_context_with_model: flash_attn = 0
0.00.703.870 I llama_new_context_with_model: freq_base  = 10000.0
0.00.703.871 I llama_new_context_with_model: freq_scale = 1
0.00.733.136 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.178 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.733.290 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.633 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.734.638 I llama_new_context_with_model: graph nodes  = 601
0.00.734.638 I llama_new_context_with_model: graph splits = 1
0.00.734.654 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.125 I main: llama threadpool init, n_threads = 4
0.01.348.137 I 
0.01.348.247 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.251 I 
0.01.348.417 I sampler seed: 3045268364
0.01.348.426 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.433 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.348.434 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.434 I 
 increasities, and the evolution of the species are fascinating topics that continue to intrigue scientists and biologists.

**a) Discuss the fascinating aspects of increasities and

0.14.890.672 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.84 tokens per second)
0.14.890.675 I llama_perf_context_print:        load time =    1345.28 ms
0.14.890.676 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.890.678 I llama_perf_context_print:        eval time =   13460.66 ms /    32 runs   (  420.65 ms per token,     2.38 tokens per second)
0.14.890.679 I llama_perf_context_print:       total time =   13542.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3913 (27addf54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.025.213 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.304 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.317 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.320 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.326 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.327 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.330 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.332 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.339 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.340 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.341 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.343 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.344 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.412 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.791 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.804 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.817 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.818 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.819 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.820 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.826 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.827 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.828 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.829 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.839 I llama_model_loader: - type  f32:   37 tensors
0.00.268.843 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.834 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.800 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.827 I llm_load_vocab: special tokens cache size = 5
0.00.615.705 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.777 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.778 I llm_load_print_meta: arch             = gemma
0.00.615.779 I llm_load_print_meta: vocab type       = SPM
0.00.615.780 I llm_load_print_meta: n_vocab          = 256000
0.00.615.782 I llm_load_print_meta: n_merges         = 0
0.00.615.782 I llm_load_print_meta: vocab_only       = 0
0.00.615.783 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.783 I llm_load_print_meta: n_embd           = 2048
0.00.615.784 I llm_load_print_meta: n_layer          = 18
0.00.615.848 I llm_load_print_meta: n_head           = 8
0.00.615.854 I llm_load_print_meta: n_head_kv        = 1
0.00.615.859 I llm_load_print_meta: n_rot            = 256
0.00.615.859 I llm_load_print_meta: n_swa            = 0
0.00.615.859 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.860 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.865 I llm_load_print_meta: n_gqa            = 8
0.00.615.869 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.874 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.876 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.877 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.878 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.878 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.879 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.884 I llm_load_print_meta: n_ff             = 16384
0.00.615.884 I llm_load_print_meta: n_expert         = 0
0.00.615.884 I llm_load_print_meta: n_expert_used    = 0
0.00.615.885 I llm_load_print_meta: causal attn      = 1
0.00.615.885 I llm_load_print_meta: pooling type     = 0
0.00.615.885 I llm_load_print_meta: rope type        = 2
0.00.615.886 I llm_load_print_meta: rope scaling     = linear
0.00.615.889 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.890 I llm_load_print_meta: freq_scale_train = 1
0.00.615.893 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.894 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.894 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.895 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.895 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.896 I llm_load_print_meta: model type       = 2B
0.00.615.896 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.897 I llm_load_print_meta: model params     = 2.51 B
0.00.615.898 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.908 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.910 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.910 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.911 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.912 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.912 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.913 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.919 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.920 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.921 I llm_load_print_meta: max token length = 93
0.00.616.083 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.889 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.720.867 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.876 I llama_new_context_with_model: n_batch    = 2048
0.00.720.877 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.877 I llama_new_context_with_model: flash_attn = 0
0.00.720.881 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.881 I llama_new_context_with_model: freq_scale = 1
0.00.751.334 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.379 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.494 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.827 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.832 I llama_new_context_with_model: graph nodes  = 601
0.00.752.832 I llama_new_context_with_model: graph splits = 1
0.00.752.848 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.956 I main: llama threadpool init, n_threads = 4
0.01.370.967 I 
0.01.371.071 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.371.074 I 
0.01.371.239 I sampler seed: 2041054160
0.01.371.249 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.255 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.371.256 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.256 I 
 increasively, blurring the lines between fact and fiction.

The year is 2042. Climate change ravages the Earth, devouring landscapes and leaving behind

0.15.044.590 I llama_perf_sampler_print:    sampling time =      49.44 ms /    33 runs   (    1.50 ms per token,   667.50 tokens per second)
0.15.044.607 I llama_perf_context_print:        load time =    1368.08 ms
0.15.044.608 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.044.610 I llama_perf_context_print:        eval time =   13589.90 ms /    32 runs   (  424.68 ms per token,     2.35 tokens per second)
0.15.044.611 I llama_perf_context_print:       total time =   13673.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 3913 (27addf54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.024.783 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.989 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.080 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.092 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.093 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.098 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.102 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.103 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.104 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.105 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.105 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.113 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.115 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.116 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.117 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.118 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.607 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.046 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.021 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.033 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.034 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.035 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.036 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.038 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.039 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.043 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.044 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.045 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.046 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.047 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.055 I llama_model_loader: - type  f32:   37 tensors
0.00.269.060 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.561 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.392 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.457 I llm_load_vocab: special tokens cache size = 5
0.00.593.258 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.327 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.328 I llm_load_print_meta: arch             = gemma
0.00.593.328 I llm_load_print_meta: vocab type       = SPM
0.00.593.329 I llm_load_print_meta: n_vocab          = 256000
0.00.593.331 I llm_load_print_meta: n_merges         = 0
0.00.593.331 I llm_load_print_meta: vocab_only       = 0
0.00.593.332 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.332 I llm_load_print_meta: n_embd           = 2048
0.00.593.333 I llm_load_print_meta: n_layer          = 18
0.00.593.394 I llm_load_print_meta: n_head           = 8
0.00.593.401 I llm_load_print_meta: n_head_kv        = 1
0.00.593.402 I llm_load_print_meta: n_rot            = 256
0.00.593.403 I llm_load_print_meta: n_swa            = 0
0.00.593.403 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.403 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.409 I llm_load_print_meta: n_gqa            = 8
0.00.593.414 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.428 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.433 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.448 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.452 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.453 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.453 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.458 I llm_load_print_meta: n_ff             = 16384
0.00.593.463 I llm_load_print_meta: n_expert         = 0
0.00.593.466 I llm_load_print_meta: n_expert_used    = 0
0.00.593.467 I llm_load_print_meta: causal attn      = 1
0.00.593.467 I llm_load_print_meta: pooling type     = 0
0.00.593.468 I llm_load_print_meta: rope type        = 2
0.00.593.480 I llm_load_print_meta: rope scaling     = linear
0.00.593.481 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.482 I llm_load_print_meta: freq_scale_train = 1
0.00.593.483 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.484 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.491 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.492 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.492 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.493 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.493 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.494 I llm_load_print_meta: model type       = 2B
0.00.593.495 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.496 I llm_load_print_meta: model params     = 2.51 B
0.00.593.497 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.498 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.499 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.499 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.500 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.501 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.501 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.501 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.507 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.508 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.509 I llm_load_print_meta: max token length = 93
0.00.593.670 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.670.834 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.670.845 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.670.846 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.670.846 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.670.847 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.670.848 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.676.421 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.428 I llama_new_context_with_model: n_batch    = 2048
0.00.676.428 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.429 I llama_new_context_with_model: flash_attn = 0
0.00.676.431 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.432 I llama_new_context_with_model: freq_scale = 1
0.00.705.360 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.402 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.513 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.851 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.856 I llama_new_context_with_model: graph nodes  = 601
0.00.706.857 I llama_new_context_with_model: graph splits = 1
0.00.706.873 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.728 I main: llama threadpool init, n_threads = 4
0.01.319.740 I 
0.01.319.853 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.319.858 I 
0.01.320.042 I sampler seed: 1137375350
0.01.320.057 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.069 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.320.071 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.071 I 
 increasities, but can't write them. I am unable to create content that violates Google's guidelines. [end of text]


0.11.467.389 I llama_perf_sampler_print:    sampling time =      36.93 ms /    25 runs   (    1.48 ms per token,   676.99 tokens per second)
0.11.467.413 I llama_perf_context_print:        load time =    1316.85 ms
0.11.467.423 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.467.425 I llama_perf_context_print:        eval time =   10085.16 ms /    24 runs   (  420.21 ms per token,     2.38 tokens per second)
0.11.467.426 I llama_perf_context_print:       total time =   10147.67 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3913 (27addf54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.025.056 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.256 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.343 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.354 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.355 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.359 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.360 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.362 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.365 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.366 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.367 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.374 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.375 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.376 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.377 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.379 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.147 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.958 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.821 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.828 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.829 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.830 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.831 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.833 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.834 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.838 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.839 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.840 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.841 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.842 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.849 I llama_model_loader: - type  f32:   37 tensors
0.00.268.853 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.005 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.498 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.519 I llm_load_vocab: special tokens cache size = 5
0.00.607.722 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.793 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.797 I llm_load_print_meta: arch             = gemma
0.00.607.798 I llm_load_print_meta: vocab type       = SPM
0.00.607.799 I llm_load_print_meta: n_vocab          = 256000
0.00.607.801 I llm_load_print_meta: n_merges         = 0
0.00.607.802 I llm_load_print_meta: vocab_only       = 0
0.00.607.802 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.802 I llm_load_print_meta: n_embd           = 2048
0.00.607.803 I llm_load_print_meta: n_layer          = 18
0.00.607.865 I llm_load_print_meta: n_head           = 8
0.00.607.875 I llm_load_print_meta: n_head_kv        = 1
0.00.607.876 I llm_load_print_meta: n_rot            = 256
0.00.607.877 I llm_load_print_meta: n_swa            = 0
0.00.607.877 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.877 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.882 I llm_load_print_meta: n_gqa            = 8
0.00.607.887 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.892 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.896 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.897 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.898 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.898 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.899 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.903 I llm_load_print_meta: n_ff             = 16384
0.00.607.904 I llm_load_print_meta: n_expert         = 0
0.00.607.904 I llm_load_print_meta: n_expert_used    = 0
0.00.607.904 I llm_load_print_meta: causal attn      = 1
0.00.607.905 I llm_load_print_meta: pooling type     = 0
0.00.607.905 I llm_load_print_meta: rope type        = 2
0.00.607.905 I llm_load_print_meta: rope scaling     = linear
0.00.607.907 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.907 I llm_load_print_meta: freq_scale_train = 1
0.00.607.908 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.908 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.909 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.909 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.909 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.912 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.912 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.913 I llm_load_print_meta: model type       = 2B
0.00.607.914 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.915 I llm_load_print_meta: model params     = 2.51 B
0.00.607.916 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.916 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.917 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.917 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.918 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.918 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.918 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.920 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.926 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.928 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.928 I llm_load_print_meta: max token length = 93
0.00.608.091 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.679.509 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.679.520 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.685.054 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.062 I llama_new_context_with_model: n_batch    = 2048
0.00.685.062 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.063 I llama_new_context_with_model: flash_attn = 0
0.00.685.065 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.066 I llama_new_context_with_model: freq_scale = 1
0.00.715.114 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.155 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.267 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.615 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.620 I llama_new_context_with_model: graph nodes  = 601
0.00.716.621 I llama_new_context_with_model: graph splits = 1
0.00.716.636 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.331.465 I main: llama threadpool init, n_threads = 4
0.01.331.475 I 
0.01.331.582 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.586 I 
0.01.331.752 I sampler seed: 4100099381
0.01.331.762 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.769 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.331.770 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.770 I 
 increasities as a form of worship.

It is inappropriate to make such a statement as it is disrespectful and insensitive towards the beliefs and practices of others. [end of text]


0.14.866.381 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.81 tokens per second)
0.14.866.384 I llama_perf_context_print:        load time =    1328.60 ms
0.14.866.385 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.866.387 I llama_perf_context_print:        eval time =   13452.66 ms /    32 runs   (  420.40 ms per token,     2.38 tokens per second)
0.14.866.388 I llama_perf_context_print:       total time =   13534.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.924s
user	3m36.323s
sys	0m9.376s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3913 (27addf54)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198359.79 ms
main:    total time = 198359.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.615 I build: 3913 (27addf54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.767 I main: load the model and apply lora adapter, if any
0.00.027.270 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.027.466 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.027.551 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.562 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.564 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.569 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.571 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.572 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.573 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.574 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.575 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.582 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.583 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.584 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.585 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.027.586 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.949 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.097 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.984 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.992 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.993 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.994 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.995 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.996 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.997 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.001 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.002 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.003 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.004 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.005 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.013 I llama_model_loader: - type  f32:   37 tensors
0.00.271.017 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.018 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.180 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.971 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.968 I llm_load_vocab: special tokens cache size = 5
0.00.591.838 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.906 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.907 I llm_load_print_meta: arch             = gemma
0.00.591.908 I llm_load_print_meta: vocab type       = SPM
0.00.591.909 I llm_load_print_meta: n_vocab          = 256000
0.00.591.911 I llm_load_print_meta: n_merges         = 0
0.00.591.911 I llm_load_print_meta: vocab_only       = 0
0.00.591.912 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.912 I llm_load_print_meta: n_embd           = 2048
0.00.591.912 I llm_load_print_meta: n_layer          = 18
0.00.591.976 I llm_load_print_meta: n_head           = 8
0.00.591.984 I llm_load_print_meta: n_head_kv        = 1
0.00.591.985 I llm_load_print_meta: n_rot            = 256
0.00.591.986 I llm_load_print_meta: n_swa            = 0
0.00.591.986 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.986 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.991 I llm_load_print_meta: n_gqa            = 8
0.00.591.996 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.001 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.003 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.009 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.010 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.010 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.015 I llm_load_print_meta: n_ff             = 16384
0.00.592.016 I llm_load_print_meta: n_expert         = 0
0.00.592.016 I llm_load_print_meta: n_expert_used    = 0
0.00.592.016 I llm_load_print_meta: causal attn      = 1
0.00.592.018 I llm_load_print_meta: pooling type     = 0
0.00.592.018 I llm_load_print_meta: rope type        = 2
0.00.592.019 I llm_load_print_meta: rope scaling     = linear
0.00.592.020 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.029 I llm_load_print_meta: freq_scale_train = 1
0.00.592.030 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.033 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.034 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.034 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.034 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.035 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.036 I llm_load_print_meta: model type       = 2B
0.00.592.037 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.592.038 I llm_load_print_meta: model params     = 2.51 B
0.00.592.038 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.592.039 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.040 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.040 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.041 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.042 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.042 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.043 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.049 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.050 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.050 I llm_load_print_meta: max token length = 93
0.00.592.214 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.804 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.653.815 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.653.817 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.653.817 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.653.818 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.653.819 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.659.460 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.469 I llama_new_context_with_model: n_batch    = 2048
0.00.659.469 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.470 I llama_new_context_with_model: flash_attn = 0
0.00.659.473 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.474 I llama_new_context_with_model: freq_scale = 1
0.00.689.179 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.689.226 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.689.342 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.690.729 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.690.731 I llama_new_context_with_model: graph nodes  = 601
0.00.690.731 I llama_new_context_with_model: graph splits = 1
0.00.690.747 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.692 I main: llama threadpool init, n_threads = 4
0.01.272.702 I 
0.01.272.817 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.821 I 
0.01.272.990 I sampler seed: 1654392646
0.01.273.000 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.273.006 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.273.007 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.273.008 I 
 seconally. [end of text]


0.02.638.761 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.38 tokens per second)
0.02.638.763 I llama_perf_context_print:        load time =    1269.84 ms
0.02.638.765 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.638.766 I llama_perf_context_print:        eval time =    1354.34 ms /     4 runs   (  338.58 ms per token,     2.95 tokens per second)
0.02.638.767 I llama_perf_context_print:       total time =    1366.08 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3913 (27addf54)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198263.33 ms
main:    total time = 198263.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 3913 (27addf54) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.708 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.794 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.807 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.809 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.812 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.816 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.818 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.818 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.819 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.820 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.826 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.827 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.829 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.830 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.831 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.799 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.805 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.972 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.981 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.982 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.983 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.985 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.986 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.987 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.991 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.992 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.001 I llama_model_loader: - type  f32:   37 tensors
0.00.269.005 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.006 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.420 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.293 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.268 I llm_load_vocab: special tokens cache size = 5
0.00.608.467 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.535 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.536 I llm_load_print_meta: arch             = gemma
0.00.608.536 I llm_load_print_meta: vocab type       = SPM
0.00.608.537 I llm_load_print_meta: n_vocab          = 256000
0.00.608.540 I llm_load_print_meta: n_merges         = 0
0.00.608.540 I llm_load_print_meta: vocab_only       = 0
0.00.608.540 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.541 I llm_load_print_meta: n_embd           = 2048
0.00.608.541 I llm_load_print_meta: n_layer          = 18
0.00.608.605 I llm_load_print_meta: n_head           = 8
0.00.608.613 I llm_load_print_meta: n_head_kv        = 1
0.00.608.613 I llm_load_print_meta: n_rot            = 256
0.00.608.614 I llm_load_print_meta: n_swa            = 0
0.00.608.614 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.614 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.619 I llm_load_print_meta: n_gqa            = 8
0.00.608.624 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.628 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.629 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.631 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.631 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.632 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.632 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.637 I llm_load_print_meta: n_ff             = 16384
0.00.608.638 I llm_load_print_meta: n_expert         = 0
0.00.608.638 I llm_load_print_meta: n_expert_used    = 0
0.00.608.638 I llm_load_print_meta: causal attn      = 1
0.00.608.639 I llm_load_print_meta: pooling type     = 0
0.00.608.639 I llm_load_print_meta: rope type        = 2
0.00.608.639 I llm_load_print_meta: rope scaling     = linear
0.00.608.641 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.642 I llm_load_print_meta: freq_scale_train = 1
0.00.608.642 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.643 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.643 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.643 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.644 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.644 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.644 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.645 I llm_load_print_meta: model type       = 2B
0.00.608.646 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.646 I llm_load_print_meta: model params     = 2.51 B
0.00.608.647 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.647 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.648 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.648 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.649 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.649 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.649 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.650 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.655 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.657 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.657 I llm_load_print_meta: max token length = 93
0.00.608.820 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.793 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.675.588 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.597 I llama_new_context_with_model: n_batch    = 2048
0.00.675.597 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.598 I llama_new_context_with_model: flash_attn = 0
0.00.675.600 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.601 I llama_new_context_with_model: freq_scale = 1
0.00.706.600 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.643 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.754 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.102 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.107 I llama_new_context_with_model: graph nodes  = 601
0.00.708.107 I llama_new_context_with_model: graph splits = 1
0.00.708.123 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.077 I main: llama threadpool init, n_threads = 4
0.01.294.088 I 
0.01.294.189 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.193 I 
0.01.294.359 I sampler seed: 1141220786
0.01.294.370 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.376 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.294.376 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.294.386 I 
 seconally.

I understand. I will ensure to prioritize this task and dedicate the necessary time to complete it.

Thank you for letting me know. [end of text]


0.12.343.323 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.54 tokens per second)
0.12.343.327 I llama_perf_context_print:        load time =    1291.21 ms
0.12.343.329 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.343.331 I llama_perf_context_print:        eval time =   10967.78 ms /    32 runs   (  342.74 ms per token,     2.92 tokens per second)
0.12.343.332 I llama_perf_context_print:       total time =   11049.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m54.478s
user	49m27.859s
sys	0m6.346s
