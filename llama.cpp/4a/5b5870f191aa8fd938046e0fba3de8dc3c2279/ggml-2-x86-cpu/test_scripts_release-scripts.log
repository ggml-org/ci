+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 3940 (4a5b5870) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.829 I main: load the model and apply lora adapter, if any
0.00.022.322 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.371 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.378 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.383 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.384 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.387 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.389 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.391 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.395 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.396 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.397 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.397 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.398 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.802 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.383 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.235 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.241 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.242 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.243 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.243 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.244 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.244 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.247 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.247 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.248 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.248 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.249 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.252 I llama_model_loader: - type  f32:   37 tensors
0.00.132.255 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.679 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.793 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.271 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.241.720 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.250.264 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.836 I llm_load_vocab: special tokens cache size = 5
0.00.271.773 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.788 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.789 I llm_load_print_meta: arch             = gemma
0.00.271.789 I llm_load_print_meta: vocab type       = SPM
0.00.271.790 I llm_load_print_meta: n_vocab          = 256000
0.00.271.791 I llm_load_print_meta: n_merges         = 0
0.00.271.791 I llm_load_print_meta: vocab_only       = 0
0.00.271.791 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.792 I llm_load_print_meta: n_embd           = 2048
0.00.271.792 I llm_load_print_meta: n_layer          = 18
0.00.271.802 I llm_load_print_meta: n_head           = 8
0.00.271.803 I llm_load_print_meta: n_head_kv        = 1
0.00.271.804 I llm_load_print_meta: n_rot            = 256
0.00.271.804 I llm_load_print_meta: n_swa            = 0
0.00.271.804 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.805 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.806 I llm_load_print_meta: n_gqa            = 8
0.00.271.807 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.808 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.808 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.809 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.810 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.810 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.810 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.812 I llm_load_print_meta: n_ff             = 16384
0.00.271.812 I llm_load_print_meta: n_expert         = 0
0.00.271.812 I llm_load_print_meta: n_expert_used    = 0
0.00.271.813 I llm_load_print_meta: causal attn      = 1
0.00.271.813 I llm_load_print_meta: pooling type     = 0
0.00.271.813 I llm_load_print_meta: rope type        = 2
0.00.271.814 I llm_load_print_meta: rope scaling     = linear
0.00.271.815 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.815 I llm_load_print_meta: freq_scale_train = 1
0.00.271.816 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.816 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.816 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.816 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.817 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.817 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.817 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.818 I llm_load_print_meta: model type       = 2B
0.00.271.818 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.819 I llm_load_print_meta: model params     = 2.51 B
0.00.271.820 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.820 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.820 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.821 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.821 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.821 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.822 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.822 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.822 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.823 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.823 I llm_load_print_meta: max token length = 93
0.00.271.843 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.372.002 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.372.009 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.372.009 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.372.010 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.372.010 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.372.011 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.377.122 I llama_new_context_with_model: n_ctx      = 8192
0.00.377.127 I llama_new_context_with_model: n_batch    = 2048
0.00.377.128 I llama_new_context_with_model: n_ubatch   = 512
0.00.377.128 I llama_new_context_with_model: flash_attn = 0
0.00.377.130 I llama_new_context_with_model: freq_base  = 10000.0
0.00.377.131 I llama_new_context_with_model: freq_scale = 1
0.00.406.204 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.219 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.306 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.178 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.186 I llama_new_context_with_model: graph nodes  = 601
0.00.407.187 I llama_new_context_with_model: graph splits = 1
0.00.407.189 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.498.058 I main: llama threadpool init, n_threads = 4
0.00.498.071 I 
0.00.498.147 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.498.151 I 
0.00.498.189 I sampler seed: 3501112428
0.00.498.199 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.498.203 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.498.203 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.498.204 I 
 increasities in the user's area, or in a nearby area. [end of text]


0.01.630.123 I llama_perf_sampler_print:    sampling time =       2.39 ms /    17 runs   (    0.14 ms per token,  7107.02 tokens per second)
0.01.630.126 I llama_perf_context_print:        load time =     496.21 ms
0.01.630.127 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.630.129 I llama_perf_context_print:        eval time =    1122.48 ms /    16 runs   (   70.16 ms per token,    14.25 tokens per second)
0.01.630.132 I llama_perf_context_print:       total time =    1132.07 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.615 I build: 3940 (4a5b5870) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.814 I main: llama backend init
0.00.001.909 I main: load the model and apply lora adapter, if any
0.00.022.202 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.217 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.225 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.226 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.231 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.231 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.233 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.234 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.246 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.247 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.252 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.253 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.254 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.255 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.255 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.914 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.167 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.056 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.063 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.064 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.064 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.065 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.066 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.067 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.071 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.072 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.073 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.074 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.075 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.079 I llama_model_loader: - type  f32:   37 tensors
0.00.133.083 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.843 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.294 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.236.598 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.240.459 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.248.378 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.945 I llm_load_vocab: special tokens cache size = 5
0.00.269.860 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.877 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.878 I llm_load_print_meta: arch             = gemma
0.00.269.878 I llm_load_print_meta: vocab type       = SPM
0.00.269.879 I llm_load_print_meta: n_vocab          = 256000
0.00.269.879 I llm_load_print_meta: n_merges         = 0
0.00.269.879 I llm_load_print_meta: vocab_only       = 0
0.00.269.880 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.880 I llm_load_print_meta: n_embd           = 2048
0.00.269.880 I llm_load_print_meta: n_layer          = 18
0.00.269.892 I llm_load_print_meta: n_head           = 8
0.00.269.893 I llm_load_print_meta: n_head_kv        = 1
0.00.269.894 I llm_load_print_meta: n_rot            = 256
0.00.269.894 I llm_load_print_meta: n_swa            = 0
0.00.269.894 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.895 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.895 I llm_load_print_meta: n_gqa            = 8
0.00.269.897 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.898 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.898 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.900 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.900 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.900 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.900 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.901 I llm_load_print_meta: n_ff             = 16384
0.00.269.902 I llm_load_print_meta: n_expert         = 0
0.00.269.902 I llm_load_print_meta: n_expert_used    = 0
0.00.269.902 I llm_load_print_meta: causal attn      = 1
0.00.269.903 I llm_load_print_meta: pooling type     = 0
0.00.269.903 I llm_load_print_meta: rope type        = 2
0.00.269.903 I llm_load_print_meta: rope scaling     = linear
0.00.269.906 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.906 I llm_load_print_meta: freq_scale_train = 1
0.00.269.907 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.907 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.907 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.907 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.908 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.908 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.908 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.908 I llm_load_print_meta: model type       = 2B
0.00.269.909 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.910 I llm_load_print_meta: model params     = 2.51 B
0.00.269.910 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.911 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.911 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.912 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.912 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.912 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.912 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.913 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.913 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.913 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.913 I llm_load_print_meta: max token length = 93
0.00.269.934 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.940 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.369.058 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.065 I llama_new_context_with_model: n_batch    = 2048
0.00.369.065 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.065 I llama_new_context_with_model: flash_attn = 0
0.00.369.068 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.069 I llama_new_context_with_model: freq_scale = 1
0.00.398.550 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.565 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.665 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.554 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.399.562 I llama_new_context_with_model: graph nodes  = 601
0.00.399.563 I llama_new_context_with_model: graph splits = 1
0.00.399.564 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.170 I main: llama threadpool init, n_threads = 4
0.00.487.185 I 
0.00.487.263 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.487.267 I 
0.00.487.304 I sampler seed: 2961971151
0.00.487.314 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.316 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.317 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.317 I 
 seconally.

The question is:

Determine the relationship between the slope of the tangent line to the graph of a function and the rate of change of the

0.02.667.622 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6866.42 tokens per second)
0.02.667.624 I llama_perf_context_print:        load time =     485.24 ms
0.02.667.625 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.667.626 I llama_perf_context_print:        eval time =    2162.05 ms /    32 runs   (   67.56 ms per token,    14.80 tokens per second)
0.02.667.627 I llama_perf_context_print:       total time =    2180.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.588 I build: 3940 (4a5b5870) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.808 I main: llama backend init
0.00.001.974 I main: load the model and apply lora adapter, if any
0.00.025.196 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.272 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.289 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.296 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.297 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.301 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.303 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.304 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.305 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.306 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.307 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.313 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.314 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.315 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.316 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.318 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.957 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.139.115 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.146.032 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.146.039 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.146.040 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.146.041 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.146.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.146.042 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.146.043 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.146.045 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.146.046 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.146.047 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.146.047 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.146.048 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.146.052 I llama_model_loader: - type  f32:   37 tensors
0.00.146.055 I llama_model_loader: - type q8_0:  127 tensors
0.00.227.938 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.510 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.259.698 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.263.295 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.270.670 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.234 I llm_load_vocab: special tokens cache size = 5
0.00.292.154 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.173 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.173 I llm_load_print_meta: arch             = gemma
0.00.292.174 I llm_load_print_meta: vocab type       = SPM
0.00.292.175 I llm_load_print_meta: n_vocab          = 256000
0.00.292.175 I llm_load_print_meta: n_merges         = 0
0.00.292.176 I llm_load_print_meta: vocab_only       = 0
0.00.292.176 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.176 I llm_load_print_meta: n_embd           = 2048
0.00.292.176 I llm_load_print_meta: n_layer          = 18
0.00.292.188 I llm_load_print_meta: n_head           = 8
0.00.292.189 I llm_load_print_meta: n_head_kv        = 1
0.00.292.189 I llm_load_print_meta: n_rot            = 256
0.00.292.190 I llm_load_print_meta: n_swa            = 0
0.00.292.190 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.190 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.192 I llm_load_print_meta: n_gqa            = 8
0.00.292.193 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.193 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.194 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.195 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.196 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.196 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.196 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.197 I llm_load_print_meta: n_ff             = 16384
0.00.292.198 I llm_load_print_meta: n_expert         = 0
0.00.292.198 I llm_load_print_meta: n_expert_used    = 0
0.00.292.198 I llm_load_print_meta: causal attn      = 1
0.00.292.198 I llm_load_print_meta: pooling type     = 0
0.00.292.199 I llm_load_print_meta: rope type        = 2
0.00.292.199 I llm_load_print_meta: rope scaling     = linear
0.00.292.200 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.201 I llm_load_print_meta: freq_scale_train = 1
0.00.292.201 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.202 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.202 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.202 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.202 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.202 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.203 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.203 I llm_load_print_meta: model type       = 2B
0.00.292.204 I llm_load_print_meta: model ftype      = Q8_0
0.00.292.204 I llm_load_print_meta: model params     = 2.51 B
0.00.292.206 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.292.206 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.206 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.207 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.207 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.208 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.208 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.208 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.209 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.209 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.209 I llm_load_print_meta: max token length = 93
0.00.292.230 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.372.555 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.372.563 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.372.564 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.372.564 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.372.565 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.372.565 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.378.750 I llama_new_context_with_model: n_ctx      = 8192
0.00.378.757 I llama_new_context_with_model: n_batch    = 2048
0.00.378.757 I llama_new_context_with_model: n_ubatch   = 512
0.00.378.758 I llama_new_context_with_model: flash_attn = 0
0.00.378.760 I llama_new_context_with_model: freq_base  = 10000.0
0.00.378.761 I llama_new_context_with_model: freq_scale = 1
0.00.408.875 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.408.891 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.408.982 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.409.905 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.409.911 I llama_new_context_with_model: graph nodes  = 601
0.00.409.912 I llama_new_context_with_model: graph splits = 1
0.00.409.914 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.502.465 I main: llama threadpool init, n_threads = 4
0.00.502.478 I 
0.00.502.550 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.502.554 I 
0.00.502.591 I sampler seed: 900052585
0.00.502.601 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.502.609 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.502.610 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.502.610 I 
 seconals.

I am unable to find the requested information and am unable to provide an answer. [end of text]


0.02.010.859 I llama_perf_sampler_print:    sampling time =       3.19 ms /    22 runs   (    0.15 ms per token,  6887.91 tokens per second)
0.02.010.861 I llama_perf_context_print:        load time =     500.47 ms
0.02.010.862 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.010.864 I llama_perf_context_print:        eval time =    1496.12 ms /    21 runs   (   71.24 ms per token,    14.04 tokens per second)
0.02.010.865 I llama_perf_context_print:       total time =    1508.40 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.530 I build: 3940 (4a5b5870) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.001.814 I main: load the model and apply lora adapter, if any
0.00.023.339 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.385 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.392 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.397 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.398 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.402 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.402 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.403 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.403 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.404 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.404 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.409 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.409 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.410 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.411 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.411 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.270 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.245 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.089 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.095 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.096 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.097 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.097 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.098 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.099 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.101 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.102 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.102 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.103 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.137.103 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.107 I llama_model_loader: - type  f32:   37 tensors
0.00.137.110 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.515 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.038 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.251.749 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.256.970 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.267.799 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.480 I llm_load_vocab: special tokens cache size = 5
0.00.290.956 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.972 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.972 I llm_load_print_meta: arch             = gemma
0.00.290.973 I llm_load_print_meta: vocab type       = SPM
0.00.290.974 I llm_load_print_meta: n_vocab          = 256000
0.00.290.974 I llm_load_print_meta: n_merges         = 0
0.00.290.975 I llm_load_print_meta: vocab_only       = 0
0.00.290.975 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.975 I llm_load_print_meta: n_embd           = 2048
0.00.290.976 I llm_load_print_meta: n_layer          = 18
0.00.290.989 I llm_load_print_meta: n_head           = 8
0.00.290.990 I llm_load_print_meta: n_head_kv        = 1
0.00.290.990 I llm_load_print_meta: n_rot            = 256
0.00.290.991 I llm_load_print_meta: n_swa            = 0
0.00.290.991 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.991 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.993 I llm_load_print_meta: n_gqa            = 8
0.00.290.994 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.994 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.995 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.996 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.997 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.997 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.997 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.998 I llm_load_print_meta: n_ff             = 16384
0.00.290.998 I llm_load_print_meta: n_expert         = 0
0.00.290.999 I llm_load_print_meta: n_expert_used    = 0
0.00.290.999 I llm_load_print_meta: causal attn      = 1
0.00.290.999 I llm_load_print_meta: pooling type     = 0
0.00.291.000 I llm_load_print_meta: rope type        = 2
0.00.291.000 I llm_load_print_meta: rope scaling     = linear
0.00.291.001 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.002 I llm_load_print_meta: freq_scale_train = 1
0.00.291.002 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.002 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.003 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.003 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.003 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.003 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.003 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.004 I llm_load_print_meta: model type       = 2B
0.00.291.004 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.005 I llm_load_print_meta: model params     = 2.51 B
0.00.291.006 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.006 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.007 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.007 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.008 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.008 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.009 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.009 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.010 I llm_load_print_meta: max token length = 93
0.00.291.037 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.108 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.363.116 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.367.991 I llama_new_context_with_model: n_ctx      = 8192
0.00.367.997 I llama_new_context_with_model: n_batch    = 2048
0.00.367.998 I llama_new_context_with_model: n_ubatch   = 512
0.00.367.998 I llama_new_context_with_model: flash_attn = 0
0.00.368.000 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.001 I llama_new_context_with_model: freq_scale = 1
0.00.398.014 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.033 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.127 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.995 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.399.002 I llama_new_context_with_model: graph nodes  = 601
0.00.399.003 I llama_new_context_with_model: graph splits = 1
0.00.399.005 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.154 I main: llama threadpool init, n_threads = 4
0.00.492.167 I 
0.00.492.263 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.267 I 
0.00.492.311 I sampler seed: 1087707303
0.00.492.322 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.326 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.326 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.326 I 
 seconally.

I am unable to generate a response because the provided context does not contain any information regarding the topic or task for which a response is expected.

0.02.921.065 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6685.58 tokens per second)
0.02.921.068 I llama_perf_context_print:        load time =     490.32 ms
0.02.921.070 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.921.073 I llama_perf_context_print:        eval time =    2409.89 ms /    32 runs   (   75.31 ms per token,    13.28 tokens per second)
0.02.921.074 I llama_perf_context_print:       total time =    2428.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.904s
user	0m31.899s
sys	0m9.490s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3940 (4a5b5870)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32046.45 ms
main:    total time = 32046.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.578 I build: 3940 (4a5b5870) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.001.897 I main: load the model and apply lora adapter, if any
0.00.021.940 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.988 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.004 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.008 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.011 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.012 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.013 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.013 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.014 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.014 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.018 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.018 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.019 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.019 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.020 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.500 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.666 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.874 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.881 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.882 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.882 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.883 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.884 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.884 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.887 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.887 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.888 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.889 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.890 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.894 I llama_model_loader: - type  f32:   37 tensors
0.00.133.897 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.900 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.997 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.441 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.239.807 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.244.152 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.254.127 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.793 I llm_load_vocab: special tokens cache size = 5
0.00.275.632 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.646 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.647 I llm_load_print_meta: arch             = gemma
0.00.275.647 I llm_load_print_meta: vocab type       = SPM
0.00.275.648 I llm_load_print_meta: n_vocab          = 256000
0.00.275.648 I llm_load_print_meta: n_merges         = 0
0.00.275.649 I llm_load_print_meta: vocab_only       = 0
0.00.275.649 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.649 I llm_load_print_meta: n_embd           = 2048
0.00.275.650 I llm_load_print_meta: n_layer          = 18
0.00.275.661 I llm_load_print_meta: n_head           = 8
0.00.275.662 I llm_load_print_meta: n_head_kv        = 1
0.00.275.662 I llm_load_print_meta: n_rot            = 256
0.00.275.663 I llm_load_print_meta: n_swa            = 0
0.00.275.663 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.663 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.665 I llm_load_print_meta: n_gqa            = 8
0.00.275.666 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.669 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.669 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.669 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.670 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.671 I llm_load_print_meta: n_ff             = 16384
0.00.275.671 I llm_load_print_meta: n_expert         = 0
0.00.275.671 I llm_load_print_meta: n_expert_used    = 0
0.00.275.672 I llm_load_print_meta: causal attn      = 1
0.00.275.672 I llm_load_print_meta: pooling type     = 0
0.00.275.672 I llm_load_print_meta: rope type        = 2
0.00.275.672 I llm_load_print_meta: rope scaling     = linear
0.00.275.674 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.675 I llm_load_print_meta: freq_scale_train = 1
0.00.275.675 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.676 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.676 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.676 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.676 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.676 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.677 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.677 I llm_load_print_meta: model type       = 2B
0.00.275.678 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.678 I llm_load_print_meta: model params     = 2.51 B
0.00.275.679 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.680 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.680 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.681 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.681 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.682 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.682 I llm_load_print_meta: max token length = 93
0.00.275.702 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.333.409 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.333.418 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.333.419 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.333.419 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.333.420 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.333.421 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.338.507 I llama_new_context_with_model: n_ctx      = 8192
0.00.338.514 I llama_new_context_with_model: n_batch    = 2048
0.00.338.515 I llama_new_context_with_model: n_ubatch   = 512
0.00.338.515 I llama_new_context_with_model: flash_attn = 0
0.00.338.518 I llama_new_context_with_model: freq_base  = 10000.0
0.00.338.519 I llama_new_context_with_model: freq_scale = 1
0.00.369.266 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.369.282 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.369.375 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.255 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.370.264 I llama_new_context_with_model: graph nodes  = 601
0.00.370.265 I llama_new_context_with_model: graph splits = 1
0.00.370.267 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.812 I main: llama threadpool init, n_threads = 4
0.00.451.825 I 
0.00.451.902 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.905 I 
0.00.451.945 I sampler seed: 564098489
0.00.451.955 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.958 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.958 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.959 I 
 maneuvously!

I am unable to generate a response that contains offensive or inappropriate language. My purpose is to assist users with their queries and provide them with

0.02.070.264 I llama_perf_sampler_print:    sampling time =       5.37 ms /    33 runs   (    0.16 ms per token,  6146.40 tokens per second)
0.02.070.266 I llama_perf_context_print:        load time =     449.89 ms
0.02.070.267 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.070.269 I llama_perf_context_print:        eval time =    1600.04 ms /    32 runs   (   50.00 ms per token,    20.00 tokens per second)
0.02.070.269 I llama_perf_context_print:       total time =    1618.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3940 (4a5b5870)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32151.60 ms
main:    total time = 32151.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.539 I build: 3940 (4a5b5870) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.911 I main: load the model and apply lora adapter, if any
0.00.021.994 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.010 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.017 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.018 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.022 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.023 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.023 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.024 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.024 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.025 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.028 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.029 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.029 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.030 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.031 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.186 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.179 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.066 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.072 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.073 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.074 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.074 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.075 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.076 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.078 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.079 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.082 I llama_model_loader: - type  f32:   37 tensors
0.00.133.085 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.086 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.768 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.330 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.239.564 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.243.382 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.251.588 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.160 I llm_load_vocab: special tokens cache size = 5
0.00.273.305 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.321 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.322 I llm_load_print_meta: arch             = gemma
0.00.273.323 I llm_load_print_meta: vocab type       = SPM
0.00.273.323 I llm_load_print_meta: n_vocab          = 256000
0.00.273.324 I llm_load_print_meta: n_merges         = 0
0.00.273.324 I llm_load_print_meta: vocab_only       = 0
0.00.273.325 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.325 I llm_load_print_meta: n_embd           = 2048
0.00.273.325 I llm_load_print_meta: n_layer          = 18
0.00.273.337 I llm_load_print_meta: n_head           = 8
0.00.273.338 I llm_load_print_meta: n_head_kv        = 1
0.00.273.339 I llm_load_print_meta: n_rot            = 256
0.00.273.339 I llm_load_print_meta: n_swa            = 0
0.00.273.339 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.339 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.340 I llm_load_print_meta: n_gqa            = 8
0.00.273.342 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.343 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.344 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.345 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.345 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.346 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.346 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.347 I llm_load_print_meta: n_ff             = 16384
0.00.273.347 I llm_load_print_meta: n_expert         = 0
0.00.273.347 I llm_load_print_meta: n_expert_used    = 0
0.00.273.348 I llm_load_print_meta: causal attn      = 1
0.00.273.348 I llm_load_print_meta: pooling type     = 0
0.00.273.349 I llm_load_print_meta: rope type        = 2
0.00.273.349 I llm_load_print_meta: rope scaling     = linear
0.00.273.351 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.351 I llm_load_print_meta: freq_scale_train = 1
0.00.273.352 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.352 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.352 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.353 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.353 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.353 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.353 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.354 I llm_load_print_meta: model type       = 2B
0.00.273.354 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.355 I llm_load_print_meta: model params     = 2.51 B
0.00.273.356 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.356 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.357 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.357 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.358 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.358 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.358 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.358 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.359 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.359 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.359 I llm_load_print_meta: max token length = 93
0.00.273.381 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.329.548 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.334.553 I llama_new_context_with_model: n_ctx      = 8192
0.00.334.560 I llama_new_context_with_model: n_batch    = 2048
0.00.334.561 I llama_new_context_with_model: n_ubatch   = 512
0.00.334.561 I llama_new_context_with_model: flash_attn = 0
0.00.334.564 I llama_new_context_with_model: freq_base  = 10000.0
0.00.334.565 I llama_new_context_with_model: freq_scale = 1
0.00.364.818 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.364.833 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.364.922 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.761 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.365.768 I llama_new_context_with_model: graph nodes  = 601
0.00.365.769 I llama_new_context_with_model: graph splits = 1
0.00.365.771 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.623 I main: llama threadpool init, n_threads = 4
0.00.446.636 I 
0.00.446.712 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.715 I 
0.00.446.755 I sampler seed: 188159002
0.00.446.764 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.767 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.768 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.768 I 
 increamically.

I'm not sure what you're trying to say, but please provide me with more context. [end of text]


0.01.759.993 I llama_perf_sampler_print:    sampling time =       3.85 ms /    27 runs   (    0.14 ms per token,  7018.46 tokens per second)
0.01.759.996 I llama_perf_context_print:        load time =     444.69 ms
0.01.759.997 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.759.999 I llama_perf_context_print:        eval time =    1298.58 ms /    26 runs   (   49.95 ms per token,    20.02 tokens per second)
0.01.760.001 I llama_perf_context_print:       total time =    1313.38 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.081s
user	8m14.012s
sys	0m7.006s
