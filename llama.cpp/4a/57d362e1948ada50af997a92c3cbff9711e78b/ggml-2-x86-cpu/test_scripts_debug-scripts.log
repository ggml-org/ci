+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.023.310 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.320 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.406 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.417 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.421 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.427 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.428 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.431 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.432 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.434 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.436 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.442 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.446 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.447 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.449 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.450 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.794 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.332 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.627 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.636 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.637 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.638 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.639 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.641 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.643 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.647 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.648 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.650 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.651 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.652 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.661 I llama_model_loader: - type  f32:   37 tensors
0.00.349.664 I llama_model_loader: - type q8_0:  127 tensors
0.00.569.042 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.220 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.196 I llm_load_vocab: special tokens cache size = 5
0.00.837.248 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.317 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.321 I llm_load_print_meta: arch             = gemma
0.00.837.322 I llm_load_print_meta: vocab type       = SPM
0.00.837.323 I llm_load_print_meta: n_vocab          = 256000
0.00.837.325 I llm_load_print_meta: n_merges         = 0
0.00.837.325 I llm_load_print_meta: vocab_only       = 0
0.00.837.326 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.326 I llm_load_print_meta: n_embd           = 2048
0.00.837.326 I llm_load_print_meta: n_layer          = 18
0.00.837.398 I llm_load_print_meta: n_head           = 8
0.00.837.408 I llm_load_print_meta: n_head_kv        = 1
0.00.837.409 I llm_load_print_meta: n_rot            = 256
0.00.837.409 I llm_load_print_meta: n_swa            = 0
0.00.837.410 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.410 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.415 I llm_load_print_meta: n_gqa            = 8
0.00.837.419 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.424 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.428 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.429 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.430 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.430 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.431 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.436 I llm_load_print_meta: n_ff             = 16384
0.00.837.437 I llm_load_print_meta: n_expert         = 0
0.00.837.437 I llm_load_print_meta: n_expert_used    = 0
0.00.837.438 I llm_load_print_meta: causal attn      = 1
0.00.837.438 I llm_load_print_meta: pooling type     = 0
0.00.837.439 I llm_load_print_meta: rope type        = 2
0.00.837.440 I llm_load_print_meta: rope scaling     = linear
0.00.837.442 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.442 I llm_load_print_meta: freq_scale_train = 1
0.00.837.443 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.451 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.452 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.452 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.453 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.454 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.454 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.455 I llm_load_print_meta: model type       = 2B
0.00.837.456 I llm_load_print_meta: model ftype      = Q8_0
0.00.837.456 I llm_load_print_meta: model params     = 2.51 B
0.00.837.465 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.837.465 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.466 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.467 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.467 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.479 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.480 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.480 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.486 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.487 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.488 I llm_load_print_meta: max token length = 93
0.00.939.405 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.939.414 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.939.415 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.939.415 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.939.416 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.939.417 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.945.307 I llama_new_context_with_model: n_seq_max     = 1
0.00.945.314 I llama_new_context_with_model: n_ctx         = 4096
0.00.945.314 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.945.315 I llama_new_context_with_model: n_batch       = 2048
0.00.945.315 I llama_new_context_with_model: n_ubatch      = 512
0.00.945.315 I llama_new_context_with_model: flash_attn    = 0
0.00.945.317 I llama_new_context_with_model: freq_base     = 10000.0
0.00.945.318 I llama_new_context_with_model: freq_scale    = 1
0.00.945.319 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.508 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.547 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.670 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.962.200 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.962.205 I llama_new_context_with_model: graph nodes  = 601
0.00.962.205 I llama_new_context_with_model: graph splits = 1
0.00.962.228 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.571.341 I main: llama threadpool init, n_threads = 4
0.01.571.356 I 
0.01.571.471 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.571.475 I 
0.01.571.715 I sampler seed: 1937085422
0.01.571.729 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.739 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.742 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.743 I 
 increasements. [end of text]


0.03.271.142 I llama_perf_sampler_print:    sampling time =       6.20 ms /     5 runs   (    1.24 ms per token,   806.06 tokens per second)
0.03.271.145 I llama_perf_context_print:        load time =    1570.39 ms
0.03.271.146 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.271.157 I llama_perf_context_print:        eval time =    1686.69 ms /     4 runs   (  421.67 ms per token,     2.37 tokens per second)
0.03.271.159 I llama_perf_context_print:       total time =    1699.81 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.840 I main: load the model and apply lora adapter, if any
0.00.023.075 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.169 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.183 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.185 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.190 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.195 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.196 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.197 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.198 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.200 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.210 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.211 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.212 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.215 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.216 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.770 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.319 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.155 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.164 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.165 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.166 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.168 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.169 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.171 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.175 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.176 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.177 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.179 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.348.180 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.188 I llama_model_loader: - type  f32:   37 tensors
0.00.348.190 I llama_model_loader: - type q8_0:  127 tensors
0.00.569.094 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.427 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.392 I llm_load_vocab: special tokens cache size = 5
0.00.827.209 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.827.285 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.827.286 I llm_load_print_meta: arch             = gemma
0.00.827.286 I llm_load_print_meta: vocab type       = SPM
0.00.827.288 I llm_load_print_meta: n_vocab          = 256000
0.00.827.290 I llm_load_print_meta: n_merges         = 0
0.00.827.290 I llm_load_print_meta: vocab_only       = 0
0.00.827.291 I llm_load_print_meta: n_ctx_train      = 8192
0.00.827.291 I llm_load_print_meta: n_embd           = 2048
0.00.827.291 I llm_load_print_meta: n_layer          = 18
0.00.827.357 I llm_load_print_meta: n_head           = 8
0.00.827.364 I llm_load_print_meta: n_head_kv        = 1
0.00.827.365 I llm_load_print_meta: n_rot            = 256
0.00.827.365 I llm_load_print_meta: n_swa            = 0
0.00.827.366 I llm_load_print_meta: n_embd_head_k    = 256
0.00.827.367 I llm_load_print_meta: n_embd_head_v    = 256
0.00.827.371 I llm_load_print_meta: n_gqa            = 8
0.00.827.376 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.827.381 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.827.382 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.827.384 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.827.385 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.827.386 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.827.386 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.827.392 I llm_load_print_meta: n_ff             = 16384
0.00.827.392 I llm_load_print_meta: n_expert         = 0
0.00.827.392 I llm_load_print_meta: n_expert_used    = 0
0.00.827.393 I llm_load_print_meta: causal attn      = 1
0.00.827.394 I llm_load_print_meta: pooling type     = 0
0.00.827.394 I llm_load_print_meta: rope type        = 2
0.00.827.394 I llm_load_print_meta: rope scaling     = linear
0.00.827.396 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.827.397 I llm_load_print_meta: freq_scale_train = 1
0.00.827.397 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.827.398 I llm_load_print_meta: rope_finetuned   = unknown
0.00.827.398 I llm_load_print_meta: ssm_d_conv       = 0
0.00.827.398 I llm_load_print_meta: ssm_d_inner      = 0
0.00.827.398 I llm_load_print_meta: ssm_d_state      = 0
0.00.827.399 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.827.403 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.827.404 I llm_load_print_meta: model type       = 2B
0.00.827.404 I llm_load_print_meta: model ftype      = Q8_0
0.00.827.415 I llm_load_print_meta: model params     = 2.51 B
0.00.827.425 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.827.426 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.827.426 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.827.427 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.827.430 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.827.431 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.827.431 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.827.432 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.827.438 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.827.440 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.827.440 I llm_load_print_meta: max token length = 93
0.00.924.178 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.930.036 I llama_new_context_with_model: n_seq_max     = 1
0.00.930.043 I llama_new_context_with_model: n_ctx         = 4096
0.00.930.043 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.044 I llama_new_context_with_model: n_batch       = 2048
0.00.930.044 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.045 I llama_new_context_with_model: flash_attn    = 0
0.00.930.047 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.048 I llama_new_context_with_model: freq_scale    = 1
0.00.930.048 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.944.607 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.649 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.944.775 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.393 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.397 I llama_new_context_with_model: graph nodes  = 601
0.00.947.398 I llama_new_context_with_model: graph splits = 1
0.00.947.420 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.556.637 I main: llama threadpool init, n_threads = 4
0.01.556.651 I 
0.01.556.766 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.556.770 I 
0.01.557.011 I sampler seed: 775505734
0.01.557.025 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.557.035 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.557.037 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.557.037 I 
 increasities to be able to predict the future.

**Question:** What is the basis of this statement?

The provided text does not contain any information regarding

0.15.134.779 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.80 tokens per second)
0.15.134.782 I llama_perf_context_print:        load time =    1555.70 ms
0.15.134.783 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.134.785 I llama_perf_context_print:        eval time =   13489.43 ms /    32 runs   (  421.54 ms per token,     2.37 tokens per second)
0.15.134.785 I llama_perf_context_print:       total time =   13578.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.340 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.349 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.441 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.454 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.458 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.466 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.468 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.469 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.470 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.472 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.476 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.482 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.484 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.485 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.487 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.496 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.977 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.244 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.112 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.120 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.122 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.123 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.124 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.126 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.127 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.131 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.133 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.134 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.135 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.137 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.146 I llama_model_loader: - type  f32:   37 tensors
0.00.349.148 I llama_model_loader: - type q8_0:  127 tensors
0.00.573.437 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.636.168 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.637.181 I llm_load_vocab: special tokens cache size = 5
0.00.821.235 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.821.306 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.821.307 I llm_load_print_meta: arch             = gemma
0.00.821.307 I llm_load_print_meta: vocab type       = SPM
0.00.821.308 I llm_load_print_meta: n_vocab          = 256000
0.00.821.311 I llm_load_print_meta: n_merges         = 0
0.00.821.311 I llm_load_print_meta: vocab_only       = 0
0.00.821.312 I llm_load_print_meta: n_ctx_train      = 8192
0.00.821.312 I llm_load_print_meta: n_embd           = 2048
0.00.821.312 I llm_load_print_meta: n_layer          = 18
0.00.821.379 I llm_load_print_meta: n_head           = 8
0.00.821.389 I llm_load_print_meta: n_head_kv        = 1
0.00.821.390 I llm_load_print_meta: n_rot            = 256
0.00.821.391 I llm_load_print_meta: n_swa            = 0
0.00.821.391 I llm_load_print_meta: n_embd_head_k    = 256
0.00.821.403 I llm_load_print_meta: n_embd_head_v    = 256
0.00.821.408 I llm_load_print_meta: n_gqa            = 8
0.00.821.413 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.821.418 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.821.420 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.821.421 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.821.422 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.821.423 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.821.423 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.821.428 I llm_load_print_meta: n_ff             = 16384
0.00.821.429 I llm_load_print_meta: n_expert         = 0
0.00.821.429 I llm_load_print_meta: n_expert_used    = 0
0.00.821.438 I llm_load_print_meta: causal attn      = 1
0.00.821.439 I llm_load_print_meta: pooling type     = 0
0.00.821.440 I llm_load_print_meta: rope type        = 2
0.00.821.440 I llm_load_print_meta: rope scaling     = linear
0.00.821.442 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.821.443 I llm_load_print_meta: freq_scale_train = 1
0.00.821.443 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.821.444 I llm_load_print_meta: rope_finetuned   = unknown
0.00.821.444 I llm_load_print_meta: ssm_d_conv       = 0
0.00.821.445 I llm_load_print_meta: ssm_d_inner      = 0
0.00.821.445 I llm_load_print_meta: ssm_d_state      = 0
0.00.821.457 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.821.458 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.821.459 I llm_load_print_meta: model type       = 2B
0.00.821.460 I llm_load_print_meta: model ftype      = Q8_0
0.00.821.461 I llm_load_print_meta: model params     = 2.51 B
0.00.821.470 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.821.470 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.821.471 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.821.471 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.821.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.821.473 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.821.474 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.821.474 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.821.480 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.821.481 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.821.481 I llm_load_print_meta: max token length = 93
0.00.898.799 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.898.808 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.898.809 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.898.810 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.898.810 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.898.811 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.904.740 I llama_new_context_with_model: n_seq_max     = 1
0.00.904.747 I llama_new_context_with_model: n_ctx         = 4096
0.00.904.747 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.904.747 I llama_new_context_with_model: n_batch       = 2048
0.00.904.748 I llama_new_context_with_model: n_ubatch      = 512
0.00.904.748 I llama_new_context_with_model: flash_attn    = 0
0.00.904.751 I llama_new_context_with_model: freq_base     = 10000.0
0.00.904.752 I llama_new_context_with_model: freq_scale    = 1
0.00.904.752 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.919.287 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.919.328 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.919.451 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.921.967 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.921.971 I llama_new_context_with_model: graph nodes  = 601
0.00.921.972 I llama_new_context_with_model: graph splits = 1
0.00.921.996 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.532.476 I main: llama threadpool init, n_threads = 4
0.01.532.492 I 
0.01.532.607 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.532.611 I 
0.01.532.849 I sampler seed: 3033036247
0.01.532.862 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.532.873 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.532.874 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.532.875 I 
 increasities on a daily basis. [end of text]


0.04.925.817 I llama_perf_sampler_print:    sampling time =      12.34 ms /     9 runs   (    1.37 ms per token,   729.45 tokens per second)
0.04.925.820 I llama_perf_context_print:        load time =    1531.53 ms
0.04.925.821 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.925.822 I llama_perf_context_print:        eval time =    3369.64 ms /     8 runs   (  421.21 ms per token,     2.37 tokens per second)
0.04.925.823 I llama_perf_context_print:       total time =    3393.35 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.022.885 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.894 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.981 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.993 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.994 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.000 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.001 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.003 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.004 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.005 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.007 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.017 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.026 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.028 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.030 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.031 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.417 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.286 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.225 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.234 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.236 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.237 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.238 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.240 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.241 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.246 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.247 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.249 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.250 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.251 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.260 I llama_model_loader: - type  f32:   37 tensors
0.00.349.263 I llama_model_loader: - type q8_0:  127 tensors
0.00.564.363 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.620.647 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.621.627 I llm_load_vocab: special tokens cache size = 5
0.00.809.521 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.809.595 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.809.597 I llm_load_print_meta: arch             = gemma
0.00.809.598 I llm_load_print_meta: vocab type       = SPM
0.00.809.598 I llm_load_print_meta: n_vocab          = 256000
0.00.809.601 I llm_load_print_meta: n_merges         = 0
0.00.809.601 I llm_load_print_meta: vocab_only       = 0
0.00.809.602 I llm_load_print_meta: n_ctx_train      = 8192
0.00.809.602 I llm_load_print_meta: n_embd           = 2048
0.00.809.602 I llm_load_print_meta: n_layer          = 18
0.00.809.667 I llm_load_print_meta: n_head           = 8
0.00.809.674 I llm_load_print_meta: n_head_kv        = 1
0.00.809.674 I llm_load_print_meta: n_rot            = 256
0.00.809.675 I llm_load_print_meta: n_swa            = 0
0.00.809.675 I llm_load_print_meta: n_embd_head_k    = 256
0.00.809.675 I llm_load_print_meta: n_embd_head_v    = 256
0.00.809.680 I llm_load_print_meta: n_gqa            = 8
0.00.809.684 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.809.689 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.809.691 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.809.692 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.809.692 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.809.693 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.809.693 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.809.698 I llm_load_print_meta: n_ff             = 16384
0.00.809.699 I llm_load_print_meta: n_expert         = 0
0.00.809.699 I llm_load_print_meta: n_expert_used    = 0
0.00.809.699 I llm_load_print_meta: causal attn      = 1
0.00.809.700 I llm_load_print_meta: pooling type     = 0
0.00.809.700 I llm_load_print_meta: rope type        = 2
0.00.809.700 I llm_load_print_meta: rope scaling     = linear
0.00.809.702 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.809.702 I llm_load_print_meta: freq_scale_train = 1
0.00.809.703 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.809.703 I llm_load_print_meta: rope_finetuned   = unknown
0.00.809.703 I llm_load_print_meta: ssm_d_conv       = 0
0.00.809.704 I llm_load_print_meta: ssm_d_inner      = 0
0.00.809.704 I llm_load_print_meta: ssm_d_state      = 0
0.00.809.705 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.809.705 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.809.706 I llm_load_print_meta: model type       = 2B
0.00.809.707 I llm_load_print_meta: model ftype      = Q8_0
0.00.809.707 I llm_load_print_meta: model params     = 2.51 B
0.00.809.715 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.809.715 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.809.716 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.809.717 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.809.717 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.809.718 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.809.718 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.809.718 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.809.724 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.809.725 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.809.737 I llm_load_print_meta: max token length = 93
0.00.882.341 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.882.349 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.888.160 I llama_new_context_with_model: n_seq_max     = 1
0.00.888.167 I llama_new_context_with_model: n_ctx         = 4096
0.00.888.168 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.888.168 I llama_new_context_with_model: n_batch       = 2048
0.00.888.168 I llama_new_context_with_model: n_ubatch      = 512
0.00.888.169 I llama_new_context_with_model: flash_attn    = 0
0.00.888.172 I llama_new_context_with_model: freq_base     = 10000.0
0.00.888.173 I llama_new_context_with_model: freq_scale    = 1
0.00.888.173 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.902.755 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.902.795 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.902.920 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.905.530 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.905.535 I llama_new_context_with_model: graph nodes  = 601
0.00.905.535 I llama_new_context_with_model: graph splits = 1
0.00.905.558 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.550.624 I main: llama threadpool init, n_threads = 4
0.01.550.653 I 
0.01.550.764 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.550.768 I 
0.01.551.004 I sampler seed: 764099829
0.01.551.018 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.551.030 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.551.031 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.551.031 I 
 maneuvously.

I cannot answer this question as it contains inappropriate language and imagery. [end of text]


0.09.716.110 I llama_perf_sampler_print:    sampling time =      29.16 ms /    20 runs   (    1.46 ms per token,   685.82 tokens per second)
0.09.716.113 I llama_perf_context_print:        load time =    1549.69 ms
0.09.716.114 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.716.116 I llama_perf_context_print:        eval time =    8111.70 ms /    19 runs   (  426.93 ms per token,     2.34 tokens per second)
0.09.716.140 I llama_perf_context_print:       total time =    8165.49 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m42.702s
user	2m1.060s
sys	0m9.330s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4192 (4a57d362)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186345.79 ms
main:    total time = 186345.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.196 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.206 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.296 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.309 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.311 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.317 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.321 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.322 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.324 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.326 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.327 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.336 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.338 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.339 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.340 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.342 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.694 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.560 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.625 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.636 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.637 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.638 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.641 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.643 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.647 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.659 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.664 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.666 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.668 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.677 I llama_model_loader: - type  f32:   37 tensors
0.00.348.680 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.681 I llama_model_loader: - type q6_K:   19 tensors
0.00.589.475 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.660.260 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.661.280 I llm_load_vocab: special tokens cache size = 5
0.00.845.586 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.664 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.665 I llm_load_print_meta: arch             = gemma
0.00.845.666 I llm_load_print_meta: vocab type       = SPM
0.00.845.667 I llm_load_print_meta: n_vocab          = 256000
0.00.845.669 I llm_load_print_meta: n_merges         = 0
0.00.845.670 I llm_load_print_meta: vocab_only       = 0
0.00.845.670 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.671 I llm_load_print_meta: n_embd           = 2048
0.00.845.671 I llm_load_print_meta: n_layer          = 18
0.00.845.739 I llm_load_print_meta: n_head           = 8
0.00.845.761 I llm_load_print_meta: n_head_kv        = 1
0.00.845.765 I llm_load_print_meta: n_rot            = 256
0.00.845.766 I llm_load_print_meta: n_swa            = 0
0.00.845.766 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.767 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.772 I llm_load_print_meta: n_gqa            = 8
0.00.845.777 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.782 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.783 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.785 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.785 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.786 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.786 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.792 I llm_load_print_meta: n_ff             = 16384
0.00.845.792 I llm_load_print_meta: n_expert         = 0
0.00.845.793 I llm_load_print_meta: n_expert_used    = 0
0.00.845.795 I llm_load_print_meta: causal attn      = 1
0.00.845.795 I llm_load_print_meta: pooling type     = 0
0.00.845.796 I llm_load_print_meta: rope type        = 2
0.00.845.796 I llm_load_print_meta: rope scaling     = linear
0.00.845.798 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.799 I llm_load_print_meta: freq_scale_train = 1
0.00.845.800 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.800 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.800 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.802 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.802 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.816 I llm_load_print_meta: model type       = 2B
0.00.845.818 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.845.819 I llm_load_print_meta: model params     = 2.51 B
0.00.845.828 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.845.829 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.837 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.840 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.841 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.841 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.842 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.842 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.848 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.850 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.851 I llm_load_print_meta: max token length = 93
0.00.905.988 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.905.999 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.906.000 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.906.001 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.906.001 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.906.002 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.911.847 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.855 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.856 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.856 I llama_new_context_with_model: n_batch       = 2048
0.00.911.857 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.857 I llama_new_context_with_model: flash_attn    = 0
0.00.911.861 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.862 I llama_new_context_with_model: freq_scale    = 1
0.00.911.863 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.926.574 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.614 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.746 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.929.306 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.929.309 I llama_new_context_with_model: graph nodes  = 601
0.00.929.310 I llama_new_context_with_model: graph splits = 1
0.00.929.333 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.513.500 I main: llama threadpool init, n_threads = 4
0.01.513.515 I 
0.01.513.631 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.513.635 I 
0.01.513.876 I sampler seed: 3028206586
0.01.513.891 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.513.900 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.513.903 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.513.903 I 
 maneuvously.

**Answer:** I am unable to generate responses that contain offensive or inappropriate language. [end of text]


0.09.146.846 I llama_perf_sampler_print:    sampling time =      33.80 ms /    23 runs   (    1.47 ms per token,   680.47 tokens per second)
0.09.146.849 I llama_perf_context_print:        load time =    1512.57 ms
0.09.146.850 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.146.851 I llama_perf_context_print:        eval time =    7571.34 ms /    22 runs   (  344.15 ms per token,     2.91 tokens per second)
0.09.146.852 I llama_perf_context_print:       total time =    7633.35 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4192 (4a57d362)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186400.10 ms
main:    total time = 186400.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.188 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.286 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.302 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.306 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.312 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.314 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.316 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.318 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.319 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.321 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.327 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.331 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.333 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.334 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.335 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.246 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.090 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.120 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.130 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.133 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.135 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.137 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.140 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.142 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.148 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.150 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.159 I llama_model_loader: - type  f32:   37 tensors
0.00.349.162 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.163 I llama_model_loader: - type q6_K:   19 tensors
0.00.579.355 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.097 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.029 I llm_load_vocab: special tokens cache size = 5
0.00.838.704 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.791 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.794 I llm_load_print_meta: arch             = gemma
0.00.838.795 I llm_load_print_meta: vocab type       = SPM
0.00.838.796 I llm_load_print_meta: n_vocab          = 256000
0.00.838.799 I llm_load_print_meta: n_merges         = 0
0.00.838.799 I llm_load_print_meta: vocab_only       = 0
0.00.838.800 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.801 I llm_load_print_meta: n_embd           = 2048
0.00.838.802 I llm_load_print_meta: n_layer          = 18
0.00.838.872 I llm_load_print_meta: n_head           = 8
0.00.838.884 I llm_load_print_meta: n_head_kv        = 1
0.00.838.885 I llm_load_print_meta: n_rot            = 256
0.00.838.886 I llm_load_print_meta: n_swa            = 0
0.00.838.887 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.887 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.895 I llm_load_print_meta: n_gqa            = 8
0.00.838.904 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.918 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.920 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.922 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.923 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.923 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.924 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.932 I llm_load_print_meta: n_ff             = 16384
0.00.838.933 I llm_load_print_meta: n_expert         = 0
0.00.838.934 I llm_load_print_meta: n_expert_used    = 0
0.00.838.935 I llm_load_print_meta: causal attn      = 1
0.00.838.935 I llm_load_print_meta: pooling type     = 0
0.00.838.936 I llm_load_print_meta: rope type        = 2
0.00.838.937 I llm_load_print_meta: rope scaling     = linear
0.00.838.939 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.940 I llm_load_print_meta: freq_scale_train = 1
0.00.838.941 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.942 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.943 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.944 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.945 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.946 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.946 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.947 I llm_load_print_meta: model type       = 2B
0.00.838.949 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.838.950 I llm_load_print_meta: model params     = 2.51 B
0.00.838.961 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.838.962 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.963 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.964 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.965 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.966 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.966 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.968 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.975 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.978 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.978 I llm_load_print_meta: max token length = 93
0.00.895.934 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.902.235 I llama_new_context_with_model: n_seq_max     = 1
0.00.902.244 I llama_new_context_with_model: n_ctx         = 4096
0.00.902.244 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.902.245 I llama_new_context_with_model: n_batch       = 2048
0.00.902.246 I llama_new_context_with_model: n_ubatch      = 512
0.00.902.246 I llama_new_context_with_model: flash_attn    = 0
0.00.902.251 I llama_new_context_with_model: freq_base     = 10000.0
0.00.902.252 I llama_new_context_with_model: freq_scale    = 1
0.00.902.253 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.917.965 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.918.017 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.918.153 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.920.850 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.920.854 I llama_new_context_with_model: graph nodes  = 601
0.00.920.855 I llama_new_context_with_model: graph splits = 1
0.00.920.881 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.510.028 I main: llama threadpool init, n_threads = 4
0.01.510.046 I 
0.01.510.176 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.510.179 I 
0.01.510.423 I sampler seed: 1991768285
0.01.510.440 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.510.453 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.510.457 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.510.457 I 
 seconded by the divine, the divine essence residing within the sacred space. 

This divine essence is the source of all creation, the power to bring forth

0.12.620.903 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.43 tokens per second)
0.12.620.906 I llama_perf_context_print:        load time =    1509.09 ms
0.12.620.928 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.620.930 I llama_perf_context_print:        eval time =   11021.81 ms /    32 runs   (  344.43 ms per token,     2.90 tokens per second)
0.12.620.931 I llama_perf_context_print:       total time =   11110.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m37.347s
user	46m28.862s
sys	0m6.238s
