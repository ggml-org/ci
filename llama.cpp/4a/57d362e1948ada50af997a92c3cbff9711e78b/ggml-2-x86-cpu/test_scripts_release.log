+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.386 I main: llama backend init
0.00.000.393 I main: load the model and apply lora adapter, if any
0.00.020.961 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.971 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.979 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.984 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.987 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.992 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.996 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.997 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.998 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.999 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.000 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.005 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.006 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.008 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.009 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.006 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.398 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.332 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.340 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.341 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.341 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.342 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.343 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.344 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.347 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.347 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.348 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.349 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.349 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.354 I llama_model_loader: - type  f32:   37 tensors
0.00.132.355 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.401 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.823 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.399 I llm_load_vocab: special tokens cache size = 5
0.00.268.438 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.454 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.454 I llm_load_print_meta: arch             = gemma
0.00.268.455 I llm_load_print_meta: vocab type       = SPM
0.00.268.456 I llm_load_print_meta: n_vocab          = 256000
0.00.268.456 I llm_load_print_meta: n_merges         = 0
0.00.268.456 I llm_load_print_meta: vocab_only       = 0
0.00.268.457 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.457 I llm_load_print_meta: n_embd           = 2048
0.00.268.457 I llm_load_print_meta: n_layer          = 18
0.00.268.469 I llm_load_print_meta: n_head           = 8
0.00.268.470 I llm_load_print_meta: n_head_kv        = 1
0.00.268.470 I llm_load_print_meta: n_rot            = 256
0.00.268.470 I llm_load_print_meta: n_swa            = 0
0.00.268.471 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.471 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.472 I llm_load_print_meta: n_gqa            = 8
0.00.268.473 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.474 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.475 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.476 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.477 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.477 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.478 I llm_load_print_meta: n_ff             = 16384
0.00.268.478 I llm_load_print_meta: n_expert         = 0
0.00.268.478 I llm_load_print_meta: n_expert_used    = 0
0.00.268.479 I llm_load_print_meta: causal attn      = 1
0.00.268.479 I llm_load_print_meta: pooling type     = 0
0.00.268.479 I llm_load_print_meta: rope type        = 2
0.00.268.480 I llm_load_print_meta: rope scaling     = linear
0.00.268.481 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.482 I llm_load_print_meta: freq_scale_train = 1
0.00.268.482 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.483 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.483 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.483 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.483 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.484 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.484 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.484 I llm_load_print_meta: model type       = 2B
0.00.268.485 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.485 I llm_load_print_meta: model params     = 2.51 B
0.00.268.486 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.487 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.487 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.487 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.488 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.488 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.488 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.489 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.489 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.490 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.490 I llm_load_print_meta: max token length = 93
0.00.367.366 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.367.374 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.367.375 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.367.375 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.367.376 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.367.377 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.683 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.690 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.691 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.691 I llama_new_context_with_model: n_batch       = 2048
0.00.372.692 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.692 I llama_new_context_with_model: flash_attn    = 0
0.00.372.695 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.696 I llama_new_context_with_model: freq_scale    = 1
0.00.372.697 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.992 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.007 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.100 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.397 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.404 I llama_new_context_with_model: graph nodes  = 601
0.00.388.404 I llama_new_context_with_model: graph splits = 1
0.00.388.406 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.573 I main: llama threadpool init, n_threads = 4
0.00.473.589 I 
0.00.473.675 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.473.679 I 
0.00.473.730 I sampler seed: 344655155
0.00.473.742 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.746 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.747 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.748 I 
 seconded.

**Assistant**

I am unable to provide responses that are sexually suggestive in nature. [end of text]


0.02.017.592 I llama_perf_sampler_print:    sampling time =       3.16 ms /    23 runs   (    0.14 ms per token,  7280.79 tokens per second)
0.02.017.594 I llama_perf_context_print:        load time =     473.16 ms
0.02.017.595 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.017.597 I llama_perf_context_print:        eval time =    1531.14 ms /    22 runs   (   69.60 ms per token,    14.37 tokens per second)
0.02.017.598 I llama_perf_context_print:       total time =    1544.03 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.285 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.299 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.310 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.311 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.316 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.319 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.320 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.320 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.321 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.321 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.325 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.326 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.327 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.327 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.583 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.928 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.802 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.808 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.808 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.809 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.810 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.810 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.811 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.814 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.815 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.816 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.816 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.817 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.820 I llama_model_loader: - type  f32:   37 tensors
0.00.132.821 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.294 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.707 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.224 I llm_load_vocab: special tokens cache size = 5
0.00.273.321 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.336 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.336 I llm_load_print_meta: arch             = gemma
0.00.273.337 I llm_load_print_meta: vocab type       = SPM
0.00.273.337 I llm_load_print_meta: n_vocab          = 256000
0.00.273.338 I llm_load_print_meta: n_merges         = 0
0.00.273.338 I llm_load_print_meta: vocab_only       = 0
0.00.273.338 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.339 I llm_load_print_meta: n_embd           = 2048
0.00.273.339 I llm_load_print_meta: n_layer          = 18
0.00.273.349 I llm_load_print_meta: n_head           = 8
0.00.273.350 I llm_load_print_meta: n_head_kv        = 1
0.00.273.350 I llm_load_print_meta: n_rot            = 256
0.00.273.351 I llm_load_print_meta: n_swa            = 0
0.00.273.351 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.351 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.352 I llm_load_print_meta: n_gqa            = 8
0.00.273.353 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.354 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.355 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.356 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.356 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.357 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.357 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.358 I llm_load_print_meta: n_ff             = 16384
0.00.273.358 I llm_load_print_meta: n_expert         = 0
0.00.273.358 I llm_load_print_meta: n_expert_used    = 0
0.00.273.358 I llm_load_print_meta: causal attn      = 1
0.00.273.359 I llm_load_print_meta: pooling type     = 0
0.00.273.359 I llm_load_print_meta: rope type        = 2
0.00.273.360 I llm_load_print_meta: rope scaling     = linear
0.00.273.361 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.362 I llm_load_print_meta: freq_scale_train = 1
0.00.273.362 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.362 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.363 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.363 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.363 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.363 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.364 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.364 I llm_load_print_meta: model type       = 2B
0.00.273.364 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.365 I llm_load_print_meta: model params     = 2.51 B
0.00.273.366 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.367 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.368 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.368 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.369 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.373 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.375 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.375 I llm_load_print_meta: max token length = 93
0.00.367.577 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.771 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.777 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.778 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.778 I llama_new_context_with_model: n_batch       = 2048
0.00.372.779 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.780 I llama_new_context_with_model: flash_attn    = 0
0.00.372.782 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.783 I llama_new_context_with_model: freq_scale    = 1
0.00.372.784 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.314 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.328 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.429 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.716 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.723 I llama_new_context_with_model: graph nodes  = 601
0.00.388.724 I llama_new_context_with_model: graph splits = 1
0.00.388.726 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.556 I main: llama threadpool init, n_threads = 4
0.00.472.571 I 
0.00.472.646 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.472.649 I 
0.00.472.695 I sampler seed: 199821198
0.00.472.707 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.719 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.723 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.723 I 
 increasively as I provide more information about the data. [end of text]


0.01.285.469 I llama_perf_sampler_print:    sampling time =       1.76 ms /    13 runs   (    0.14 ms per token,  7369.61 tokens per second)
0.01.285.471 I llama_perf_context_print:        load time =     471.80 ms
0.01.285.472 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.285.474 I llama_perf_context_print:        eval time =     805.50 ms /    12 runs   (   67.12 ms per token,    14.90 tokens per second)
0.01.285.474 I llama_perf_context_print:       total time =     812.92 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.041 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.051 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.059 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.064 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.065 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.068 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.068 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.070 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.071 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.072 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.072 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.076 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.077 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.077 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.078 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.078 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.488 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.705 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.601 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.607 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.608 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.608 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.609 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.610 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.611 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.613 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.614 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.615 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.616 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.617 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.620 I llama_model_loader: - type  f32:   37 tensors
0.00.131.621 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.339 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.019 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.615 I llm_load_vocab: special tokens cache size = 5
0.00.268.839 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.864 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.864 I llm_load_print_meta: arch             = gemma
0.00.268.865 I llm_load_print_meta: vocab type       = SPM
0.00.268.866 I llm_load_print_meta: n_vocab          = 256000
0.00.268.866 I llm_load_print_meta: n_merges         = 0
0.00.268.866 I llm_load_print_meta: vocab_only       = 0
0.00.268.867 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.867 I llm_load_print_meta: n_embd           = 2048
0.00.268.867 I llm_load_print_meta: n_layer          = 18
0.00.268.879 I llm_load_print_meta: n_head           = 8
0.00.268.879 I llm_load_print_meta: n_head_kv        = 1
0.00.268.880 I llm_load_print_meta: n_rot            = 256
0.00.268.880 I llm_load_print_meta: n_swa            = 0
0.00.268.880 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.881 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.882 I llm_load_print_meta: n_gqa            = 8
0.00.268.883 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.884 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.885 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.886 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.887 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.887 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.887 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.888 I llm_load_print_meta: n_ff             = 16384
0.00.268.888 I llm_load_print_meta: n_expert         = 0
0.00.268.889 I llm_load_print_meta: n_expert_used    = 0
0.00.268.889 I llm_load_print_meta: causal attn      = 1
0.00.268.889 I llm_load_print_meta: pooling type     = 0
0.00.268.889 I llm_load_print_meta: rope type        = 2
0.00.268.890 I llm_load_print_meta: rope scaling     = linear
0.00.268.891 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.892 I llm_load_print_meta: freq_scale_train = 1
0.00.268.892 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.893 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.893 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.894 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.894 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.894 I llm_load_print_meta: model type       = 2B
0.00.268.895 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.896 I llm_load_print_meta: model params     = 2.51 B
0.00.268.897 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.897 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.898 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.898 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.898 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.899 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.899 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.900 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.900 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.900 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.901 I llm_load_print_meta: max token length = 93
0.00.344.764 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.344.772 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.774 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.344.774 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.344.775 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.776 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.035 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.042 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.042 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.042 I llama_new_context_with_model: n_batch       = 2048
0.00.350.043 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.043 I llama_new_context_with_model: flash_attn    = 0
0.00.350.046 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.047 I llama_new_context_with_model: freq_scale    = 1
0.00.350.048 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.197 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.210 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.306 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.599 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.605 I llama_new_context_with_model: graph nodes  = 601
0.00.366.606 I llama_new_context_with_model: graph splits = 1
0.00.366.608 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.037 I main: llama threadpool init, n_threads = 4
0.00.451.052 I 
0.00.451.121 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.451.125 I 
0.00.451.166 I sampler seed: 1410465735
0.00.451.177 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.189 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.192 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.192 I 
 increasities for all your needs. [end of text]


0.01.017.767 I llama_perf_sampler_print:    sampling time =       1.25 ms /     9 runs   (    0.14 ms per token,  7188.50 tokens per second)
0.01.017.770 I llama_perf_context_print:        load time =     450.28 ms
0.01.017.771 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.017.772 I llama_perf_context_print:        eval time =     561.31 ms /     8 runs   (   70.16 ms per token,    14.25 tokens per second)
0.01.017.773 I llama_perf_context_print:       total time =     566.74 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.556 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.020.981 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.990 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.998 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.003 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.008 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.011 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.012 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.013 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.014 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.015 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.016 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.021 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.022 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.024 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.024 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.025 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.545 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.467 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.387 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.393 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.394 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.394 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.395 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.396 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.396 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.399 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.400 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.400 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.401 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.402 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.407 I llama_model_loader: - type  f32:   37 tensors
0.00.131.408 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.923 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.249 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.865 I llm_load_vocab: special tokens cache size = 5
0.00.269.086 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.103 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.104 I llm_load_print_meta: arch             = gemma
0.00.269.104 I llm_load_print_meta: vocab type       = SPM
0.00.269.105 I llm_load_print_meta: n_vocab          = 256000
0.00.269.105 I llm_load_print_meta: n_merges         = 0
0.00.269.106 I llm_load_print_meta: vocab_only       = 0
0.00.269.106 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.106 I llm_load_print_meta: n_embd           = 2048
0.00.269.107 I llm_load_print_meta: n_layer          = 18
0.00.269.117 I llm_load_print_meta: n_head           = 8
0.00.269.118 I llm_load_print_meta: n_head_kv        = 1
0.00.269.119 I llm_load_print_meta: n_rot            = 256
0.00.269.119 I llm_load_print_meta: n_swa            = 0
0.00.269.119 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.120 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.121 I llm_load_print_meta: n_gqa            = 8
0.00.269.122 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.123 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.123 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.124 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.125 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.125 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.126 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.127 I llm_load_print_meta: n_ff             = 16384
0.00.269.127 I llm_load_print_meta: n_expert         = 0
0.00.269.127 I llm_load_print_meta: n_expert_used    = 0
0.00.269.127 I llm_load_print_meta: causal attn      = 1
0.00.269.128 I llm_load_print_meta: pooling type     = 0
0.00.269.128 I llm_load_print_meta: rope type        = 2
0.00.269.128 I llm_load_print_meta: rope scaling     = linear
0.00.269.129 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.130 I llm_load_print_meta: freq_scale_train = 1
0.00.269.130 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.131 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.131 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.131 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.131 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.132 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.132 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.132 I llm_load_print_meta: model type       = 2B
0.00.269.133 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.134 I llm_load_print_meta: model params     = 2.51 B
0.00.269.135 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.135 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.136 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.136 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.136 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.137 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.137 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.137 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.138 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.138 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.138 I llm_load_print_meta: max token length = 93
0.00.340.733 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.340.740 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.217 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.223 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.224 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.224 I llama_new_context_with_model: n_batch       = 2048
0.00.346.224 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.225 I llama_new_context_with_model: flash_attn    = 0
0.00.346.228 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.229 I llama_new_context_with_model: freq_scale    = 1
0.00.346.229 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.602 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.616 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.717 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.065 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.072 I llama_new_context_with_model: graph nodes  = 601
0.00.363.072 I llama_new_context_with_model: graph splits = 1
0.00.363.074 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.337 I main: llama threadpool init, n_threads = 4
0.00.452.354 I 
0.00.452.442 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.452.445 I 
0.00.452.504 I sampler seed: 2345653292
0.00.452.516 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.523 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.524 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.524 I 
 increably in a magnificent display of spectral splendor.

This passage describes:

a) A meteor shower
b) A celestial phenomenon
c) A rainbow

0.02.866.817 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6512.73 tokens per second)
0.02.866.821 I llama_perf_context_print:        load time =     451.54 ms
0.02.866.822 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.866.823 I llama_perf_context_print:        eval time =    2394.74 ms /    32 runs   (   74.84 ms per token,    13.36 tokens per second)
0.02.866.824 I llama_perf_context_print:       total time =    2414.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.933s
user	0m24.276s
sys	0m9.257s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4192 (4a57d362)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40199.38 ms
main:    total time = 40199.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.566 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.195 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.206 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.214 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.219 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.220 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.223 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.224 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.225 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.226 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.227 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.227 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.230 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.231 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.232 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.232 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.232 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.321 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.640 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.541 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.548 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.549 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.549 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.550 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.551 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.552 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.554 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.555 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.556 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.556 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.557 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.560 I llama_model_loader: - type  f32:   37 tensors
0.00.132.561 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.563 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.722 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.311 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.862 I llm_load_vocab: special tokens cache size = 5
0.00.268.824 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.841 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.842 I llm_load_print_meta: arch             = gemma
0.00.268.842 I llm_load_print_meta: vocab type       = SPM
0.00.268.843 I llm_load_print_meta: n_vocab          = 256000
0.00.268.844 I llm_load_print_meta: n_merges         = 0
0.00.268.844 I llm_load_print_meta: vocab_only       = 0
0.00.268.845 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.845 I llm_load_print_meta: n_embd           = 2048
0.00.268.845 I llm_load_print_meta: n_layer          = 18
0.00.268.857 I llm_load_print_meta: n_head           = 8
0.00.268.858 I llm_load_print_meta: n_head_kv        = 1
0.00.268.858 I llm_load_print_meta: n_rot            = 256
0.00.268.859 I llm_load_print_meta: n_swa            = 0
0.00.268.859 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.859 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.860 I llm_load_print_meta: n_gqa            = 8
0.00.268.861 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.862 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.863 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.864 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.865 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.865 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.865 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.866 I llm_load_print_meta: n_ff             = 16384
0.00.268.866 I llm_load_print_meta: n_expert         = 0
0.00.268.867 I llm_load_print_meta: n_expert_used    = 0
0.00.268.867 I llm_load_print_meta: causal attn      = 1
0.00.268.867 I llm_load_print_meta: pooling type     = 0
0.00.268.868 I llm_load_print_meta: rope type        = 2
0.00.268.868 I llm_load_print_meta: rope scaling     = linear
0.00.268.869 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.870 I llm_load_print_meta: freq_scale_train = 1
0.00.268.870 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.871 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.871 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.871 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.871 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.872 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.872 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.872 I llm_load_print_meta: model type       = 2B
0.00.268.873 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.873 I llm_load_print_meta: model params     = 2.51 B
0.00.268.874 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.874 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.875 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.875 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.876 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.876 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.876 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.877 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.877 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.878 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.878 I llm_load_print_meta: max token length = 93
0.00.328.128 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.135 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.136 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.136 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.137 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.138 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.125 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.131 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.131 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.132 I llama_new_context_with_model: n_batch       = 2048
0.00.333.132 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.133 I llama_new_context_with_model: flash_attn    = 0
0.00.333.135 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.136 I llama_new_context_with_model: freq_scale    = 1
0.00.333.137 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.556 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.570 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.942 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.948 I llama_new_context_with_model: graph nodes  = 601
0.00.348.948 I llama_new_context_with_model: graph splits = 1
0.00.348.950 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.266 I main: llama threadpool init, n_threads = 4
0.00.423.281 I 
0.00.423.356 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.423.359 I 
0.00.423.404 I sampler seed: 2477592819
0.00.423.415 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.421 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.424 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.425 I 
 seconally in response to the question. [end of text]


0.00.875.256 I llama_perf_sampler_print:    sampling time =       1.43 ms /    10 runs   (    0.14 ms per token,  6983.24 tokens per second)
0.00.875.258 I llama_perf_context_print:        load time =     422.49 ms
0.00.875.260 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.875.262 I llama_perf_context_print:        eval time =     445.81 ms /     9 runs   (   49.53 ms per token,    20.19 tokens per second)
0.00.875.263 I llama_perf_context_print:       total time =     452.00 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4192 (4a57d362)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40179.93 ms
main:    total time = 40179.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.603 I build: 4192 (4a57d362) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.801 I main: llama backend init
0.00.000.808 I main: load the model and apply lora adapter, if any
0.00.020.858 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.875 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.883 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.884 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.889 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.889 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.890 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.890 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.891 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.891 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.897 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.897 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.898 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.899 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.768 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.522 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.529 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.529 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.530 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.530 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.531 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.532 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.535 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.535 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.538 I llama_model_loader: - type  f32:   37 tensors
0.00.133.539 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.540 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.551 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.100 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.701 I llm_load_vocab: special tokens cache size = 5
0.00.275.963 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.980 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.981 I llm_load_print_meta: arch             = gemma
0.00.275.982 I llm_load_print_meta: vocab type       = SPM
0.00.275.982 I llm_load_print_meta: n_vocab          = 256000
0.00.275.983 I llm_load_print_meta: n_merges         = 0
0.00.275.983 I llm_load_print_meta: vocab_only       = 0
0.00.275.983 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.983 I llm_load_print_meta: n_embd           = 2048
0.00.275.984 I llm_load_print_meta: n_layer          = 18
0.00.275.995 I llm_load_print_meta: n_head           = 8
0.00.275.996 I llm_load_print_meta: n_head_kv        = 1
0.00.275.996 I llm_load_print_meta: n_rot            = 256
0.00.275.997 I llm_load_print_meta: n_swa            = 0
0.00.275.997 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.997 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.998 I llm_load_print_meta: n_gqa            = 8
0.00.275.999 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.000 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.001 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.002 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.003 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.003 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.003 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.004 I llm_load_print_meta: n_ff             = 16384
0.00.276.005 I llm_load_print_meta: n_expert         = 0
0.00.276.005 I llm_load_print_meta: n_expert_used    = 0
0.00.276.005 I llm_load_print_meta: causal attn      = 1
0.00.276.005 I llm_load_print_meta: pooling type     = 0
0.00.276.005 I llm_load_print_meta: rope type        = 2
0.00.276.006 I llm_load_print_meta: rope scaling     = linear
0.00.276.007 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.008 I llm_load_print_meta: freq_scale_train = 1
0.00.276.008 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.009 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.009 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.009 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.010 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.010 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.010 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.011 I llm_load_print_meta: model type       = 2B
0.00.276.011 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.012 I llm_load_print_meta: model params     = 2.51 B
0.00.276.013 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.013 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.014 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.014 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.015 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.015 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.015 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.016 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.016 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.016 I llm_load_print_meta: max token length = 93
0.00.331.647 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.336.669 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.676 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.676 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.677 I llama_new_context_with_model: n_batch       = 2048
0.00.336.677 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.678 I llama_new_context_with_model: flash_attn    = 0
0.00.336.680 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.680 I llama_new_context_with_model: freq_scale    = 1
0.00.336.681 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.253 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.268 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.358 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.575 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.581 I llama_new_context_with_model: graph nodes  = 601
0.00.352.582 I llama_new_context_with_model: graph splits = 1
0.00.352.584 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.237 I main: llama threadpool init, n_threads = 4
0.00.427.252 I 
0.00.427.325 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.427.328 I 
0.00.427.371 I sampler seed: 2816002488
0.00.427.382 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.393 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.397 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.397 I 
 maneuortly.

I cannot answer this question because it contains inappropriate and sexually suggestive language. I am unable to provide responses that are sexually suggestive in nature.

0.02.001.549 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6444.05 tokens per second)
0.02.001.551 I llama_perf_context_print:        load time =     426.41 ms
0.02.001.552 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.001.554 I llama_perf_context_print:        eval time =    1555.27 ms /    32 runs   (   48.60 ms per token,    20.58 tokens per second)
0.02.001.554 I llama_perf_context_print:       total time =    1574.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.041s
user	10m19.727s
sys	0m6.924s
