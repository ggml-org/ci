+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.386 I main: llama backend init
0.00.000.392 I main: load the model and apply lora adapter, if any
0.00.020.839 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.849 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.860 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.866 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.869 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.872 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.873 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.874 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.875 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.875 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.876 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.880 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.881 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.882 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.883 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.884 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.046 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.678 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.472 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.478 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.478 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.479 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.479 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.481 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.481 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.483 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.484 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.485 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.486 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.486 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.489 I llama_model_loader: - type  f32:   37 tensors
0.00.129.490 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.684 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.924 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.529 I llm_load_vocab: special tokens cache size = 5
0.00.264.401 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.418 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.420 I llm_load_print_meta: arch             = gemma
0.00.264.420 I llm_load_print_meta: vocab type       = SPM
0.00.264.421 I llm_load_print_meta: n_vocab          = 256000
0.00.264.421 I llm_load_print_meta: n_merges         = 0
0.00.264.422 I llm_load_print_meta: vocab_only       = 0
0.00.264.422 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.423 I llm_load_print_meta: n_embd           = 2048
0.00.264.423 I llm_load_print_meta: n_layer          = 18
0.00.264.435 I llm_load_print_meta: n_head           = 8
0.00.264.438 I llm_load_print_meta: n_head_kv        = 1
0.00.264.438 I llm_load_print_meta: n_rot            = 256
0.00.264.438 I llm_load_print_meta: n_swa            = 0
0.00.264.439 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.439 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.440 I llm_load_print_meta: n_gqa            = 8
0.00.264.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.443 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.444 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.446 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.446 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.447 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.447 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.448 I llm_load_print_meta: n_ff             = 16384
0.00.264.449 I llm_load_print_meta: n_expert         = 0
0.00.264.450 I llm_load_print_meta: n_expert_used    = 0
0.00.264.450 I llm_load_print_meta: causal attn      = 1
0.00.264.450 I llm_load_print_meta: pooling type     = 0
0.00.264.451 I llm_load_print_meta: rope type        = 2
0.00.264.451 I llm_load_print_meta: rope scaling     = linear
0.00.264.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.453 I llm_load_print_meta: freq_scale_train = 1
0.00.264.453 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.454 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.454 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.454 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.454 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.455 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.455 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.457 I llm_load_print_meta: model type       = 2B
0.00.264.458 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.459 I llm_load_print_meta: model params     = 2.51 B
0.00.264.460 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.460 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.461 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.461 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.461 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.462 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.462 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.462 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.463 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.463 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.463 I llm_load_print_meta: max token length = 93
0.00.365.195 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.204 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.205 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.205 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.206 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.206 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.533 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.540 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.541 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.541 I llama_new_context_with_model: n_batch       = 2048
0.00.370.541 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.542 I llama_new_context_with_model: flash_attn    = 0
0.00.370.546 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.547 I llama_new_context_with_model: freq_scale    = 1
0.00.370.548 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.569 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.385.613 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.626 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.723 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.003 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.010 I llama_new_context_with_model: graph nodes  = 601
0.00.387.011 I llama_new_context_with_model: graph splits = 1
0.00.387.014 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.015 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.102 I main: llama threadpool init, n_threads = 4
0.00.475.119 I 
0.00.475.201 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.209 I 
0.00.475.247 I sampler seed: 1569582083
0.00.475.258 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.262 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.263 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.263 I 
 increamically. 

What is the next word in the sequence?

a) nimble
b) fragile
c) sturdy
d) resolute

The

0.02.729.499 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6707.32 tokens per second)
0.02.729.502 I llama_perf_context_print:        load time =     474.69 ms
0.02.729.504 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.729.517 I llama_perf_context_print:        eval time =    2234.86 ms /    32 runs   (   69.84 ms per token,    14.32 tokens per second)
0.02.729.518 I llama_perf_context_print:       total time =    2254.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.499 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.708 I main: llama backend init
0.00.000.714 I main: load the model and apply lora adapter, if any
0.00.021.242 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.253 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.260 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.261 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.264 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.265 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.266 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.276 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.277 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.279 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.375 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.584 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.412 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.419 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.419 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.420 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.421 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.422 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.422 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.426 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.426 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.427 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.427 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.428 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.433 I llama_model_loader: - type  f32:   37 tensors
0.00.130.434 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.367 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.317 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.903 I llm_load_vocab: special tokens cache size = 5
0.00.271.729 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.744 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.746 I llm_load_print_meta: arch             = gemma
0.00.271.747 I llm_load_print_meta: vocab type       = SPM
0.00.271.747 I llm_load_print_meta: n_vocab          = 256000
0.00.271.748 I llm_load_print_meta: n_merges         = 0
0.00.271.748 I llm_load_print_meta: vocab_only       = 0
0.00.271.748 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.748 I llm_load_print_meta: n_embd           = 2048
0.00.271.749 I llm_load_print_meta: n_layer          = 18
0.00.271.760 I llm_load_print_meta: n_head           = 8
0.00.271.762 I llm_load_print_meta: n_head_kv        = 1
0.00.271.762 I llm_load_print_meta: n_rot            = 256
0.00.271.762 I llm_load_print_meta: n_swa            = 0
0.00.271.763 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.763 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.765 I llm_load_print_meta: n_gqa            = 8
0.00.271.766 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.768 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.769 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.770 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.771 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.771 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.772 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.773 I llm_load_print_meta: n_ff             = 16384
0.00.271.774 I llm_load_print_meta: n_expert         = 0
0.00.271.774 I llm_load_print_meta: n_expert_used    = 0
0.00.271.775 I llm_load_print_meta: causal attn      = 1
0.00.271.775 I llm_load_print_meta: pooling type     = 0
0.00.271.775 I llm_load_print_meta: rope type        = 2
0.00.271.776 I llm_load_print_meta: rope scaling     = linear
0.00.271.777 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.778 I llm_load_print_meta: freq_scale_train = 1
0.00.271.778 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.779 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.779 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.779 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.779 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.780 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.780 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.782 I llm_load_print_meta: model type       = 2B
0.00.271.783 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.784 I llm_load_print_meta: model params     = 2.51 B
0.00.271.785 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.785 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.786 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.786 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.786 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.787 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.787 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.787 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.788 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.788 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.788 I llm_load_print_meta: max token length = 93
0.00.368.523 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.373.776 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.782 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.782 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.783 I llama_new_context_with_model: n_batch       = 2048
0.00.373.783 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.784 I llama_new_context_with_model: flash_attn    = 0
0.00.373.787 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.787 I llama_new_context_with_model: freq_scale    = 1
0.00.373.788 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.810 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.388.859 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.873 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.967 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.267 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.273 I llama_new_context_with_model: graph nodes  = 601
0.00.390.274 I llama_new_context_with_model: graph splits = 1
0.00.390.277 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.277 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.072 I main: llama threadpool init, n_threads = 4
0.00.472.087 I 
0.00.472.161 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.165 I 
0.00.472.198 I sampler seed: 2415736396
0.00.472.209 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.212 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.213 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.213 I 
 increasements. [end of text]


0.00.749.154 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8064.52 tokens per second)
0.00.749.156 I llama_perf_context_print:        load time =     471.34 ms
0.00.749.157 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.749.159 I llama_perf_context_print:        eval time =     273.62 ms /     4 runs   (   68.40 ms per token,    14.62 tokens per second)
0.00.749.159 I llama_perf_context_print:       total time =     277.09 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.548 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.197 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.207 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.217 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.223 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.227 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.230 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.231 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.233 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.234 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.235 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.240 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.241 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.242 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.243 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.244 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.755 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.460 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.612 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.620 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.620 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.621 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.622 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.623 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.624 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.627 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.627 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.628 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.628 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.629 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.633 I llama_model_loader: - type  f32:   37 tensors
0.00.131.635 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.589 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.703 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.316 I llm_load_vocab: special tokens cache size = 5
0.00.279.206 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.224 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.225 I llm_load_print_meta: arch             = gemma
0.00.279.226 I llm_load_print_meta: vocab type       = SPM
0.00.279.226 I llm_load_print_meta: n_vocab          = 256000
0.00.279.227 I llm_load_print_meta: n_merges         = 0
0.00.279.227 I llm_load_print_meta: vocab_only       = 0
0.00.279.227 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.227 I llm_load_print_meta: n_embd           = 2048
0.00.279.228 I llm_load_print_meta: n_layer          = 18
0.00.279.240 I llm_load_print_meta: n_head           = 8
0.00.279.242 I llm_load_print_meta: n_head_kv        = 1
0.00.279.243 I llm_load_print_meta: n_rot            = 256
0.00.279.243 I llm_load_print_meta: n_swa            = 0
0.00.279.243 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.243 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.245 I llm_load_print_meta: n_gqa            = 8
0.00.279.247 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.249 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.250 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.251 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.251 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.251 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.252 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.253 I llm_load_print_meta: n_ff             = 16384
0.00.279.253 I llm_load_print_meta: n_expert         = 0
0.00.279.254 I llm_load_print_meta: n_expert_used    = 0
0.00.279.254 I llm_load_print_meta: causal attn      = 1
0.00.279.255 I llm_load_print_meta: pooling type     = 0
0.00.279.255 I llm_load_print_meta: rope type        = 2
0.00.279.255 I llm_load_print_meta: rope scaling     = linear
0.00.279.256 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.257 I llm_load_print_meta: freq_scale_train = 1
0.00.279.257 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.258 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.258 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.258 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.258 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.259 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.259 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.260 I llm_load_print_meta: model type       = 2B
0.00.279.262 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.262 I llm_load_print_meta: model params     = 2.51 B
0.00.279.263 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.264 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.264 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.264 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.265 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.265 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.265 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.266 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.266 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.266 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.267 I llm_load_print_meta: max token length = 93
0.00.356.958 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.356.966 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.967 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.356.968 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.356.968 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.969 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.362.190 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.195 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.196 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.196 I llama_new_context_with_model: n_batch       = 2048
0.00.362.197 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.198 I llama_new_context_with_model: flash_attn    = 0
0.00.362.200 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.201 I llama_new_context_with_model: freq_scale    = 1
0.00.362.202 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.222 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.376.854 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.869 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.964 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.268 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.272 I llama_new_context_with_model: graph nodes  = 601
0.00.378.273 I llama_new_context_with_model: graph splits = 1
0.00.378.276 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.378.276 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.062 I main: llama threadpool init, n_threads = 4
0.00.466.078 I 
0.00.466.162 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.166 I 
0.00.466.203 I sampler seed: 2468518603
0.00.466.215 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.224 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.226 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.226 I 
 increably.

I am unable to understand the provided context and am therefore unable to extract the requested information. Please provide more context or clarify the provided information.

0.02.728.480 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6672.06 tokens per second)
0.02.728.483 I llama_perf_context_print:        load time =     465.28 ms
0.02.728.484 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.486 I llama_perf_context_print:        eval time =    2243.58 ms /    32 runs   (   70.11 ms per token,    14.26 tokens per second)
0.02.728.486 I llama_perf_context_print:       total time =    2262.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.195 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.407 I main: llama backend init
0.00.000.414 I main: load the model and apply lora adapter, if any
0.00.020.981 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.991 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.005 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.006 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.009 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.010 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.010 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.012 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.013 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.013 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.018 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.019 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.020 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.021 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.021 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.589 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.713 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.535 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.543 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.543 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.544 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.545 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.546 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.546 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.549 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.550 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.550 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.551 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.552 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.555 I llama_model_loader: - type  f32:   37 tensors
0.00.131.557 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.353 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.257 I llm_load_vocab: special tokens cache size = 5
0.00.279.263 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.279 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.280 I llm_load_print_meta: arch             = gemma
0.00.279.281 I llm_load_print_meta: vocab type       = SPM
0.00.279.282 I llm_load_print_meta: n_vocab          = 256000
0.00.279.282 I llm_load_print_meta: n_merges         = 0
0.00.279.282 I llm_load_print_meta: vocab_only       = 0
0.00.279.283 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.283 I llm_load_print_meta: n_embd           = 2048
0.00.279.283 I llm_load_print_meta: n_layer          = 18
0.00.279.295 I llm_load_print_meta: n_head           = 8
0.00.279.298 I llm_load_print_meta: n_head_kv        = 1
0.00.279.298 I llm_load_print_meta: n_rot            = 256
0.00.279.299 I llm_load_print_meta: n_swa            = 0
0.00.279.299 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.299 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.301 I llm_load_print_meta: n_gqa            = 8
0.00.279.302 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.304 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.305 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.306 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.306 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.307 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.307 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.308 I llm_load_print_meta: n_ff             = 16384
0.00.279.309 I llm_load_print_meta: n_expert         = 0
0.00.279.309 I llm_load_print_meta: n_expert_used    = 0
0.00.279.309 I llm_load_print_meta: causal attn      = 1
0.00.279.310 I llm_load_print_meta: pooling type     = 0
0.00.279.310 I llm_load_print_meta: rope type        = 2
0.00.279.310 I llm_load_print_meta: rope scaling     = linear
0.00.279.312 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.312 I llm_load_print_meta: freq_scale_train = 1
0.00.279.312 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.313 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.313 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.314 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.314 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.314 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.316 I llm_load_print_meta: model type       = 2B
0.00.279.317 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.317 I llm_load_print_meta: model params     = 2.51 B
0.00.279.318 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.319 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.319 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.320 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.320 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.321 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.321 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.321 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.322 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.322 I llm_load_print_meta: max token length = 93
0.00.350.834 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.350.841 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.356.200 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.205 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.205 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.205 I llama_new_context_with_model: n_batch       = 2048
0.00.356.205 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.206 I llama_new_context_with_model: flash_attn    = 0
0.00.356.209 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.209 I llama_new_context_with_model: freq_scale    = 1
0.00.356.210 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.235 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.370.850 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.862 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.954 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.245 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.252 I llama_new_context_with_model: graph nodes  = 601
0.00.372.252 I llama_new_context_with_model: graph splits = 1
0.00.372.255 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.372.256 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.486 I main: llama threadpool init, n_threads = 4
0.00.459.502 I 
0.00.459.584 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.589 I 
0.00.459.629 I sampler seed: 3897515289
0.00.459.642 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.648 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.649 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.649 I 
 increasities. It is important to note that the only correct answer is (a).

(a) The only correct answer is (a).

The given

0.02.885.435 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7006.37 tokens per second)
0.02.885.438 I llama_perf_context_print:        load time =     459.05 ms
0.02.885.440 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.885.442 I llama_perf_context_print:        eval time =    2406.95 ms /    32 runs   (   75.22 ms per token,    13.29 tokens per second)
0.02.885.443 I llama_perf_context_print:       total time =    2425.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.552s
user	0m31.754s
sys	0m9.398s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4423 (381ad835)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40343.32 ms
main:    total time = 40343.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.062 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.072 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.083 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.089 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.091 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.093 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.094 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.094 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.095 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.095 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.096 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.099 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.100 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.101 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.101 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.102 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.282 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.283 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.127 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.128 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.128 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.129 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.130 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.133 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.133 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.134 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.135 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.136 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.139 I llama_model_loader: - type  f32:   37 tensors
0.00.130.140 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.141 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.790 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.762 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.236 I llm_load_vocab: special tokens cache size = 5
0.00.263.898 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.916 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.917 I llm_load_print_meta: arch             = gemma
0.00.263.918 I llm_load_print_meta: vocab type       = SPM
0.00.263.919 I llm_load_print_meta: n_vocab          = 256000
0.00.263.919 I llm_load_print_meta: n_merges         = 0
0.00.263.919 I llm_load_print_meta: vocab_only       = 0
0.00.263.920 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.920 I llm_load_print_meta: n_embd           = 2048
0.00.263.920 I llm_load_print_meta: n_layer          = 18
0.00.263.931 I llm_load_print_meta: n_head           = 8
0.00.263.933 I llm_load_print_meta: n_head_kv        = 1
0.00.263.933 I llm_load_print_meta: n_rot            = 256
0.00.263.934 I llm_load_print_meta: n_swa            = 0
0.00.263.934 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.934 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.936 I llm_load_print_meta: n_gqa            = 8
0.00.263.938 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.939 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.940 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.941 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.942 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.942 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.943 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.944 I llm_load_print_meta: n_ff             = 16384
0.00.263.944 I llm_load_print_meta: n_expert         = 0
0.00.263.945 I llm_load_print_meta: n_expert_used    = 0
0.00.263.945 I llm_load_print_meta: causal attn      = 1
0.00.263.945 I llm_load_print_meta: pooling type     = 0
0.00.263.946 I llm_load_print_meta: rope type        = 2
0.00.263.946 I llm_load_print_meta: rope scaling     = linear
0.00.263.947 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.948 I llm_load_print_meta: freq_scale_train = 1
0.00.263.948 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.948 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.949 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.949 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.950 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.950 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.950 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.952 I llm_load_print_meta: model type       = 2B
0.00.263.953 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.954 I llm_load_print_meta: model params     = 2.51 B
0.00.263.955 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.955 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.955 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.956 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.956 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.957 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.957 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.957 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.958 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.958 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.958 I llm_load_print_meta: max token length = 93
0.00.323.897 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.904 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.905 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.906 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.906 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.907 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.059 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.066 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.066 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.067 I llama_new_context_with_model: n_batch       = 2048
0.00.329.067 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.068 I llama_new_context_with_model: flash_attn    = 0
0.00.329.070 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.071 I llama_new_context_with_model: freq_scale    = 1
0.00.329.072 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.329.092 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.343.305 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.317 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.408 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.670 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.676 I llama_new_context_with_model: graph nodes  = 601
0.00.344.677 I llama_new_context_with_model: graph splits = 1
0.00.344.680 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.344.680 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.188 I main: llama threadpool init, n_threads = 4
0.00.420.205 I 
0.00.420.277 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.280 I 
0.00.420.311 I sampler seed: 1981226564
0.00.420.322 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.335 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.339 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.339 I 
 maneustalline patterns formed during the solidification of a molten metal, are known as dendrites. Dendrites are fascinating structures that offer insights into the solidification process

0.02.009.730 I llama_perf_sampler_print:    sampling time =       5.55 ms /    33 runs   (    0.17 ms per token,  5942.73 tokens per second)
0.02.009.732 I llama_perf_context_print:        load time =     419.44 ms
0.02.009.734 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.009.735 I llama_perf_context_print:        eval time =    1570.23 ms /    32 runs   (   49.07 ms per token,    20.38 tokens per second)
0.02.009.736 I llama_perf_context_print:       total time =    1589.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4423 (381ad835)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40204.58 ms
main:    total time = 40204.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.166 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.370 I main: load the model and apply lora adapter, if any
0.00.020.576 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.591 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.598 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.601 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.604 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.604 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.606 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.606 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.607 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.607 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.611 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.611 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.612 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.612 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.613 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.324 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.053 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.307 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.313 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.313 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.314 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.314 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.315 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.316 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.319 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.319 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.322 I llama_model_loader: - type  f32:   37 tensors
0.00.130.323 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.324 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.229 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.484 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.124 I llm_load_vocab: special tokens cache size = 5
0.00.269.015 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.029 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.031 I llm_load_print_meta: arch             = gemma
0.00.269.031 I llm_load_print_meta: vocab type       = SPM
0.00.269.032 I llm_load_print_meta: n_vocab          = 256000
0.00.269.032 I llm_load_print_meta: n_merges         = 0
0.00.269.033 I llm_load_print_meta: vocab_only       = 0
0.00.269.033 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.033 I llm_load_print_meta: n_embd           = 2048
0.00.269.033 I llm_load_print_meta: n_layer          = 18
0.00.269.046 I llm_load_print_meta: n_head           = 8
0.00.269.048 I llm_load_print_meta: n_head_kv        = 1
0.00.269.048 I llm_load_print_meta: n_rot            = 256
0.00.269.049 I llm_load_print_meta: n_swa            = 0
0.00.269.049 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.049 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.051 I llm_load_print_meta: n_gqa            = 8
0.00.269.052 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.054 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.055 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.056 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.056 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.057 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.057 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.058 I llm_load_print_meta: n_ff             = 16384
0.00.269.059 I llm_load_print_meta: n_expert         = 0
0.00.269.059 I llm_load_print_meta: n_expert_used    = 0
0.00.269.059 I llm_load_print_meta: causal attn      = 1
0.00.269.059 I llm_load_print_meta: pooling type     = 0
0.00.269.060 I llm_load_print_meta: rope type        = 2
0.00.269.060 I llm_load_print_meta: rope scaling     = linear
0.00.269.062 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.062 I llm_load_print_meta: freq_scale_train = 1
0.00.269.062 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.063 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.063 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.064 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.064 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.064 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.066 I llm_load_print_meta: model type       = 2B
0.00.269.067 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.068 I llm_load_print_meta: model params     = 2.51 B
0.00.269.069 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.069 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.070 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.070 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.070 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.071 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.071 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.071 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.072 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.072 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.072 I llm_load_print_meta: max token length = 93
0.00.327.275 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.239 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.244 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.245 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.245 I llama_new_context_with_model: n_batch       = 2048
0.00.332.246 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.247 I llama_new_context_with_model: flash_attn    = 0
0.00.332.249 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.250 I llama_new_context_with_model: freq_scale    = 1
0.00.332.251 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.332.270 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.347.490 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.504 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.598 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.830 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.836 I llama_new_context_with_model: graph nodes  = 601
0.00.348.837 I llama_new_context_with_model: graph splits = 1
0.00.348.840 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.840 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.358 I main: llama threadpool init, n_threads = 4
0.00.423.374 I 
0.00.423.455 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.458 I 
0.00.423.492 I sampler seed: 2756076805
0.00.423.506 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.520 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.523 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.524 I 
 seconded by a vast array of interconnected nodes and branches. The nodes are organized hierarchically, forming a nested structure. The branches connect the nodes in a hierarchical

0.01.984.616 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6741.57 tokens per second)
0.01.984.619 I llama_perf_context_print:        load time =     422.97 ms
0.01.984.620 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.984.621 I llama_perf_context_print:        eval time =    1542.59 ms /    32 runs   (   48.21 ms per token,    20.74 tokens per second)
0.01.984.622 I llama_perf_context_print:       total time =    1561.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.329s
user	10m24.172s
sys	0m6.807s
