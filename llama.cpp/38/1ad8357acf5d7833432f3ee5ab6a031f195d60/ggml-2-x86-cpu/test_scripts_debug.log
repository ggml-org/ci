+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.023.457 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.469 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.562 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.567 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.569 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.570 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.571 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.573 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.574 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.582 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.583 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.585 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.586 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.870 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.540 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.541 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.550 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.556 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.557 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.561 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.588 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.592 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.594 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.595 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.604 I llama_model_loader: - type  f32:   37 tensors
0.00.348.606 I llama_model_loader: - type q8_0:  127 tensors
0.00.567.084 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.624.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.625.591 I llm_load_vocab: special tokens cache size = 5
0.00.830.426 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.496 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.503 I llm_load_print_meta: arch             = gemma
0.00.830.504 I llm_load_print_meta: vocab type       = SPM
0.00.830.505 I llm_load_print_meta: n_vocab          = 256000
0.00.830.508 I llm_load_print_meta: n_merges         = 0
0.00.830.509 I llm_load_print_meta: vocab_only       = 0
0.00.830.509 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.510 I llm_load_print_meta: n_embd           = 2048
0.00.830.513 I llm_load_print_meta: n_layer          = 18
0.00.830.577 I llm_load_print_meta: n_head           = 8
0.00.830.587 I llm_load_print_meta: n_head_kv        = 1
0.00.830.589 I llm_load_print_meta: n_rot            = 256
0.00.830.589 I llm_load_print_meta: n_swa            = 0
0.00.830.590 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.591 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.595 I llm_load_print_meta: n_gqa            = 8
0.00.830.600 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.606 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.608 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.610 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.610 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.611 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.614 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.619 I llm_load_print_meta: n_ff             = 16384
0.00.830.620 I llm_load_print_meta: n_expert         = 0
0.00.830.621 I llm_load_print_meta: n_expert_used    = 0
0.00.830.622 I llm_load_print_meta: causal attn      = 1
0.00.830.622 I llm_load_print_meta: pooling type     = 0
0.00.830.623 I llm_load_print_meta: rope type        = 2
0.00.830.624 I llm_load_print_meta: rope scaling     = linear
0.00.830.626 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.627 I llm_load_print_meta: freq_scale_train = 1
0.00.830.627 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.628 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.628 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.629 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.629 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.632 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.632 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.635 I llm_load_print_meta: model type       = 2B
0.00.830.637 I llm_load_print_meta: model ftype      = Q8_0
0.00.830.638 I llm_load_print_meta: model params     = 2.51 B
0.00.830.639 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.830.640 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.642 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.642 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.643 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.643 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.643 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.644 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.649 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.651 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.651 I llm_load_print_meta: max token length = 93
0.00.934.805 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.934.815 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.934.816 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.934.816 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.934.817 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.934.818 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.940.761 I llama_new_context_with_model: n_seq_max     = 1
0.00.940.768 I llama_new_context_with_model: n_ctx         = 4096
0.00.940.768 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.940.769 I llama_new_context_with_model: n_batch       = 2048
0.00.940.769 I llama_new_context_with_model: n_ubatch      = 512
0.00.940.770 I llama_new_context_with_model: flash_attn    = 0
0.00.940.772 I llama_new_context_with_model: freq_base     = 10000.0
0.00.940.772 I llama_new_context_with_model: freq_scale    = 1
0.00.940.773 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.940.859 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.955.469 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.510 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.955.623 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.292 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.296 I llama_new_context_with_model: graph nodes  = 601
0.00.958.297 I llama_new_context_with_model: graph splits = 1
0.00.958.321 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.958.324 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.567.416 I main: llama threadpool init, n_threads = 4
0.01.567.431 I 
0.01.567.548 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.567.552 I 
0.01.567.777 I sampler seed: 1846613122
0.01.567.790 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.567.800 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.567.803 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.567.803 I 
 increasities with a unique and vibrant design.

**Features:**

* Bold and eye-catching prints that capture attention
* Vibrant and unique color combinations

0.15.001.772 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   664.99 tokens per second)
0.15.001.788 I llama_perf_context_print:        load time =    1566.45 ms
0.15.001.789 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.001.791 I llama_perf_context_print:        eval time =   13348.34 ms /    32 runs   (  417.14 ms per token,     2.40 tokens per second)
0.15.001.792 I llama_perf_context_print:       total time =   13434.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.232 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.325 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.340 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.343 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.351 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.353 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.355 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.356 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.369 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.371 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.373 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.375 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.376 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.489 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.259 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.199 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.207 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.209 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.210 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.211 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.213 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.214 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.218 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.220 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.221 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.222 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.224 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.232 I llama_model_loader: - type  f32:   37 tensors
0.00.349.234 I llama_model_loader: - type q8_0:  127 tensors
0.00.561.311 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.318 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.338 I llm_load_vocab: special tokens cache size = 5
0.00.852.428 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.852.502 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.852.507 I llm_load_print_meta: arch             = gemma
0.00.852.507 I llm_load_print_meta: vocab type       = SPM
0.00.852.508 I llm_load_print_meta: n_vocab          = 256000
0.00.852.511 I llm_load_print_meta: n_merges         = 0
0.00.852.511 I llm_load_print_meta: vocab_only       = 0
0.00.852.511 I llm_load_print_meta: n_ctx_train      = 8192
0.00.852.512 I llm_load_print_meta: n_embd           = 2048
0.00.852.512 I llm_load_print_meta: n_layer          = 18
0.00.852.577 I llm_load_print_meta: n_head           = 8
0.00.852.585 I llm_load_print_meta: n_head_kv        = 1
0.00.852.586 I llm_load_print_meta: n_rot            = 256
0.00.852.587 I llm_load_print_meta: n_swa            = 0
0.00.852.587 I llm_load_print_meta: n_embd_head_k    = 256
0.00.852.587 I llm_load_print_meta: n_embd_head_v    = 256
0.00.852.592 I llm_load_print_meta: n_gqa            = 8
0.00.852.597 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.852.602 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.852.606 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.852.607 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.852.608 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.852.608 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.852.609 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.852.614 I llm_load_print_meta: n_ff             = 16384
0.00.852.614 I llm_load_print_meta: n_expert         = 0
0.00.852.615 I llm_load_print_meta: n_expert_used    = 0
0.00.852.616 I llm_load_print_meta: causal attn      = 1
0.00.852.616 I llm_load_print_meta: pooling type     = 0
0.00.852.616 I llm_load_print_meta: rope type        = 2
0.00.852.618 I llm_load_print_meta: rope scaling     = linear
0.00.852.620 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.852.621 I llm_load_print_meta: freq_scale_train = 1
0.00.852.621 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.852.622 I llm_load_print_meta: rope_finetuned   = unknown
0.00.852.622 I llm_load_print_meta: ssm_d_conv       = 0
0.00.852.623 I llm_load_print_meta: ssm_d_inner      = 0
0.00.852.623 I llm_load_print_meta: ssm_d_state      = 0
0.00.852.623 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.852.624 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.852.627 I llm_load_print_meta: model type       = 2B
0.00.852.629 I llm_load_print_meta: model ftype      = Q8_0
0.00.852.630 I llm_load_print_meta: model params     = 2.51 B
0.00.852.631 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.852.632 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.852.633 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.852.633 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.852.633 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.852.634 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.852.635 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.852.635 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.852.641 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.852.642 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.852.643 I llm_load_print_meta: max token length = 93
0.00.950.055 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.956.051 I llama_new_context_with_model: n_seq_max     = 1
0.00.956.058 I llama_new_context_with_model: n_ctx         = 4096
0.00.956.058 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.956.059 I llama_new_context_with_model: n_batch       = 2048
0.00.956.059 I llama_new_context_with_model: n_ubatch      = 512
0.00.956.059 I llama_new_context_with_model: flash_attn    = 0
0.00.956.061 I llama_new_context_with_model: freq_base     = 10000.0
0.00.956.062 I llama_new_context_with_model: freq_scale    = 1
0.00.956.063 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.956.154 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.971.403 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.971.447 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.971.561 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.974.217 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.974.220 I llama_new_context_with_model: graph nodes  = 601
0.00.974.221 I llama_new_context_with_model: graph splits = 1
0.00.974.247 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.974.250 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.585.376 I main: llama threadpool init, n_threads = 4
0.01.585.393 I 
0.01.585.519 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.585.522 I 
0.01.585.752 I sampler seed: 4104061114
0.01.585.766 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.585.779 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.585.779 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.585.780 I 
 increasities, and all such like absurdities, which are inherent to the human condition and which serve to make life more interesting and perplexing. [end of text]


0.13.898.955 I llama_perf_sampler_print:    sampling time =      45.20 ms /    30 runs   (    1.51 ms per token,   663.79 tokens per second)
0.13.898.958 I llama_perf_context_print:        load time =    1584.43 ms
0.13.898.959 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.898.961 I llama_perf_context_print:        eval time =   12234.92 ms /    29 runs   (  421.89 ms per token,     2.37 tokens per second)
0.13.898.962 I llama_perf_context_print:       total time =   12313.59 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.855 I main: load the model and apply lora adapter, if any
0.00.024.021 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.033 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.115 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.128 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.130 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.134 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.135 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.138 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.139 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.141 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.142 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.148 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.150 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.152 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.153 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.154 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.303 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.608 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.589 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.597 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.599 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.600 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.602 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.603 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.604 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.608 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.610 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.611 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.612 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.614 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.621 I llama_model_loader: - type  f32:   37 tensors
0.00.349.623 I llama_model_loader: - type q8_0:  127 tensors
0.00.558.388 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.618.743 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.619.648 I llm_load_vocab: special tokens cache size = 5
0.00.824.018 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.824.096 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.824.101 I llm_load_print_meta: arch             = gemma
0.00.824.101 I llm_load_print_meta: vocab type       = SPM
0.00.824.103 I llm_load_print_meta: n_vocab          = 256000
0.00.824.105 I llm_load_print_meta: n_merges         = 0
0.00.824.105 I llm_load_print_meta: vocab_only       = 0
0.00.824.106 I llm_load_print_meta: n_ctx_train      = 8192
0.00.824.106 I llm_load_print_meta: n_embd           = 2048
0.00.824.106 I llm_load_print_meta: n_layer          = 18
0.00.824.171 I llm_load_print_meta: n_head           = 8
0.00.824.179 I llm_load_print_meta: n_head_kv        = 1
0.00.824.180 I llm_load_print_meta: n_rot            = 256
0.00.824.181 I llm_load_print_meta: n_swa            = 0
0.00.824.181 I llm_load_print_meta: n_embd_head_k    = 256
0.00.824.182 I llm_load_print_meta: n_embd_head_v    = 256
0.00.824.189 I llm_load_print_meta: n_gqa            = 8
0.00.824.197 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.824.204 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.824.213 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.824.214 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.824.215 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.824.216 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.824.217 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.824.223 I llm_load_print_meta: n_ff             = 16384
0.00.824.225 I llm_load_print_meta: n_expert         = 0
0.00.824.225 I llm_load_print_meta: n_expert_used    = 0
0.00.824.226 I llm_load_print_meta: causal attn      = 1
0.00.824.227 I llm_load_print_meta: pooling type     = 0
0.00.824.228 I llm_load_print_meta: rope type        = 2
0.00.824.229 I llm_load_print_meta: rope scaling     = linear
0.00.824.231 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.824.232 I llm_load_print_meta: freq_scale_train = 1
0.00.824.233 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.824.234 I llm_load_print_meta: rope_finetuned   = unknown
0.00.824.234 I llm_load_print_meta: ssm_d_conv       = 0
0.00.824.235 I llm_load_print_meta: ssm_d_inner      = 0
0.00.824.236 I llm_load_print_meta: ssm_d_state      = 0
0.00.824.237 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.824.238 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.824.242 I llm_load_print_meta: model type       = 2B
0.00.824.244 I llm_load_print_meta: model ftype      = Q8_0
0.00.824.245 I llm_load_print_meta: model params     = 2.51 B
0.00.824.247 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.824.248 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.824.248 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.824.249 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.824.250 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.824.251 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.824.252 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.824.252 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.824.259 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.824.261 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.824.262 I llm_load_print_meta: max token length = 93
0.00.903.153 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.903.163 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.903.165 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.903.165 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.903.166 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.903.167 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.909.427 I llama_new_context_with_model: n_seq_max     = 1
0.00.909.434 I llama_new_context_with_model: n_ctx         = 4096
0.00.909.434 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.909.435 I llama_new_context_with_model: n_batch       = 2048
0.00.909.435 I llama_new_context_with_model: n_ubatch      = 512
0.00.909.436 I llama_new_context_with_model: flash_attn    = 0
0.00.909.438 I llama_new_context_with_model: freq_base     = 10000.0
0.00.909.439 I llama_new_context_with_model: freq_scale    = 1
0.00.909.440 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.534 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.924.137 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.924.178 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.924.295 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.926.907 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.926.911 I llama_new_context_with_model: graph nodes  = 601
0.00.926.911 I llama_new_context_with_model: graph splits = 1
0.00.926.939 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.926.943 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.535.335 I main: llama threadpool init, n_threads = 4
0.01.535.352 I 
0.01.535.471 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.535.475 I 
0.01.535.701 I sampler seed: 231429994
0.01.535.716 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.535.726 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.535.729 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.535.730 I 
 increasities of the past, and the emergence of a new era of human consciousness. [end of text]


0.09.129.861 I llama_perf_sampler_print:    sampling time =      28.11 ms /    19 runs   (    1.48 ms per token,   675.84 tokens per second)
0.09.129.864 I llama_perf_context_print:        load time =    1534.38 ms
0.09.129.865 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.129.879 I llama_perf_context_print:        eval time =    7545.72 ms /    18 runs   (  419.21 ms per token,     2.39 tokens per second)
0.09.129.880 I llama_perf_context_print:       total time =    7594.54 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.402 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.413 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.497 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.509 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.513 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.517 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.519 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.520 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.522 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.523 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.525 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.531 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.535 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.536 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.537 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.547 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.673 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.076 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.058 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.068 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.070 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.071 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.072 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.074 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.075 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.080 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.081 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.082 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.083 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.085 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.094 I llama_model_loader: - type  f32:   37 tensors
0.00.352.096 I llama_model_loader: - type q8_0:  127 tensors
0.00.573.622 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.738 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.599 I llm_load_vocab: special tokens cache size = 5
0.00.852.269 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.852.342 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.852.350 I llm_load_print_meta: arch             = gemma
0.00.852.350 I llm_load_print_meta: vocab type       = SPM
0.00.852.351 I llm_load_print_meta: n_vocab          = 256000
0.00.852.354 I llm_load_print_meta: n_merges         = 0
0.00.852.354 I llm_load_print_meta: vocab_only       = 0
0.00.852.355 I llm_load_print_meta: n_ctx_train      = 8192
0.00.852.356 I llm_load_print_meta: n_embd           = 2048
0.00.852.357 I llm_load_print_meta: n_layer          = 18
0.00.852.420 I llm_load_print_meta: n_head           = 8
0.00.852.429 I llm_load_print_meta: n_head_kv        = 1
0.00.852.430 I llm_load_print_meta: n_rot            = 256
0.00.852.431 I llm_load_print_meta: n_swa            = 0
0.00.852.431 I llm_load_print_meta: n_embd_head_k    = 256
0.00.852.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.852.437 I llm_load_print_meta: n_gqa            = 8
0.00.852.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.852.448 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.852.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.852.451 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.852.451 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.852.451 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.852.460 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.852.465 I llm_load_print_meta: n_ff             = 16384
0.00.852.466 I llm_load_print_meta: n_expert         = 0
0.00.852.467 I llm_load_print_meta: n_expert_used    = 0
0.00.852.467 I llm_load_print_meta: causal attn      = 1
0.00.852.468 I llm_load_print_meta: pooling type     = 0
0.00.852.468 I llm_load_print_meta: rope type        = 2
0.00.852.471 I llm_load_print_meta: rope scaling     = linear
0.00.852.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.852.473 I llm_load_print_meta: freq_scale_train = 1
0.00.852.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.852.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.852.474 I llm_load_print_meta: ssm_d_conv       = 0
0.00.852.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.852.475 I llm_load_print_meta: ssm_d_state      = 0
0.00.852.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.852.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.852.479 I llm_load_print_meta: model type       = 2B
0.00.852.480 I llm_load_print_meta: model ftype      = Q8_0
0.00.852.481 I llm_load_print_meta: model params     = 2.51 B
0.00.852.482 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.852.482 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.852.483 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.852.484 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.852.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.852.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.852.485 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.852.486 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.852.492 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.852.493 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.852.494 I llm_load_print_meta: max token length = 93
0.00.925.293 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.925.303 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.931.146 I llama_new_context_with_model: n_seq_max     = 1
0.00.931.153 I llama_new_context_with_model: n_ctx         = 4096
0.00.931.154 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.931.154 I llama_new_context_with_model: n_batch       = 2048
0.00.931.155 I llama_new_context_with_model: n_ubatch      = 512
0.00.931.155 I llama_new_context_with_model: flash_attn    = 0
0.00.931.157 I llama_new_context_with_model: freq_base     = 10000.0
0.00.931.158 I llama_new_context_with_model: freq_scale    = 1
0.00.931.159 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.931.247 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.946.223 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.946.267 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.946.394 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.949.059 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.949.063 I llama_new_context_with_model: graph nodes  = 601
0.00.949.063 I llama_new_context_with_model: graph splits = 1
0.00.949.089 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.949.092 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.560.555 I main: llama threadpool init, n_threads = 4
0.01.560.570 I 
0.01.560.685 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.560.689 I 
0.01.560.909 I sampler seed: 2765728663
0.01.560.924 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.560.936 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.560.937 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.560.937 I 
 increasities.

I am unable to generate a response as the context provided contains sexually suggestive and inappropriate content that is not appropriate for me to generate. [end of text]


0.14.597.265 I llama_perf_sampler_print:    sampling time =      48.01 ms /    32 runs   (    1.50 ms per token,   666.60 tokens per second)
0.14.597.268 I llama_perf_context_print:        load time =    1559.60 ms
0.14.597.278 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.597.281 I llama_perf_context_print:        eval time =   12954.13 ms /    31 runs   (  417.88 ms per token,     2.39 tokens per second)
0.14.597.282 I llama_perf_context_print:       total time =   13036.72 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.212s
user	3m19.120s
sys	0m9.354s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4423 (381ad835)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186172.04 ms
main:    total time = 186172.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.023.708 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.723 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.820 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.834 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.838 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.844 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.845 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.846 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.849 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.852 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.859 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.863 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.864 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.866 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.867 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.244.917 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.346.664 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.370.617 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.370.626 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.370.627 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.370.628 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.370.630 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.370.632 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.370.633 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.370.637 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.370.638 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.370.639 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.370.640 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.370.642 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.370.650 I llama_model_loader: - type  f32:   37 tensors
0.00.370.653 I llama_model_loader: - type q4_K:  108 tensors
0.00.370.654 I llama_model_loader: - type q6_K:   19 tensors
0.00.585.715 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.448 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.335 I llm_load_vocab: special tokens cache size = 5
0.00.860.134 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.860.204 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.860.209 I llm_load_print_meta: arch             = gemma
0.00.860.209 I llm_load_print_meta: vocab type       = SPM
0.00.860.210 I llm_load_print_meta: n_vocab          = 256000
0.00.860.212 I llm_load_print_meta: n_merges         = 0
0.00.860.213 I llm_load_print_meta: vocab_only       = 0
0.00.860.213 I llm_load_print_meta: n_ctx_train      = 8192
0.00.860.214 I llm_load_print_meta: n_embd           = 2048
0.00.860.214 I llm_load_print_meta: n_layer          = 18
0.00.860.279 I llm_load_print_meta: n_head           = 8
0.00.860.288 I llm_load_print_meta: n_head_kv        = 1
0.00.860.289 I llm_load_print_meta: n_rot            = 256
0.00.860.290 I llm_load_print_meta: n_swa            = 0
0.00.860.290 I llm_load_print_meta: n_embd_head_k    = 256
0.00.860.291 I llm_load_print_meta: n_embd_head_v    = 256
0.00.860.296 I llm_load_print_meta: n_gqa            = 8
0.00.860.300 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.860.309 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.860.310 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.860.312 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.860.312 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.860.330 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.860.333 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.860.339 I llm_load_print_meta: n_ff             = 16384
0.00.860.339 I llm_load_print_meta: n_expert         = 0
0.00.860.340 I llm_load_print_meta: n_expert_used    = 0
0.00.860.340 I llm_load_print_meta: causal attn      = 1
0.00.860.340 I llm_load_print_meta: pooling type     = 0
0.00.860.340 I llm_load_print_meta: rope type        = 2
0.00.860.348 I llm_load_print_meta: rope scaling     = linear
0.00.860.350 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.860.351 I llm_load_print_meta: freq_scale_train = 1
0.00.860.351 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.860.352 I llm_load_print_meta: rope_finetuned   = unknown
0.00.860.352 I llm_load_print_meta: ssm_d_conv       = 0
0.00.860.353 I llm_load_print_meta: ssm_d_inner      = 0
0.00.860.354 I llm_load_print_meta: ssm_d_state      = 0
0.00.860.354 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.860.355 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.860.359 I llm_load_print_meta: model type       = 2B
0.00.860.361 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.860.362 I llm_load_print_meta: model params     = 2.51 B
0.00.860.363 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.860.364 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.860.365 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.860.372 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.860.373 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.860.373 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.860.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.860.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.860.382 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.860.384 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.860.385 I llm_load_print_meta: max token length = 93
0.00.924.114 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.924.121 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.924.122 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.924.123 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.924.123 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.924.124 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.929.992 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.999 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.999 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.000 I llama_new_context_with_model: n_batch       = 2048
0.00.930.000 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.000 I llama_new_context_with_model: flash_attn    = 0
0.00.930.003 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.004 I llama_new_context_with_model: freq_scale    = 1
0.00.930.004 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.930.091 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.944.764 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.801 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.944.917 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.565 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.569 I llama_new_context_with_model: graph nodes  = 601
0.00.947.569 I llama_new_context_with_model: graph splits = 1
0.00.947.596 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.947.599 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.527.061 I main: llama threadpool init, n_threads = 4
0.01.527.077 I 
0.01.527.195 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.527.199 I 
0.01.527.425 I sampler seed: 2167291063
0.01.527.439 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.527.450 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.527.453 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.527.453 I 
 seconally. I have a question about a specific design pattern.

**Design Pattern Question:**

I'm trying to implement a Decorator pattern in a

0.12.657.503 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.66 tokens per second)
0.12.657.506 I llama_perf_context_print:        load time =    1526.11 ms
0.12.657.508 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.657.510 I llama_perf_context_print:        eval time =   11043.85 ms /    32 runs   (  345.12 ms per token,     2.90 tokens per second)
0.12.657.532 I llama_perf_context_print:       total time =   11130.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4423 (381ad835)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186900.65 ms
main:    total time = 186900.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4423 (381ad835) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.022.967 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.071 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.087 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.093 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.098 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.101 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.106 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.108 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.110 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.113 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.120 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.126 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.128 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.131 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.133 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.315 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.729 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.677 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.687 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.688 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.690 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.691 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.693 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.694 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.698 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.699 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.707 I llama_model_loader: - type  f32:   37 tensors
0.00.348.709 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.709 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.963 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.636.278 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.637.251 I llm_load_vocab: special tokens cache size = 5
0.00.852.816 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.852.893 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.852.897 I llm_load_print_meta: arch             = gemma
0.00.852.898 I llm_load_print_meta: vocab type       = SPM
0.00.852.900 I llm_load_print_meta: n_vocab          = 256000
0.00.852.902 I llm_load_print_meta: n_merges         = 0
0.00.852.902 I llm_load_print_meta: vocab_only       = 0
0.00.852.903 I llm_load_print_meta: n_ctx_train      = 8192
0.00.852.903 I llm_load_print_meta: n_embd           = 2048
0.00.852.903 I llm_load_print_meta: n_layer          = 18
0.00.852.967 I llm_load_print_meta: n_head           = 8
0.00.852.974 I llm_load_print_meta: n_head_kv        = 1
0.00.852.975 I llm_load_print_meta: n_rot            = 256
0.00.852.975 I llm_load_print_meta: n_swa            = 0
0.00.852.976 I llm_load_print_meta: n_embd_head_k    = 256
0.00.852.976 I llm_load_print_meta: n_embd_head_v    = 256
0.00.852.983 I llm_load_print_meta: n_gqa            = 8
0.00.852.990 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.852.998 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.000 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.002 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.002 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.004 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.004 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.011 I llm_load_print_meta: n_ff             = 16384
0.00.853.012 I llm_load_print_meta: n_expert         = 0
0.00.853.013 I llm_load_print_meta: n_expert_used    = 0
0.00.853.013 I llm_load_print_meta: causal attn      = 1
0.00.853.015 I llm_load_print_meta: pooling type     = 0
0.00.853.015 I llm_load_print_meta: rope type        = 2
0.00.853.021 I llm_load_print_meta: rope scaling     = linear
0.00.853.032 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.035 I llm_load_print_meta: freq_scale_train = 1
0.00.853.036 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.036 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.037 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.037 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.038 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.038 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.039 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.044 I llm_load_print_meta: model type       = 2B
0.00.853.046 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.853.048 I llm_load_print_meta: model params     = 2.51 B
0.00.853.049 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.853.049 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.051 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.051 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.052 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.053 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.054 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.058 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.065 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.067 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.068 I llm_load_print_meta: max token length = 93
0.00.913.133 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.919.172 I llama_new_context_with_model: n_seq_max     = 1
0.00.919.180 I llama_new_context_with_model: n_ctx         = 4096
0.00.919.180 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.919.181 I llama_new_context_with_model: n_batch       = 2048
0.00.919.181 I llama_new_context_with_model: n_ubatch      = 512
0.00.919.181 I llama_new_context_with_model: flash_attn    = 0
0.00.919.184 I llama_new_context_with_model: freq_base     = 10000.0
0.00.919.185 I llama_new_context_with_model: freq_scale    = 1
0.00.919.186 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.919.279 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.934.250 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.934.290 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.934.406 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.937.015 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.937.019 I llama_new_context_with_model: graph nodes  = 601
0.00.937.020 I llama_new_context_with_model: graph splits = 1
0.00.937.046 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.937.050 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.515.723 I main: llama threadpool init, n_threads = 4
0.01.515.740 I 
0.01.515.872 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.515.876 I 
0.01.516.113 I sampler seed: 1119048891
0.01.516.128 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.516.141 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.516.146 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.516.146 I 
 increamically, a young woman named Anya. Her journey had been anything but ordinary. From a troubled childhood to the harsh realities of a war-torn country,

0.12.641.758 I llama_perf_sampler_print:    sampling time =      49.68 ms /    33 runs   (    1.51 ms per token,   664.30 tokens per second)
0.12.641.761 I llama_perf_context_print:        load time =    1514.80 ms
0.12.641.776 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.641.778 I llama_perf_context_print:        eval time =   11040.73 ms /    32 runs   (  345.02 ms per token,     2.90 tokens per second)
0.12.641.779 I llama_perf_context_print:       total time =   11126.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.282s
user	46m49.158s
sys	0m6.385s
