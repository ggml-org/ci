+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4341 (382bc7f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.582 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.595 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.686 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.699 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.701 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.709 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.714 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.715 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.716 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.718 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.720 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.730 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.731 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.733 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.814 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.072 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.171 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.184 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.185 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.187 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.188 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.189 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.191 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.195 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.196 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.198 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.199 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.201 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.211 I llama_model_loader: - type  f32:   37 tensors
0.00.349.214 I llama_model_loader: - type q8_0:  127 tensors
0.00.602.978 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.670.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.671.769 I llm_load_vocab: special tokens cache size = 5
0.00.857.370 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.857.446 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.857.447 I llm_load_print_meta: arch             = gemma
0.00.857.448 I llm_load_print_meta: vocab type       = SPM
0.00.857.449 I llm_load_print_meta: n_vocab          = 256000
0.00.857.451 I llm_load_print_meta: n_merges         = 0
0.00.857.452 I llm_load_print_meta: vocab_only       = 0
0.00.857.452 I llm_load_print_meta: n_ctx_train      = 8192
0.00.857.453 I llm_load_print_meta: n_embd           = 2048
0.00.857.453 I llm_load_print_meta: n_layer          = 18
0.00.857.517 I llm_load_print_meta: n_head           = 8
0.00.857.525 I llm_load_print_meta: n_head_kv        = 1
0.00.857.525 I llm_load_print_meta: n_rot            = 256
0.00.857.526 I llm_load_print_meta: n_swa            = 0
0.00.857.526 I llm_load_print_meta: n_embd_head_k    = 256
0.00.857.526 I llm_load_print_meta: n_embd_head_v    = 256
0.00.857.531 I llm_load_print_meta: n_gqa            = 8
0.00.857.535 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.857.541 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.857.542 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.857.543 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.857.544 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.857.544 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.857.545 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.857.549 I llm_load_print_meta: n_ff             = 16384
0.00.857.550 I llm_load_print_meta: n_expert         = 0
0.00.857.550 I llm_load_print_meta: n_expert_used    = 0
0.00.857.551 I llm_load_print_meta: causal attn      = 1
0.00.857.551 I llm_load_print_meta: pooling type     = 0
0.00.857.551 I llm_load_print_meta: rope type        = 2
0.00.857.552 I llm_load_print_meta: rope scaling     = linear
0.00.857.553 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.857.554 I llm_load_print_meta: freq_scale_train = 1
0.00.857.554 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.857.554 I llm_load_print_meta: rope_finetuned   = unknown
0.00.857.555 I llm_load_print_meta: ssm_d_conv       = 0
0.00.857.555 I llm_load_print_meta: ssm_d_inner      = 0
0.00.857.555 I llm_load_print_meta: ssm_d_state      = 0
0.00.857.556 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.857.556 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.857.557 I llm_load_print_meta: model type       = 2B
0.00.857.557 I llm_load_print_meta: model ftype      = Q8_0
0.00.857.558 I llm_load_print_meta: model params     = 2.51 B
0.00.857.559 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.857.559 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.857.560 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.857.560 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.857.560 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.857.561 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.857.561 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.857.562 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.857.567 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.857.569 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.857.569 I llm_load_print_meta: max token length = 93
0.00.958.666 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.958.676 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.958.677 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.958.677 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.958.678 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.958.679 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.964.618 I llama_new_context_with_model: n_seq_max     = 1
0.00.964.626 I llama_new_context_with_model: n_ctx         = 4096
0.00.964.626 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.964.627 I llama_new_context_with_model: n_batch       = 2048
0.00.964.627 I llama_new_context_with_model: n_ubatch      = 512
0.00.964.628 I llama_new_context_with_model: flash_attn    = 0
0.00.964.630 I llama_new_context_with_model: freq_base     = 10000.0
0.00.964.631 I llama_new_context_with_model: freq_scale    = 1
0.00.964.631 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.979.481 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.979.521 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.979.637 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.982.220 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.982.224 I llama_new_context_with_model: graph nodes  = 601
0.00.982.224 I llama_new_context_with_model: graph splits = 1
0.00.982.248 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.982.251 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.593.362 I main: llama threadpool init, n_threads = 4
0.01.593.378 I 
0.01.593.494 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.593.498 I 
0.01.593.732 I sampler seed: 1846947718
0.01.593.747 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.593.757 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.593.758 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.593.758 I 
 increasities. [end of text]


0.03.275.203 I llama_perf_sampler_print:    sampling time =       6.37 ms /     5 runs   (    1.27 ms per token,   785.55 tokens per second)
0.03.275.206 I llama_perf_context_print:        load time =    1592.40 ms
0.03.275.208 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.275.209 I llama_perf_context_print:        eval time =    1668.96 ms /     4 runs   (  417.24 ms per token,     2.40 tokens per second)
0.03.275.224 I llama_perf_context_print:       total time =    1681.85 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.723 I build: 4341 (382bc7f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.932 I main: llama backend init
0.00.000.940 I main: load the model and apply lora adapter, if any
0.00.023.859 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.962 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.978 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.980 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.988 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.995 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.997 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.998 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.999 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.001 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.008 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.009 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.010 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.012 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.013 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.268 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.303 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.456 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.468 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.469 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.471 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.472 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.474 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.475 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.479 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.480 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.482 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.483 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.348.485 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.495 I llama_model_loader: - type  f32:   37 tensors
0.00.348.497 I llama_model_loader: - type q8_0:  127 tensors
0.00.599.463 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.669.818 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.670.848 I llm_load_vocab: special tokens cache size = 5
0.00.859.479 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.859.554 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.859.555 I llm_load_print_meta: arch             = gemma
0.00.859.555 I llm_load_print_meta: vocab type       = SPM
0.00.859.556 I llm_load_print_meta: n_vocab          = 256000
0.00.859.559 I llm_load_print_meta: n_merges         = 0
0.00.859.559 I llm_load_print_meta: vocab_only       = 0
0.00.859.559 I llm_load_print_meta: n_ctx_train      = 8192
0.00.859.560 I llm_load_print_meta: n_embd           = 2048
0.00.859.560 I llm_load_print_meta: n_layer          = 18
0.00.859.626 I llm_load_print_meta: n_head           = 8
0.00.859.633 I llm_load_print_meta: n_head_kv        = 1
0.00.859.633 I llm_load_print_meta: n_rot            = 256
0.00.859.634 I llm_load_print_meta: n_swa            = 0
0.00.859.634 I llm_load_print_meta: n_embd_head_k    = 256
0.00.859.635 I llm_load_print_meta: n_embd_head_v    = 256
0.00.859.639 I llm_load_print_meta: n_gqa            = 8
0.00.859.644 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.859.649 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.859.650 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.859.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.859.652 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.859.652 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.859.653 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.859.657 I llm_load_print_meta: n_ff             = 16384
0.00.859.658 I llm_load_print_meta: n_expert         = 0
0.00.859.658 I llm_load_print_meta: n_expert_used    = 0
0.00.859.659 I llm_load_print_meta: causal attn      = 1
0.00.859.659 I llm_load_print_meta: pooling type     = 0
0.00.859.659 I llm_load_print_meta: rope type        = 2
0.00.859.660 I llm_load_print_meta: rope scaling     = linear
0.00.859.661 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.859.662 I llm_load_print_meta: freq_scale_train = 1
0.00.859.662 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.859.663 I llm_load_print_meta: rope_finetuned   = unknown
0.00.859.664 I llm_load_print_meta: ssm_d_conv       = 0
0.00.859.690 I llm_load_print_meta: ssm_d_inner      = 0
0.00.859.691 I llm_load_print_meta: ssm_d_state      = 0
0.00.859.691 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.859.692 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.859.693 I llm_load_print_meta: model type       = 2B
0.00.859.694 I llm_load_print_meta: model ftype      = Q8_0
0.00.859.695 I llm_load_print_meta: model params     = 2.51 B
0.00.859.696 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.859.697 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.859.698 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.859.698 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.859.699 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.859.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.859.700 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.859.701 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.859.706 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.859.708 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.859.709 I llm_load_print_meta: max token length = 93
0.00.955.158 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.961.230 I llama_new_context_with_model: n_seq_max     = 1
0.00.961.238 I llama_new_context_with_model: n_ctx         = 4096
0.00.961.238 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.961.239 I llama_new_context_with_model: n_batch       = 2048
0.00.961.239 I llama_new_context_with_model: n_ubatch      = 512
0.00.961.240 I llama_new_context_with_model: flash_attn    = 0
0.00.961.243 I llama_new_context_with_model: freq_base     = 10000.0
0.00.961.244 I llama_new_context_with_model: freq_scale    = 1
0.00.961.245 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.977.026 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.977.072 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.977.196 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.979.877 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.979.882 I llama_new_context_with_model: graph nodes  = 601
0.00.979.882 I llama_new_context_with_model: graph splits = 1
0.00.979.907 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.979.908 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.591.702 I main: llama threadpool init, n_threads = 4
0.01.591.718 I 
0.01.591.842 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.591.843 I 
0.01.592.075 I sampler seed: 2562131479
0.01.592.090 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.592.099 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.592.100 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.592.100 I 
 increasities with an insatiable curiosity.

I understand that the context you provided is related to a person. Please provide more information about the context and the nature of

0.15.253.279 I llama_perf_sampler_print:    sampling time =      49.77 ms /    33 runs   (    1.51 ms per token,   663.00 tokens per second)
0.15.253.285 I llama_perf_context_print:        load time =    1590.65 ms
0.15.253.287 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.253.288 I llama_perf_context_print:        eval time =   13570.51 ms /    32 runs   (  424.08 ms per token,     2.36 tokens per second)
0.15.253.289 I llama_perf_context_print:       total time =   13661.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4341 (382bc7f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.332 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.449 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.451 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.458 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.460 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.461 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.462 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.463 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.465 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.492 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.496 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.498 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.499 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.500 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.256 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.564 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.754 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.763 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.765 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.766 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.767 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.769 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.770 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.774 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.776 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.777 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.779 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.781 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.789 I llama_model_loader: - type  f32:   37 tensors
0.00.349.792 I llama_model_loader: - type q8_0:  127 tensors
0.00.581.133 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.751 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.706 I llm_load_vocab: special tokens cache size = 5
0.00.838.899 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.977 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.978 I llm_load_print_meta: arch             = gemma
0.00.838.978 I llm_load_print_meta: vocab type       = SPM
0.00.838.980 I llm_load_print_meta: n_vocab          = 256000
0.00.838.982 I llm_load_print_meta: n_merges         = 0
0.00.838.983 I llm_load_print_meta: vocab_only       = 0
0.00.838.984 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.984 I llm_load_print_meta: n_embd           = 2048
0.00.838.984 I llm_load_print_meta: n_layer          = 18
0.00.839.053 I llm_load_print_meta: n_head           = 8
0.00.839.061 I llm_load_print_meta: n_head_kv        = 1
0.00.839.062 I llm_load_print_meta: n_rot            = 256
0.00.839.062 I llm_load_print_meta: n_swa            = 0
0.00.839.063 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.069 I llm_load_print_meta: n_gqa            = 8
0.00.839.073 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.078 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.093 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.096 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.096 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.098 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.098 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.117 I llm_load_print_meta: n_ff             = 16384
0.00.839.118 I llm_load_print_meta: n_expert         = 0
0.00.839.119 I llm_load_print_meta: n_expert_used    = 0
0.00.839.119 I llm_load_print_meta: causal attn      = 1
0.00.839.120 I llm_load_print_meta: pooling type     = 0
0.00.839.120 I llm_load_print_meta: rope type        = 2
0.00.839.120 I llm_load_print_meta: rope scaling     = linear
0.00.839.122 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.123 I llm_load_print_meta: freq_scale_train = 1
0.00.839.123 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.124 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.133 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.134 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.134 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.134 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.136 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.137 I llm_load_print_meta: model type       = 2B
0.00.839.139 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.140 I llm_load_print_meta: model params     = 2.51 B
0.00.839.140 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.141 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.142 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.142 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.142 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.143 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.143 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.144 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.150 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.152 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.159 I llm_load_print_meta: max token length = 93
0.00.917.499 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.917.507 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.917.508 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.917.509 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.917.510 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.917.510 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.924.264 I llama_new_context_with_model: n_seq_max     = 1
0.00.924.272 I llama_new_context_with_model: n_ctx         = 4096
0.00.924.273 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.924.274 I llama_new_context_with_model: n_batch       = 2048
0.00.924.274 I llama_new_context_with_model: n_ubatch      = 512
0.00.924.275 I llama_new_context_with_model: flash_attn    = 0
0.00.924.278 I llama_new_context_with_model: freq_base     = 10000.0
0.00.924.278 I llama_new_context_with_model: freq_scale    = 1
0.00.924.279 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.938.956 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.938.998 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.939.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.941.767 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.941.771 I llama_new_context_with_model: graph nodes  = 601
0.00.941.772 I llama_new_context_with_model: graph splits = 1
0.00.941.797 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.941.800 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.563.079 I main: llama threadpool init, n_threads = 4
0.01.563.098 I 
0.01.563.220 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.563.224 I 
0.01.563.462 I sampler seed: 1562403513
0.01.563.494 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.563.510 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.563.511 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.563.511 I 
 increasities to her students.

**Question:** What is the significance of the statement "She increasities to her students"?

**Answer:** The statement indicates

0.15.147.705 I llama_perf_sampler_print:    sampling time =      49.72 ms /    33 runs   (    1.51 ms per token,   663.73 tokens per second)
0.15.147.719 I llama_perf_context_print:        load time =    1562.14 ms
0.15.147.722 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.147.724 I llama_perf_context_print:        eval time =   13494.21 ms /    32 runs   (  421.69 ms per token,     2.37 tokens per second)
0.15.147.725 I llama_perf_context_print:       total time =   13584.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4341 (382bc7f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.023.590 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.602 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.693 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.705 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.708 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.714 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.718 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.720 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.721 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.723 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.724 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.731 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.732 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.734 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.735 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.739 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.090 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.378 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.388 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.389 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.390 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.392 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.394 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.395 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.399 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.400 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.402 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.403 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.348.406 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.414 I llama_model_loader: - type  f32:   37 tensors
0.00.348.417 I llama_model_loader: - type q8_0:  127 tensors
0.00.584.858 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.651.669 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.652.679 I llm_load_vocab: special tokens cache size = 5
0.00.842.023 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.101 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.102 I llm_load_print_meta: arch             = gemma
0.00.842.103 I llm_load_print_meta: vocab type       = SPM
0.00.842.104 I llm_load_print_meta: n_vocab          = 256000
0.00.842.106 I llm_load_print_meta: n_merges         = 0
0.00.842.107 I llm_load_print_meta: vocab_only       = 0
0.00.842.107 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.108 I llm_load_print_meta: n_embd           = 2048
0.00.842.108 I llm_load_print_meta: n_layer          = 18
0.00.842.173 I llm_load_print_meta: n_head           = 8
0.00.842.179 I llm_load_print_meta: n_head_kv        = 1
0.00.842.180 I llm_load_print_meta: n_rot            = 256
0.00.842.181 I llm_load_print_meta: n_swa            = 0
0.00.842.181 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.182 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.188 I llm_load_print_meta: n_gqa            = 8
0.00.842.193 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.200 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.202 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.204 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.205 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.205 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.206 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.212 I llm_load_print_meta: n_ff             = 16384
0.00.842.213 I llm_load_print_meta: n_expert         = 0
0.00.842.214 I llm_load_print_meta: n_expert_used    = 0
0.00.842.215 I llm_load_print_meta: causal attn      = 1
0.00.842.215 I llm_load_print_meta: pooling type     = 0
0.00.842.215 I llm_load_print_meta: rope type        = 2
0.00.842.216 I llm_load_print_meta: rope scaling     = linear
0.00.842.217 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.218 I llm_load_print_meta: freq_scale_train = 1
0.00.842.219 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.219 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.220 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.220 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.221 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.221 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.222 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.223 I llm_load_print_meta: model type       = 2B
0.00.842.225 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.226 I llm_load_print_meta: model params     = 2.51 B
0.00.842.227 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.228 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.229 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.229 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.230 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.230 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.231 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.237 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.239 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.240 I llm_load_print_meta: max token length = 93
0.00.915.109 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.915.120 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.921.102 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.110 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.110 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.111 I llama_new_context_with_model: n_batch       = 2048
0.00.921.111 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.112 I llama_new_context_with_model: flash_attn    = 0
0.00.921.116 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.117 I llama_new_context_with_model: freq_scale    = 1
0.00.921.118 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.936.694 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.738 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.858 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.939.457 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.939.461 I llama_new_context_with_model: graph nodes  = 601
0.00.939.461 I llama_new_context_with_model: graph splits = 1
0.00.939.486 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.939.490 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.555.756 I main: llama threadpool init, n_threads = 4
0.01.555.773 I 
0.01.555.895 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.555.900 I 
0.01.556.137 I sampler seed: 3283462184
0.01.556.151 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.556.161 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.556.163 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.556.164 I 
 increabling is an inappropriate and dangerous behavior. It is important to seek help from professionals if you or someone you know is engaging in this behavior. [end of text]


0.14.332.405 I llama_perf_sampler_print:    sampling time =      46.52 ms /    31 runs   (    1.50 ms per token,   666.32 tokens per second)
0.14.332.425 I llama_perf_context_print:        load time =    1554.78 ms
0.14.332.427 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.332.429 I llama_perf_context_print:        eval time =   12691.35 ms /    30 runs   (  423.05 ms per token,     2.36 tokens per second)
0.14.332.430 I llama_perf_context_print:       total time =   12776.66 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.797s
user	3m0.617s
sys	0m9.502s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4341 (382bc7f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185676.17 ms
main:    total time = 185676.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.001.016 I build: 4341 (382bc7f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.243 I main: llama backend init
0.00.001.252 I main: load the model and apply lora adapter, if any
0.00.023.956 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.969 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.064 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.078 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.080 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.091 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.093 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.107 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.109 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.110 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.117 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.122 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.123 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.124 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.125 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.381 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.482 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.695 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.706 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.707 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.708 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.710 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.711 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.713 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.717 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.718 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.720 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.721 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.723 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.732 I llama_model_loader: - type  f32:   37 tensors
0.00.349.735 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.736 I llama_model_loader: - type q6_K:   19 tensors
0.00.591.196 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.611 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.548 I llm_load_vocab: special tokens cache size = 5
0.00.844.967 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.041 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.042 I llm_load_print_meta: arch             = gemma
0.00.845.043 I llm_load_print_meta: vocab type       = SPM
0.00.845.043 I llm_load_print_meta: n_vocab          = 256000
0.00.845.046 I llm_load_print_meta: n_merges         = 0
0.00.845.046 I llm_load_print_meta: vocab_only       = 0
0.00.845.047 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.047 I llm_load_print_meta: n_embd           = 2048
0.00.845.048 I llm_load_print_meta: n_layer          = 18
0.00.845.113 I llm_load_print_meta: n_head           = 8
0.00.845.121 I llm_load_print_meta: n_head_kv        = 1
0.00.845.122 I llm_load_print_meta: n_rot            = 256
0.00.845.123 I llm_load_print_meta: n_swa            = 0
0.00.845.123 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.123 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.129 I llm_load_print_meta: n_gqa            = 8
0.00.845.134 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.144 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.145 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.147 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.158 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.163 I llm_load_print_meta: n_ff             = 16384
0.00.845.164 I llm_load_print_meta: n_expert         = 0
0.00.845.164 I llm_load_print_meta: n_expert_used    = 0
0.00.845.165 I llm_load_print_meta: causal attn      = 1
0.00.845.166 I llm_load_print_meta: pooling type     = 0
0.00.845.166 I llm_load_print_meta: rope type        = 2
0.00.845.167 I llm_load_print_meta: rope scaling     = linear
0.00.845.169 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.169 I llm_load_print_meta: freq_scale_train = 1
0.00.845.170 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.171 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.171 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.172 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.173 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.174 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.174 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.175 I llm_load_print_meta: model type       = 2B
0.00.845.176 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.845.178 I llm_load_print_meta: model params     = 2.51 B
0.00.845.178 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.845.179 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.180 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.180 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.181 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.182 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.182 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.188 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.189 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.190 I llm_load_print_meta: max token length = 93
0.00.907.664 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.907.675 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.907.676 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.907.677 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.907.677 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.907.678 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.913.552 I llama_new_context_with_model: n_seq_max     = 1
0.00.913.561 I llama_new_context_with_model: n_ctx         = 4096
0.00.913.561 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.913.562 I llama_new_context_with_model: n_batch       = 2048
0.00.913.562 I llama_new_context_with_model: n_ubatch      = 512
0.00.913.563 I llama_new_context_with_model: flash_attn    = 0
0.00.913.566 I llama_new_context_with_model: freq_base     = 10000.0
0.00.913.566 I llama_new_context_with_model: freq_scale    = 1
0.00.913.567 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.928.763 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.928.807 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.928.925 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.931.518 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.931.523 I llama_new_context_with_model: graph nodes  = 601
0.00.931.524 I llama_new_context_with_model: graph splits = 1
0.00.931.548 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.931.551 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.510.992 I main: llama threadpool init, n_threads = 4
0.01.511.007 I 
0.01.511.128 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.511.132 I 
0.01.511.362 I sampler seed: 4178618773
0.01.511.375 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.511.385 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.511.387 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.511.387 I 
 fufilling, and the rhythmic pulsation of the bass.

This sounds like a nightclub.

A nightclub is a place where people go to enjoy themselves,

0.12.684.471 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.18 tokens per second)
0.12.684.485 I llama_perf_context_print:        load time =    1509.64 ms
0.12.684.487 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.684.489 I llama_perf_context_print:        eval time =   11081.39 ms /    32 runs   (  346.29 ms per token,     2.89 tokens per second)
0.12.684.491 I llama_perf_context_print:       total time =   11173.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4341 (382bc7f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186445.30 ms
main:    total time = 186445.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4341 (382bc7f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.023.435 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.544 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.560 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.565 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.572 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.573 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.576 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.578 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.579 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.580 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.588 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.589 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.591 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.602 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.221.939 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.429 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.622 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.637 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.638 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.639 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.640 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.642 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.643 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.649 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.651 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.660 I llama_model_loader: - type  f32:   37 tensors
0.00.348.663 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.663 I llama_model_loader: - type q6_K:   19 tensors
0.00.595.626 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.664.201 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.665.170 I llm_load_vocab: special tokens cache size = 5
0.00.855.027 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.855.102 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.855.103 I llm_load_print_meta: arch             = gemma
0.00.855.104 I llm_load_print_meta: vocab type       = SPM
0.00.855.105 I llm_load_print_meta: n_vocab          = 256000
0.00.855.107 I llm_load_print_meta: n_merges         = 0
0.00.855.108 I llm_load_print_meta: vocab_only       = 0
0.00.855.108 I llm_load_print_meta: n_ctx_train      = 8192
0.00.855.108 I llm_load_print_meta: n_embd           = 2048
0.00.855.109 I llm_load_print_meta: n_layer          = 18
0.00.855.175 I llm_load_print_meta: n_head           = 8
0.00.855.182 I llm_load_print_meta: n_head_kv        = 1
0.00.855.183 I llm_load_print_meta: n_rot            = 256
0.00.855.183 I llm_load_print_meta: n_swa            = 0
0.00.855.183 I llm_load_print_meta: n_embd_head_k    = 256
0.00.855.183 I llm_load_print_meta: n_embd_head_v    = 256
0.00.855.188 I llm_load_print_meta: n_gqa            = 8
0.00.855.193 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.855.198 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.855.200 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.855.201 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.855.201 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.855.202 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.855.202 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.855.207 I llm_load_print_meta: n_ff             = 16384
0.00.855.208 I llm_load_print_meta: n_expert         = 0
0.00.855.208 I llm_load_print_meta: n_expert_used    = 0
0.00.855.209 I llm_load_print_meta: causal attn      = 1
0.00.855.209 I llm_load_print_meta: pooling type     = 0
0.00.855.209 I llm_load_print_meta: rope type        = 2
0.00.855.210 I llm_load_print_meta: rope scaling     = linear
0.00.855.211 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.855.212 I llm_load_print_meta: freq_scale_train = 1
0.00.855.212 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.855.213 I llm_load_print_meta: rope_finetuned   = unknown
0.00.855.213 I llm_load_print_meta: ssm_d_conv       = 0
0.00.855.213 I llm_load_print_meta: ssm_d_inner      = 0
0.00.855.213 I llm_load_print_meta: ssm_d_state      = 0
0.00.855.214 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.855.214 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.855.215 I llm_load_print_meta: model type       = 2B
0.00.855.216 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.855.217 I llm_load_print_meta: model params     = 2.51 B
0.00.855.217 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.855.218 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.855.218 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.855.219 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.855.219 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.855.219 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.855.220 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.855.220 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.855.225 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.855.227 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.855.227 I llm_load_print_meta: max token length = 93
0.00.914.647 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.920.474 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.482 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.482 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.483 I llama_new_context_with_model: n_batch       = 2048
0.00.920.483 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.484 I llama_new_context_with_model: flash_attn    = 0
0.00.920.487 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.487 I llama_new_context_with_model: freq_scale    = 1
0.00.920.488 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.935.822 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.935.869 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.935.995 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.560 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.564 I llama_new_context_with_model: graph nodes  = 601
0.00.938.564 I llama_new_context_with_model: graph splits = 1
0.00.938.587 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.938.588 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.517.310 I main: llama threadpool init, n_threads = 4
0.01.517.326 I 
0.01.517.445 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.517.450 I 
0.01.517.682 I sampler seed: 3063599934
0.01.517.695 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.517.705 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.517.708 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.517.708 I 
 squaRE.

## The Square: A Space Opera

**Synopsis:**

The Square, a vast and enigmatic spacefaring civilization, have retreated from

0.12.719.907 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.18 tokens per second)
0.12.719.910 I llama_perf_context_print:        load time =    1516.33 ms
0.12.719.931 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.719.934 I llama_perf_context_print:        eval time =   11113.10 ms /    32 runs   (  347.28 ms per token,     2.88 tokens per second)
0.12.719.936 I llama_perf_context_print:       total time =   11202.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.484s
user	46m50.304s
sys	0m6.397s
