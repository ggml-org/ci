+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4072 (3855622d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.021.535 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.547 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.555 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.560 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.561 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.565 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.566 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.567 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.567 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.568 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.568 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.573 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.574 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.575 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.576 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.577 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.890 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.658 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.577 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.585 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.585 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.586 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.586 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.587 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.588 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.590 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.591 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.592 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.592 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.593 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.597 I llama_model_loader: - type  f32:   37 tensors
0.00.131.598 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.201 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.644 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.280 I llm_load_vocab: special tokens cache size = 5
0.00.290.987 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.005 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.006 I llm_load_print_meta: arch             = gemma
0.00.291.006 I llm_load_print_meta: vocab type       = SPM
0.00.291.008 I llm_load_print_meta: n_vocab          = 256000
0.00.291.022 I llm_load_print_meta: n_merges         = 0
0.00.291.023 I llm_load_print_meta: vocab_only       = 0
0.00.291.024 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.024 I llm_load_print_meta: n_embd           = 2048
0.00.291.024 I llm_load_print_meta: n_layer          = 18
0.00.291.038 I llm_load_print_meta: n_head           = 8
0.00.291.039 I llm_load_print_meta: n_head_kv        = 1
0.00.291.039 I llm_load_print_meta: n_rot            = 256
0.00.291.039 I llm_load_print_meta: n_swa            = 0
0.00.291.040 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.040 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.041 I llm_load_print_meta: n_gqa            = 8
0.00.291.042 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.043 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.044 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.046 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.046 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.047 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.047 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.049 I llm_load_print_meta: n_ff             = 16384
0.00.291.049 I llm_load_print_meta: n_expert         = 0
0.00.291.049 I llm_load_print_meta: n_expert_used    = 0
0.00.291.050 I llm_load_print_meta: causal attn      = 1
0.00.291.050 I llm_load_print_meta: pooling type     = 0
0.00.291.050 I llm_load_print_meta: rope type        = 2
0.00.291.051 I llm_load_print_meta: rope scaling     = linear
0.00.291.052 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.053 I llm_load_print_meta: freq_scale_train = 1
0.00.291.054 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.054 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.055 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.055 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.056 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.059 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.059 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.059 I llm_load_print_meta: model type       = 2B
0.00.291.060 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.061 I llm_load_print_meta: model params     = 2.51 B
0.00.291.062 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.062 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.062 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.063 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.063 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.063 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.064 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.064 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.065 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.066 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.067 I llm_load_print_meta: max token length = 93
0.00.391.851 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.391.858 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.391.859 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.391.860 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.391.860 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.391.861 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.397.184 I llama_new_context_with_model: n_seq_max     = 1
0.00.397.191 I llama_new_context_with_model: n_ctx         = 4096
0.00.397.191 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.397.192 I llama_new_context_with_model: n_batch       = 2048
0.00.397.192 I llama_new_context_with_model: n_ubatch      = 512
0.00.397.192 I llama_new_context_with_model: flash_attn    = 0
0.00.397.195 I llama_new_context_with_model: freq_base     = 10000.0
0.00.397.196 I llama_new_context_with_model: freq_scale    = 1
0.00.397.197 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.412.401 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.412.414 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.412.501 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.413.731 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.413.738 I llama_new_context_with_model: graph nodes  = 601
0.00.413.738 I llama_new_context_with_model: graph splits = 1
0.00.413.740 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.499.047 I main: llama threadpool init, n_threads = 4
0.00.499.060 I 
0.00.499.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.499.149 I 
0.00.499.200 I sampler seed: 3095793429
0.00.499.210 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.499.216 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.499.216 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.499.216 I 
 increamically.

I. The rise of industrialization brought about significant changes in the way people lived and worked.
II. The expansion of transportation networks allowed

0.02.731.256 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6994.49 tokens per second)
0.02.731.258 I llama_perf_context_print:        load time =     498.15 ms
0.02.731.259 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.731.261 I llama_perf_context_print:        eval time =    2213.79 ms /    32 runs   (   69.18 ms per token,    14.45 tokens per second)
0.02.731.261 I llama_perf_context_print:       total time =    2232.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.559 I build: 4072 (3855622d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.021.482 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.494 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.501 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.502 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.506 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.508 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.508 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.509 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.510 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.511 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.515 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.516 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.516 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.516 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.517 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.365 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.146 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.417 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.423 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.423 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.424 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.424 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.426 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.426 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.428 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.429 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.429 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.430 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.432 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.434 I llama_model_loader: - type  f32:   37 tensors
0.00.132.435 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.964 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.334 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.787 I llm_load_vocab: special tokens cache size = 5
0.00.270.278 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.294 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.295 I llm_load_print_meta: arch             = gemma
0.00.270.295 I llm_load_print_meta: vocab type       = SPM
0.00.270.296 I llm_load_print_meta: n_vocab          = 256000
0.00.270.297 I llm_load_print_meta: n_merges         = 0
0.00.270.298 I llm_load_print_meta: vocab_only       = 0
0.00.270.298 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.298 I llm_load_print_meta: n_embd           = 2048
0.00.270.299 I llm_load_print_meta: n_layer          = 18
0.00.270.310 I llm_load_print_meta: n_head           = 8
0.00.270.311 I llm_load_print_meta: n_head_kv        = 1
0.00.270.312 I llm_load_print_meta: n_rot            = 256
0.00.270.312 I llm_load_print_meta: n_swa            = 0
0.00.270.312 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.312 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.313 I llm_load_print_meta: n_gqa            = 8
0.00.270.314 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.315 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.316 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.317 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.318 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.318 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.318 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.319 I llm_load_print_meta: n_ff             = 16384
0.00.270.319 I llm_load_print_meta: n_expert         = 0
0.00.270.320 I llm_load_print_meta: n_expert_used    = 0
0.00.270.320 I llm_load_print_meta: causal attn      = 1
0.00.270.321 I llm_load_print_meta: pooling type     = 0
0.00.270.321 I llm_load_print_meta: rope type        = 2
0.00.270.322 I llm_load_print_meta: rope scaling     = linear
0.00.270.323 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.324 I llm_load_print_meta: freq_scale_train = 1
0.00.270.324 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.325 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.325 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.325 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.325 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.325 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.326 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.326 I llm_load_print_meta: model type       = 2B
0.00.270.327 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.327 I llm_load_print_meta: model params     = 2.51 B
0.00.270.328 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.329 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.329 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.329 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.330 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.330 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.330 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.331 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.331 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.332 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.332 I llm_load_print_meta: max token length = 93
0.00.365.646 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.024 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.032 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.032 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.033 I llama_new_context_with_model: n_batch       = 2048
0.00.371.033 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.034 I llama_new_context_with_model: flash_attn    = 0
0.00.371.037 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.038 I llama_new_context_with_model: freq_scale    = 1
0.00.371.039 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.074 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.087 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.179 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.384 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.392 I llama_new_context_with_model: graph nodes  = 601
0.00.388.392 I llama_new_context_with_model: graph splits = 1
0.00.388.394 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.550 I main: llama threadpool init, n_threads = 4
0.00.470.562 I 
0.00.470.638 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.641 I 
0.00.470.686 I sampler seed: 1748845062
0.00.470.696 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.699 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.700 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.701 I 
 increadibly.

I am unable to generate a response that is both grammatically correct and uses the correct words. The use of slang or colloquialisms is inappropriate

0.02.642.911 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6747.09 tokens per second)
0.02.642.913 I llama_perf_context_print:        load time =     469.63 ms
0.02.642.915 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.642.916 I llama_perf_context_print:        eval time =    2153.37 ms /    32 runs   (   67.29 ms per token,    14.86 tokens per second)
0.02.642.917 I llama_perf_context_print:       total time =    2172.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.598 I build: 4072 (3855622d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.000.912 I main: load the model and apply lora adapter, if any
0.00.022.055 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.064 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.071 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.077 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.078 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.083 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.086 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.087 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.087 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.088 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.088 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.092 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.092 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.093 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.093 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.094 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.259 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.176 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.064 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.070 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.071 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.071 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.072 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.073 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.073 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.075 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.076 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.077 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.078 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.079 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.084 I llama_model_loader: - type  f32:   37 tensors
0.00.132.085 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.345 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.017 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.671 I llm_load_vocab: special tokens cache size = 5
0.00.270.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.348 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.349 I llm_load_print_meta: arch             = gemma
0.00.270.349 I llm_load_print_meta: vocab type       = SPM
0.00.270.350 I llm_load_print_meta: n_vocab          = 256000
0.00.270.351 I llm_load_print_meta: n_merges         = 0
0.00.270.351 I llm_load_print_meta: vocab_only       = 0
0.00.270.351 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.352 I llm_load_print_meta: n_embd           = 2048
0.00.270.352 I llm_load_print_meta: n_layer          = 18
0.00.270.362 I llm_load_print_meta: n_head           = 8
0.00.270.363 I llm_load_print_meta: n_head_kv        = 1
0.00.270.364 I llm_load_print_meta: n_rot            = 256
0.00.270.364 I llm_load_print_meta: n_swa            = 0
0.00.270.364 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.365 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.365 I llm_load_print_meta: n_gqa            = 8
0.00.270.366 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.367 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.368 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.370 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.370 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.370 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.370 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.371 I llm_load_print_meta: n_ff             = 16384
0.00.270.372 I llm_load_print_meta: n_expert         = 0
0.00.270.372 I llm_load_print_meta: n_expert_used    = 0
0.00.270.372 I llm_load_print_meta: causal attn      = 1
0.00.270.373 I llm_load_print_meta: pooling type     = 0
0.00.270.373 I llm_load_print_meta: rope type        = 2
0.00.270.373 I llm_load_print_meta: rope scaling     = linear
0.00.270.375 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.376 I llm_load_print_meta: freq_scale_train = 1
0.00.270.376 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.376 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.377 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.377 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.377 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.377 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.377 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.378 I llm_load_print_meta: model type       = 2B
0.00.270.378 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.379 I llm_load_print_meta: model params     = 2.51 B
0.00.270.380 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.380 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.381 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.381 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.381 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.382 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.382 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.382 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.383 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.383 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.383 I llm_load_print_meta: max token length = 93
0.00.354.221 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.228 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.229 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.230 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.230 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.231 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.414 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.420 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.421 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.421 I llama_new_context_with_model: n_batch       = 2048
0.00.359.421 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.422 I llama_new_context_with_model: flash_attn    = 0
0.00.359.425 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.426 I llama_new_context_with_model: freq_scale    = 1
0.00.359.427 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.839 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.851 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.939 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.135 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.142 I llama_new_context_with_model: graph nodes  = 601
0.00.376.142 I llama_new_context_with_model: graph splits = 1
0.00.376.144 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.247 I main: llama threadpool init, n_threads = 4
0.00.460.260 I 
0.00.460.336 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.340 I 
0.00.460.381 I sampler seed: 225644294
0.00.460.392 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.395 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.396 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.396 I 
 increasities.

I believe that it is imperative to address this issue of escalating narcissism and Machiavellian tendencies within the contemporary political landscape.

**1

0.02.625.656 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7025.76 tokens per second)
0.02.625.658 I llama_perf_context_print:        load time =     459.31 ms
0.02.625.659 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.625.661 I llama_perf_context_print:        eval time =    2147.23 ms /    32 runs   (   67.10 ms per token,    14.90 tokens per second)
0.02.625.661 I llama_perf_context_print:       total time =    2165.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.589 I build: 4072 (3855622d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.000.945 I main: load the model and apply lora adapter, if any
0.00.021.629 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.640 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.649 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.653 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.654 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.659 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.660 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.661 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.661 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.662 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.663 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.668 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.668 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.669 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.670 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.450 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.472 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.294 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.301 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.301 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.302 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.302 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.304 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.305 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.307 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.307 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.308 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.308 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.309 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.314 I llama_model_loader: - type  f32:   37 tensors
0.00.132.315 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.370 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.855 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.385 I llm_load_vocab: special tokens cache size = 5
0.00.265.269 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.284 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.285 I llm_load_print_meta: arch             = gemma
0.00.265.285 I llm_load_print_meta: vocab type       = SPM
0.00.265.286 I llm_load_print_meta: n_vocab          = 256000
0.00.265.286 I llm_load_print_meta: n_merges         = 0
0.00.265.287 I llm_load_print_meta: vocab_only       = 0
0.00.265.287 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.287 I llm_load_print_meta: n_embd           = 2048
0.00.265.287 I llm_load_print_meta: n_layer          = 18
0.00.265.299 I llm_load_print_meta: n_head           = 8
0.00.265.300 I llm_load_print_meta: n_head_kv        = 1
0.00.265.301 I llm_load_print_meta: n_rot            = 256
0.00.265.301 I llm_load_print_meta: n_swa            = 0
0.00.265.301 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.302 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.303 I llm_load_print_meta: n_gqa            = 8
0.00.265.304 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.305 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.306 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.307 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.308 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.308 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.308 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.309 I llm_load_print_meta: n_ff             = 16384
0.00.265.310 I llm_load_print_meta: n_expert         = 0
0.00.265.310 I llm_load_print_meta: n_expert_used    = 0
0.00.265.310 I llm_load_print_meta: causal attn      = 1
0.00.265.311 I llm_load_print_meta: pooling type     = 0
0.00.265.311 I llm_load_print_meta: rope type        = 2
0.00.265.312 I llm_load_print_meta: rope scaling     = linear
0.00.265.313 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.314 I llm_load_print_meta: freq_scale_train = 1
0.00.265.314 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.315 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.315 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.316 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.316 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.316 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.316 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.317 I llm_load_print_meta: model type       = 2B
0.00.265.317 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.318 I llm_load_print_meta: model params     = 2.51 B
0.00.265.319 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.319 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.320 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.321 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.322 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.322 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.323 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.324 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.324 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.324 I llm_load_print_meta: max token length = 93
0.00.335.920 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.928 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.213 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.218 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.219 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.219 I llama_new_context_with_model: n_batch       = 2048
0.00.341.220 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.220 I llama_new_context_with_model: flash_attn    = 0
0.00.341.222 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.223 I llama_new_context_with_model: freq_scale    = 1
0.00.341.224 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.572 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.586 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.678 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.919 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.925 I llama_new_context_with_model: graph nodes  = 601
0.00.357.926 I llama_new_context_with_model: graph splits = 1
0.00.357.928 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.728 I main: llama threadpool init, n_threads = 4
0.00.444.746 I 
0.00.444.838 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.842 I 
0.00.444.894 I sampler seed: 2641938113
0.00.444.908 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.914 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.915 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.918 I 
 increably.

I am unable to generate a response due to the provided context being incomplete. [end of text]


0.01.950.628 I llama_perf_sampler_print:    sampling time =       3.48 ms /    21 runs   (    0.17 ms per token,  6041.43 tokens per second)
0.01.950.631 I llama_perf_context_print:        load time =     443.76 ms
0.01.950.633 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.950.635 I llama_perf_context_print:        eval time =    1493.08 ms /    20 runs   (   74.65 ms per token,    13.40 tokens per second)
0.01.950.636 I llama_perf_context_print:       total time =    1505.91 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.575s
user	0m35.165s
sys	0m9.332s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4072 (3855622d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32213.29 ms
main:    total time = 32213.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.524 I build: 4072 (3855622d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.021.637 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.647 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.655 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.660 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.661 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.664 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.665 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.666 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.667 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.668 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.668 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.672 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.673 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.673 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.674 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.674 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.327 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.018 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.852 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.858 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.860 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.861 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.862 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.865 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.865 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.866 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.867 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.868 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.872 I llama_model_loader: - type  f32:   37 tensors
0.00.131.873 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.874 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.475 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.119 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.694 I llm_load_vocab: special tokens cache size = 5
0.00.262.235 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.251 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.252 I llm_load_print_meta: arch             = gemma
0.00.262.252 I llm_load_print_meta: vocab type       = SPM
0.00.262.253 I llm_load_print_meta: n_vocab          = 256000
0.00.262.253 I llm_load_print_meta: n_merges         = 0
0.00.262.253 I llm_load_print_meta: vocab_only       = 0
0.00.262.254 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.254 I llm_load_print_meta: n_embd           = 2048
0.00.262.254 I llm_load_print_meta: n_layer          = 18
0.00.262.266 I llm_load_print_meta: n_head           = 8
0.00.262.268 I llm_load_print_meta: n_head_kv        = 1
0.00.262.268 I llm_load_print_meta: n_rot            = 256
0.00.262.269 I llm_load_print_meta: n_swa            = 0
0.00.262.269 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.269 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.270 I llm_load_print_meta: n_gqa            = 8
0.00.262.271 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.273 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.275 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.275 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.276 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.276 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.277 I llm_load_print_meta: n_ff             = 16384
0.00.262.277 I llm_load_print_meta: n_expert         = 0
0.00.262.278 I llm_load_print_meta: n_expert_used    = 0
0.00.262.278 I llm_load_print_meta: causal attn      = 1
0.00.262.278 I llm_load_print_meta: pooling type     = 0
0.00.262.279 I llm_load_print_meta: rope type        = 2
0.00.262.280 I llm_load_print_meta: rope scaling     = linear
0.00.262.281 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.282 I llm_load_print_meta: freq_scale_train = 1
0.00.262.282 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.283 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.283 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.283 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.284 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.284 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.284 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.285 I llm_load_print_meta: model type       = 2B
0.00.262.286 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.286 I llm_load_print_meta: model params     = 2.51 B
0.00.262.287 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.287 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.288 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.288 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.289 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.289 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.290 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.290 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.291 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.291 I llm_load_print_meta: max token length = 93
0.00.324.254 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.260 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.261 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.262 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.263 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.263 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.522 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.528 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.529 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.529 I llama_new_context_with_model: n_batch       = 2048
0.00.329.530 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.530 I llama_new_context_with_model: flash_attn    = 0
0.00.329.532 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.534 I llama_new_context_with_model: freq_scale    = 1
0.00.329.535 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.009 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.105 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.386 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.391 I llama_new_context_with_model: graph nodes  = 601
0.00.346.392 I llama_new_context_with_model: graph splits = 1
0.00.346.393 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.826 I main: llama threadpool init, n_threads = 4
0.00.421.838 I 
0.00.421.924 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.927 I 
0.00.421.971 I sampler seed: 2172642290
0.00.421.982 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.986 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.987 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.987 I 
 increably!

I'm not sure if I should use "incredibly" or "exceedingly." Which one sounds better?

The sentence reads

0.02.027.595 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7083.07 tokens per second)
0.02.027.598 I llama_perf_context_print:        load time =     420.94 ms
0.02.027.599 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.027.601 I llama_perf_context_print:        eval time =    1587.22 ms /    32 runs   (   49.60 ms per token,    20.16 tokens per second)
0.02.027.601 I llama_perf_context_print:       total time =    1605.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4072 (3855622d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31989.11 ms
main:    total time = 31989.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.579 I build: 4072 (3855622d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.807 I main: llama backend init
0.00.000.951 I main: load the model and apply lora adapter, if any
0.00.021.295 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.311 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.318 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.319 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.323 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.327 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.329 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.329 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.330 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.334 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.335 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.338 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.339 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.416 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.303 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.159 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.166 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.166 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.167 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.167 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.168 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.169 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.172 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.172 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.176 I llama_model_loader: - type  f32:   37 tensors
0.00.131.177 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.178 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.615 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.210 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.701 I llm_load_vocab: special tokens cache size = 5
0.00.259.257 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.274 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.275 I llm_load_print_meta: arch             = gemma
0.00.259.275 I llm_load_print_meta: vocab type       = SPM
0.00.259.276 I llm_load_print_meta: n_vocab          = 256000
0.00.259.277 I llm_load_print_meta: n_merges         = 0
0.00.259.277 I llm_load_print_meta: vocab_only       = 0
0.00.259.278 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.278 I llm_load_print_meta: n_embd           = 2048
0.00.259.279 I llm_load_print_meta: n_layer          = 18
0.00.259.290 I llm_load_print_meta: n_head           = 8
0.00.259.291 I llm_load_print_meta: n_head_kv        = 1
0.00.259.291 I llm_load_print_meta: n_rot            = 256
0.00.259.291 I llm_load_print_meta: n_swa            = 0
0.00.259.292 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.292 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.293 I llm_load_print_meta: n_gqa            = 8
0.00.259.294 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.295 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.296 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.297 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.297 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.298 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.298 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.299 I llm_load_print_meta: n_ff             = 16384
0.00.259.299 I llm_load_print_meta: n_expert         = 0
0.00.259.300 I llm_load_print_meta: n_expert_used    = 0
0.00.259.300 I llm_load_print_meta: causal attn      = 1
0.00.259.300 I llm_load_print_meta: pooling type     = 0
0.00.259.300 I llm_load_print_meta: rope type        = 2
0.00.259.301 I llm_load_print_meta: rope scaling     = linear
0.00.259.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.303 I llm_load_print_meta: freq_scale_train = 1
0.00.259.303 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.303 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.303 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.304 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.304 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.304 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.304 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.305 I llm_load_print_meta: model type       = 2B
0.00.259.305 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.306 I llm_load_print_meta: model params     = 2.51 B
0.00.259.306 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.307 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.307 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.308 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.308 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.308 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.309 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.309 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.310 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.310 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.310 I llm_load_print_meta: max token length = 93
0.00.318.966 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.164 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.171 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.171 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.171 I llama_new_context_with_model: n_batch       = 2048
0.00.324.172 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.172 I llama_new_context_with_model: flash_attn    = 0
0.00.324.175 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.175 I llama_new_context_with_model: freq_scale    = 1
0.00.324.176 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.967 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.984 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.074 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.359 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.367 I llama_new_context_with_model: graph nodes  = 601
0.00.341.367 I llama_new_context_with_model: graph splits = 1
0.00.341.369 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.683 I main: llama threadpool init, n_threads = 4
0.00.414.696 I 
0.00.414.786 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.414.790 I 
0.00.414.836 I sampler seed: 1190665728
0.00.414.848 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.852 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.853 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.854 I 
 seconally.

I am unable to generate the requested content as it requires access to personally identifiable information and high profile demographic data. [end of text]


0.01.721.962 I llama_perf_sampler_print:    sampling time =       4.22 ms /    28 runs   (    0.15 ms per token,  6631.93 tokens per second)
0.01.721.965 I llama_perf_context_print:        load time =     413.71 ms
0.01.721.967 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.721.969 I llama_perf_context_print:        eval time =    1290.89 ms /    27 runs   (   47.81 ms per token,    20.92 tokens per second)
0.01.721.970 I llama_perf_context_print:       total time =    1307.29 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.939s
user	8m13.189s
sys	0m6.930s
