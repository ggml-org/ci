+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.580 I build: 4074 (e418ccf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.021.351 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.363 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.370 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.375 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.376 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.380 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.381 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.382 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.382 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.383 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.383 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.388 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.389 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.389 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.390 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.814 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.845 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.737 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.747 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.747 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.748 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.748 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.749 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.750 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.753 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.753 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.755 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.756 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.756 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.760 I llama_model_loader: - type  f32:   37 tensors
0.00.131.761 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.856 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.597 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.099 I llm_load_vocab: special tokens cache size = 5
0.00.264.607 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.623 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.624 I llm_load_print_meta: arch             = gemma
0.00.264.625 I llm_load_print_meta: vocab type       = SPM
0.00.264.625 I llm_load_print_meta: n_vocab          = 256000
0.00.264.625 I llm_load_print_meta: n_merges         = 0
0.00.264.626 I llm_load_print_meta: vocab_only       = 0
0.00.264.626 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.626 I llm_load_print_meta: n_embd           = 2048
0.00.264.627 I llm_load_print_meta: n_layer          = 18
0.00.264.639 I llm_load_print_meta: n_head           = 8
0.00.264.640 I llm_load_print_meta: n_head_kv        = 1
0.00.264.640 I llm_load_print_meta: n_rot            = 256
0.00.264.641 I llm_load_print_meta: n_swa            = 0
0.00.264.641 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.641 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.642 I llm_load_print_meta: n_gqa            = 8
0.00.264.643 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.644 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.645 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.646 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.646 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.647 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.647 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.648 I llm_load_print_meta: n_ff             = 16384
0.00.264.648 I llm_load_print_meta: n_expert         = 0
0.00.264.649 I llm_load_print_meta: n_expert_used    = 0
0.00.264.649 I llm_load_print_meta: causal attn      = 1
0.00.264.649 I llm_load_print_meta: pooling type     = 0
0.00.264.649 I llm_load_print_meta: rope type        = 2
0.00.264.650 I llm_load_print_meta: rope scaling     = linear
0.00.264.651 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.652 I llm_load_print_meta: freq_scale_train = 1
0.00.264.652 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.652 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.652 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.653 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.653 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.653 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.653 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.654 I llm_load_print_meta: model type       = 2B
0.00.264.655 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.656 I llm_load_print_meta: model params     = 2.51 B
0.00.264.656 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.657 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.657 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.658 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.658 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.658 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.659 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.659 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.660 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.660 I llm_load_print_meta: max token length = 93
0.00.365.143 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.150 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.151 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.151 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.152 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.153 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.478 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.484 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.484 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.485 I llama_new_context_with_model: n_batch       = 2048
0.00.370.485 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.485 I llama_new_context_with_model: flash_attn    = 0
0.00.370.488 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.489 I llama_new_context_with_model: freq_scale    = 1
0.00.370.490 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.675 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.687 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.770 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.998 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.004 I llama_new_context_with_model: graph nodes  = 601
0.00.387.004 I llama_new_context_with_model: graph splits = 1
0.00.387.005 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.246 I main: llama threadpool init, n_threads = 4
0.00.471.260 I 
0.00.471.344 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.348 I 
0.00.471.404 I sampler seed: 93219042
0.00.471.416 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.419 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.421 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.421 I 
 increably.

I am not able to generate responses that are sexually suggestive in nature. [end of text]


0.01.809.953 I llama_perf_sampler_print:    sampling time =       2.81 ms /    20 runs   (    0.14 ms per token,  7122.51 tokens per second)
0.01.809.956 I llama_perf_context_print:        load time =     470.32 ms
0.01.809.957 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.809.958 I llama_perf_context_print:        eval time =    1326.52 ms /    19 runs   (   69.82 ms per token,    14.32 tokens per second)
0.01.809.959 I llama_perf_context_print:       total time =    1338.71 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.630 I build: 4074 (e418ccf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.835 I main: llama backend init
0.00.000.975 I main: load the model and apply lora adapter, if any
0.00.021.534 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.548 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.556 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.557 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.560 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.561 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.562 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.563 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.563 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.564 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.568 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.569 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.570 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.571 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.571 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.951 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.567 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.386 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.392 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.392 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.393 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.393 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.394 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.395 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.397 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.398 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.398 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.399 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.401 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.404 I llama_model_loader: - type  f32:   37 tensors
0.00.131.405 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.715 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.125 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.662 I llm_load_vocab: special tokens cache size = 5
0.00.262.166 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.180 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.181 I llm_load_print_meta: arch             = gemma
0.00.262.181 I llm_load_print_meta: vocab type       = SPM
0.00.262.182 I llm_load_print_meta: n_vocab          = 256000
0.00.262.182 I llm_load_print_meta: n_merges         = 0
0.00.262.183 I llm_load_print_meta: vocab_only       = 0
0.00.262.183 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.184 I llm_load_print_meta: n_embd           = 2048
0.00.262.184 I llm_load_print_meta: n_layer          = 18
0.00.262.195 I llm_load_print_meta: n_head           = 8
0.00.262.196 I llm_load_print_meta: n_head_kv        = 1
0.00.262.196 I llm_load_print_meta: n_rot            = 256
0.00.262.196 I llm_load_print_meta: n_swa            = 0
0.00.262.197 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.197 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.198 I llm_load_print_meta: n_gqa            = 8
0.00.262.199 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.200 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.201 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.202 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.202 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.203 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.203 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.204 I llm_load_print_meta: n_ff             = 16384
0.00.262.204 I llm_load_print_meta: n_expert         = 0
0.00.262.204 I llm_load_print_meta: n_expert_used    = 0
0.00.262.205 I llm_load_print_meta: causal attn      = 1
0.00.262.205 I llm_load_print_meta: pooling type     = 0
0.00.262.205 I llm_load_print_meta: rope type        = 2
0.00.262.206 I llm_load_print_meta: rope scaling     = linear
0.00.262.207 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.208 I llm_load_print_meta: freq_scale_train = 1
0.00.262.208 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.209 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.209 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.209 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.210 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.210 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.210 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.210 I llm_load_print_meta: model type       = 2B
0.00.262.211 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.212 I llm_load_print_meta: model params     = 2.51 B
0.00.262.213 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.213 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.214 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.214 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.214 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.215 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.215 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.215 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.216 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.216 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.216 I llm_load_print_meta: max token length = 93
0.00.357.588 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.830 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.836 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.836 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.837 I llama_new_context_with_model: n_batch       = 2048
0.00.362.837 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.837 I llama_new_context_with_model: flash_attn    = 0
0.00.362.840 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.840 I llama_new_context_with_model: freq_scale    = 1
0.00.362.841 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.742 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.756 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.848 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.065 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.071 I llama_new_context_with_model: graph nodes  = 601
0.00.380.072 I llama_new_context_with_model: graph splits = 1
0.00.380.073 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.159 I main: llama threadpool init, n_threads = 4
0.00.461.172 I 
0.00.461.249 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.252 I 
0.00.461.293 I sampler seed: 211512590
0.00.461.305 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.310 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.311 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.311 I 
 increasities, which are often associated with high levels of inflammation and oxidative stress.

**Answer the following questions about this information:**

1. What is the

0.02.647.174 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6526.90 tokens per second)
0.02.647.176 I llama_perf_context_print:        load time =     460.16 ms
0.02.647.178 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.647.180 I llama_perf_context_print:        eval time =    2167.05 ms /    32 runs   (   67.72 ms per token,    14.77 tokens per second)
0.02.647.181 I llama_perf_context_print:       total time =    2186.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.558 I build: 4074 (e418ccf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.021.463 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.474 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.483 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.487 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.488 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.492 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.493 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.493 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.495 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.495 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.496 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.501 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.501 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.502 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.502 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.503 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.693 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.754 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.761 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.762 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.763 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.763 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.764 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.765 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.767 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.768 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.768 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.769 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.770 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.774 I llama_model_loader: - type  f32:   37 tensors
0.00.133.776 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.438 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.721 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.249 I llm_load_vocab: special tokens cache size = 5
0.00.270.400 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.418 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.419 I llm_load_print_meta: arch             = gemma
0.00.270.419 I llm_load_print_meta: vocab type       = SPM
0.00.270.420 I llm_load_print_meta: n_vocab          = 256000
0.00.270.420 I llm_load_print_meta: n_merges         = 0
0.00.270.421 I llm_load_print_meta: vocab_only       = 0
0.00.270.421 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.421 I llm_load_print_meta: n_embd           = 2048
0.00.270.422 I llm_load_print_meta: n_layer          = 18
0.00.270.435 I llm_load_print_meta: n_head           = 8
0.00.270.436 I llm_load_print_meta: n_head_kv        = 1
0.00.270.436 I llm_load_print_meta: n_rot            = 256
0.00.270.437 I llm_load_print_meta: n_swa            = 0
0.00.270.437 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.437 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.438 I llm_load_print_meta: n_gqa            = 8
0.00.270.439 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.440 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.441 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.442 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.443 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.444 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.444 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.445 I llm_load_print_meta: n_ff             = 16384
0.00.270.445 I llm_load_print_meta: n_expert         = 0
0.00.270.446 I llm_load_print_meta: n_expert_used    = 0
0.00.270.446 I llm_load_print_meta: causal attn      = 1
0.00.270.446 I llm_load_print_meta: pooling type     = 0
0.00.270.448 I llm_load_print_meta: rope type        = 2
0.00.270.448 I llm_load_print_meta: rope scaling     = linear
0.00.270.449 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.450 I llm_load_print_meta: freq_scale_train = 1
0.00.270.450 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.451 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.452 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.452 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.452 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.453 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.456 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.457 I llm_load_print_meta: model type       = 2B
0.00.270.458 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.458 I llm_load_print_meta: model params     = 2.51 B
0.00.270.459 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.460 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.460 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.463 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.464 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.464 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.465 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.465 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.465 I llm_load_print_meta: max token length = 93
0.00.356.747 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.356.754 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.755 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.356.755 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.356.756 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.757 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.363.822 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.828 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.828 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.829 I llama_new_context_with_model: n_batch       = 2048
0.00.363.829 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.830 I llama_new_context_with_model: flash_attn    = 0
0.00.363.833 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.836 I llama_new_context_with_model: freq_scale    = 1
0.00.363.837 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.624 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.636 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.727 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.947 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.952 I llama_new_context_with_model: graph nodes  = 601
0.00.380.953 I llama_new_context_with_model: graph splits = 1
0.00.380.955 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.281 I main: llama threadpool init, n_threads = 4
0.00.468.294 I 
0.00.468.370 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.373 I 
0.00.468.416 I sampler seed: 226844743
0.00.468.427 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.435 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.438 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.438 I 
 increasities and other sexual conditions can have significant consequences for both physical and emotional health. [end of text]


0.01.698.385 I llama_perf_sampler_print:    sampling time =       2.69 ms /    19 runs   (    0.14 ms per token,  7071.08 tokens per second)
0.01.698.387 I llama_perf_context_print:        load time =     467.37 ms
0.01.698.388 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.698.389 I llama_perf_context_print:        eval time =    1218.63 ms /    18 runs   (   67.70 ms per token,    14.77 tokens per second)
0.01.698.390 I llama_perf_context_print:       total time =    1230.11 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.549 I build: 4074 (e418ccf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.021.001 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.011 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.019 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.027 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.028 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.031 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.032 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.033 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.033 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.034 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.034 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.040 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.041 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.042 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.043 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.044 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.390 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.912 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.869 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.877 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.878 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.879 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.880 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.881 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.881 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.884 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.885 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.885 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.886 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.887 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.891 I llama_model_loader: - type  f32:   37 tensors
0.00.131.892 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.099 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.101 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.815 I llm_load_vocab: special tokens cache size = 5
0.00.283.927 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.947 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.948 I llm_load_print_meta: arch             = gemma
0.00.283.948 I llm_load_print_meta: vocab type       = SPM
0.00.283.949 I llm_load_print_meta: n_vocab          = 256000
0.00.283.950 I llm_load_print_meta: n_merges         = 0
0.00.283.950 I llm_load_print_meta: vocab_only       = 0
0.00.283.950 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.951 I llm_load_print_meta: n_embd           = 2048
0.00.283.951 I llm_load_print_meta: n_layer          = 18
0.00.283.964 I llm_load_print_meta: n_head           = 8
0.00.283.964 I llm_load_print_meta: n_head_kv        = 1
0.00.283.965 I llm_load_print_meta: n_rot            = 256
0.00.283.966 I llm_load_print_meta: n_swa            = 0
0.00.283.966 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.967 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.968 I llm_load_print_meta: n_gqa            = 8
0.00.283.969 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.969 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.970 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.972 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.972 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.972 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.972 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.973 I llm_load_print_meta: n_ff             = 16384
0.00.283.974 I llm_load_print_meta: n_expert         = 0
0.00.283.974 I llm_load_print_meta: n_expert_used    = 0
0.00.283.975 I llm_load_print_meta: causal attn      = 1
0.00.283.975 I llm_load_print_meta: pooling type     = 0
0.00.283.975 I llm_load_print_meta: rope type        = 2
0.00.283.976 I llm_load_print_meta: rope scaling     = linear
0.00.283.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.978 I llm_load_print_meta: freq_scale_train = 1
0.00.283.978 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.979 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.979 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.979 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.979 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.979 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.980 I llm_load_print_meta: model type       = 2B
0.00.283.981 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.981 I llm_load_print_meta: model params     = 2.51 B
0.00.283.983 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.983 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.984 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.984 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.984 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.985 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.985 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.985 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.986 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.986 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.987 I llm_load_print_meta: max token length = 93
0.00.355.041 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.355.047 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.360.380 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.387 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.387 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.388 I llama_new_context_with_model: n_batch       = 2048
0.00.360.388 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.389 I llama_new_context_with_model: flash_attn    = 0
0.00.360.391 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.392 I llama_new_context_with_model: freq_scale    = 1
0.00.360.393 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.463 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.478 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.589 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.865 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.872 I llama_new_context_with_model: graph nodes  = 601
0.00.376.873 I llama_new_context_with_model: graph splits = 1
0.00.376.874 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.405 I main: llama threadpool init, n_threads = 4
0.00.464.419 I 
0.00.464.506 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.510 I 
0.00.464.566 I sampler seed: 2520671280
0.00.464.578 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.581 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.582 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.582 I 
 increasities
**Answer:** I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and questions that comply with ethical and legal

0.02.887.732 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6601.32 tokens per second)
0.02.887.737 I llama_perf_context_print:        load time =     463.47 ms
0.02.887.738 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.887.740 I llama_perf_context_print:        eval time =    2404.01 ms /    32 runs   (   75.13 ms per token,    13.31 tokens per second)
0.02.887.741 I llama_perf_context_print:       total time =    2423.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.592s
user	0m31.620s
sys	0m9.313s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4074 (e418ccf2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31986.68 ms
main:    total time = 31986.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4074 (e418ccf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.021.634 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.644 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.654 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.659 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.660 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.664 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.665 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.665 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.666 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.667 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.668 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.671 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.672 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.673 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.673 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.673 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.954 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.760 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.559 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.567 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.568 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.568 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.569 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.570 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.570 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.573 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.573 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.574 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.574 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.575 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.578 I llama_model_loader: - type  f32:   37 tensors
0.00.131.580 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.580 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.531 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.040 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.694 I llm_load_vocab: special tokens cache size = 5
0.00.261.319 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.335 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.336 I llm_load_print_meta: arch             = gemma
0.00.261.336 I llm_load_print_meta: vocab type       = SPM
0.00.261.337 I llm_load_print_meta: n_vocab          = 256000
0.00.261.337 I llm_load_print_meta: n_merges         = 0
0.00.261.338 I llm_load_print_meta: vocab_only       = 0
0.00.261.338 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.338 I llm_load_print_meta: n_embd           = 2048
0.00.261.339 I llm_load_print_meta: n_layer          = 18
0.00.261.351 I llm_load_print_meta: n_head           = 8
0.00.261.352 I llm_load_print_meta: n_head_kv        = 1
0.00.261.352 I llm_load_print_meta: n_rot            = 256
0.00.261.353 I llm_load_print_meta: n_swa            = 0
0.00.261.353 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.353 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.354 I llm_load_print_meta: n_gqa            = 8
0.00.261.355 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.356 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.357 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.358 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.359 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.359 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.359 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.361 I llm_load_print_meta: n_ff             = 16384
0.00.261.361 I llm_load_print_meta: n_expert         = 0
0.00.261.361 I llm_load_print_meta: n_expert_used    = 0
0.00.261.362 I llm_load_print_meta: causal attn      = 1
0.00.261.362 I llm_load_print_meta: pooling type     = 0
0.00.261.363 I llm_load_print_meta: rope type        = 2
0.00.261.364 I llm_load_print_meta: rope scaling     = linear
0.00.261.365 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.366 I llm_load_print_meta: freq_scale_train = 1
0.00.261.366 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.367 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.367 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.367 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.367 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.368 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.368 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.369 I llm_load_print_meta: model type       = 2B
0.00.261.369 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.371 I llm_load_print_meta: model params     = 2.51 B
0.00.261.371 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.372 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.373 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.373 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.374 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.374 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.374 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.375 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.375 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.376 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.376 I llm_load_print_meta: max token length = 93
0.00.321.521 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.528 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.528 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.529 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.530 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.530 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.701 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.707 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.708 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.708 I llama_new_context_with_model: n_batch       = 2048
0.00.326.709 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.709 I llama_new_context_with_model: flash_attn    = 0
0.00.326.711 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.712 I llama_new_context_with_model: freq_scale    = 1
0.00.326.713 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.899 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.913 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.011 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.287 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.294 I llama_new_context_with_model: graph nodes  = 601
0.00.343.294 I llama_new_context_with_model: graph splits = 1
0.00.343.296 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.710 I main: llama threadpool init, n_threads = 4
0.00.419.726 I 
0.00.419.802 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.805 I 
0.00.419.846 I sampler seed: 2632508666
0.00.419.857 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.860 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.860 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.862 I 
 fufilling melodies and ethereal vocals that soar above soaring orchestral arrangements.

This is the sonic landscape of a masterpiece, a symphony that transcends time and evokes a sense

0.02.048.949 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6670.71 tokens per second)
0.02.048.952 I llama_perf_context_print:        load time =     418.81 ms
0.02.048.953 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.048.954 I llama_perf_context_print:        eval time =    1610.39 ms /    32 runs   (   50.32 ms per token,    19.87 tokens per second)
0.02.048.955 I llama_perf_context_print:       total time =    1629.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4074 (e418ccf2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32084.85 ms
main:    total time = 32084.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.548 I build: 4074 (e418ccf2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.021.593 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.612 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.619 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.622 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.626 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.627 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.628 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.628 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.629 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.630 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.634 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.635 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.635 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.636 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.636 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.963 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.604 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.396 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.403 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.404 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.405 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.406 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.407 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.408 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.411 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.412 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.415 I llama_model_loader: - type  f32:   37 tensors
0.00.131.416 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.417 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.972 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.226 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.800 I llm_load_vocab: special tokens cache size = 5
0.00.268.349 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.365 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.365 I llm_load_print_meta: arch             = gemma
0.00.268.366 I llm_load_print_meta: vocab type       = SPM
0.00.268.367 I llm_load_print_meta: n_vocab          = 256000
0.00.268.367 I llm_load_print_meta: n_merges         = 0
0.00.268.368 I llm_load_print_meta: vocab_only       = 0
0.00.268.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.368 I llm_load_print_meta: n_embd           = 2048
0.00.268.368 I llm_load_print_meta: n_layer          = 18
0.00.268.381 I llm_load_print_meta: n_head           = 8
0.00.268.382 I llm_load_print_meta: n_head_kv        = 1
0.00.268.382 I llm_load_print_meta: n_rot            = 256
0.00.268.382 I llm_load_print_meta: n_swa            = 0
0.00.268.383 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.384 I llm_load_print_meta: n_gqa            = 8
0.00.268.385 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.386 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.387 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.388 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.388 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.389 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.389 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.390 I llm_load_print_meta: n_ff             = 16384
0.00.268.390 I llm_load_print_meta: n_expert         = 0
0.00.268.390 I llm_load_print_meta: n_expert_used    = 0
0.00.268.391 I llm_load_print_meta: causal attn      = 1
0.00.268.391 I llm_load_print_meta: pooling type     = 0
0.00.268.391 I llm_load_print_meta: rope type        = 2
0.00.268.392 I llm_load_print_meta: rope scaling     = linear
0.00.268.393 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.394 I llm_load_print_meta: freq_scale_train = 1
0.00.268.394 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.395 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.395 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.396 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.396 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.396 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.396 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.397 I llm_load_print_meta: model type       = 2B
0.00.268.397 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.398 I llm_load_print_meta: model params     = 2.51 B
0.00.268.399 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.399 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.400 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.400 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.400 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.401 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.401 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.401 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.402 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.402 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.402 I llm_load_print_meta: max token length = 93
0.00.326.833 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.031 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.037 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.037 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.038 I llama_new_context_with_model: n_batch       = 2048
0.00.332.038 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.039 I llama_new_context_with_model: flash_attn    = 0
0.00.332.040 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.041 I llama_new_context_with_model: freq_scale    = 1
0.00.332.042 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.793 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.807 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.899 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.179 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.186 I llama_new_context_with_model: graph nodes  = 601
0.00.349.186 I llama_new_context_with_model: graph splits = 1
0.00.349.188 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.043 I main: llama threadpool init, n_threads = 4
0.00.425.057 I 
0.00.425.138 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.425.138 I 
0.00.425.180 I sampler seed: 2523907776
0.00.425.190 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.193 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.194 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.194 I 
 encompasingly.

**The Importance of Sleep**

Sleep is crucial for physical and mental health. It is essential for growth, repair, and restoration of

0.02.039.285 I llama_perf_sampler_print:    sampling time =       5.25 ms /    33 runs   (    0.16 ms per token,  6289.31 tokens per second)
0.02.039.287 I llama_perf_context_print:        load time =     424.13 ms
0.02.039.288 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.039.290 I llama_perf_context_print:        eval time =    1594.78 ms /    32 runs   (   49.84 ms per token,    20.07 tokens per second)
0.02.039.290 I llama_perf_context_print:       total time =    1614.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.961s
user	8m14.530s
sys	0m6.980s
