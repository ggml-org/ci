+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.651 I build: 4052 (e40b85ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.863 I main: llama backend init
0.00.000.998 I main: load the model and apply lora adapter, if any
0.00.022.078 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.090 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.098 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.103 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.104 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.109 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.110 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.110 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.111 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.111 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.117 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.118 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.118 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.119 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.119 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.885 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.955 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.888 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.895 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.896 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.896 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.897 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.898 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.898 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.901 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.901 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.902 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.902 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.904 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.909 I llama_model_loader: - type  f32:   37 tensors
0.00.133.910 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.259 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.584 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.225 I llm_load_vocab: special tokens cache size = 5
0.00.288.626 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.645 I llm_load_print_meta: arch             = gemma
0.00.288.646 I llm_load_print_meta: vocab type       = SPM
0.00.288.646 I llm_load_print_meta: n_vocab          = 256000
0.00.288.647 I llm_load_print_meta: n_merges         = 0
0.00.288.647 I llm_load_print_meta: vocab_only       = 0
0.00.288.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.648 I llm_load_print_meta: n_embd           = 2048
0.00.288.648 I llm_load_print_meta: n_layer          = 18
0.00.288.660 I llm_load_print_meta: n_head           = 8
0.00.288.661 I llm_load_print_meta: n_head_kv        = 1
0.00.288.661 I llm_load_print_meta: n_rot            = 256
0.00.288.662 I llm_load_print_meta: n_swa            = 0
0.00.288.662 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.662 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.663 I llm_load_print_meta: n_gqa            = 8
0.00.288.664 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.665 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.666 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.668 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.668 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.669 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.670 I llm_load_print_meta: n_ff             = 16384
0.00.288.670 I llm_load_print_meta: n_expert         = 0
0.00.288.670 I llm_load_print_meta: n_expert_used    = 0
0.00.288.670 I llm_load_print_meta: causal attn      = 1
0.00.288.671 I llm_load_print_meta: pooling type     = 0
0.00.288.671 I llm_load_print_meta: rope type        = 2
0.00.288.671 I llm_load_print_meta: rope scaling     = linear
0.00.288.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.674 I llm_load_print_meta: freq_scale_train = 1
0.00.288.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.674 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.675 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.676 I llm_load_print_meta: model type       = 2B
0.00.288.676 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.677 I llm_load_print_meta: model params     = 2.51 B
0.00.288.678 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.680 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.681 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.682 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.682 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.684 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.684 I llm_load_print_meta: max token length = 93
0.00.388.684 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.388.690 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.388.691 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.388.692 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.388.692 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.388.693 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.394.047 I llama_new_context_with_model: n_seq_max     = 1
0.00.394.054 I llama_new_context_with_model: n_ctx         = 4096
0.00.394.055 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.394.055 I llama_new_context_with_model: n_batch       = 2048
0.00.394.056 I llama_new_context_with_model: n_ubatch      = 512
0.00.394.056 I llama_new_context_with_model: flash_attn    = 0
0.00.394.059 I llama_new_context_with_model: freq_base     = 10000.0
0.00.394.060 I llama_new_context_with_model: freq_scale    = 1
0.00.394.061 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.409.635 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.409.652 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.409.743 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.410.978 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.410.986 I llama_new_context_with_model: graph nodes  = 601
0.00.410.986 I llama_new_context_with_model: graph splits = 1
0.00.410.988 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.264 I main: llama threadpool init, n_threads = 4
0.00.500.277 I 
0.00.500.353 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.500.357 I 
0.00.500.399 I sampler seed: 1210585106
0.00.500.410 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.413 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.500.415 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.415 I 
 increamically, then explain why the statement is incorrect.

Explain the correct sequence of events.

A snail crawls along a path, leaving a trail of mucus

0.02.790.286 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6699.15 tokens per second)
0.02.790.288 I llama_perf_context_print:        load time =     499.24 ms
0.02.790.289 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.790.290 I llama_perf_context_print:        eval time =    2270.89 ms /    32 runs   (   70.97 ms per token,    14.09 tokens per second)
0.02.790.291 I llama_perf_context_print:       total time =    2290.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.556 I build: 4052 (e40b85ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.021.584 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.597 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.603 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.604 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.608 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.609 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.610 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.611 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.611 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.612 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.617 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.617 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.618 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.619 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.619 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.470 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.559 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.505 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.514 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.514 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.515 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.516 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.517 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.517 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.520 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.520 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.521 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.521 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.522 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.526 I llama_model_loader: - type  f32:   37 tensors
0.00.132.528 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.826 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.377 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.031 I llm_load_vocab: special tokens cache size = 5
0.00.285.514 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.532 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.532 I llm_load_print_meta: arch             = gemma
0.00.285.535 I llm_load_print_meta: vocab type       = SPM
0.00.285.536 I llm_load_print_meta: n_vocab          = 256000
0.00.285.536 I llm_load_print_meta: n_merges         = 0
0.00.285.537 I llm_load_print_meta: vocab_only       = 0
0.00.285.537 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.537 I llm_load_print_meta: n_embd           = 2048
0.00.285.537 I llm_load_print_meta: n_layer          = 18
0.00.285.549 I llm_load_print_meta: n_head           = 8
0.00.285.550 I llm_load_print_meta: n_head_kv        = 1
0.00.285.551 I llm_load_print_meta: n_rot            = 256
0.00.285.551 I llm_load_print_meta: n_swa            = 0
0.00.285.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.554 I llm_load_print_meta: n_gqa            = 8
0.00.285.555 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.558 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.559 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.559 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.560 I llm_load_print_meta: n_ff             = 16384
0.00.285.560 I llm_load_print_meta: n_expert         = 0
0.00.285.561 I llm_load_print_meta: n_expert_used    = 0
0.00.285.561 I llm_load_print_meta: causal attn      = 1
0.00.285.562 I llm_load_print_meta: pooling type     = 0
0.00.285.562 I llm_load_print_meta: rope type        = 2
0.00.285.563 I llm_load_print_meta: rope scaling     = linear
0.00.285.564 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.565 I llm_load_print_meta: freq_scale_train = 1
0.00.285.565 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.571 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.571 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.571 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.572 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.572 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.572 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.572 I llm_load_print_meta: model type       = 2B
0.00.285.573 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.574 I llm_load_print_meta: model params     = 2.51 B
0.00.285.575 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.575 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.576 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.576 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.577 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.577 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.578 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.579 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.579 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.579 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.580 I llm_load_print_meta: max token length = 93
0.00.381.265 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.386.523 I llama_new_context_with_model: n_seq_max     = 1
0.00.386.529 I llama_new_context_with_model: n_ctx         = 4096
0.00.386.529 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.386.529 I llama_new_context_with_model: n_batch       = 2048
0.00.386.530 I llama_new_context_with_model: n_ubatch      = 512
0.00.386.530 I llama_new_context_with_model: flash_attn    = 0
0.00.386.533 I llama_new_context_with_model: freq_base     = 10000.0
0.00.386.533 I llama_new_context_with_model: freq_scale    = 1
0.00.386.534 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.769 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.784 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.877 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.093 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.100 I llama_new_context_with_model: graph nodes  = 601
0.00.404.100 I llama_new_context_with_model: graph splits = 1
0.00.404.102 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.035 I main: llama threadpool init, n_threads = 4
0.00.488.049 I 
0.00.488.126 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.488.129 I 
0.00.488.177 I sampler seed: 2632608297
0.00.488.188 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.193 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.194 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.194 I 
 increasities can be a sign of what?

a) Increased aggression
b) Increased communication
c) Increased emotional distress
d) Increased social awareness



0.02.723.944 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6645.19 tokens per second)
0.02.723.947 I llama_perf_context_print:        load time =     487.13 ms
0.02.723.949 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.723.951 I llama_perf_context_print:        eval time =    2215.71 ms /    32 runs   (   69.24 ms per token,    14.44 tokens per second)
0.02.723.953 I llama_perf_context_print:       total time =    2235.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.550 I build: 4052 (e40b85ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.021.532 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.543 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.552 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.560 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.564 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.565 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.565 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.566 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.567 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.567 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.572 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.573 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.574 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.574 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.575 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.052 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.746 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.664 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.672 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.672 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.673 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.674 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.674 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.675 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.678 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.678 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.679 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.679 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.680 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.684 I llama_model_loader: - type  f32:   37 tensors
0.00.132.685 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.545 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.873 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.533 I llm_load_vocab: special tokens cache size = 5
0.00.276.069 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.085 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.086 I llm_load_print_meta: arch             = gemma
0.00.276.087 I llm_load_print_meta: vocab type       = SPM
0.00.276.088 I llm_load_print_meta: n_vocab          = 256000
0.00.276.088 I llm_load_print_meta: n_merges         = 0
0.00.276.089 I llm_load_print_meta: vocab_only       = 0
0.00.276.089 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.089 I llm_load_print_meta: n_embd           = 2048
0.00.276.090 I llm_load_print_meta: n_layer          = 18
0.00.276.102 I llm_load_print_meta: n_head           = 8
0.00.276.103 I llm_load_print_meta: n_head_kv        = 1
0.00.276.103 I llm_load_print_meta: n_rot            = 256
0.00.276.103 I llm_load_print_meta: n_swa            = 0
0.00.276.104 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.104 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.105 I llm_load_print_meta: n_gqa            = 8
0.00.276.106 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.107 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.108 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.109 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.110 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.110 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.110 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.111 I llm_load_print_meta: n_ff             = 16384
0.00.276.112 I llm_load_print_meta: n_expert         = 0
0.00.276.112 I llm_load_print_meta: n_expert_used    = 0
0.00.276.112 I llm_load_print_meta: causal attn      = 1
0.00.276.113 I llm_load_print_meta: pooling type     = 0
0.00.276.113 I llm_load_print_meta: rope type        = 2
0.00.276.113 I llm_load_print_meta: rope scaling     = linear
0.00.276.115 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.115 I llm_load_print_meta: freq_scale_train = 1
0.00.276.116 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.116 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.116 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.117 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.117 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.117 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.117 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.118 I llm_load_print_meta: model type       = 2B
0.00.276.119 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.120 I llm_load_print_meta: model params     = 2.51 B
0.00.276.120 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.121 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.122 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.122 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.122 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.123 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.123 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.123 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.124 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.124 I llm_load_print_meta: max token length = 93
0.00.362.730 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.362.738 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.739 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.362.739 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.362.740 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.740 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.367.930 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.934 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.935 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.935 I llama_new_context_with_model: n_batch       = 2048
0.00.367.935 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.936 I llama_new_context_with_model: flash_attn    = 0
0.00.367.938 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.939 I llama_new_context_with_model: freq_scale    = 1
0.00.367.940 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.701 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.717 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.083 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.090 I llama_new_context_with_model: graph nodes  = 601
0.00.385.090 I llama_new_context_with_model: graph splits = 1
0.00.385.092 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.095 I main: llama threadpool init, n_threads = 4
0.00.471.109 I 
0.00.471.184 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.188 I 
0.00.471.234 I sampler seed: 3188114052
0.00.471.244 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.247 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.248 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.248 I 
 increasels, and knights!

In the magical realm of Eldoria, where magic weaves through the air like a shimmering thread, there lived a valiant knight named

0.02.677.342 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6765.07 tokens per second)
0.02.677.344 I llama_perf_context_print:        load time =     470.19 ms
0.02.677.345 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.677.347 I llama_perf_context_print:        eval time =    2186.32 ms /    32 runs   (   68.32 ms per token,    14.64 tokens per second)
0.02.677.347 I llama_perf_context_print:       total time =    2206.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.562 I build: 4052 (e40b85ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.021.277 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.286 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.294 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.299 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.300 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.304 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.305 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.305 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.306 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.307 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.307 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.312 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.312 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.313 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.313 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.313 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.816 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.382 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.235 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.242 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.242 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.243 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.243 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.244 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.245 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.250 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.250 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.251 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.255 I llama_model_loader: - type  f32:   37 tensors
0.00.132.256 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.786 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.599 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.254 I llm_load_vocab: special tokens cache size = 5
0.00.280.677 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.695 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.695 I llm_load_print_meta: arch             = gemma
0.00.280.696 I llm_load_print_meta: vocab type       = SPM
0.00.280.696 I llm_load_print_meta: n_vocab          = 256000
0.00.280.696 I llm_load_print_meta: n_merges         = 0
0.00.280.697 I llm_load_print_meta: vocab_only       = 0
0.00.280.697 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.697 I llm_load_print_meta: n_embd           = 2048
0.00.280.697 I llm_load_print_meta: n_layer          = 18
0.00.280.708 I llm_load_print_meta: n_head           = 8
0.00.280.709 I llm_load_print_meta: n_head_kv        = 1
0.00.280.710 I llm_load_print_meta: n_rot            = 256
0.00.280.710 I llm_load_print_meta: n_swa            = 0
0.00.280.710 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.711 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.712 I llm_load_print_meta: n_gqa            = 8
0.00.280.713 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.713 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.714 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.716 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.716 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.716 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.716 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.717 I llm_load_print_meta: n_ff             = 16384
0.00.280.718 I llm_load_print_meta: n_expert         = 0
0.00.280.718 I llm_load_print_meta: n_expert_used    = 0
0.00.280.718 I llm_load_print_meta: causal attn      = 1
0.00.280.718 I llm_load_print_meta: pooling type     = 0
0.00.280.719 I llm_load_print_meta: rope type        = 2
0.00.280.719 I llm_load_print_meta: rope scaling     = linear
0.00.280.721 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.721 I llm_load_print_meta: freq_scale_train = 1
0.00.280.722 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.722 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.722 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.722 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.723 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.723 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.723 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.724 I llm_load_print_meta: model type       = 2B
0.00.280.724 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.725 I llm_load_print_meta: model params     = 2.51 B
0.00.280.726 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.726 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.726 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.727 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.728 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.728 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.729 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.729 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.730 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.730 I llm_load_print_meta: max token length = 93
0.00.351.934 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.351.942 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.357.054 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.060 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.060 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.061 I llama_new_context_with_model: n_batch       = 2048
0.00.357.061 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.062 I llama_new_context_with_model: flash_attn    = 0
0.00.357.065 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.066 I llama_new_context_with_model: freq_scale    = 1
0.00.357.067 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.414 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.431 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.530 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.827 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.833 I llama_new_context_with_model: graph nodes  = 601
0.00.373.833 I llama_new_context_with_model: graph splits = 1
0.00.373.835 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.880 I main: llama threadpool init, n_threads = 4
0.00.465.893 I 
0.00.465.971 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.975 I 
0.00.466.017 I sampler seed: 1813749496
0.00.466.028 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.035 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.036 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.036 I 
 increadibly with excitement! [end of text]


0.00.922.893 I llama_perf_sampler_print:    sampling time =       0.91 ms /     7 runs   (    0.13 ms per token,  7726.27 tokens per second)
0.00.922.896 I llama_perf_context_print:        load time =     464.96 ms
0.00.922.897 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.922.898 I llama_perf_context_print:        eval time =     452.77 ms /     6 runs   (   75.46 ms per token,    13.25 tokens per second)
0.00.922.899 I llama_perf_context_print:       total time =     457.02 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.982s
user	0m31.813s
sys	0m9.508s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4052 (e40b85ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32131.02 ms
main:    total time = 32131.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.651 I build: 4052 (e40b85ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.847 I main: llama backend init
0.00.000.985 I main: load the model and apply lora adapter, if any
0.00.021.754 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.765 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.773 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.782 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.783 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.787 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.788 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.789 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.790 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.791 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.791 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.796 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.796 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.797 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.797 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.798 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.053 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.803 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.707 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.714 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.715 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.715 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.716 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.717 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.717 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.720 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.720 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.721 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.721 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.722 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.726 I llama_model_loader: - type  f32:   37 tensors
0.00.132.728 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.728 I llama_model_loader: - type q6_K:   19 tensors
0.00.232.395 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.284.329 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.284.934 I llm_load_vocab: special tokens cache size = 5
0.00.306.284 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.306.302 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.306.303 I llm_load_print_meta: arch             = gemma
0.00.306.304 I llm_load_print_meta: vocab type       = SPM
0.00.306.304 I llm_load_print_meta: n_vocab          = 256000
0.00.306.305 I llm_load_print_meta: n_merges         = 0
0.00.306.305 I llm_load_print_meta: vocab_only       = 0
0.00.306.306 I llm_load_print_meta: n_ctx_train      = 8192
0.00.306.306 I llm_load_print_meta: n_embd           = 2048
0.00.306.306 I llm_load_print_meta: n_layer          = 18
0.00.306.319 I llm_load_print_meta: n_head           = 8
0.00.306.320 I llm_load_print_meta: n_head_kv        = 1
0.00.306.320 I llm_load_print_meta: n_rot            = 256
0.00.306.320 I llm_load_print_meta: n_swa            = 0
0.00.306.321 I llm_load_print_meta: n_embd_head_k    = 256
0.00.306.321 I llm_load_print_meta: n_embd_head_v    = 256
0.00.306.322 I llm_load_print_meta: n_gqa            = 8
0.00.306.323 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.306.324 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.306.325 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.306.326 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.306.327 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.306.327 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.306.327 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.306.328 I llm_load_print_meta: n_ff             = 16384
0.00.306.329 I llm_load_print_meta: n_expert         = 0
0.00.306.329 I llm_load_print_meta: n_expert_used    = 0
0.00.306.329 I llm_load_print_meta: causal attn      = 1
0.00.306.330 I llm_load_print_meta: pooling type     = 0
0.00.306.330 I llm_load_print_meta: rope type        = 2
0.00.306.331 I llm_load_print_meta: rope scaling     = linear
0.00.306.332 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.306.333 I llm_load_print_meta: freq_scale_train = 1
0.00.306.333 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.306.333 I llm_load_print_meta: rope_finetuned   = unknown
0.00.306.334 I llm_load_print_meta: ssm_d_conv       = 0
0.00.306.334 I llm_load_print_meta: ssm_d_inner      = 0
0.00.306.334 I llm_load_print_meta: ssm_d_state      = 0
0.00.306.334 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.306.335 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.306.335 I llm_load_print_meta: model type       = 2B
0.00.306.336 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.306.337 I llm_load_print_meta: model params     = 2.51 B
0.00.306.338 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.306.338 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.306.339 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.306.339 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.306.339 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.306.341 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.306.341 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.306.342 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.306.342 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.306.343 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.306.346 I llm_load_print_meta: max token length = 93
0.00.367.065 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.367.074 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.367.075 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.367.075 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.367.076 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.367.076 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.372.400 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.406 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.406 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.407 I llama_new_context_with_model: n_batch       = 2048
0.00.372.408 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.409 I llama_new_context_with_model: flash_attn    = 0
0.00.372.412 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.413 I llama_new_context_with_model: freq_scale    = 1
0.00.372.414 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.732 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.746 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.842 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.119 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.126 I llama_new_context_with_model: graph nodes  = 601
0.00.390.126 I llama_new_context_with_model: graph splits = 1
0.00.390.128 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.956 I main: llama threadpool init, n_threads = 4
0.00.468.970 I 
0.00.469.047 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.050 I 
0.00.469.092 I sampler seed: 1878884467
0.00.469.103 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.108 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.108 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.108 I 
 increasities over the weekend and the following week, and I am concerned about the impact of these on my business.

**Possible Impacts on Business:**

-

0.02.183.635 I llama_perf_sampler_print:    sampling time =       4.61 ms /    33 runs   (    0.14 ms per token,  7152.15 tokens per second)
0.02.183.637 I llama_perf_context_print:        load time =     467.95 ms
0.02.183.639 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.183.640 I llama_perf_context_print:        eval time =    1695.96 ms /    32 runs   (   53.00 ms per token,    18.87 tokens per second)
0.02.183.641 I llama_perf_context_print:       total time =    1714.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4052 (e40b85ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32069.47 ms
main:    total time = 32069.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.541 I build: 4052 (e40b85ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.021.453 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.470 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.476 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.477 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.481 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.482 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.483 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.484 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.485 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.485 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.490 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.490 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.491 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.491 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.492 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.380 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.144 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.102 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.111 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.111 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.112 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.112 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.113 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.117 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.117 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.122 I llama_model_loader: - type  f32:   37 tensors
0.00.133.123 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.125 I llama_model_loader: - type q6_K:   19 tensors
0.00.217.681 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.127 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.731 I llm_load_vocab: special tokens cache size = 5
0.00.292.110 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.130 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.130 I llm_load_print_meta: arch             = gemma
0.00.292.131 I llm_load_print_meta: vocab type       = SPM
0.00.292.132 I llm_load_print_meta: n_vocab          = 256000
0.00.292.132 I llm_load_print_meta: n_merges         = 0
0.00.292.132 I llm_load_print_meta: vocab_only       = 0
0.00.292.133 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.133 I llm_load_print_meta: n_embd           = 2048
0.00.292.133 I llm_load_print_meta: n_layer          = 18
0.00.292.145 I llm_load_print_meta: n_head           = 8
0.00.292.146 I llm_load_print_meta: n_head_kv        = 1
0.00.292.146 I llm_load_print_meta: n_rot            = 256
0.00.292.147 I llm_load_print_meta: n_swa            = 0
0.00.292.148 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.148 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.149 I llm_load_print_meta: n_gqa            = 8
0.00.292.150 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.151 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.152 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.154 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.155 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.155 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.155 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.156 I llm_load_print_meta: n_ff             = 16384
0.00.292.157 I llm_load_print_meta: n_expert         = 0
0.00.292.157 I llm_load_print_meta: n_expert_used    = 0
0.00.292.158 I llm_load_print_meta: causal attn      = 1
0.00.292.158 I llm_load_print_meta: pooling type     = 0
0.00.292.158 I llm_load_print_meta: rope type        = 2
0.00.292.159 I llm_load_print_meta: rope scaling     = linear
0.00.292.161 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.162 I llm_load_print_meta: freq_scale_train = 1
0.00.292.162 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.163 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.163 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.164 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.165 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.165 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.166 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.166 I llm_load_print_meta: model type       = 2B
0.00.292.167 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.292.168 I llm_load_print_meta: model params     = 2.51 B
0.00.292.169 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.292.169 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.170 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.170 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.171 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.171 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.172 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.172 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.173 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.174 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.174 I llm_load_print_meta: max token length = 93
0.00.349.738 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.354.920 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.927 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.928 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.928 I llama_new_context_with_model: n_batch       = 2048
0.00.354.928 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.928 I llama_new_context_with_model: flash_attn    = 0
0.00.354.931 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.932 I llama_new_context_with_model: freq_scale    = 1
0.00.354.933 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.277 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.293 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.384 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.650 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.656 I llama_new_context_with_model: graph nodes  = 601
0.00.372.656 I llama_new_context_with_model: graph splits = 1
0.00.372.658 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.326 I main: llama threadpool init, n_threads = 4
0.00.447.341 I 
0.00.447.416 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.447.419 I 
0.00.447.468 I sampler seed: 3680536289
0.00.447.479 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.482 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.482 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.483 I 
 encompates an impressive range of activities and industries, making it one of the largest and most diverse organizations in the world.

**a) Discuss the challenges and

0.02.097.579 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6846.47 tokens per second)
0.02.097.582 I llama_perf_context_print:        load time =     446.44 ms
0.02.097.583 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.097.585 I llama_perf_context_print:        eval time =    1630.66 ms /    32 runs   (   50.96 ms per token,    19.62 tokens per second)
0.02.097.587 I llama_perf_context_print:       total time =    1650.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m12.026s
user	8m15.707s
sys	0m7.278s
