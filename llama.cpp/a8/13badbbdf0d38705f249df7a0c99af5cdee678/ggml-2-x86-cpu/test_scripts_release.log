+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.532 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.706 I main: llama backend init
0.00.000.714 I main: load the model and apply lora adapter, if any
0.00.022.424 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.435 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.443 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.452 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.457 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.459 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.460 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.461 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.462 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.463 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.463 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.467 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.468 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.469 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.470 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.470 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.791 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.810 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.638 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.644 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.645 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.646 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.647 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.648 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.649 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.653 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.654 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.655 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.655 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.656 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.661 I llama_model_loader: - type  f32:   37 tensors
0.00.131.662 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.525 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.286 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.829 I llm_load_vocab: special tokens cache size = 5
0.00.268.641 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.656 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.656 I llm_load_print_meta: arch             = gemma
0.00.268.657 I llm_load_print_meta: vocab type       = SPM
0.00.268.658 I llm_load_print_meta: n_vocab          = 256000
0.00.268.658 I llm_load_print_meta: n_merges         = 0
0.00.268.658 I llm_load_print_meta: vocab_only       = 0
0.00.268.659 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.659 I llm_load_print_meta: n_embd           = 2048
0.00.268.659 I llm_load_print_meta: n_layer          = 18
0.00.268.671 I llm_load_print_meta: n_head           = 8
0.00.268.672 I llm_load_print_meta: n_head_kv        = 1
0.00.268.672 I llm_load_print_meta: n_rot            = 256
0.00.268.672 I llm_load_print_meta: n_swa            = 0
0.00.268.673 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.673 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.674 I llm_load_print_meta: n_gqa            = 8
0.00.268.675 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.676 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.677 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.678 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.679 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.679 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.679 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.680 I llm_load_print_meta: n_ff             = 16384
0.00.268.680 I llm_load_print_meta: n_expert         = 0
0.00.268.680 I llm_load_print_meta: n_expert_used    = 0
0.00.268.681 I llm_load_print_meta: causal attn      = 1
0.00.268.681 I llm_load_print_meta: pooling type     = 0
0.00.268.681 I llm_load_print_meta: rope type        = 2
0.00.268.682 I llm_load_print_meta: rope scaling     = linear
0.00.268.684 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.685 I llm_load_print_meta: freq_scale_train = 1
0.00.268.685 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.686 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.686 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.687 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.687 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.688 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.688 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.688 I llm_load_print_meta: model type       = 2B
0.00.268.689 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.690 I llm_load_print_meta: model params     = 2.51 B
0.00.268.691 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.691 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.692 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.693 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.693 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.694 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.694 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.694 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.695 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.695 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.696 I llm_load_print_meta: max token length = 93
0.00.369.632 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.639 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.640 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.640 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.641 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.641 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.791 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.796 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.797 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.797 I llama_new_context_with_model: n_batch       = 2048
0.00.374.798 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.798 I llama_new_context_with_model: flash_attn    = 0
0.00.374.800 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.801 I llama_new_context_with_model: freq_scale    = 1
0.00.374.802 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.820 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.389.317 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.329 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.420 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.652 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.659 I llama_new_context_with_model: graph nodes  = 601
0.00.390.659 I llama_new_context_with_model: graph splits = 1
0.00.390.662 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.662 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.887 I main: llama threadpool init, n_threads = 4
0.00.474.904 I 
0.00.474.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.980 I 
0.00.475.022 I sampler seed: 3345250756
0.00.475.033 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.045 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.048 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.049 I 
 increamically.

A man stands in a field. He throws a stone into the air. The stone is caught by a hawk. The hawk flies away with

0.02.709.052 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6601.32 tokens per second)
0.02.709.056 I llama_perf_context_print:        load time =     474.16 ms
0.02.709.058 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.709.060 I llama_perf_context_print:        eval time =    2215.79 ms /    32 runs   (   69.24 ms per token,    14.44 tokens per second)
0.02.709.061 I llama_perf_context_print:       total time =    2234.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.547 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.221 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.237 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.248 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.249 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.252 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.253 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.254 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.255 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.255 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.256 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.260 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.261 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.261 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.262 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.263 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.329 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.202 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.209 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.209 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.210 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.211 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.212 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.212 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.214 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.215 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.215 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.217 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.218 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.221 I llama_model_loader: - type  f32:   37 tensors
0.00.131.222 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.921 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.031 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.598 I llm_load_vocab: special tokens cache size = 5
0.00.276.400 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.417 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.418 I llm_load_print_meta: arch             = gemma
0.00.276.419 I llm_load_print_meta: vocab type       = SPM
0.00.276.420 I llm_load_print_meta: n_vocab          = 256000
0.00.276.420 I llm_load_print_meta: n_merges         = 0
0.00.276.420 I llm_load_print_meta: vocab_only       = 0
0.00.276.421 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.421 I llm_load_print_meta: n_embd           = 2048
0.00.276.421 I llm_load_print_meta: n_layer          = 18
0.00.276.433 I llm_load_print_meta: n_head           = 8
0.00.276.434 I llm_load_print_meta: n_head_kv        = 1
0.00.276.434 I llm_load_print_meta: n_rot            = 256
0.00.276.434 I llm_load_print_meta: n_swa            = 0
0.00.276.434 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.435 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.436 I llm_load_print_meta: n_gqa            = 8
0.00.276.437 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.438 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.439 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.440 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.441 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.441 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.441 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.442 I llm_load_print_meta: n_ff             = 16384
0.00.276.442 I llm_load_print_meta: n_expert         = 0
0.00.276.442 I llm_load_print_meta: n_expert_used    = 0
0.00.276.443 I llm_load_print_meta: causal attn      = 1
0.00.276.443 I llm_load_print_meta: pooling type     = 0
0.00.276.443 I llm_load_print_meta: rope type        = 2
0.00.276.444 I llm_load_print_meta: rope scaling     = linear
0.00.276.445 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.446 I llm_load_print_meta: freq_scale_train = 1
0.00.276.446 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.447 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.447 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.447 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.447 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.448 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.448 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.449 I llm_load_print_meta: model type       = 2B
0.00.276.449 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.450 I llm_load_print_meta: model params     = 2.51 B
0.00.276.451 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.452 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.452 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.453 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.453 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.453 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.453 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.454 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.454 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.454 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.455 I llm_load_print_meta: max token length = 93
0.00.372.689 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.377.772 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.777 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.778 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.778 I llama_new_context_with_model: n_batch       = 2048
0.00.377.779 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.779 I llama_new_context_with_model: flash_attn    = 0
0.00.377.781 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.782 I llama_new_context_with_model: freq_scale    = 1
0.00.377.783 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.803 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.392.224 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.236 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.322 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.528 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.534 I llama_new_context_with_model: graph nodes  = 601
0.00.393.535 I llama_new_context_with_model: graph splits = 1
0.00.393.537 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.393.537 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.089 I main: llama threadpool init, n_threads = 4
0.00.475.104 I 
0.00.475.178 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.181 I 
0.00.475.227 I sampler seed: 3073996474
0.00.475.238 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.249 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.253 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.253 I 
 increasities:

**a) Explain the process of data acquisition in the context of the study.**

**b) Discuss the challenges and limitations of data acquisition

0.02.646.579 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6625.18 tokens per second)
0.02.646.581 I llama_perf_context_print:        load time =     474.32 ms
0.02.646.582 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.646.583 I llama_perf_context_print:        eval time =    2153.12 ms /    32 runs   (   67.29 ms per token,    14.86 tokens per second)
0.02.646.584 I llama_perf_context_print:       total time =    2171.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.527 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.020.586 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.596 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.607 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.615 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.619 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.621 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.622 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.623 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.623 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.624 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.624 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.628 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.629 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.630 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.631 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.632 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.775 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.885 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.694 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.699 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.699 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.700 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.700 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.701 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.702 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.704 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.704 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.705 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.705 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.706 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.709 I llama_model_loader: - type  f32:   37 tensors
0.00.129.710 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.123 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.332 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.822 I llm_load_vocab: special tokens cache size = 5
0.00.270.521 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.535 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.535 I llm_load_print_meta: arch             = gemma
0.00.270.536 I llm_load_print_meta: vocab type       = SPM
0.00.270.537 I llm_load_print_meta: n_vocab          = 256000
0.00.270.537 I llm_load_print_meta: n_merges         = 0
0.00.270.537 I llm_load_print_meta: vocab_only       = 0
0.00.270.537 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.538 I llm_load_print_meta: n_embd           = 2048
0.00.270.538 I llm_load_print_meta: n_layer          = 18
0.00.270.550 I llm_load_print_meta: n_head           = 8
0.00.270.551 I llm_load_print_meta: n_head_kv        = 1
0.00.270.551 I llm_load_print_meta: n_rot            = 256
0.00.270.552 I llm_load_print_meta: n_swa            = 0
0.00.270.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.553 I llm_load_print_meta: n_gqa            = 8
0.00.270.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.555 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.556 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.558 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.559 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.561 I llm_load_print_meta: n_ff             = 16384
0.00.270.562 I llm_load_print_meta: n_expert         = 0
0.00.270.562 I llm_load_print_meta: n_expert_used    = 0
0.00.270.563 I llm_load_print_meta: causal attn      = 1
0.00.270.564 I llm_load_print_meta: pooling type     = 0
0.00.270.564 I llm_load_print_meta: rope type        = 2
0.00.270.565 I llm_load_print_meta: rope scaling     = linear
0.00.270.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.567 I llm_load_print_meta: freq_scale_train = 1
0.00.270.568 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.568 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.568 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.569 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.569 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.569 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.570 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.571 I llm_load_print_meta: model type       = 2B
0.00.270.572 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.573 I llm_load_print_meta: model params     = 2.51 B
0.00.270.574 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.574 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.574 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.575 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.575 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.575 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.576 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.576 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.576 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.577 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.577 I llm_load_print_meta: max token length = 93
0.00.348.417 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.348.425 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.426 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.348.427 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.348.427 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.428 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.353.558 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.565 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.566 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.566 I llama_new_context_with_model: n_batch       = 2048
0.00.353.566 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.567 I llama_new_context_with_model: flash_attn    = 0
0.00.353.571 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.572 I llama_new_context_with_model: freq_scale    = 1
0.00.353.573 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.595 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.368.514 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.527 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.626 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.887 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.894 I llama_new_context_with_model: graph nodes  = 601
0.00.369.894 I llama_new_context_with_model: graph splits = 1
0.00.369.897 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.897 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.044 I main: llama threadpool init, n_threads = 4
0.00.457.059 I 
0.00.457.135 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.457.136 I 
0.00.457.179 I sampler seed: 4230363325
0.00.457.187 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.190 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.191 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.191 I 
 increasities?

I cannot find the requested information in the provided context, so I am unable to answer this question. [end of text]


0.02.216.539 I llama_perf_sampler_print:    sampling time =       3.60 ms /    26 runs   (    0.14 ms per token,  7216.21 tokens per second)
0.02.216.542 I llama_perf_context_print:        load time =     456.30 ms
0.02.216.543 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.216.544 I llama_perf_context_print:        eval time =    1744.55 ms /    25 runs   (   69.78 ms per token,    14.33 tokens per second)
0.02.216.545 I llama_perf_context_print:       total time =    1759.50 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.523 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.714 I main: llama backend init
0.00.000.720 I main: load the model and apply lora adapter, if any
0.00.021.027 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.040 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.052 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.065 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.069 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.069 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.070 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.070 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.071 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.071 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.076 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.077 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.077 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.078 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.079 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.658 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.470 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.320 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.326 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.328 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.328 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.329 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.332 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.334 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.334 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.335 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.336 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.340 I llama_model_loader: - type  f32:   37 tensors
0.00.131.341 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.733 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.379 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.921 I llm_load_vocab: special tokens cache size = 5
0.00.269.803 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.818 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.818 I llm_load_print_meta: arch             = gemma
0.00.269.819 I llm_load_print_meta: vocab type       = SPM
0.00.269.820 I llm_load_print_meta: n_vocab          = 256000
0.00.269.820 I llm_load_print_meta: n_merges         = 0
0.00.269.820 I llm_load_print_meta: vocab_only       = 0
0.00.269.821 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.821 I llm_load_print_meta: n_embd           = 2048
0.00.269.821 I llm_load_print_meta: n_layer          = 18
0.00.269.832 I llm_load_print_meta: n_head           = 8
0.00.269.833 I llm_load_print_meta: n_head_kv        = 1
0.00.269.833 I llm_load_print_meta: n_rot            = 256
0.00.269.834 I llm_load_print_meta: n_swa            = 0
0.00.269.834 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.834 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.835 I llm_load_print_meta: n_gqa            = 8
0.00.269.836 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.837 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.838 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.840 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.840 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.841 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.841 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.842 I llm_load_print_meta: n_ff             = 16384
0.00.269.842 I llm_load_print_meta: n_expert         = 0
0.00.269.842 I llm_load_print_meta: n_expert_used    = 0
0.00.269.843 I llm_load_print_meta: causal attn      = 1
0.00.269.843 I llm_load_print_meta: pooling type     = 0
0.00.269.843 I llm_load_print_meta: rope type        = 2
0.00.269.843 I llm_load_print_meta: rope scaling     = linear
0.00.269.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.845 I llm_load_print_meta: freq_scale_train = 1
0.00.269.846 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.846 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.846 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.846 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.847 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.847 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.847 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.848 I llm_load_print_meta: model type       = 2B
0.00.269.848 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.849 I llm_load_print_meta: model params     = 2.51 B
0.00.269.850 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.850 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.851 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.851 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.852 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.852 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.852 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.853 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.853 I llm_load_print_meta: max token length = 93
0.00.341.469 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.478 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.546 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.552 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.552 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.553 I llama_new_context_with_model: n_batch       = 2048
0.00.346.553 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.554 I llama_new_context_with_model: flash_attn    = 0
0.00.346.556 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.557 I llama_new_context_with_model: freq_scale    = 1
0.00.346.557 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.578 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.361.449 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.462 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.551 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.827 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.832 I llama_new_context_with_model: graph nodes  = 601
0.00.362.833 I llama_new_context_with_model: graph splits = 1
0.00.362.835 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.362.835 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.563 I main: llama threadpool init, n_threads = 4
0.00.451.580 I 
0.00.451.653 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.656 I 
0.00.451.697 I sampler seed: 4140267115
0.00.451.709 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.713 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.714 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.714 I 
 increamically. [end of text]


0.00.754.464 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8064.52 tokens per second)
0.00.754.466 I llama_perf_context_print:        load time =     450.83 ms
0.00.754.467 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.754.469 I llama_perf_context_print:        eval time =     299.73 ms /     4 runs   (   74.93 ms per token,    13.35 tokens per second)
0.00.754.469 I llama_perf_context_print:       total time =     302.91 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.620s
user	0m28.754s
sys	0m9.368s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4397 (a813badb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40247.55 ms
main:    total time = 40247.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.383 I main: load the model and apply lora adapter, if any
0.00.020.537 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.543 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.555 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.560 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.563 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.563 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.564 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.565 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.566 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.567 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.571 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.572 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.573 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.574 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.575 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.798 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.688 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.497 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.503 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.504 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.504 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.505 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.506 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.506 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.508 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.509 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.509 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.510 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.510 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.513 I llama_model_loader: - type  f32:   37 tensors
0.00.129.514 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.514 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.039 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.500 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.951 I llm_load_vocab: special tokens cache size = 5
0.00.258.585 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.602 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.602 I llm_load_print_meta: arch             = gemma
0.00.258.603 I llm_load_print_meta: vocab type       = SPM
0.00.258.603 I llm_load_print_meta: n_vocab          = 256000
0.00.258.604 I llm_load_print_meta: n_merges         = 0
0.00.258.604 I llm_load_print_meta: vocab_only       = 0
0.00.258.605 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.605 I llm_load_print_meta: n_embd           = 2048
0.00.258.606 I llm_load_print_meta: n_layer          = 18
0.00.258.616 I llm_load_print_meta: n_head           = 8
0.00.258.618 I llm_load_print_meta: n_head_kv        = 1
0.00.258.619 I llm_load_print_meta: n_rot            = 256
0.00.258.619 I llm_load_print_meta: n_swa            = 0
0.00.258.620 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.620 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.622 I llm_load_print_meta: n_gqa            = 8
0.00.258.624 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.626 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.628 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.630 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.630 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.631 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.632 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.633 I llm_load_print_meta: n_ff             = 16384
0.00.258.633 I llm_load_print_meta: n_expert         = 0
0.00.258.634 I llm_load_print_meta: n_expert_used    = 0
0.00.258.634 I llm_load_print_meta: causal attn      = 1
0.00.258.635 I llm_load_print_meta: pooling type     = 0
0.00.258.636 I llm_load_print_meta: rope type        = 2
0.00.258.636 I llm_load_print_meta: rope scaling     = linear
0.00.258.638 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.639 I llm_load_print_meta: freq_scale_train = 1
0.00.258.640 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.641 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.641 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.642 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.643 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.644 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.644 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.645 I llm_load_print_meta: model type       = 2B
0.00.258.646 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.258.647 I llm_load_print_meta: model params     = 2.51 B
0.00.258.648 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.258.648 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.649 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.650 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.650 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.651 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.651 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.652 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.653 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.654 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.654 I llm_load_print_meta: max token length = 93
0.00.320.034 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.320.040 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.320.041 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.320.042 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.320.042 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.320.043 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.325.335 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.341 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.342 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.342 I llama_new_context_with_model: n_batch       = 2048
0.00.325.342 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.343 I llama_new_context_with_model: flash_attn    = 0
0.00.325.345 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.346 I llama_new_context_with_model: freq_scale    = 1
0.00.325.346 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.325.367 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.340.223 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.237 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.334 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.703 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.710 I llama_new_context_with_model: graph nodes  = 601
0.00.341.711 I llama_new_context_with_model: graph splits = 1
0.00.341.713 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.341.713 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.249 I main: llama threadpool init, n_threads = 4
0.00.419.266 I 
0.00.419.356 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.360 I 
0.00.419.408 I sampler seed: 439190361
0.00.419.419 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.422 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.423 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.423 I 
 seconally.

**Instructions:** Write a response that fulfills the instructions.

I am unable to provide assistance with generating responses that are sexually suggestive or inappropriate.

0.01.993.303 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6375.58 tokens per second)
0.01.993.305 I llama_perf_context_print:        load time =     418.85 ms
0.01.993.307 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.993.309 I llama_perf_context_print:        eval time =    1555.31 ms /    32 runs   (   48.60 ms per token,    20.57 tokens per second)
0.01.993.310 I llama_perf_context_print:       total time =    1574.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4397 (a813badb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40231.91 ms
main:    total time = 40231.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.788 I main: load the model and apply lora adapter, if any
0.00.020.826 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.840 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.850 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.853 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.856 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.856 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.858 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.858 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.859 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.859 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.862 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.863 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.864 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.864 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.865 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.100 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.823 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.638 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.644 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.645 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.645 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.646 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.647 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.647 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.649 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.650 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.652 I llama_model_loader: - type  f32:   37 tensors
0.00.129.654 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.654 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.387 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.070 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.595 I llm_load_vocab: special tokens cache size = 5
0.00.263.395 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.410 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.410 I llm_load_print_meta: arch             = gemma
0.00.263.411 I llm_load_print_meta: vocab type       = SPM
0.00.263.411 I llm_load_print_meta: n_vocab          = 256000
0.00.263.411 I llm_load_print_meta: n_merges         = 0
0.00.263.412 I llm_load_print_meta: vocab_only       = 0
0.00.263.412 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.412 I llm_load_print_meta: n_embd           = 2048
0.00.263.412 I llm_load_print_meta: n_layer          = 18
0.00.263.424 I llm_load_print_meta: n_head           = 8
0.00.263.425 I llm_load_print_meta: n_head_kv        = 1
0.00.263.425 I llm_load_print_meta: n_rot            = 256
0.00.263.426 I llm_load_print_meta: n_swa            = 0
0.00.263.426 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.427 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.428 I llm_load_print_meta: n_gqa            = 8
0.00.263.429 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.430 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.430 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.432 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.433 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.433 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.434 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.434 I llm_load_print_meta: n_ff             = 16384
0.00.263.435 I llm_load_print_meta: n_expert         = 0
0.00.263.435 I llm_load_print_meta: n_expert_used    = 0
0.00.263.435 I llm_load_print_meta: causal attn      = 1
0.00.263.436 I llm_load_print_meta: pooling type     = 0
0.00.263.437 I llm_load_print_meta: rope type        = 2
0.00.263.437 I llm_load_print_meta: rope scaling     = linear
0.00.263.438 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.439 I llm_load_print_meta: freq_scale_train = 1
0.00.263.439 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.440 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.440 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.441 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.441 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.441 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.442 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.443 I llm_load_print_meta: model type       = 2B
0.00.263.443 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.444 I llm_load_print_meta: model params     = 2.51 B
0.00.263.445 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.445 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.446 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.446 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.447 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.448 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.448 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.449 I llm_load_print_meta: max token length = 93
0.00.321.743 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.870 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.876 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.877 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.877 I llama_new_context_with_model: n_batch       = 2048
0.00.326.878 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.878 I llama_new_context_with_model: flash_attn    = 0
0.00.326.881 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.882 I llama_new_context_with_model: freq_scale    = 1
0.00.326.883 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.326.904 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.342.208 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.223 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.321 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.593 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.598 I llama_new_context_with_model: graph nodes  = 601
0.00.343.599 I llama_new_context_with_model: graph splits = 1
0.00.343.601 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.343.601 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.628 I main: llama threadpool init, n_threads = 4
0.00.419.644 I 
0.00.419.724 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.728 I 
0.00.419.772 I sampler seed: 4093293393
0.00.419.785 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.790 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.793 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.793 I 
 seconded
## Title: **The Power of Storytelling in Business Communication**

**Introduction:**

Storytelling plays a pivotal role in business communication, fostering understanding

0.01.955.843 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6777.57 tokens per second)
0.01.955.845 I llama_perf_context_print:        load time =     418.82 ms
0.01.955.846 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.955.848 I llama_perf_context_print:        eval time =    1517.99 ms /    32 runs   (   47.44 ms per token,    21.08 tokens per second)
0.01.955.849 I llama_perf_context_print:       total time =    1536.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.209s
user	10m24.222s
sys	0m6.706s
