+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.320 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.330 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.415 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.427 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.429 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.433 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.434 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.436 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.438 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.440 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.442 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.459 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.461 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.463 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.465 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.242.496 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.344.237 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.368.302 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.368.310 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.368.312 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.368.313 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.368.314 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.368.316 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.368.317 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.368.321 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.368.322 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.368.323 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.368.324 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.368.326 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.368.333 I llama_model_loader: - type  f32:   37 tensors
0.00.368.336 I llama_model_loader: - type q8_0:  127 tensors
0.00.581.636 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.612 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.612 I llm_load_vocab: special tokens cache size = 5
0.00.861.014 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.861.089 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.861.090 I llm_load_print_meta: arch             = gemma
0.00.861.091 I llm_load_print_meta: vocab type       = SPM
0.00.861.092 I llm_load_print_meta: n_vocab          = 256000
0.00.861.095 I llm_load_print_meta: n_merges         = 0
0.00.861.095 I llm_load_print_meta: vocab_only       = 0
0.00.861.096 I llm_load_print_meta: n_ctx_train      = 8192
0.00.861.096 I llm_load_print_meta: n_embd           = 2048
0.00.861.096 I llm_load_print_meta: n_layer          = 18
0.00.861.161 I llm_load_print_meta: n_head           = 8
0.00.861.168 I llm_load_print_meta: n_head_kv        = 1
0.00.861.168 I llm_load_print_meta: n_rot            = 256
0.00.861.169 I llm_load_print_meta: n_swa            = 0
0.00.861.170 I llm_load_print_meta: n_embd_head_k    = 256
0.00.861.171 I llm_load_print_meta: n_embd_head_v    = 256
0.00.861.176 I llm_load_print_meta: n_gqa            = 8
0.00.861.182 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.861.188 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.861.193 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.861.194 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.861.195 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.861.195 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.861.196 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.861.201 I llm_load_print_meta: n_ff             = 16384
0.00.861.201 I llm_load_print_meta: n_expert         = 0
0.00.861.202 I llm_load_print_meta: n_expert_used    = 0
0.00.861.203 I llm_load_print_meta: causal attn      = 1
0.00.861.203 I llm_load_print_meta: pooling type     = 0
0.00.861.203 I llm_load_print_meta: rope type        = 2
0.00.861.204 I llm_load_print_meta: rope scaling     = linear
0.00.861.206 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.861.206 I llm_load_print_meta: freq_scale_train = 1
0.00.861.207 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.861.207 I llm_load_print_meta: rope_finetuned   = unknown
0.00.861.208 I llm_load_print_meta: ssm_d_conv       = 0
0.00.861.208 I llm_load_print_meta: ssm_d_inner      = 0
0.00.861.209 I llm_load_print_meta: ssm_d_state      = 0
0.00.861.209 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.861.210 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.861.211 I llm_load_print_meta: model type       = 2B
0.00.861.212 I llm_load_print_meta: model ftype      = Q8_0
0.00.861.213 I llm_load_print_meta: model params     = 2.51 B
0.00.861.214 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.861.215 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.861.216 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.861.240 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.861.244 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.861.244 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.861.245 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.861.245 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.861.252 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.861.253 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.861.254 I llm_load_print_meta: max token length = 93
0.00.965.549 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.965.556 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.965.557 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.965.557 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.965.558 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.965.559 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.971.908 I llama_new_context_with_model: n_seq_max     = 1
0.00.971.915 I llama_new_context_with_model: n_ctx         = 4096
0.00.971.915 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.971.916 I llama_new_context_with_model: n_batch       = 2048
0.00.971.916 I llama_new_context_with_model: n_ubatch      = 512
0.00.971.916 I llama_new_context_with_model: flash_attn    = 0
0.00.971.918 I llama_new_context_with_model: freq_base     = 10000.0
0.00.971.919 I llama_new_context_with_model: freq_scale    = 1
0.00.971.920 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.972.010 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.986.387 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.986.429 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.986.544 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.989.219 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.989.223 I llama_new_context_with_model: graph nodes  = 601
0.00.989.224 I llama_new_context_with_model: graph splits = 1
0.00.989.247 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.989.250 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.598.780 I main: llama threadpool init, n_threads = 4
0.01.598.796 I 
0.01.598.923 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.598.928 I 
0.01.599.178 I sampler seed: 845547187
0.01.599.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.599.204 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.599.209 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.599.209 I 
 increasities as a way to assess the cognitive abilities of a person.

**True or False?**

The premise is valid. [end of text]


0.13.384.371 I llama_perf_sampler_print:    sampling time =      43.42 ms /    29 runs   (    1.50 ms per token,   667.91 tokens per second)
0.13.384.374 I llama_perf_context_print:        load time =    1597.84 ms
0.13.384.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.384.377 I llama_perf_context_print:        eval time =   11707.32 ms /    28 runs   (  418.12 ms per token,     2.39 tokens per second)
0.13.384.378 I llama_perf_context_print:       total time =   11785.60 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.023.321 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.415 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.430 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.433 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.437 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.441 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.443 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.451 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.453 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.454 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.460 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.461 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.463 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.465 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.466 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.374 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.283 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.364 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.375 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.377 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.378 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.379 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.381 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.382 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.386 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.388 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.389 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.390 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.353.392 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.402 I llama_model_loader: - type  f32:   37 tensors
0.00.353.404 I llama_model_loader: - type q8_0:  127 tensors
0.00.570.919 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.631.184 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.632.119 I llm_load_vocab: special tokens cache size = 5
0.00.835.258 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.329 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.330 I llm_load_print_meta: arch             = gemma
0.00.835.331 I llm_load_print_meta: vocab type       = SPM
0.00.835.332 I llm_load_print_meta: n_vocab          = 256000
0.00.835.335 I llm_load_print_meta: n_merges         = 0
0.00.835.335 I llm_load_print_meta: vocab_only       = 0
0.00.835.336 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.336 I llm_load_print_meta: n_embd           = 2048
0.00.835.337 I llm_load_print_meta: n_layer          = 18
0.00.835.404 I llm_load_print_meta: n_head           = 8
0.00.835.412 I llm_load_print_meta: n_head_kv        = 1
0.00.835.413 I llm_load_print_meta: n_rot            = 256
0.00.835.414 I llm_load_print_meta: n_swa            = 0
0.00.835.415 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.415 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.420 I llm_load_print_meta: n_gqa            = 8
0.00.835.426 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.432 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.433 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.435 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.436 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.436 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.436 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.442 I llm_load_print_meta: n_ff             = 16384
0.00.835.442 I llm_load_print_meta: n_expert         = 0
0.00.835.443 I llm_load_print_meta: n_expert_used    = 0
0.00.835.444 I llm_load_print_meta: causal attn      = 1
0.00.835.444 I llm_load_print_meta: pooling type     = 0
0.00.835.445 I llm_load_print_meta: rope type        = 2
0.00.835.445 I llm_load_print_meta: rope scaling     = linear
0.00.835.447 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.448 I llm_load_print_meta: freq_scale_train = 1
0.00.835.448 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.449 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.449 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.450 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.450 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.451 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.455 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.455 I llm_load_print_meta: model type       = 2B
0.00.835.456 I llm_load_print_meta: model ftype      = Q8_0
0.00.835.457 I llm_load_print_meta: model params     = 2.51 B
0.00.835.458 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.835.459 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.460 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.461 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.462 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.462 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.463 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.464 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.469 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.471 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.471 I llm_load_print_meta: max token length = 93
0.00.935.037 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.940.976 I llama_new_context_with_model: n_seq_max     = 1
0.00.940.984 I llama_new_context_with_model: n_ctx         = 4096
0.00.940.985 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.940.985 I llama_new_context_with_model: n_batch       = 2048
0.00.940.985 I llama_new_context_with_model: n_ubatch      = 512
0.00.940.986 I llama_new_context_with_model: flash_attn    = 0
0.00.940.988 I llama_new_context_with_model: freq_base     = 10000.0
0.00.940.988 I llama_new_context_with_model: freq_scale    = 1
0.00.940.989 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.941.075 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.955.827 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.869 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.955.988 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.588 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.592 I llama_new_context_with_model: graph nodes  = 601
0.00.958.592 I llama_new_context_with_model: graph splits = 1
0.00.958.614 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.958.618 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.587.037 I main: llama threadpool init, n_threads = 4
0.01.587.054 I 
0.01.587.170 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.587.174 I 
0.01.587.411 I sampler seed: 818732612
0.01.587.424 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.587.434 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.587.437 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.587.437 I 
 increasities can be caused by a variety of factors, including:
- Genetic factors
- Environmental factors (such as diet, exercise, and stress)


0.15.231.896 I llama_perf_sampler_print:    sampling time =      49.95 ms /    33 runs   (    1.51 ms per token,   660.59 tokens per second)
0.15.231.899 I llama_perf_context_print:        load time =    1586.10 ms
0.15.231.901 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.231.902 I llama_perf_context_print:        eval time =   13554.35 ms /    32 runs   (  423.57 ms per token,     2.36 tokens per second)
0.15.231.903 I llama_perf_context_print:       total time =   13644.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.000.830 I main: load the model and apply lora adapter, if any
0.00.023.209 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.220 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.308 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.319 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.321 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.325 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.327 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.329 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.332 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.333 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.339 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.340 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.342 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.343 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.345 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.664 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.603 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.680 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.689 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.690 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.691 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.693 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.694 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.696 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.700 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.701 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.703 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.704 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.706 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.714 I llama_model_loader: - type  f32:   37 tensors
0.00.351.717 I llama_model_loader: - type q8_0:  127 tensors
0.00.566.119 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.549 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.489 I llm_load_vocab: special tokens cache size = 5
0.00.829.081 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.829.151 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.829.152 I llm_load_print_meta: arch             = gemma
0.00.829.153 I llm_load_print_meta: vocab type       = SPM
0.00.829.154 I llm_load_print_meta: n_vocab          = 256000
0.00.829.156 I llm_load_print_meta: n_merges         = 0
0.00.829.157 I llm_load_print_meta: vocab_only       = 0
0.00.829.157 I llm_load_print_meta: n_ctx_train      = 8192
0.00.829.158 I llm_load_print_meta: n_embd           = 2048
0.00.829.158 I llm_load_print_meta: n_layer          = 18
0.00.829.225 I llm_load_print_meta: n_head           = 8
0.00.829.232 I llm_load_print_meta: n_head_kv        = 1
0.00.829.233 I llm_load_print_meta: n_rot            = 256
0.00.829.233 I llm_load_print_meta: n_swa            = 0
0.00.829.234 I llm_load_print_meta: n_embd_head_k    = 256
0.00.829.234 I llm_load_print_meta: n_embd_head_v    = 256
0.00.829.238 I llm_load_print_meta: n_gqa            = 8
0.00.829.243 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.829.248 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.829.249 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.829.250 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.829.251 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.829.251 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.829.251 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.829.256 I llm_load_print_meta: n_ff             = 16384
0.00.829.257 I llm_load_print_meta: n_expert         = 0
0.00.829.257 I llm_load_print_meta: n_expert_used    = 0
0.00.829.258 I llm_load_print_meta: causal attn      = 1
0.00.829.258 I llm_load_print_meta: pooling type     = 0
0.00.829.258 I llm_load_print_meta: rope type        = 2
0.00.829.259 I llm_load_print_meta: rope scaling     = linear
0.00.829.260 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.829.261 I llm_load_print_meta: freq_scale_train = 1
0.00.829.261 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.829.261 I llm_load_print_meta: rope_finetuned   = unknown
0.00.829.262 I llm_load_print_meta: ssm_d_conv       = 0
0.00.829.262 I llm_load_print_meta: ssm_d_inner      = 0
0.00.829.263 I llm_load_print_meta: ssm_d_state      = 0
0.00.829.263 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.829.263 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.829.264 I llm_load_print_meta: model type       = 2B
0.00.829.265 I llm_load_print_meta: model ftype      = Q8_0
0.00.829.266 I llm_load_print_meta: model params     = 2.51 B
0.00.829.267 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.829.267 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.829.267 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.829.268 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.829.268 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.829.269 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.829.269 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.829.269 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.829.275 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.829.276 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.829.277 I llm_load_print_meta: max token length = 93
0.00.909.976 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.909.985 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.909.986 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.909.987 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.909.987 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.909.988 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.915.870 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.878 I llama_new_context_with_model: n_ctx         = 4096
0.00.915.878 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.915.878 I llama_new_context_with_model: n_batch       = 2048
0.00.915.879 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.879 I llama_new_context_with_model: flash_attn    = 0
0.00.915.881 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.882 I llama_new_context_with_model: freq_scale    = 1
0.00.915.882 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.915.985 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.930.232 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.930.275 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.930.395 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.933.040 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.933.044 I llama_new_context_with_model: graph nodes  = 601
0.00.933.045 I llama_new_context_with_model: graph splits = 1
0.00.933.068 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.933.071 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.541.469 I main: llama threadpool init, n_threads = 4
0.01.541.486 I 
0.01.541.610 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.541.613 I 
0.01.541.850 I sampler seed: 3177331669
0.01.541.863 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.541.875 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.541.876 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.541.876 I 
 increably.

I am unable to understand the provided context. Could you please provide more information or context for me to comprehend the meaning of the sentence? [end of text]


0.15.036.633 I llama_perf_sampler_print:    sampling time =      49.56 ms /    33 runs   (    1.50 ms per token,   665.85 tokens per second)
0.15.036.648 I llama_perf_context_print:        load time =    1540.55 ms
0.15.036.650 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.036.652 I llama_perf_context_print:        eval time =   13406.02 ms /    32 runs   (  418.94 ms per token,     2.39 tokens per second)
0.15.036.653 I llama_perf_context_print:       total time =   13495.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.023.305 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.316 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.419 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.431 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.432 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.436 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.440 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.442 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.443 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.444 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.445 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.451 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.452 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.453 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.455 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.456 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.303 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.630 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.696 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.705 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.707 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.708 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.709 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.711 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.712 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.716 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.717 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.719 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.720 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.722 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.729 I llama_model_loader: - type  f32:   37 tensors
0.00.352.731 I llama_model_loader: - type q8_0:  127 tensors
0.00.563.770 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.832 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.769 I llm_load_vocab: special tokens cache size = 5
0.00.835.795 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.869 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.870 I llm_load_print_meta: arch             = gemma
0.00.835.871 I llm_load_print_meta: vocab type       = SPM
0.00.835.872 I llm_load_print_meta: n_vocab          = 256000
0.00.835.874 I llm_load_print_meta: n_merges         = 0
0.00.835.875 I llm_load_print_meta: vocab_only       = 0
0.00.835.875 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.876 I llm_load_print_meta: n_embd           = 2048
0.00.835.876 I llm_load_print_meta: n_layer          = 18
0.00.835.944 I llm_load_print_meta: n_head           = 8
0.00.835.955 I llm_load_print_meta: n_head_kv        = 1
0.00.835.956 I llm_load_print_meta: n_rot            = 256
0.00.835.956 I llm_load_print_meta: n_swa            = 0
0.00.835.957 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.957 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.962 I llm_load_print_meta: n_gqa            = 8
0.00.835.967 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.972 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.974 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.975 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.976 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.977 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.978 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.983 I llm_load_print_meta: n_ff             = 16384
0.00.835.984 I llm_load_print_meta: n_expert         = 0
0.00.835.985 I llm_load_print_meta: n_expert_used    = 0
0.00.835.985 I llm_load_print_meta: causal attn      = 1
0.00.835.986 I llm_load_print_meta: pooling type     = 0
0.00.835.986 I llm_load_print_meta: rope type        = 2
0.00.835.998 I llm_load_print_meta: rope scaling     = linear
0.00.836.000 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.836.001 I llm_load_print_meta: freq_scale_train = 1
0.00.836.001 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.836.001 I llm_load_print_meta: rope_finetuned   = unknown
0.00.836.002 I llm_load_print_meta: ssm_d_conv       = 0
0.00.836.003 I llm_load_print_meta: ssm_d_inner      = 0
0.00.836.003 I llm_load_print_meta: ssm_d_state      = 0
0.00.836.003 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.836.004 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.836.005 I llm_load_print_meta: model type       = 2B
0.00.836.006 I llm_load_print_meta: model ftype      = Q8_0
0.00.836.007 I llm_load_print_meta: model params     = 2.51 B
0.00.836.007 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.836.008 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.836.009 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.836.010 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.836.011 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.836.011 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.836.011 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.836.012 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.836.018 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.836.019 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.836.020 I llm_load_print_meta: max token length = 93
0.00.909.001 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.909.011 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.914.806 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.812 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.813 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.813 I llama_new_context_with_model: n_batch       = 2048
0.00.914.814 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.814 I llama_new_context_with_model: flash_attn    = 0
0.00.914.816 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.817 I llama_new_context_with_model: freq_scale    = 1
0.00.914.818 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.914.905 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.929.344 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.382 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.929.497 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.071 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.075 I llama_new_context_with_model: graph nodes  = 601
0.00.932.075 I llama_new_context_with_model: graph splits = 1
0.00.932.099 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.932.102 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.540.978 I main: llama threadpool init, n_threads = 4
0.01.540.994 I 
0.01.541.112 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.541.116 I 
0.01.541.348 I sampler seed: 459048679
0.01.541.361 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.541.372 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.541.373 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.541.373 I 
 increasities, and other forms of sexual harassment. [end of text]


0.06.187.076 I llama_perf_sampler_print:    sampling time =      17.24 ms /    12 runs   (    1.44 ms per token,   696.22 tokens per second)
0.06.187.079 I llama_perf_context_print:        load time =    1540.02 ms
0.06.187.081 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.187.082 I llama_perf_context_print:        eval time =    4614.18 ms /    11 runs   (  419.47 ms per token,     2.38 tokens per second)
0.06.187.083 I llama_perf_context_print:       total time =    4646.11 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.414s
user	3m7.974s
sys	0m9.333s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4397 (a813badb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185758.08 ms
main:    total time = 185758.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.023.813 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.827 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.924 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.938 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.940 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.944 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.949 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.950 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.951 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.952 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.953 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.959 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.961 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.962 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.963 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.967 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.328 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.301 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.300 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.309 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.310 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.312 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.313 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.314 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.316 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.320 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.321 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.322 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.323 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.325 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.332 I llama_model_loader: - type  f32:   37 tensors
0.00.352.336 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.336 I llama_model_loader: - type q6_K:   19 tensors
0.00.562.031 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.621.673 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.622.638 I llm_load_vocab: special tokens cache size = 5
0.00.832.379 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.454 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.455 I llm_load_print_meta: arch             = gemma
0.00.832.456 I llm_load_print_meta: vocab type       = SPM
0.00.832.457 I llm_load_print_meta: n_vocab          = 256000
0.00.832.459 I llm_load_print_meta: n_merges         = 0
0.00.832.459 I llm_load_print_meta: vocab_only       = 0
0.00.832.460 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.460 I llm_load_print_meta: n_embd           = 2048
0.00.832.460 I llm_load_print_meta: n_layer          = 18
0.00.832.526 I llm_load_print_meta: n_head           = 8
0.00.832.534 I llm_load_print_meta: n_head_kv        = 1
0.00.832.534 I llm_load_print_meta: n_rot            = 256
0.00.832.535 I llm_load_print_meta: n_swa            = 0
0.00.832.537 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.537 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.542 I llm_load_print_meta: n_gqa            = 8
0.00.832.547 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.552 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.553 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.554 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.555 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.555 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.566 I llm_load_print_meta: n_ff             = 16384
0.00.832.567 I llm_load_print_meta: n_expert         = 0
0.00.832.567 I llm_load_print_meta: n_expert_used    = 0
0.00.832.568 I llm_load_print_meta: causal attn      = 1
0.00.832.568 I llm_load_print_meta: pooling type     = 0
0.00.832.569 I llm_load_print_meta: rope type        = 2
0.00.832.569 I llm_load_print_meta: rope scaling     = linear
0.00.832.571 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.571 I llm_load_print_meta: freq_scale_train = 1
0.00.832.572 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.573 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.573 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.574 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.574 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.575 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.576 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.576 I llm_load_print_meta: model type       = 2B
0.00.832.578 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.832.578 I llm_load_print_meta: model params     = 2.51 B
0.00.832.579 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.832.580 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.581 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.582 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.582 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.583 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.583 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.584 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.589 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.590 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.591 I llm_load_print_meta: max token length = 93
0.00.896.114 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.896.122 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.896.123 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.896.123 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.896.124 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.896.124 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.901.844 I llama_new_context_with_model: n_seq_max     = 1
0.00.901.851 I llama_new_context_with_model: n_ctx         = 4096
0.00.901.851 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.901.852 I llama_new_context_with_model: n_batch       = 2048
0.00.901.852 I llama_new_context_with_model: n_ubatch      = 512
0.00.901.852 I llama_new_context_with_model: flash_attn    = 0
0.00.901.854 I llama_new_context_with_model: freq_base     = 10000.0
0.00.901.855 I llama_new_context_with_model: freq_scale    = 1
0.00.901.856 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.901.940 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.916.200 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.916.238 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.916.351 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.918.993 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.918.997 I llama_new_context_with_model: graph nodes  = 601
0.00.918.998 I llama_new_context_with_model: graph splits = 1
0.00.919.022 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.919.026 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.498.313 I main: llama threadpool init, n_threads = 4
0.01.498.330 I 
0.01.498.452 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.498.456 I 
0.01.498.697 I sampler seed: 1556568286
0.01.498.711 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.498.723 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.498.724 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.498.724 I 
 guaranteing the health and well-being of our constituents.

**Provide examples of how this principle can be implemented in government:**

**1. Public Health

0.12.604.348 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.54 tokens per second)
0.12.604.360 I llama_perf_context_print:        load time =    1497.40 ms
0.12.604.363 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.604.365 I llama_perf_context_print:        eval time =   11016.48 ms /    32 runs   (  344.27 ms per token,     2.90 tokens per second)
0.12.604.366 I llama_perf_context_print:       total time =   11106.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4397 (a813badb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185608.40 ms
main:    total time = 185608.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4397 (a813badb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.686 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.785 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.799 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.801 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.805 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.807 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.808 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.809 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.811 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.812 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.818 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.819 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.820 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.821 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.824 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.370 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.638 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.848 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.857 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.861 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.868 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.869 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.878 I llama_model_loader: - type  f32:   37 tensors
0.00.351.880 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.880 I llama_model_loader: - type q6_K:   19 tensors
0.00.563.631 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.624.608 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.625.519 I llm_load_vocab: special tokens cache size = 5
0.00.828.341 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.411 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.412 I llm_load_print_meta: arch             = gemma
0.00.828.413 I llm_load_print_meta: vocab type       = SPM
0.00.828.414 I llm_load_print_meta: n_vocab          = 256000
0.00.828.416 I llm_load_print_meta: n_merges         = 0
0.00.828.416 I llm_load_print_meta: vocab_only       = 0
0.00.828.417 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.417 I llm_load_print_meta: n_embd           = 2048
0.00.828.418 I llm_load_print_meta: n_layer          = 18
0.00.828.482 I llm_load_print_meta: n_head           = 8
0.00.828.489 I llm_load_print_meta: n_head_kv        = 1
0.00.828.489 I llm_load_print_meta: n_rot            = 256
0.00.828.490 I llm_load_print_meta: n_swa            = 0
0.00.828.490 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.491 I llm_load_print_meta: n_embd_head_v    = 256
0.00.828.496 I llm_load_print_meta: n_gqa            = 8
0.00.828.501 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.828.505 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.828.507 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.828.508 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.828.509 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.828.509 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.828.509 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.828.514 I llm_load_print_meta: n_ff             = 16384
0.00.828.515 I llm_load_print_meta: n_expert         = 0
0.00.828.516 I llm_load_print_meta: n_expert_used    = 0
0.00.828.516 I llm_load_print_meta: causal attn      = 1
0.00.828.517 I llm_load_print_meta: pooling type     = 0
0.00.828.517 I llm_load_print_meta: rope type        = 2
0.00.828.518 I llm_load_print_meta: rope scaling     = linear
0.00.828.519 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.828.520 I llm_load_print_meta: freq_scale_train = 1
0.00.828.520 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.828.521 I llm_load_print_meta: rope_finetuned   = unknown
0.00.828.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.828.522 I llm_load_print_meta: ssm_d_inner      = 0
0.00.828.522 I llm_load_print_meta: ssm_d_state      = 0
0.00.828.523 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.828.523 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.828.524 I llm_load_print_meta: model type       = 2B
0.00.828.525 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.828.526 I llm_load_print_meta: model params     = 2.51 B
0.00.828.527 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.828.527 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.528 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.528 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.529 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.529 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.530 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.530 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.536 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.538 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.538 I llm_load_print_meta: max token length = 93
0.00.889.088 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.894.896 I llama_new_context_with_model: n_seq_max     = 1
0.00.894.902 I llama_new_context_with_model: n_ctx         = 4096
0.00.894.903 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.894.903 I llama_new_context_with_model: n_batch       = 2048
0.00.894.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.894.904 I llama_new_context_with_model: flash_attn    = 0
0.00.894.906 I llama_new_context_with_model: freq_base     = 10000.0
0.00.894.907 I llama_new_context_with_model: freq_scale    = 1
0.00.894.908 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.894.993 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.909.692 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.909.733 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.909.849 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.426 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.429 I llama_new_context_with_model: graph nodes  = 601
0.00.912.430 I llama_new_context_with_model: graph splits = 1
0.00.912.452 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.912.453 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.494.034 I main: llama threadpool init, n_threads = 4
0.01.494.050 I 
0.01.494.173 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.494.177 I 
0.01.494.409 I sampler seed: 1737526203
0.01.494.423 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.494.435 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.494.436 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.494.437 I 
 seconally.

The question asks for a paraphrase of the given sentence.

I am unable to provide a paraphrase of the given sentence as I do not have

0.12.644.847 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.29 tokens per second)
0.12.644.864 I llama_perf_context_print:        load time =    1493.11 ms
0.12.644.865 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.644.868 I llama_perf_context_print:        eval time =   11061.80 ms /    32 runs   (  345.68 ms per token,     2.89 tokens per second)
0.12.644.868 I llama_perf_context_print:       total time =   11150.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.501s
user	46m42.327s
sys	0m6.295s
