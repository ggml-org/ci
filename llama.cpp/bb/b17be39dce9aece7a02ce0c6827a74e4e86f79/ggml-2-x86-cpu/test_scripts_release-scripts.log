+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 4428 (bbb17be3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.262 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.272 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.279 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.284 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.286 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.289 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.289 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.290 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.291 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.292 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.293 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.296 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.297 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.297 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.298 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.298 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.272 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.083 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.858 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.865 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.865 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.866 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.867 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.867 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.868 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.871 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.871 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.872 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.873 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.874 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.876 I llama_model_loader: - type  f32:   37 tensors
0.00.130.877 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.444 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.414 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.984 I llm_load_vocab: special tokens cache size = 5
0.00.265.864 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.881 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.883 I llm_load_print_meta: arch             = gemma
0.00.265.883 I llm_load_print_meta: vocab type       = SPM
0.00.265.884 I llm_load_print_meta: n_vocab          = 256000
0.00.265.884 I llm_load_print_meta: n_merges         = 0
0.00.265.884 I llm_load_print_meta: vocab_only       = 0
0.00.265.885 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.885 I llm_load_print_meta: n_embd           = 2048
0.00.265.885 I llm_load_print_meta: n_layer          = 18
0.00.265.896 I llm_load_print_meta: n_head           = 8
0.00.265.898 I llm_load_print_meta: n_head_kv        = 1
0.00.265.899 I llm_load_print_meta: n_rot            = 256
0.00.265.899 I llm_load_print_meta: n_swa            = 0
0.00.265.899 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.899 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.901 I llm_load_print_meta: n_gqa            = 8
0.00.265.903 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.904 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.905 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.907 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.907 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.908 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.908 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.910 I llm_load_print_meta: n_ff             = 16384
0.00.265.910 I llm_load_print_meta: n_expert         = 0
0.00.265.910 I llm_load_print_meta: n_expert_used    = 0
0.00.265.911 I llm_load_print_meta: causal attn      = 1
0.00.265.911 I llm_load_print_meta: pooling type     = 0
0.00.265.911 I llm_load_print_meta: rope type        = 2
0.00.265.911 I llm_load_print_meta: rope scaling     = linear
0.00.265.913 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.913 I llm_load_print_meta: freq_scale_train = 1
0.00.265.913 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.914 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.914 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.914 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.915 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.915 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.915 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.917 I llm_load_print_meta: model type       = 2B
0.00.265.918 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.919 I llm_load_print_meta: model params     = 2.51 B
0.00.265.920 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.920 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.920 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.921 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.922 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.922 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.922 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.923 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.923 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.924 I llm_load_print_meta: max token length = 93
0.00.369.427 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.434 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.435 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.435 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.436 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.437 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.696 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.703 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.704 I llama_new_context_with_model: n_batch       = 2048
0.00.374.704 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.705 I llama_new_context_with_model: flash_attn    = 0
0.00.374.707 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.708 I llama_new_context_with_model: freq_scale    = 1
0.00.374.709 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.727 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.389.115 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.129 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.225 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.465 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.472 I llama_new_context_with_model: graph nodes  = 601
0.00.390.472 I llama_new_context_with_model: graph splits = 1
0.00.390.476 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.476 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.228 I main: llama threadpool init, n_threads = 4
0.00.479.243 I 
0.00.479.319 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.323 I 
0.00.479.357 I sampler seed: 780922881
0.00.479.369 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.381 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.385 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.385 I 
 increably. [end of text]


0.00.762.840 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8264.46 tokens per second)
0.00.762.842 I llama_perf_context_print:        load time =     478.47 ms
0.00.762.843 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.762.844 I llama_perf_context_print:        eval time =     280.52 ms /     4 runs   (   70.13 ms per token,    14.26 tokens per second)
0.00.762.845 I llama_perf_context_print:       total time =     283.62 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.547 I build: 4428 (bbb17be3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.764 I main: load the model and apply lora adapter, if any
0.00.020.794 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.806 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.814 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.815 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.817 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.818 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.819 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.820 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.821 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.822 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.826 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.827 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.827 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.828 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.828 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.662 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.511 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.325 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.332 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.333 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.333 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.334 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.335 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.335 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.337 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.338 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.339 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.339 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.340 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.343 I llama_model_loader: - type  f32:   37 tensors
0.00.130.344 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.920 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.149 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.603 I llm_load_vocab: special tokens cache size = 5
0.00.263.641 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.658 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.659 I llm_load_print_meta: arch             = gemma
0.00.263.660 I llm_load_print_meta: vocab type       = SPM
0.00.263.661 I llm_load_print_meta: n_vocab          = 256000
0.00.263.661 I llm_load_print_meta: n_merges         = 0
0.00.263.661 I llm_load_print_meta: vocab_only       = 0
0.00.263.662 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.662 I llm_load_print_meta: n_embd           = 2048
0.00.263.662 I llm_load_print_meta: n_layer          = 18
0.00.263.674 I llm_load_print_meta: n_head           = 8
0.00.263.676 I llm_load_print_meta: n_head_kv        = 1
0.00.263.676 I llm_load_print_meta: n_rot            = 256
0.00.263.677 I llm_load_print_meta: n_swa            = 0
0.00.263.677 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.677 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.679 I llm_load_print_meta: n_gqa            = 8
0.00.263.680 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.682 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.683 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.684 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.685 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.685 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.686 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.688 I llm_load_print_meta: n_ff             = 16384
0.00.263.688 I llm_load_print_meta: n_expert         = 0
0.00.263.688 I llm_load_print_meta: n_expert_used    = 0
0.00.263.689 I llm_load_print_meta: causal attn      = 1
0.00.263.689 I llm_load_print_meta: pooling type     = 0
0.00.263.689 I llm_load_print_meta: rope type        = 2
0.00.263.690 I llm_load_print_meta: rope scaling     = linear
0.00.263.691 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.692 I llm_load_print_meta: freq_scale_train = 1
0.00.263.692 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.693 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.693 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.693 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.693 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.694 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.694 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.696 I llm_load_print_meta: model type       = 2B
0.00.263.697 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.698 I llm_load_print_meta: model params     = 2.51 B
0.00.263.699 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.699 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.700 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.700 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.700 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.700 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.701 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.701 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.702 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.702 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.703 I llm_load_print_meta: max token length = 93
0.00.361.145 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.323 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.330 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.330 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.330 I llama_new_context_with_model: n_batch       = 2048
0.00.366.331 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.332 I llama_new_context_with_model: flash_attn    = 0
0.00.366.334 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.335 I llama_new_context_with_model: freq_scale    = 1
0.00.366.336 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.355 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.380.999 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.012 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.103 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.338 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.344 I llama_new_context_with_model: graph nodes  = 601
0.00.382.344 I llama_new_context_with_model: graph splits = 1
0.00.382.348 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.382.348 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.377 I main: llama threadpool init, n_threads = 4
0.00.463.393 I 
0.00.463.465 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.469 I 
0.00.463.502 I sampler seed: 3985132493
0.00.463.513 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.515 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.516 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.516 I 
 increably.

The passage is about a person's journey through life.

**Questions:**

a) What is the main idea of the passage?

0.02.649.019 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6777.57 tokens per second)
0.02.649.022 I llama_perf_context_print:        load time =     462.59 ms
0.02.649.023 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.649.025 I llama_perf_context_print:        eval time =    2166.94 ms /    32 runs   (   67.72 ms per token,    14.77 tokens per second)
0.02.649.025 I llama_perf_context_print:       total time =    2185.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.534 I build: 4428 (bbb17be3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.762 I main: load the model and apply lora adapter, if any
0.00.020.914 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.925 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.932 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.937 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.938 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.941 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.941 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.942 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.943 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.943 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.943 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.947 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.947 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.948 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.948 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.949 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.424 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.288 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.161 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.167 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.168 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.169 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.170 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.171 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.171 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.175 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.176 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.176 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.177 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.178 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.182 I llama_model_loader: - type  f32:   37 tensors
0.00.130.182 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.821 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.453 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.960 I llm_load_vocab: special tokens cache size = 5
0.00.271.636 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.652 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.654 I llm_load_print_meta: arch             = gemma
0.00.271.654 I llm_load_print_meta: vocab type       = SPM
0.00.271.655 I llm_load_print_meta: n_vocab          = 256000
0.00.271.656 I llm_load_print_meta: n_merges         = 0
0.00.271.656 I llm_load_print_meta: vocab_only       = 0
0.00.271.656 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.657 I llm_load_print_meta: n_embd           = 2048
0.00.271.657 I llm_load_print_meta: n_layer          = 18
0.00.271.667 I llm_load_print_meta: n_head           = 8
0.00.271.669 I llm_load_print_meta: n_head_kv        = 1
0.00.271.669 I llm_load_print_meta: n_rot            = 256
0.00.271.670 I llm_load_print_meta: n_swa            = 0
0.00.271.670 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.670 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.672 I llm_load_print_meta: n_gqa            = 8
0.00.271.674 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.675 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.676 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.678 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.678 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.678 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.679 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.681 I llm_load_print_meta: n_ff             = 16384
0.00.271.682 I llm_load_print_meta: n_expert         = 0
0.00.271.682 I llm_load_print_meta: n_expert_used    = 0
0.00.271.683 I llm_load_print_meta: causal attn      = 1
0.00.271.683 I llm_load_print_meta: pooling type     = 0
0.00.271.683 I llm_load_print_meta: rope type        = 2
0.00.271.683 I llm_load_print_meta: rope scaling     = linear
0.00.271.685 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.686 I llm_load_print_meta: freq_scale_train = 1
0.00.271.686 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.686 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.687 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.687 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.688 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.688 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.689 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.690 I llm_load_print_meta: model type       = 2B
0.00.271.691 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.692 I llm_load_print_meta: model params     = 2.51 B
0.00.271.694 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.694 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.695 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.695 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.696 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.696 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.696 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.697 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.697 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.698 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.698 I llm_load_print_meta: max token length = 93
0.00.350.559 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.350.563 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.564 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.350.565 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.350.565 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.350.566 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.355.746 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.752 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.752 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.753 I llama_new_context_with_model: n_batch       = 2048
0.00.355.753 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.754 I llama_new_context_with_model: flash_attn    = 0
0.00.355.756 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.757 I llama_new_context_with_model: freq_scale    = 1
0.00.355.758 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.776 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.370.455 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.468 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.560 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.795 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.801 I llama_new_context_with_model: graph nodes  = 601
0.00.371.801 I llama_new_context_with_model: graph splits = 1
0.00.371.805 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.805 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.584 I main: llama threadpool init, n_threads = 4
0.00.455.599 I 
0.00.455.673 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.676 I 
0.00.455.706 I sampler seed: 1797646436
0.00.455.717 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.720 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.721 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.721 I 
 increably, but the smile quickly fades. The warmth of the day turns to a chilling wind, and the vibrant colors of the sky dissolve into a dreary gray

0.02.687.395 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6643.85 tokens per second)
0.02.687.398 I llama_perf_context_print:        load time =     454.80 ms
0.02.687.399 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.687.401 I llama_perf_context_print:        eval time =    2213.45 ms /    32 runs   (   69.17 ms per token,    14.46 tokens per second)
0.02.687.401 I llama_perf_context_print:       total time =    2231.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.593 I build: 4428 (bbb17be3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.000.809 I main: load the model and apply lora adapter, if any
0.00.022.712 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.723 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.730 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.735 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.739 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.742 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.743 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.744 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.744 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.745 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.746 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.751 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.752 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.753 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.753 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.754 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.480 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.409 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.211 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.217 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.218 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.218 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.219 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.220 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.220 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.222 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.224 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.225 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.136.226 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.228 I llama_model_loader: - type  f32:   37 tensors
0.00.136.229 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.779 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.340 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.825 I llm_load_vocab: special tokens cache size = 5
0.00.275.157 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.185 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.186 I llm_load_print_meta: arch             = gemma
0.00.275.187 I llm_load_print_meta: vocab type       = SPM
0.00.275.189 I llm_load_print_meta: n_vocab          = 256000
0.00.275.190 I llm_load_print_meta: n_merges         = 0
0.00.275.190 I llm_load_print_meta: vocab_only       = 0
0.00.275.191 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.191 I llm_load_print_meta: n_embd           = 2048
0.00.275.192 I llm_load_print_meta: n_layer          = 18
0.00.275.214 I llm_load_print_meta: n_head           = 8
0.00.275.216 I llm_load_print_meta: n_head_kv        = 1
0.00.275.217 I llm_load_print_meta: n_rot            = 256
0.00.275.217 I llm_load_print_meta: n_swa            = 0
0.00.275.218 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.218 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.221 I llm_load_print_meta: n_gqa            = 8
0.00.275.223 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.226 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.227 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.229 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.230 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.230 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.231 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.233 I llm_load_print_meta: n_ff             = 16384
0.00.275.234 I llm_load_print_meta: n_expert         = 0
0.00.275.234 I llm_load_print_meta: n_expert_used    = 0
0.00.275.235 I llm_load_print_meta: causal attn      = 1
0.00.275.235 I llm_load_print_meta: pooling type     = 0
0.00.275.236 I llm_load_print_meta: rope type        = 2
0.00.275.236 I llm_load_print_meta: rope scaling     = linear
0.00.275.238 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.238 I llm_load_print_meta: freq_scale_train = 1
0.00.275.239 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.240 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.240 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.241 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.241 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.242 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.242 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.244 I llm_load_print_meta: model type       = 2B
0.00.275.246 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.247 I llm_load_print_meta: model params     = 2.51 B
0.00.275.248 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.249 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.250 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.250 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.251 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.251 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.252 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.252 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.253 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.254 I llm_load_print_meta: max token length = 93
0.00.346.638 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.346.645 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.351.824 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.830 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.831 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.831 I llama_new_context_with_model: n_batch       = 2048
0.00.351.832 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.833 I llama_new_context_with_model: flash_attn    = 0
0.00.351.835 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.836 I llama_new_context_with_model: freq_scale    = 1
0.00.351.838 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.860 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.366.317 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.330 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.429 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.685 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.692 I llama_new_context_with_model: graph nodes  = 601
0.00.367.693 I llama_new_context_with_model: graph splits = 1
0.00.367.696 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.697 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.667 I main: llama threadpool init, n_threads = 4
0.00.461.689 I 
0.00.461.775 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.780 I 
0.00.461.820 I sampler seed: 2825492582
0.00.461.834 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.840 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.841 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.844 I 
 increably.

I cannot provide you with sexually suggestive or inappropriate content. [end of text]


0.01.671.103 I llama_perf_sampler_print:    sampling time =       2.52 ms /    17 runs   (    0.15 ms per token,  6738.01 tokens per second)
0.01.671.106 I llama_perf_context_print:        load time =     460.84 ms
0.01.671.107 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.671.108 I llama_perf_context_print:        eval time =    1199.42 ms /    16 runs   (   74.96 ms per token,    13.34 tokens per second)
0.01.671.109 I llama_perf_context_print:       total time =    1209.44 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.029s
user	0m26.466s
sys	0m9.438s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4428 (bbb17be3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40241.33 ms
main:    total time = 40241.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 4428 (bbb17be3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.020.945 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.955 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.964 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.969 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.973 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.976 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.976 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.977 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.977 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.978 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.978 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.984 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.984 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.985 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.985 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.986 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.948 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.190 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.913 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.918 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.919 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.920 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.921 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.922 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.922 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.925 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.925 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.927 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.927 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.928 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.930 I llama_model_loader: - type  f32:   37 tensors
0.00.129.932 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.932 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.313 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.686 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.215 I llm_load_vocab: special tokens cache size = 5
0.00.263.928 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.944 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.945 I llm_load_print_meta: arch             = gemma
0.00.263.946 I llm_load_print_meta: vocab type       = SPM
0.00.263.947 I llm_load_print_meta: n_vocab          = 256000
0.00.263.948 I llm_load_print_meta: n_merges         = 0
0.00.263.948 I llm_load_print_meta: vocab_only       = 0
0.00.263.948 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.949 I llm_load_print_meta: n_embd           = 2048
0.00.263.949 I llm_load_print_meta: n_layer          = 18
0.00.263.961 I llm_load_print_meta: n_head           = 8
0.00.263.963 I llm_load_print_meta: n_head_kv        = 1
0.00.263.963 I llm_load_print_meta: n_rot            = 256
0.00.263.963 I llm_load_print_meta: n_swa            = 0
0.00.263.964 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.964 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.965 I llm_load_print_meta: n_gqa            = 8
0.00.263.967 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.969 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.969 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.971 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.971 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.972 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.972 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.974 I llm_load_print_meta: n_ff             = 16384
0.00.263.974 I llm_load_print_meta: n_expert         = 0
0.00.263.974 I llm_load_print_meta: n_expert_used    = 0
0.00.263.975 I llm_load_print_meta: causal attn      = 1
0.00.263.975 I llm_load_print_meta: pooling type     = 0
0.00.263.975 I llm_load_print_meta: rope type        = 2
0.00.263.976 I llm_load_print_meta: rope scaling     = linear
0.00.263.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.978 I llm_load_print_meta: freq_scale_train = 1
0.00.263.978 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.979 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.979 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.980 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.980 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.980 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.982 I llm_load_print_meta: model type       = 2B
0.00.263.983 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.984 I llm_load_print_meta: model params     = 2.51 B
0.00.263.984 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.984 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.985 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.985 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.986 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.986 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.986 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.987 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.987 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.987 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.988 I llm_load_print_meta: max token length = 93
0.00.324.949 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.954 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.955 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.955 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.956 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.956 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.955 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.960 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.961 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.961 I llama_new_context_with_model: n_batch       = 2048
0.00.329.962 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.962 I llama_new_context_with_model: flash_attn    = 0
0.00.329.964 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.965 I llama_new_context_with_model: freq_scale    = 1
0.00.329.966 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.329.985 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.344.250 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.264 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.353 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.582 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.587 I llama_new_context_with_model: graph nodes  = 601
0.00.345.588 I llama_new_context_with_model: graph splits = 1
0.00.345.591 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.345.591 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.206 I main: llama threadpool init, n_threads = 4
0.00.420.222 I 
0.00.420.304 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.307 I 
0.00.420.342 I sampler seed: 1150710898
0.00.420.353 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.367 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.370 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.371 I 
 seconally to the following question:

**What are the factors that contribute to the formation of the Earth's magnetic field?**

**Answer:**



0.02.022.514 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6436.51 tokens per second)
0.02.022.517 I llama_perf_context_print:        load time =     419.44 ms
0.02.022.518 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.022.519 I llama_perf_context_print:        eval time =    1583.36 ms /    32 runs   (   49.48 ms per token,    20.21 tokens per second)
0.02.022.520 I llama_perf_context_print:       total time =    1602.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4428 (bbb17be3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40227.32 ms
main:    total time = 40227.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.595 I build: 4428 (bbb17be3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.820 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.021.235 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.250 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.261 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.264 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.265 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.271 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.271 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.272 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.273 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.585 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.502 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.343 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.350 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.350 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.351 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.351 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.352 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.353 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.356 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.356 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.360 I llama_model_loader: - type  f32:   37 tensors
0.00.129.361 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.361 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.905 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.665 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.160 I llm_load_vocab: special tokens cache size = 5
0.00.264.955 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.973 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.974 I llm_load_print_meta: arch             = gemma
0.00.264.974 I llm_load_print_meta: vocab type       = SPM
0.00.264.975 I llm_load_print_meta: n_vocab          = 256000
0.00.264.975 I llm_load_print_meta: n_merges         = 0
0.00.264.976 I llm_load_print_meta: vocab_only       = 0
0.00.264.976 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.977 I llm_load_print_meta: n_embd           = 2048
0.00.264.977 I llm_load_print_meta: n_layer          = 18
0.00.264.988 I llm_load_print_meta: n_head           = 8
0.00.264.990 I llm_load_print_meta: n_head_kv        = 1
0.00.264.991 I llm_load_print_meta: n_rot            = 256
0.00.264.991 I llm_load_print_meta: n_swa            = 0
0.00.264.991 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.992 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.993 I llm_load_print_meta: n_gqa            = 8
0.00.264.995 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.997 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.998 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.999 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.999 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.999 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.000 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.002 I llm_load_print_meta: n_ff             = 16384
0.00.265.002 I llm_load_print_meta: n_expert         = 0
0.00.265.002 I llm_load_print_meta: n_expert_used    = 0
0.00.265.003 I llm_load_print_meta: causal attn      = 1
0.00.265.003 I llm_load_print_meta: pooling type     = 0
0.00.265.003 I llm_load_print_meta: rope type        = 2
0.00.265.003 I llm_load_print_meta: rope scaling     = linear
0.00.265.005 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.005 I llm_load_print_meta: freq_scale_train = 1
0.00.265.006 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.006 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.006 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.006 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.007 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.007 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.007 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.009 I llm_load_print_meta: model type       = 2B
0.00.265.010 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.011 I llm_load_print_meta: model params     = 2.51 B
0.00.265.012 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.012 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.013 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.013 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.013 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.014 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.014 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.015 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.015 I llm_load_print_meta: max token length = 93
0.00.324.705 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.741 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.746 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.747 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.747 I llama_new_context_with_model: n_batch       = 2048
0.00.329.748 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.748 I llama_new_context_with_model: flash_attn    = 0
0.00.329.750 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.751 I llama_new_context_with_model: freq_scale    = 1
0.00.329.752 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.329.773 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.344.627 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.641 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.732 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.000 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.005 I llama_new_context_with_model: graph nodes  = 601
0.00.346.005 I llama_new_context_with_model: graph splits = 1
0.00.346.008 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.009 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.640 I main: llama threadpool init, n_threads = 4
0.00.420.657 I 
0.00.420.731 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.735 I 
0.00.420.767 I sampler seed: 3282286137
0.00.420.778 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.790 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.794 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.794 I 
 increasities. [end of text]


0.00.623.611 I llama_perf_sampler_print:    sampling time =       0.73 ms /     5 runs   (    0.15 ms per token,  6887.05 tokens per second)
0.00.623.614 I llama_perf_context_print:        load time =     419.79 ms
0.00.623.615 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.623.616 I llama_perf_context_print:        eval time =     199.21 ms /     4 runs   (   49.80 ms per token,    20.08 tokens per second)
0.00.623.617 I llama_perf_context_print:       total time =     202.98 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.935s
user	10m18.313s
sys	0m7.026s
