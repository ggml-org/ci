+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4132 (bbeb6f0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.021.584 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.596 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.603 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.609 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.610 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.614 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.615 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.616 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.617 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.618 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.618 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.623 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.625 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.625 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.627 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.406 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.035 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.969 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.976 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.977 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.978 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.979 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.980 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.983 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.984 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.985 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.986 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.987 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.990 I llama_model_loader: - type  f32:   37 tensors
0.00.131.991 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.033 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.078 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.673 I llm_load_vocab: special tokens cache size = 5
0.00.281.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.517 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.518 I llm_load_print_meta: arch             = gemma
0.00.281.519 I llm_load_print_meta: vocab type       = SPM
0.00.281.519 I llm_load_print_meta: n_vocab          = 256000
0.00.281.520 I llm_load_print_meta: n_merges         = 0
0.00.281.520 I llm_load_print_meta: vocab_only       = 0
0.00.281.520 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.521 I llm_load_print_meta: n_embd           = 2048
0.00.281.521 I llm_load_print_meta: n_layer          = 18
0.00.281.533 I llm_load_print_meta: n_head           = 8
0.00.281.534 I llm_load_print_meta: n_head_kv        = 1
0.00.281.534 I llm_load_print_meta: n_rot            = 256
0.00.281.534 I llm_load_print_meta: n_swa            = 0
0.00.281.534 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.535 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.536 I llm_load_print_meta: n_gqa            = 8
0.00.281.537 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.538 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.539 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.540 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.540 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.541 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.541 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.542 I llm_load_print_meta: n_ff             = 16384
0.00.281.542 I llm_load_print_meta: n_expert         = 0
0.00.281.543 I llm_load_print_meta: n_expert_used    = 0
0.00.281.543 I llm_load_print_meta: causal attn      = 1
0.00.281.543 I llm_load_print_meta: pooling type     = 0
0.00.281.543 I llm_load_print_meta: rope type        = 2
0.00.281.544 I llm_load_print_meta: rope scaling     = linear
0.00.281.545 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.545 I llm_load_print_meta: freq_scale_train = 1
0.00.281.546 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.546 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.546 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.546 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.547 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.547 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.547 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.548 I llm_load_print_meta: model type       = 2B
0.00.281.548 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.549 I llm_load_print_meta: model params     = 2.51 B
0.00.281.550 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.550 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.551 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.551 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.551 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.552 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.552 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.552 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.553 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.553 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.554 I llm_load_print_meta: max token length = 93
0.00.380.144 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.380.152 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.380.153 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.380.154 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.380.154 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.380.155 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.433 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.441 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.442 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.442 I llama_new_context_with_model: n_batch       = 2048
0.00.385.443 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.443 I llama_new_context_with_model: flash_attn    = 0
0.00.385.446 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.447 I llama_new_context_with_model: freq_scale    = 1
0.00.385.448 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.400.610 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.400.626 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.400.720 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.009 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.402.016 I llama_new_context_with_model: graph nodes  = 601
0.00.402.016 I llama_new_context_with_model: graph splits = 1
0.00.402.018 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.858 I main: llama threadpool init, n_threads = 4
0.00.488.872 I 
0.00.488.948 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.488.951 I 
0.00.488.993 I sampler seed: 757771143
0.00.489.008 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.014 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.015 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.015 I 
 maneuvously.
I am not able to provide sexually suggestive or inappropriate content. [end of text]


0.01.786.905 I llama_perf_sampler_print:    sampling time =       2.81 ms /    19 runs   (    0.15 ms per token,  6759.16 tokens per second)
0.01.786.908 I llama_perf_context_print:        load time =     488.10 ms
0.01.786.909 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.786.911 I llama_perf_context_print:        eval time =    1286.85 ms /    18 runs   (   71.49 ms per token,    13.99 tokens per second)
0.01.786.911 I llama_perf_context_print:       total time =    1298.05 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.544 I build: 4132 (bbeb6f0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.461 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.477 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.489 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.490 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.494 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.496 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.497 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.502 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.503 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.505 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.775 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.311 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.275 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.284 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.285 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.285 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.286 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.287 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.290 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.290 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.291 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.291 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.293 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.297 I llama_model_loader: - type  f32:   37 tensors
0.00.132.299 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.930 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.289 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.950 I llm_load_vocab: special tokens cache size = 5
0.00.282.982 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.002 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.002 I llm_load_print_meta: arch             = gemma
0.00.283.003 I llm_load_print_meta: vocab type       = SPM
0.00.283.004 I llm_load_print_meta: n_vocab          = 256000
0.00.283.004 I llm_load_print_meta: n_merges         = 0
0.00.283.004 I llm_load_print_meta: vocab_only       = 0
0.00.283.005 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.005 I llm_load_print_meta: n_embd           = 2048
0.00.283.005 I llm_load_print_meta: n_layer          = 18
0.00.283.017 I llm_load_print_meta: n_head           = 8
0.00.283.018 I llm_load_print_meta: n_head_kv        = 1
0.00.283.018 I llm_load_print_meta: n_rot            = 256
0.00.283.019 I llm_load_print_meta: n_swa            = 0
0.00.283.019 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.019 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.020 I llm_load_print_meta: n_gqa            = 8
0.00.283.021 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.022 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.023 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.024 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.024 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.025 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.025 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.026 I llm_load_print_meta: n_ff             = 16384
0.00.283.026 I llm_load_print_meta: n_expert         = 0
0.00.283.027 I llm_load_print_meta: n_expert_used    = 0
0.00.283.027 I llm_load_print_meta: causal attn      = 1
0.00.283.027 I llm_load_print_meta: pooling type     = 0
0.00.283.028 I llm_load_print_meta: rope type        = 2
0.00.283.028 I llm_load_print_meta: rope scaling     = linear
0.00.283.030 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.030 I llm_load_print_meta: freq_scale_train = 1
0.00.283.031 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.031 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.031 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.031 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.032 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.032 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.032 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.033 I llm_load_print_meta: model type       = 2B
0.00.283.034 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.035 I llm_load_print_meta: model params     = 2.51 B
0.00.283.035 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.036 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.036 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.037 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.037 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.037 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.037 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.038 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.038 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.039 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.039 I llm_load_print_meta: max token length = 93
0.00.376.454 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.381.746 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.753 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.753 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.754 I llama_new_context_with_model: n_batch       = 2048
0.00.381.754 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.755 I llama_new_context_with_model: flash_attn    = 0
0.00.381.758 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.759 I llama_new_context_with_model: freq_scale    = 1
0.00.381.761 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.705 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.721 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.820 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.105 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.110 I llama_new_context_with_model: graph nodes  = 601
0.00.398.111 I llama_new_context_with_model: graph splits = 1
0.00.398.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.819 I main: llama threadpool init, n_threads = 4
0.00.479.833 I 
0.00.479.910 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.479.913 I 
0.00.479.957 I sampler seed: 2813337344
0.00.479.970 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.973 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.974 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.974 I 
 increasities of the human species, and the spread of these ideas and beliefs through migration, trade, and conquest.

**Cultural Influences:**

* The spread

0.02.702.013 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6993.01 tokens per second)
0.02.702.015 I llama_perf_context_print:        load time =     479.05 ms
0.02.702.017 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.702.018 I llama_perf_context_print:        eval time =    2203.24 ms /    32 runs   (   68.85 ms per token,    14.52 tokens per second)
0.02.702.019 I llama_perf_context_print:       total time =    2222.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.571 I build: 4132 (bbeb6f0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.798 I main: llama backend init
0.00.000.808 I main: load the model and apply lora adapter, if any
0.00.021.728 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.741 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.749 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.758 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.760 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.765 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.766 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.767 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.768 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.769 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.770 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.776 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.777 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.778 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.780 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.781 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.834 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.379 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.258 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.266 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.266 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.267 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.268 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.269 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.270 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.272 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.272 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.273 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.274 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.274 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.279 I llama_model_loader: - type  f32:   37 tensors
0.00.132.280 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.257 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.250 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.925 I llm_load_vocab: special tokens cache size = 5
0.00.288.264 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.282 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.283 I llm_load_print_meta: arch             = gemma
0.00.288.283 I llm_load_print_meta: vocab type       = SPM
0.00.288.284 I llm_load_print_meta: n_vocab          = 256000
0.00.288.284 I llm_load_print_meta: n_merges         = 0
0.00.288.285 I llm_load_print_meta: vocab_only       = 0
0.00.288.285 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.285 I llm_load_print_meta: n_embd           = 2048
0.00.288.286 I llm_load_print_meta: n_layer          = 18
0.00.288.296 I llm_load_print_meta: n_head           = 8
0.00.288.297 I llm_load_print_meta: n_head_kv        = 1
0.00.288.297 I llm_load_print_meta: n_rot            = 256
0.00.288.297 I llm_load_print_meta: n_swa            = 0
0.00.288.298 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.298 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.299 I llm_load_print_meta: n_gqa            = 8
0.00.288.300 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.301 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.301 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.302 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.303 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.303 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.303 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.304 I llm_load_print_meta: n_ff             = 16384
0.00.288.305 I llm_load_print_meta: n_expert         = 0
0.00.288.305 I llm_load_print_meta: n_expert_used    = 0
0.00.288.305 I llm_load_print_meta: causal attn      = 1
0.00.288.306 I llm_load_print_meta: pooling type     = 0
0.00.288.306 I llm_load_print_meta: rope type        = 2
0.00.288.306 I llm_load_print_meta: rope scaling     = linear
0.00.288.308 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.309 I llm_load_print_meta: freq_scale_train = 1
0.00.288.309 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.309 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.309 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.310 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.310 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.310 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.311 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.311 I llm_load_print_meta: model type       = 2B
0.00.288.312 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.312 I llm_load_print_meta: model params     = 2.51 B
0.00.288.313 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.314 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.314 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.314 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.315 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.315 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.315 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.315 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.316 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.316 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.317 I llm_load_print_meta: max token length = 93
0.00.362.649 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.362.655 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.656 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.362.657 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.362.657 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.658 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.368.095 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.102 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.102 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.103 I llama_new_context_with_model: n_batch       = 2048
0.00.368.103 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.104 I llama_new_context_with_model: flash_attn    = 0
0.00.368.106 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.107 I llama_new_context_with_model: freq_scale    = 1
0.00.368.108 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.845 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.859 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.969 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.215 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.223 I llama_new_context_with_model: graph nodes  = 601
0.00.384.223 I llama_new_context_with_model: graph splits = 1
0.00.384.224 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.873 I main: llama threadpool init, n_threads = 4
0.00.472.888 I 
0.00.472.976 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.979 I 
0.00.473.027 I sampler seed: 3795863707
0.00.473.038 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.043 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.043 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.044 I 
 increamically, and then suddenly stopped.
What happened? [end of text]


0.01.414.268 I llama_perf_sampler_print:    sampling time =       1.98 ms /    14 runs   (    0.14 ms per token,  7060.01 tokens per second)
0.01.414.270 I llama_perf_context_print:        load time =     472.04 ms
0.01.414.272 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.414.273 I llama_perf_context_print:        eval time =     932.88 ms /    13 runs   (   71.76 ms per token,    13.94 tokens per second)
0.01.414.274 I llama_perf_context_print:       total time =     941.40 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.595 I build: 4132 (bbeb6f0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.818 I main: llama backend init
0.00.000.828 I main: load the model and apply lora adapter, if any
0.00.021.437 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.446 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.454 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.459 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.460 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.465 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.465 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.466 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.466 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.467 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.468 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.474 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.474 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.476 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.476 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.143 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.684 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.573 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.580 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.580 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.581 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.582 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.583 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.584 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.588 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.588 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.590 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.590 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.591 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.596 I llama_model_loader: - type  f32:   37 tensors
0.00.131.597 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.383 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.825 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.499 I llm_load_vocab: special tokens cache size = 5
0.00.280.599 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.620 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.620 I llm_load_print_meta: arch             = gemma
0.00.280.621 I llm_load_print_meta: vocab type       = SPM
0.00.280.622 I llm_load_print_meta: n_vocab          = 256000
0.00.280.623 I llm_load_print_meta: n_merges         = 0
0.00.280.623 I llm_load_print_meta: vocab_only       = 0
0.00.280.623 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.624 I llm_load_print_meta: n_embd           = 2048
0.00.280.624 I llm_load_print_meta: n_layer          = 18
0.00.280.636 I llm_load_print_meta: n_head           = 8
0.00.280.638 I llm_load_print_meta: n_head_kv        = 1
0.00.280.639 I llm_load_print_meta: n_rot            = 256
0.00.280.639 I llm_load_print_meta: n_swa            = 0
0.00.280.639 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.639 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.640 I llm_load_print_meta: n_gqa            = 8
0.00.280.641 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.642 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.643 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.644 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.644 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.645 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.645 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.646 I llm_load_print_meta: n_ff             = 16384
0.00.280.646 I llm_load_print_meta: n_expert         = 0
0.00.280.647 I llm_load_print_meta: n_expert_used    = 0
0.00.280.647 I llm_load_print_meta: causal attn      = 1
0.00.280.647 I llm_load_print_meta: pooling type     = 0
0.00.280.648 I llm_load_print_meta: rope type        = 2
0.00.280.648 I llm_load_print_meta: rope scaling     = linear
0.00.280.649 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.650 I llm_load_print_meta: freq_scale_train = 1
0.00.280.650 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.650 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.650 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.651 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.651 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.651 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.651 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.652 I llm_load_print_meta: model type       = 2B
0.00.280.652 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.653 I llm_load_print_meta: model params     = 2.51 B
0.00.280.654 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.654 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.655 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.655 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.655 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.656 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.656 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.656 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.657 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.657 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.658 I llm_load_print_meta: max token length = 93
0.00.351.882 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.351.890 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.357.252 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.259 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.260 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.260 I llama_new_context_with_model: n_batch       = 2048
0.00.357.261 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.262 I llama_new_context_with_model: flash_attn    = 0
0.00.357.266 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.267 I llama_new_context_with_model: freq_scale    = 1
0.00.357.268 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.936 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.950 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.047 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.343 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.349 I llama_new_context_with_model: graph nodes  = 601
0.00.374.350 I llama_new_context_with_model: graph splits = 1
0.00.374.351 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.434 I main: llama threadpool init, n_threads = 4
0.00.465.446 I 
0.00.465.526 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.530 I 
0.00.465.587 I sampler seed: 435408709
0.00.465.598 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.601 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.601 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.602 I 
 increasities, the vast majority of these pronouncements are misinterpretations of the Bible.

This statement highlights the potential dangers of relying on misinterpretations of

0.02.944.345 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6391.63 tokens per second)
0.02.944.348 I llama_perf_context_print:        load time =     464.58 ms
0.02.944.349 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.944.351 I llama_perf_context_print:        eval time =    2459.20 ms /    32 runs   (   76.85 ms per token,    13.01 tokens per second)
0.02.944.352 I llama_perf_context_print:       total time =    2478.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.531s
user	0m30.761s
sys	0m9.486s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4132 (bbeb6f0f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40239.29 ms
main:    total time = 40239.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.583 I build: 4132 (bbeb6f0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.780 I main: llama backend init
0.00.000.788 I main: load the model and apply lora adapter, if any
0.00.021.290 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.299 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.307 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.312 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.313 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.318 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.319 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.320 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.320 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.321 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.326 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.326 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.327 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.327 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.328 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.752 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.036 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.881 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.888 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.889 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.890 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.891 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.893 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.894 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.897 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.898 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.899 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.900 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.901 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.905 I llama_model_loader: - type  f32:   37 tensors
0.00.130.906 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.907 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.832 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.507 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.276 I llm_load_vocab: special tokens cache size = 5
0.00.285.409 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.427 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.428 I llm_load_print_meta: arch             = gemma
0.00.285.429 I llm_load_print_meta: vocab type       = SPM
0.00.285.429 I llm_load_print_meta: n_vocab          = 256000
0.00.285.430 I llm_load_print_meta: n_merges         = 0
0.00.285.430 I llm_load_print_meta: vocab_only       = 0
0.00.285.430 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.431 I llm_load_print_meta: n_embd           = 2048
0.00.285.431 I llm_load_print_meta: n_layer          = 18
0.00.285.442 I llm_load_print_meta: n_head           = 8
0.00.285.443 I llm_load_print_meta: n_head_kv        = 1
0.00.285.443 I llm_load_print_meta: n_rot            = 256
0.00.285.443 I llm_load_print_meta: n_swa            = 0
0.00.285.443 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.444 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.445 I llm_load_print_meta: n_gqa            = 8
0.00.285.446 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.447 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.449 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.449 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.450 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.450 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.451 I llm_load_print_meta: n_ff             = 16384
0.00.285.451 I llm_load_print_meta: n_expert         = 0
0.00.285.451 I llm_load_print_meta: n_expert_used    = 0
0.00.285.452 I llm_load_print_meta: causal attn      = 1
0.00.285.452 I llm_load_print_meta: pooling type     = 0
0.00.285.452 I llm_load_print_meta: rope type        = 2
0.00.285.453 I llm_load_print_meta: rope scaling     = linear
0.00.285.454 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.455 I llm_load_print_meta: freq_scale_train = 1
0.00.285.455 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.455 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.456 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.456 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.456 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.456 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.457 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.457 I llm_load_print_meta: model type       = 2B
0.00.285.458 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.459 I llm_load_print_meta: model params     = 2.51 B
0.00.285.460 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.460 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.461 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.461 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.461 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.462 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.462 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.462 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.463 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.463 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.463 I llm_load_print_meta: max token length = 93
0.00.344.678 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.344.694 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.344.694 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.344.695 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.344.696 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.344.696 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.349.784 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.790 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.790 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.791 I llama_new_context_with_model: n_batch       = 2048
0.00.349.791 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.792 I llama_new_context_with_model: flash_attn    = 0
0.00.349.795 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.795 I llama_new_context_with_model: freq_scale    = 1
0.00.349.796 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.019 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.034 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.129 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.421 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.428 I llama_new_context_with_model: graph nodes  = 601
0.00.366.428 I llama_new_context_with_model: graph splits = 1
0.00.366.430 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.772 I main: llama threadpool init, n_threads = 4
0.00.442.786 I 
0.00.442.865 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.869 I 
0.00.442.915 I sampler seed: 3304293853
0.00.442.926 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.929 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.930 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.930 I 
 encompantly!

I am unable to generate the requested text due to a technical limitation. [end of text]


0.01.433.168 I llama_perf_sampler_print:    sampling time =       3.03 ms /    20 runs   (    0.15 ms per token,  6602.84 tokens per second)
0.01.433.170 I llama_perf_context_print:        load time =     441.96 ms
0.01.433.171 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.433.173 I llama_perf_context_print:        eval time =     978.22 ms /    19 runs   (   51.49 ms per token,    19.42 tokens per second)
0.01.433.175 I llama_perf_context_print:       total time =     990.40 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4132 (bbeb6f0f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40210.90 ms
main:    total time = 40210.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.575 I build: 4132 (bbeb6f0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.780 I main: load the model and apply lora adapter, if any
0.00.021.295 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.311 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.322 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.323 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.328 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.329 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.330 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.331 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.337 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.337 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.338 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.338 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.339 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.066 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.639 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.543 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.559 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.565 I llama_model_loader: - type  f32:   37 tensors
0.00.131.567 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.568 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.421 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.012 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.671 I llm_load_vocab: special tokens cache size = 5
0.00.285.727 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.747 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.747 I llm_load_print_meta: arch             = gemma
0.00.285.748 I llm_load_print_meta: vocab type       = SPM
0.00.285.749 I llm_load_print_meta: n_vocab          = 256000
0.00.285.749 I llm_load_print_meta: n_merges         = 0
0.00.285.749 I llm_load_print_meta: vocab_only       = 0
0.00.285.750 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.750 I llm_load_print_meta: n_embd           = 2048
0.00.285.750 I llm_load_print_meta: n_layer          = 18
0.00.285.762 I llm_load_print_meta: n_head           = 8
0.00.285.763 I llm_load_print_meta: n_head_kv        = 1
0.00.285.764 I llm_load_print_meta: n_rot            = 256
0.00.285.764 I llm_load_print_meta: n_swa            = 0
0.00.285.764 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.765 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.765 I llm_load_print_meta: n_gqa            = 8
0.00.285.766 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.767 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.768 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.769 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.769 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.770 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.770 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.771 I llm_load_print_meta: n_ff             = 16384
0.00.285.771 I llm_load_print_meta: n_expert         = 0
0.00.285.772 I llm_load_print_meta: n_expert_used    = 0
0.00.285.772 I llm_load_print_meta: causal attn      = 1
0.00.285.772 I llm_load_print_meta: pooling type     = 0
0.00.285.773 I llm_load_print_meta: rope type        = 2
0.00.285.773 I llm_load_print_meta: rope scaling     = linear
0.00.285.774 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.775 I llm_load_print_meta: freq_scale_train = 1
0.00.285.775 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.776 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.776 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.776 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.777 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.777 I llm_load_print_meta: model type       = 2B
0.00.285.778 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.779 I llm_load_print_meta: model params     = 2.51 B
0.00.285.780 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.780 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.781 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.781 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.782 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.782 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.782 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.783 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.783 I llm_load_print_meta: max token length = 93
0.00.339.919 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.345.078 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.085 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.085 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.086 I llama_new_context_with_model: n_batch       = 2048
0.00.345.086 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.087 I llama_new_context_with_model: flash_attn    = 0
0.00.345.091 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.091 I llama_new_context_with_model: freq_scale    = 1
0.00.345.093 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.109 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.123 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.217 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.473 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.479 I llama_new_context_with_model: graph nodes  = 601
0.00.361.479 I llama_new_context_with_model: graph splits = 1
0.00.361.481 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.999 I main: llama threadpool init, n_threads = 4
0.00.437.013 I 
0.00.437.095 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.437.099 I 
0.00.437.140 I sampler seed: 118968365
0.00.437.151 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.153 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.154 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.156 I 
 seconally in the afternoon. 
I was hoping to get some advice on how to achieve this.

**Step 1: Establish a routine and schedule

0.02.071.749 I llama_perf_sampler_print:    sampling time =       5.85 ms /    33 runs   (    0.18 ms per token,  5643.92 tokens per second)
0.02.071.751 I llama_perf_context_print:        load time =     436.20 ms
0.02.071.752 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.071.754 I llama_perf_context_print:        eval time =    1614.38 ms /    32 runs   (   50.45 ms per token,    19.82 tokens per second)
0.02.071.754 I llama_perf_context_print:       total time =    1634.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.824s
user	10m22.266s
sys	0m7.111s
