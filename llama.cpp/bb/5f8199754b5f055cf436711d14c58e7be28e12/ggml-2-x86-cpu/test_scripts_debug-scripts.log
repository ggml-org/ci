+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.622 I build: 3820 (bb5f8199) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.025.163 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.351 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.448 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.449 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.454 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.455 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.457 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.458 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.459 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.465 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.466 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.466 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.467 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.468 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.592 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.701 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.958 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.967 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.968 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.969 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.969 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.970 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.971 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.974 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.975 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.978 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.979 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.980 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.988 I llama_model_loader: - type  f32:   37 tensors
0.00.197.992 I llama_model_loader: - type q8_0:  127 tensors
0.00.481.312 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.465 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.478 I llm_load_vocab: special tokens cache size = 5
0.00.565.832 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.565.889 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.565.890 I llm_load_print_meta: arch             = gemma
0.00.565.890 I llm_load_print_meta: vocab type       = SPM
0.00.565.891 I llm_load_print_meta: n_vocab          = 256000
0.00.565.893 I llm_load_print_meta: n_merges         = 0
0.00.565.893 I llm_load_print_meta: vocab_only       = 0
0.00.565.894 I llm_load_print_meta: n_ctx_train      = 8192
0.00.565.894 I llm_load_print_meta: n_embd           = 2048
0.00.565.895 I llm_load_print_meta: n_layer          = 18
0.00.565.928 I llm_load_print_meta: n_head           = 8
0.00.565.935 I llm_load_print_meta: n_head_kv        = 1
0.00.565.936 I llm_load_print_meta: n_rot            = 256
0.00.565.936 I llm_load_print_meta: n_swa            = 0
0.00.565.936 I llm_load_print_meta: n_embd_head_k    = 256
0.00.565.937 I llm_load_print_meta: n_embd_head_v    = 256
0.00.565.941 I llm_load_print_meta: n_gqa            = 8
0.00.565.946 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.565.951 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.565.952 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.565.953 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.565.954 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.565.954 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.565.954 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.565.959 I llm_load_print_meta: n_ff             = 16384
0.00.565.960 I llm_load_print_meta: n_expert         = 0
0.00.565.960 I llm_load_print_meta: n_expert_used    = 0
0.00.565.961 I llm_load_print_meta: causal attn      = 1
0.00.565.961 I llm_load_print_meta: pooling type     = 0
0.00.565.961 I llm_load_print_meta: rope type        = 2
0.00.565.962 I llm_load_print_meta: rope scaling     = linear
0.00.565.963 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.565.964 I llm_load_print_meta: freq_scale_train = 1
0.00.565.964 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.565.964 I llm_load_print_meta: rope_finetuned   = unknown
0.00.565.965 I llm_load_print_meta: ssm_d_conv       = 0
0.00.565.965 I llm_load_print_meta: ssm_d_inner      = 0
0.00.565.965 I llm_load_print_meta: ssm_d_state      = 0
0.00.565.966 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.565.966 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.565.966 I llm_load_print_meta: model type       = 2B
0.00.565.967 I llm_load_print_meta: model ftype      = Q8_0
0.00.565.968 I llm_load_print_meta: model params     = 2.51 B
0.00.565.969 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.565.969 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.565.970 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.565.970 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.565.970 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.565.971 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.565.971 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.565.971 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.565.977 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.565.979 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.565.979 I llm_load_print_meta: max token length = 93
0.00.566.153 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.896 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.666.904 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.666.905 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.666.905 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.666.906 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.666.906 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.672.523 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.530 I llama_new_context_with_model: n_batch    = 2048
0.00.672.530 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.531 I llama_new_context_with_model: flash_attn = 0
0.00.672.533 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.534 I llama_new_context_with_model: freq_scale = 1
0.00.702.461 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.504 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.633 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.704.025 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.031 I llama_new_context_with_model: graph nodes  = 601
0.00.704.032 I llama_new_context_with_model: graph splits = 1
0.00.704.047 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.217 I main: llama threadpool init, n_threads = 4
0.01.316.228 I 
0.01.316.324 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.327 I 
0.01.316.486 I sampler seed: 3950857881
0.01.316.496 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.500 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.316.501 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.316.501 I 
 increasities in the city of Kyoto, Japan.

Kyoto is renowned for its traditional culture, serene atmosphere, and stunning architecture. However, in recent years,

0.14.954.166 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.37 tokens per second)
0.14.954.169 I llama_perf_context_print:        load time =    1313.36 ms
0.14.954.171 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.954.194 I llama_perf_context_print:        eval time =   13555.52 ms /    32 runs   (  423.61 ms per token,     2.36 tokens per second)
0.14.954.195 I llama_perf_context_print:       total time =   13637.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.617 I build: 3820 (bb5f8199) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.024.941 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.031 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.044 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.046 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.050 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.051 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.051 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.053 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.053 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.055 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.061 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.063 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.064 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.065 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.953 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.051 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.062 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.063 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.064 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.065 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.066 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.067 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.070 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.071 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.072 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.073 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.074 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.084 I llama_model_loader: - type  f32:   37 tensors
0.00.197.088 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.803 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.334 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.312 I llm_load_vocab: special tokens cache size = 5
0.00.571.295 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.571.349 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.571.350 I llm_load_print_meta: arch             = gemma
0.00.571.351 I llm_load_print_meta: vocab type       = SPM
0.00.571.352 I llm_load_print_meta: n_vocab          = 256000
0.00.571.355 I llm_load_print_meta: n_merges         = 0
0.00.571.355 I llm_load_print_meta: vocab_only       = 0
0.00.571.356 I llm_load_print_meta: n_ctx_train      = 8192
0.00.571.356 I llm_load_print_meta: n_embd           = 2048
0.00.571.356 I llm_load_print_meta: n_layer          = 18
0.00.571.391 I llm_load_print_meta: n_head           = 8
0.00.571.398 I llm_load_print_meta: n_head_kv        = 1
0.00.571.398 I llm_load_print_meta: n_rot            = 256
0.00.571.399 I llm_load_print_meta: n_swa            = 0
0.00.571.399 I llm_load_print_meta: n_embd_head_k    = 256
0.00.571.399 I llm_load_print_meta: n_embd_head_v    = 256
0.00.571.404 I llm_load_print_meta: n_gqa            = 8
0.00.571.409 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.571.414 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.571.415 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.571.416 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.571.416 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.571.417 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.571.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.571.422 I llm_load_print_meta: n_ff             = 16384
0.00.571.423 I llm_load_print_meta: n_expert         = 0
0.00.571.423 I llm_load_print_meta: n_expert_used    = 0
0.00.571.424 I llm_load_print_meta: causal attn      = 1
0.00.571.424 I llm_load_print_meta: pooling type     = 0
0.00.571.424 I llm_load_print_meta: rope type        = 2
0.00.571.425 I llm_load_print_meta: rope scaling     = linear
0.00.571.426 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.571.427 I llm_load_print_meta: freq_scale_train = 1
0.00.571.427 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.571.427 I llm_load_print_meta: rope_finetuned   = unknown
0.00.571.428 I llm_load_print_meta: ssm_d_conv       = 0
0.00.571.428 I llm_load_print_meta: ssm_d_inner      = 0
0.00.571.428 I llm_load_print_meta: ssm_d_state      = 0
0.00.571.429 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.571.429 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.571.430 I llm_load_print_meta: model type       = 2B
0.00.571.430 I llm_load_print_meta: model ftype      = Q8_0
0.00.571.431 I llm_load_print_meta: model params     = 2.51 B
0.00.571.432 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.571.432 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.571.433 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.571.433 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.571.434 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.571.434 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.571.435 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.571.435 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.571.461 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.571.463 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.571.464 I llm_load_print_meta: max token length = 93
0.00.571.654 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.667.345 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.673.152 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.160 I llama_new_context_with_model: n_batch    = 2048
0.00.673.160 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.161 I llama_new_context_with_model: flash_attn = 0
0.00.673.164 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.164 I llama_new_context_with_model: freq_scale = 1
0.00.703.921 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.965 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.075 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.705.430 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.436 I llama_new_context_with_model: graph nodes  = 601
0.00.705.437 I llama_new_context_with_model: graph splits = 1
0.00.705.453 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.796 I main: llama threadpool init, n_threads = 4
0.01.338.806 I 
0.01.338.900 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.904 I 
0.01.339.065 I sampler seed: 947137890
0.01.339.077 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.083 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.339.084 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.084 I 
 increasities and the like.

I am unable to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.10.643.737 I llama_perf_sampler_print:    sampling time =      34.06 ms /    23 runs   (    1.48 ms per token,   675.26 tokens per second)
0.10.643.740 I llama_perf_context_print:        load time =    1335.94 ms
0.10.643.741 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.643.743 I llama_perf_context_print:        eval time =    9247.23 ms /    22 runs   (  420.33 ms per token,     2.38 tokens per second)
0.10.643.744 I llama_perf_context_print:       total time =    9304.95 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.658 I build: 3820 (bb5f8199) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.024.868 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.055 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.142 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.154 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.155 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.159 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.163 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.164 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.164 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.165 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.167 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.173 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.175 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.176 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.177 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.177 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.149 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.132 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.165 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.172 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.173 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.174 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.175 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.176 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.178 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.181 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.182 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.183 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.184 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.185 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.193 I llama_model_loader: - type  f32:   37 tensors
0.00.196.196 I llama_model_loader: - type q8_0:  127 tensors
0.00.476.247 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.277 I llm_load_vocab: special tokens cache size = 5
0.00.559.204 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.559.264 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.559.269 I llm_load_print_meta: arch             = gemma
0.00.559.269 I llm_load_print_meta: vocab type       = SPM
0.00.559.270 I llm_load_print_meta: n_vocab          = 256000
0.00.559.273 I llm_load_print_meta: n_merges         = 0
0.00.559.273 I llm_load_print_meta: vocab_only       = 0
0.00.559.275 I llm_load_print_meta: n_ctx_train      = 8192
0.00.559.275 I llm_load_print_meta: n_embd           = 2048
0.00.559.275 I llm_load_print_meta: n_layer          = 18
0.00.559.310 I llm_load_print_meta: n_head           = 8
0.00.559.320 I llm_load_print_meta: n_head_kv        = 1
0.00.559.320 I llm_load_print_meta: n_rot            = 256
0.00.559.321 I llm_load_print_meta: n_swa            = 0
0.00.559.321 I llm_load_print_meta: n_embd_head_k    = 256
0.00.559.321 I llm_load_print_meta: n_embd_head_v    = 256
0.00.559.326 I llm_load_print_meta: n_gqa            = 8
0.00.559.331 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.559.336 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.559.348 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.559.350 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.559.350 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.559.351 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.559.352 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.559.360 I llm_load_print_meta: n_ff             = 16384
0.00.559.360 I llm_load_print_meta: n_expert         = 0
0.00.559.361 I llm_load_print_meta: n_expert_used    = 0
0.00.559.364 I llm_load_print_meta: causal attn      = 1
0.00.559.365 I llm_load_print_meta: pooling type     = 0
0.00.559.366 I llm_load_print_meta: rope type        = 2
0.00.559.366 I llm_load_print_meta: rope scaling     = linear
0.00.559.368 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.559.369 I llm_load_print_meta: freq_scale_train = 1
0.00.559.370 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.559.371 I llm_load_print_meta: rope_finetuned   = unknown
0.00.559.371 I llm_load_print_meta: ssm_d_conv       = 0
0.00.559.372 I llm_load_print_meta: ssm_d_inner      = 0
0.00.559.372 I llm_load_print_meta: ssm_d_state      = 0
0.00.559.375 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.559.376 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.559.377 I llm_load_print_meta: model type       = 2B
0.00.559.378 I llm_load_print_meta: model ftype      = Q8_0
0.00.559.379 I llm_load_print_meta: model params     = 2.51 B
0.00.559.380 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.559.380 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.559.381 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.559.382 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.559.382 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.559.383 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.559.384 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.559.392 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.559.398 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.559.400 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.559.400 I llm_load_print_meta: max token length = 93
0.00.559.580 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.638.553 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.638.566 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.638.567 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.638.567 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.638.568 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.638.569 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.644.241 I llama_new_context_with_model: n_ctx      = 8192
0.00.644.248 I llama_new_context_with_model: n_batch    = 2048
0.00.644.249 I llama_new_context_with_model: n_ubatch   = 512
0.00.644.250 I llama_new_context_with_model: flash_attn = 0
0.00.644.252 I llama_new_context_with_model: freq_base  = 10000.0
0.00.644.253 I llama_new_context_with_model: freq_scale = 1
0.00.674.248 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.674.290 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.674.399 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.675.801 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.675.808 I llama_new_context_with_model: graph nodes  = 601
0.00.675.808 I llama_new_context_with_model: graph splits = 1
0.00.675.823 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.287.772 I main: llama threadpool init, n_threads = 4
0.01.287.784 I 
0.01.287.879 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.287.882 I 
0.01.288.043 I sampler seed: 2284921142
0.01.288.053 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.059 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.288.060 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.061 I 
 increasities for the benefit of the community, including those that prioritize environmental protection.

While I understand the importance of economic growth and job creation, I believe that

0.14.800.969 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.83 tokens per second)
0.14.800.974 I llama_perf_context_print:        load time =    1284.89 ms
0.14.800.976 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.800.978 I llama_perf_context_print:        eval time =   13430.95 ms /    32 runs   (  419.72 ms per token,     2.38 tokens per second)
0.14.800.979 I llama_perf_context_print:       total time =   13513.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.627 I build: 3820 (bb5f8199) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.028.037 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.028.232 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.028.326 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.337 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.339 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.344 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.346 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.347 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.349 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.351 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.352 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.361 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.366 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.368 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.369 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.370 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.352 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.188.148 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.200.424 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.200.433 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.200.435 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.200.436 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.200.436 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.200.437 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.200.438 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.200.442 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.200.442 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.200.443 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.200.444 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.200.445 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.200.453 I llama_model_loader: - type  f32:   37 tensors
0.00.200.457 I llama_model_loader: - type q8_0:  127 tensors
0.00.475.787 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.570 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.583 I llm_load_vocab: special tokens cache size = 5
0.00.557.215 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.272 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.273 I llm_load_print_meta: arch             = gemma
0.00.557.274 I llm_load_print_meta: vocab type       = SPM
0.00.557.275 I llm_load_print_meta: n_vocab          = 256000
0.00.557.278 I llm_load_print_meta: n_merges         = 0
0.00.557.278 I llm_load_print_meta: vocab_only       = 0
0.00.557.279 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.279 I llm_load_print_meta: n_embd           = 2048
0.00.557.279 I llm_load_print_meta: n_layer          = 18
0.00.557.313 I llm_load_print_meta: n_head           = 8
0.00.557.320 I llm_load_print_meta: n_head_kv        = 1
0.00.557.320 I llm_load_print_meta: n_rot            = 256
0.00.557.321 I llm_load_print_meta: n_swa            = 0
0.00.557.321 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.321 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.326 I llm_load_print_meta: n_gqa            = 8
0.00.557.331 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.557.336 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.557.337 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.557.338 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.557.339 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.557.339 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.557.340 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.557.345 I llm_load_print_meta: n_ff             = 16384
0.00.557.345 I llm_load_print_meta: n_expert         = 0
0.00.557.346 I llm_load_print_meta: n_expert_used    = 0
0.00.557.346 I llm_load_print_meta: causal attn      = 1
0.00.557.347 I llm_load_print_meta: pooling type     = 0
0.00.557.348 I llm_load_print_meta: rope type        = 2
0.00.557.348 I llm_load_print_meta: rope scaling     = linear
0.00.557.350 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.557.351 I llm_load_print_meta: freq_scale_train = 1
0.00.557.352 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.557.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.557.354 I llm_load_print_meta: ssm_d_conv       = 0
0.00.557.356 I llm_load_print_meta: ssm_d_inner      = 0
0.00.557.356 I llm_load_print_meta: ssm_d_state      = 0
0.00.557.357 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.557.358 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.557.360 I llm_load_print_meta: model type       = 2B
0.00.557.361 I llm_load_print_meta: model ftype      = Q8_0
0.00.557.362 I llm_load_print_meta: model params     = 2.51 B
0.00.557.364 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.557.365 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.557.366 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.557.367 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.557.371 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.557.372 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.557.373 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.557.373 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.557.380 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.557.382 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.557.382 I llm_load_print_meta: max token length = 93
0.00.557.585 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.628.396 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.628.404 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.634.050 I llama_new_context_with_model: n_ctx      = 8192
0.00.634.058 I llama_new_context_with_model: n_batch    = 2048
0.00.634.058 I llama_new_context_with_model: n_ubatch   = 512
0.00.634.059 I llama_new_context_with_model: flash_attn = 0
0.00.634.061 I llama_new_context_with_model: freq_base  = 10000.0
0.00.634.061 I llama_new_context_with_model: freq_scale = 1
0.00.664.259 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.664.304 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.664.417 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.665.809 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.665.816 I llama_new_context_with_model: graph nodes  = 601
0.00.665.817 I llama_new_context_with_model: graph splits = 1
0.00.665.835 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.674 I main: llama threadpool init, n_threads = 4
0.01.277.683 I 
0.01.277.786 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.789 I 
0.01.277.954 I sampler seed: 3466375503
0.01.277.964 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.968 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.277.969 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.277.969 I 
 increabling.

I am unable to generate a response due to the provided context being inappropriate and unsafe for me to provide information about. [end of text]


0.13.190.572 I llama_perf_sampler_print:    sampling time =      42.94 ms /    29 runs   (    1.48 ms per token,   675.30 tokens per second)
0.13.190.576 I llama_perf_context_print:        load time =    1274.80 ms
0.13.190.578 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.190.580 I llama_perf_context_print:        eval time =   11841.09 ms /    28 runs   (  422.90 ms per token,     2.36 tokens per second)
0.13.190.581 I llama_perf_context_print:       total time =   11912.91 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.479s
user	3m26.045s
sys	0m9.350s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3820 (bb5f8199)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199621.56 ms
main:    total time = 199621.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.621 I build: 3820 (bb5f8199) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.024.587 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.784 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.871 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.883 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.885 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.889 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.892 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.893 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.894 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.895 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.896 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.905 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.906 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.907 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.908 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.909 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.360 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.188.821 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.201.009 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.201.016 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.201.018 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.201.018 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.201.019 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.201.020 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.201.021 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.201.025 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.201.025 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.201.026 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.201.027 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.201.028 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.201.037 I llama_model_loader: - type  f32:   37 tensors
0.00.201.040 I llama_model_loader: - type q4_K:  108 tensors
0.00.201.041 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.938 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.413 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.414 I llm_load_vocab: special tokens cache size = 5
0.00.560.049 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.560.107 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.560.109 I llm_load_print_meta: arch             = gemma
0.00.560.109 I llm_load_print_meta: vocab type       = SPM
0.00.560.110 I llm_load_print_meta: n_vocab          = 256000
0.00.560.113 I llm_load_print_meta: n_merges         = 0
0.00.560.114 I llm_load_print_meta: vocab_only       = 0
0.00.560.114 I llm_load_print_meta: n_ctx_train      = 8192
0.00.560.115 I llm_load_print_meta: n_embd           = 2048
0.00.560.115 I llm_load_print_meta: n_layer          = 18
0.00.560.150 I llm_load_print_meta: n_head           = 8
0.00.560.157 I llm_load_print_meta: n_head_kv        = 1
0.00.560.157 I llm_load_print_meta: n_rot            = 256
0.00.560.158 I llm_load_print_meta: n_swa            = 0
0.00.560.158 I llm_load_print_meta: n_embd_head_k    = 256
0.00.560.159 I llm_load_print_meta: n_embd_head_v    = 256
0.00.560.164 I llm_load_print_meta: n_gqa            = 8
0.00.560.168 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.560.173 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.560.174 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.560.175 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.560.176 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.560.177 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.560.178 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.560.184 I llm_load_print_meta: n_ff             = 16384
0.00.560.184 I llm_load_print_meta: n_expert         = 0
0.00.560.185 I llm_load_print_meta: n_expert_used    = 0
0.00.560.193 I llm_load_print_meta: causal attn      = 1
0.00.560.194 I llm_load_print_meta: pooling type     = 0
0.00.560.195 I llm_load_print_meta: rope type        = 2
0.00.560.196 I llm_load_print_meta: rope scaling     = linear
0.00.560.197 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.560.198 I llm_load_print_meta: freq_scale_train = 1
0.00.560.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.560.200 I llm_load_print_meta: rope_finetuned   = unknown
0.00.560.200 I llm_load_print_meta: ssm_d_conv       = 0
0.00.560.200 I llm_load_print_meta: ssm_d_inner      = 0
0.00.560.201 I llm_load_print_meta: ssm_d_state      = 0
0.00.560.212 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.560.213 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.560.214 I llm_load_print_meta: model type       = 2B
0.00.560.215 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.560.216 I llm_load_print_meta: model params     = 2.51 B
0.00.560.217 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.560.218 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.560.219 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.560.219 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.560.220 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.560.220 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.560.229 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.560.230 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.560.235 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.560.238 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.560.238 I llm_load_print_meta: max token length = 93
0.00.560.411 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.918 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.619.925 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.619.926 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.619.926 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.619.927 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.619.928 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.625.406 I llama_new_context_with_model: n_ctx      = 8192
0.00.625.413 I llama_new_context_with_model: n_batch    = 2048
0.00.625.414 I llama_new_context_with_model: n_ubatch   = 512
0.00.625.414 I llama_new_context_with_model: flash_attn = 0
0.00.625.416 I llama_new_context_with_model: freq_base  = 10000.0
0.00.625.417 I llama_new_context_with_model: freq_scale = 1
0.00.654.577 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.654.623 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.654.735 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.656.101 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.656.107 I llama_new_context_with_model: graph nodes  = 601
0.00.656.108 I llama_new_context_with_model: graph splits = 1
0.00.656.125 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.235.059 I main: llama threadpool init, n_threads = 4
0.01.235.070 I 
0.01.235.161 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.235.165 I 
0.01.235.333 I sampler seed: 4177413355
0.01.235.345 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.235.351 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.235.351 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.235.352 I 
 increamically, their melodious voices echoing through the vast cathedral.

The crowd gasped, their eyes wide with wonder and reverence. The air vibrated with the music

0.12.154.218 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.17 tokens per second)
0.12.154.221 I llama_perf_context_print:        load time =    1232.21 ms
0.12.154.222 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.154.224 I llama_perf_context_print:        eval time =   10836.93 ms /    32 runs   (  338.65 ms per token,     2.95 tokens per second)
0.12.154.250 I llama_perf_context_print:       total time =   10919.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3820 (bb5f8199)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 201101.87 ms
main:    total time = 201101.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.677 I build: 3820 (bb5f8199) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.002.826 I main: load the model and apply lora adapter, if any
0.00.024.818 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.934 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.943 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.950 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.958 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.959 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.960 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.960 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.961 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.966 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.972 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.974 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.991 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.929 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.006 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.037 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.043 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.044 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.045 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.046 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.047 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.048 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.050 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.058 I llama_model_loader: - type  f32:   37 tensors
0.00.196.062 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.063 I llama_model_loader: - type q6_K:   19 tensors
0.00.496.328 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.378 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.429 I llm_load_vocab: special tokens cache size = 5
0.00.582.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.582.493 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.582.494 I llm_load_print_meta: arch             = gemma
0.00.582.495 I llm_load_print_meta: vocab type       = SPM
0.00.582.496 I llm_load_print_meta: n_vocab          = 256000
0.00.582.498 I llm_load_print_meta: n_merges         = 0
0.00.582.498 I llm_load_print_meta: vocab_only       = 0
0.00.582.498 I llm_load_print_meta: n_ctx_train      = 8192
0.00.582.499 I llm_load_print_meta: n_embd           = 2048
0.00.582.499 I llm_load_print_meta: n_layer          = 18
0.00.582.535 I llm_load_print_meta: n_head           = 8
0.00.582.542 I llm_load_print_meta: n_head_kv        = 1
0.00.582.543 I llm_load_print_meta: n_rot            = 256
0.00.582.543 I llm_load_print_meta: n_swa            = 0
0.00.582.544 I llm_load_print_meta: n_embd_head_k    = 256
0.00.582.544 I llm_load_print_meta: n_embd_head_v    = 256
0.00.582.549 I llm_load_print_meta: n_gqa            = 8
0.00.582.579 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.582.586 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.582.588 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.582.589 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.582.590 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.582.590 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.582.591 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.582.595 I llm_load_print_meta: n_ff             = 16384
0.00.582.606 I llm_load_print_meta: n_expert         = 0
0.00.582.606 I llm_load_print_meta: n_expert_used    = 0
0.00.582.607 I llm_load_print_meta: causal attn      = 1
0.00.582.607 I llm_load_print_meta: pooling type     = 0
0.00.582.615 I llm_load_print_meta: rope type        = 2
0.00.582.622 I llm_load_print_meta: rope scaling     = linear
0.00.582.624 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.582.639 I llm_load_print_meta: freq_scale_train = 1
0.00.582.639 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.582.640 I llm_load_print_meta: rope_finetuned   = unknown
0.00.582.640 I llm_load_print_meta: ssm_d_conv       = 0
0.00.582.640 I llm_load_print_meta: ssm_d_inner      = 0
0.00.582.647 I llm_load_print_meta: ssm_d_state      = 0
0.00.582.648 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.582.648 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.582.649 I llm_load_print_meta: model type       = 2B
0.00.582.650 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.582.651 I llm_load_print_meta: model params     = 2.51 B
0.00.582.652 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.582.652 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.582.653 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.582.653 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.582.654 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.582.655 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.582.655 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.582.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.582.661 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.582.663 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.582.663 I llm_load_print_meta: max token length = 93
0.00.582.841 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.641.928 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.647.574 I llama_new_context_with_model: n_ctx      = 8192
0.00.647.582 I llama_new_context_with_model: n_batch    = 2048
0.00.647.583 I llama_new_context_with_model: n_ubatch   = 512
0.00.647.583 I llama_new_context_with_model: flash_attn = 0
0.00.647.586 I llama_new_context_with_model: freq_base  = 10000.0
0.00.647.587 I llama_new_context_with_model: freq_scale = 1
0.00.678.353 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.678.396 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.678.516 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.679.923 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.679.929 I llama_new_context_with_model: graph nodes  = 601
0.00.679.929 I llama_new_context_with_model: graph splits = 1
0.00.679.945 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.200 I main: llama threadpool init, n_threads = 4
0.01.260.211 I 
0.01.260.300 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.303 I 
0.01.260.463 I sampler seed: 3590827899
0.01.260.473 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.260.477 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.260.478 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.260.478 I 
 squaRED text.

I am unable to provide a response that includes sexually suggestive or inappropriate content. [end of text]


0.08.456.639 I llama_perf_sampler_print:    sampling time =      32.37 ms /    22 runs   (    1.47 ms per token,   679.75 tokens per second)
0.08.456.643 I llama_perf_context_print:        load time =    1257.29 ms
0.08.456.645 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.456.658 I llama_perf_context_print:        eval time =    7141.71 ms /    21 runs   (  340.08 ms per token,     2.94 tokens per second)
0.08.456.659 I llama_perf_context_print:       total time =    7196.45 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.182s
user	50m16.389s
sys	0m6.245s
