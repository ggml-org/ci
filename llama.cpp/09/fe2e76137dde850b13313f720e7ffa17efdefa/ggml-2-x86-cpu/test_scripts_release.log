+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.173 I build: 4389 (09fe2e76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.373 I main: llama backend init
0.00.000.380 I main: load the model and apply lora adapter, if any
0.00.020.788 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.797 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.806 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.811 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.812 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.815 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.815 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.816 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.817 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.817 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.818 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.823 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.824 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.824 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.825 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.826 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.274 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.686 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.579 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.586 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.586 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.587 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.587 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.588 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.589 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.591 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.592 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.593 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.593 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.594 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.598 I llama_model_loader: - type  f32:   37 tensors
0.00.130.599 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.264 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.336 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.958 I llm_load_vocab: special tokens cache size = 5
0.00.278.049 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.067 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.068 I llm_load_print_meta: arch             = gemma
0.00.278.068 I llm_load_print_meta: vocab type       = SPM
0.00.278.069 I llm_load_print_meta: n_vocab          = 256000
0.00.278.069 I llm_load_print_meta: n_merges         = 0
0.00.278.070 I llm_load_print_meta: vocab_only       = 0
0.00.278.070 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.071 I llm_load_print_meta: n_embd           = 2048
0.00.278.071 I llm_load_print_meta: n_layer          = 18
0.00.278.085 I llm_load_print_meta: n_head           = 8
0.00.278.086 I llm_load_print_meta: n_head_kv        = 1
0.00.278.086 I llm_load_print_meta: n_rot            = 256
0.00.278.087 I llm_load_print_meta: n_swa            = 0
0.00.278.087 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.087 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.088 I llm_load_print_meta: n_gqa            = 8
0.00.278.089 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.090 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.091 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.092 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.092 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.093 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.093 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.094 I llm_load_print_meta: n_ff             = 16384
0.00.278.094 I llm_load_print_meta: n_expert         = 0
0.00.278.094 I llm_load_print_meta: n_expert_used    = 0
0.00.278.095 I llm_load_print_meta: causal attn      = 1
0.00.278.095 I llm_load_print_meta: pooling type     = 0
0.00.278.095 I llm_load_print_meta: rope type        = 2
0.00.278.096 I llm_load_print_meta: rope scaling     = linear
0.00.278.097 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.098 I llm_load_print_meta: freq_scale_train = 1
0.00.278.098 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.099 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.099 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.099 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.099 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.099 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.100 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.100 I llm_load_print_meta: model type       = 2B
0.00.278.101 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.102 I llm_load_print_meta: model params     = 2.51 B
0.00.278.103 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.104 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.104 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.106 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.107 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.107 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.107 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.107 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.108 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.108 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.109 I llm_load_print_meta: max token length = 93
0.00.377.562 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.377.569 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.377.569 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.377.570 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.377.570 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.377.571 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.712 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.719 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.720 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.720 I llama_new_context_with_model: n_batch       = 2048
0.00.382.720 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.721 I llama_new_context_with_model: flash_attn    = 0
0.00.382.723 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.724 I llama_new_context_with_model: freq_scale    = 1
0.00.382.725 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.747 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.397.686 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.702 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.797 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.048 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.054 I llama_new_context_with_model: graph nodes  = 601
0.00.399.054 I llama_new_context_with_model: graph splits = 1
0.00.399.056 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.399.057 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.248 I main: llama threadpool init, n_threads = 4
0.00.486.264 I 
0.00.486.339 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.486.342 I 
0.00.486.385 I sampler seed: 3903575413
0.00.486.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.401 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.404 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.404 I 
 increasively as the evidence mounts that the Earth is a closed system.

**Explanation:**

* The Earth's atmosphere acts as a barrier, preventing the

0.02.773.223 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6742.95 tokens per second)
0.02.773.225 I llama_perf_context_print:        load time =     485.85 ms
0.02.773.226 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.773.227 I llama_perf_context_print:        eval time =    2267.51 ms /    32 runs   (   70.86 ms per token,    14.11 tokens per second)
0.02.773.228 I llama_perf_context_print:       total time =    2286.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.542 I build: 4389 (09fe2e76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.021.093 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.109 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.120 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.124 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.127 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.128 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.129 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.129 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.130 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.131 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.136 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.137 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.138 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.138 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.921 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.811 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.636 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.642 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.643 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.644 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.644 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.645 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.646 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.649 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.649 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.650 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.651 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.652 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.656 I llama_model_loader: - type  f32:   37 tensors
0.00.130.657 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.830 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.401 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.078 I llm_load_vocab: special tokens cache size = 5
0.00.282.359 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.379 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.379 I llm_load_print_meta: arch             = gemma
0.00.282.380 I llm_load_print_meta: vocab type       = SPM
0.00.282.381 I llm_load_print_meta: n_vocab          = 256000
0.00.282.381 I llm_load_print_meta: n_merges         = 0
0.00.282.381 I llm_load_print_meta: vocab_only       = 0
0.00.282.382 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.382 I llm_load_print_meta: n_embd           = 2048
0.00.282.382 I llm_load_print_meta: n_layer          = 18
0.00.282.393 I llm_load_print_meta: n_head           = 8
0.00.282.394 I llm_load_print_meta: n_head_kv        = 1
0.00.282.394 I llm_load_print_meta: n_rot            = 256
0.00.282.394 I llm_load_print_meta: n_swa            = 0
0.00.282.394 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.395 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.396 I llm_load_print_meta: n_gqa            = 8
0.00.282.397 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.398 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.398 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.400 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.400 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.400 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.400 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.401 I llm_load_print_meta: n_ff             = 16384
0.00.282.402 I llm_load_print_meta: n_expert         = 0
0.00.282.402 I llm_load_print_meta: n_expert_used    = 0
0.00.282.402 I llm_load_print_meta: causal attn      = 1
0.00.282.403 I llm_load_print_meta: pooling type     = 0
0.00.282.403 I llm_load_print_meta: rope type        = 2
0.00.282.403 I llm_load_print_meta: rope scaling     = linear
0.00.282.405 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.405 I llm_load_print_meta: freq_scale_train = 1
0.00.282.406 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.406 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.406 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.407 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.407 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.407 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.407 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.408 I llm_load_print_meta: model type       = 2B
0.00.282.408 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.409 I llm_load_print_meta: model params     = 2.51 B
0.00.282.410 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.410 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.411 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.411 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.411 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.412 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.412 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.412 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.413 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.413 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.413 I llm_load_print_meta: max token length = 93
0.00.377.540 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.382.614 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.620 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.621 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.621 I llama_new_context_with_model: n_batch       = 2048
0.00.382.622 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.622 I llama_new_context_with_model: flash_attn    = 0
0.00.382.624 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.625 I llama_new_context_with_model: freq_scale    = 1
0.00.382.626 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.645 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.397.800 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.814 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.915 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.165 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.171 I llama_new_context_with_model: graph nodes  = 601
0.00.399.172 I llama_new_context_with_model: graph splits = 1
0.00.399.175 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.399.175 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.121 I main: llama threadpool init, n_threads = 4
0.00.481.136 I 
0.00.481.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.214 I 
0.00.481.259 I sampler seed: 661225895
0.00.481.270 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.275 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.276 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.276 I 
 increasities, the protagonist must confront his own mortality and the limitations of his own existence.

**Themes:**

* Mortality and the limitations of life
*

0.02.697.673 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6794.32 tokens per second)
0.02.697.675 I llama_perf_context_print:        load time =     480.35 ms
0.02.697.677 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.697.679 I llama_perf_context_print:        eval time =    2196.69 ms /    32 runs   (   68.65 ms per token,    14.57 tokens per second)
0.02.697.680 I llama_perf_context_print:       total time =    2216.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.543 I build: 4389 (09fe2e76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.020.825 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.835 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.846 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.851 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.852 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.855 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.855 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.856 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.857 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.857 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.858 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.862 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.863 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.863 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.864 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.864 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.043 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.994 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.903 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.913 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.914 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.915 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.916 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.917 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.918 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.922 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.923 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.924 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.924 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.926 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.930 I llama_model_loader: - type  f32:   37 tensors
0.00.130.932 I llama_model_loader: - type q8_0:  127 tensors
0.00.225.569 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.279.914 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.280.640 I llm_load_vocab: special tokens cache size = 5
0.00.301.713 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.301.733 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.301.734 I llm_load_print_meta: arch             = gemma
0.00.301.734 I llm_load_print_meta: vocab type       = SPM
0.00.301.736 I llm_load_print_meta: n_vocab          = 256000
0.00.301.736 I llm_load_print_meta: n_merges         = 0
0.00.301.736 I llm_load_print_meta: vocab_only       = 0
0.00.301.737 I llm_load_print_meta: n_ctx_train      = 8192
0.00.301.737 I llm_load_print_meta: n_embd           = 2048
0.00.301.738 I llm_load_print_meta: n_layer          = 18
0.00.301.750 I llm_load_print_meta: n_head           = 8
0.00.301.751 I llm_load_print_meta: n_head_kv        = 1
0.00.301.751 I llm_load_print_meta: n_rot            = 256
0.00.301.751 I llm_load_print_meta: n_swa            = 0
0.00.301.752 I llm_load_print_meta: n_embd_head_k    = 256
0.00.301.752 I llm_load_print_meta: n_embd_head_v    = 256
0.00.301.753 I llm_load_print_meta: n_gqa            = 8
0.00.301.754 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.301.755 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.301.756 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.301.757 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.301.758 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.301.758 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.301.758 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.301.759 I llm_load_print_meta: n_ff             = 16384
0.00.301.760 I llm_load_print_meta: n_expert         = 0
0.00.301.760 I llm_load_print_meta: n_expert_used    = 0
0.00.301.761 I llm_load_print_meta: causal attn      = 1
0.00.301.763 I llm_load_print_meta: pooling type     = 0
0.00.301.764 I llm_load_print_meta: rope type        = 2
0.00.301.764 I llm_load_print_meta: rope scaling     = linear
0.00.301.766 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.301.766 I llm_load_print_meta: freq_scale_train = 1
0.00.301.767 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.301.767 I llm_load_print_meta: rope_finetuned   = unknown
0.00.301.767 I llm_load_print_meta: ssm_d_conv       = 0
0.00.301.768 I llm_load_print_meta: ssm_d_inner      = 0
0.00.301.768 I llm_load_print_meta: ssm_d_state      = 0
0.00.301.769 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.301.769 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.301.769 I llm_load_print_meta: model type       = 2B
0.00.301.770 I llm_load_print_meta: model ftype      = Q8_0
0.00.301.772 I llm_load_print_meta: model params     = 2.51 B
0.00.301.773 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.301.774 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.301.774 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.301.775 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.301.776 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.301.776 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.301.777 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.301.777 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.301.777 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.301.779 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.301.779 I llm_load_print_meta: max token length = 93
0.00.378.954 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.378.962 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.378.963 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.378.964 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.378.964 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.378.965 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.384.093 I llama_new_context_with_model: n_seq_max     = 1
0.00.384.098 I llama_new_context_with_model: n_ctx         = 4096
0.00.384.099 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.384.099 I llama_new_context_with_model: n_batch       = 2048
0.00.384.100 I llama_new_context_with_model: n_ubatch      = 512
0.00.384.100 I llama_new_context_with_model: flash_attn    = 0
0.00.384.103 I llama_new_context_with_model: freq_base     = 10000.0
0.00.384.104 I llama_new_context_with_model: freq_scale    = 1
0.00.384.105 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.128 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.399.564 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.576 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.670 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.962 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.966 I llama_new_context_with_model: graph nodes  = 601
0.00.400.967 I llama_new_context_with_model: graph splits = 1
0.00.400.969 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.400.970 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.022 I main: llama threadpool init, n_threads = 4
0.00.487.042 I 
0.00.487.131 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.487.136 I 
0.00.487.185 I sampler seed: 3774915096
0.00.487.195 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.209 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.214 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.214 I 
 increably. [end of text]


0.00.772.829 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8223.68 tokens per second)
0.00.772.832 I llama_perf_context_print:        load time =     486.26 ms
0.00.772.834 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.772.836 I llama_perf_context_print:        eval time =     282.21 ms /     4 runs   (   70.55 ms per token,    14.17 tokens per second)
0.00.772.837 I llama_perf_context_print:       total time =     285.82 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.515 I build: 4389 (09fe2e76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.729 I main: load the model and apply lora adapter, if any
0.00.020.955 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.965 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.973 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.982 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.985 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.988 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.989 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.990 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.991 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.998 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.998 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.999 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.000 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.001 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.052.634 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.135.349 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.142.171 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.142.178 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.142.179 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.142.179 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.142.180 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.142.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.142.182 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.142.184 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.142.185 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.142.186 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.142.187 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.142.188 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.142.192 I llama_model_loader: - type  f32:   37 tensors
0.00.142.193 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.195 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.672 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.273 I llm_load_vocab: special tokens cache size = 5
0.00.294.583 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.604 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.605 I llm_load_print_meta: arch             = gemma
0.00.294.605 I llm_load_print_meta: vocab type       = SPM
0.00.294.606 I llm_load_print_meta: n_vocab          = 256000
0.00.294.607 I llm_load_print_meta: n_merges         = 0
0.00.294.607 I llm_load_print_meta: vocab_only       = 0
0.00.294.608 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.625 I llm_load_print_meta: n_embd           = 2048
0.00.294.626 I llm_load_print_meta: n_layer          = 18
0.00.294.638 I llm_load_print_meta: n_head           = 8
0.00.294.639 I llm_load_print_meta: n_head_kv        = 1
0.00.294.640 I llm_load_print_meta: n_rot            = 256
0.00.294.640 I llm_load_print_meta: n_swa            = 0
0.00.294.641 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.641 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.642 I llm_load_print_meta: n_gqa            = 8
0.00.294.643 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.644 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.645 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.646 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.647 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.647 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.647 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.648 I llm_load_print_meta: n_ff             = 16384
0.00.294.648 I llm_load_print_meta: n_expert         = 0
0.00.294.650 I llm_load_print_meta: n_expert_used    = 0
0.00.294.650 I llm_load_print_meta: causal attn      = 1
0.00.294.650 I llm_load_print_meta: pooling type     = 0
0.00.294.651 I llm_load_print_meta: rope type        = 2
0.00.294.651 I llm_load_print_meta: rope scaling     = linear
0.00.294.653 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.654 I llm_load_print_meta: freq_scale_train = 1
0.00.294.655 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.658 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.658 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.658 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.659 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.659 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.659 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.659 I llm_load_print_meta: model type       = 2B
0.00.294.660 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.661 I llm_load_print_meta: model params     = 2.51 B
0.00.294.662 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.662 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.663 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.663 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.664 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.664 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.665 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.665 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.666 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.666 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.666 I llm_load_print_meta: max token length = 93
0.00.366.185 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.366.194 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.371.712 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.719 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.719 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.720 I llama_new_context_with_model: n_batch       = 2048
0.00.371.720 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.721 I llama_new_context_with_model: flash_attn    = 0
0.00.371.726 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.727 I llama_new_context_with_model: freq_scale    = 1
0.00.371.728 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.769 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.387.417 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.432 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.529 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.795 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.801 I llama_new_context_with_model: graph nodes  = 601
0.00.388.802 I llama_new_context_with_model: graph splits = 1
0.00.388.804 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.804 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.862 I main: llama threadpool init, n_threads = 4
0.00.475.876 I 
0.00.475.948 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.951 I 
0.00.475.995 I sampler seed: 98107243
0.00.476.006 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.016 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.020 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.020 I 
 increasities can lead to a variety of outcomes, including physical harm, emotional distress, and even death. [end of text]


0.02.148.421 I llama_perf_sampler_print:    sampling time =       3.61 ms /    23 runs   (    0.16 ms per token,  6378.26 tokens per second)
0.02.148.423 I llama_perf_context_print:        load time =     475.12 ms
0.02.148.424 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.148.426 I llama_perf_context_print:        eval time =    1658.94 ms /    22 runs   (   75.41 ms per token,    13.26 tokens per second)
0.02.148.426 I llama_perf_context_print:       total time =    1672.57 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.330s
user	0m28.815s
sys	0m9.513s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4389 (09fe2e76)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40423.53 ms
main:    total time = 40423.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4389 (09fe2e76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.277 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.287 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.299 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.308 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.312 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.315 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.315 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.316 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.316 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.317 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.318 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.323 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.323 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.324 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.325 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.325 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.698 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.639 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.490 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.497 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.497 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.498 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.498 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.499 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.500 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.502 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.503 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.503 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.504 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.504 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.508 I llama_model_loader: - type  f32:   37 tensors
0.00.131.509 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.509 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.892 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.279 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.852 I llm_load_vocab: special tokens cache size = 5
0.00.277.067 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.085 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.086 I llm_load_print_meta: arch             = gemma
0.00.277.086 I llm_load_print_meta: vocab type       = SPM
0.00.277.087 I llm_load_print_meta: n_vocab          = 256000
0.00.277.087 I llm_load_print_meta: n_merges         = 0
0.00.277.088 I llm_load_print_meta: vocab_only       = 0
0.00.277.088 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.088 I llm_load_print_meta: n_embd           = 2048
0.00.277.088 I llm_load_print_meta: n_layer          = 18
0.00.277.101 I llm_load_print_meta: n_head           = 8
0.00.277.102 I llm_load_print_meta: n_head_kv        = 1
0.00.277.102 I llm_load_print_meta: n_rot            = 256
0.00.277.102 I llm_load_print_meta: n_swa            = 0
0.00.277.103 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.103 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.104 I llm_load_print_meta: n_gqa            = 8
0.00.277.105 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.106 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.107 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.108 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.108 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.109 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.109 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.110 I llm_load_print_meta: n_ff             = 16384
0.00.277.110 I llm_load_print_meta: n_expert         = 0
0.00.277.111 I llm_load_print_meta: n_expert_used    = 0
0.00.277.111 I llm_load_print_meta: causal attn      = 1
0.00.277.111 I llm_load_print_meta: pooling type     = 0
0.00.277.112 I llm_load_print_meta: rope type        = 2
0.00.277.112 I llm_load_print_meta: rope scaling     = linear
0.00.277.113 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.114 I llm_load_print_meta: freq_scale_train = 1
0.00.277.114 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.114 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.115 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.115 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.115 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.115 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.116 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.116 I llm_load_print_meta: model type       = 2B
0.00.277.117 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.118 I llm_load_print_meta: model params     = 2.51 B
0.00.277.119 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.119 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.120 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.120 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.120 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.120 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.121 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.121 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.121 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.122 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.123 I llm_load_print_meta: max token length = 93
0.00.336.936 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.944 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.944 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.945 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.946 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.946 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.342.201 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.208 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.208 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.209 I llama_new_context_with_model: n_batch       = 2048
0.00.342.209 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.209 I llama_new_context_with_model: flash_attn    = 0
0.00.342.212 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.213 I llama_new_context_with_model: freq_scale    = 1
0.00.342.213 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.232 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.356.682 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.695 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.783 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.101 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.108 I llama_new_context_with_model: graph nodes  = 601
0.00.358.108 I llama_new_context_with_model: graph splits = 1
0.00.358.110 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.358.111 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.405 I main: llama threadpool init, n_threads = 4
0.00.433.421 I 
0.00.433.492 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.433.495 I 
0.00.433.534 I sampler seed: 1941633677
0.00.433.545 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.557 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.560 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.560 I 
 guaranteing the safety of your children when using the internet?

**1. Establish Clear Limits and Boundaries**

* Set age-appropriate time limits for internet

0.02.081.109 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6371.89 tokens per second)
0.02.081.112 I llama_perf_context_print:        load time =     432.66 ms
0.02.081.114 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.081.116 I llama_perf_context_print:        eval time =    1628.39 ms /    32 runs   (   50.89 ms per token,    19.65 tokens per second)
0.02.081.117 I llama_perf_context_print:       total time =    1647.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4389 (09fe2e76)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40256.75 ms
main:    total time = 40256.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.534 I build: 4389 (09fe2e76) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.021.152 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.167 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.177 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.181 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.184 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.185 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.185 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.186 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.186 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.187 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.190 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.191 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.191 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.192 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.193 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.513 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.731 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.534 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.540 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.541 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.541 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.542 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.543 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.543 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.546 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.546 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.550 I llama_model_loader: - type  f32:   37 tensors
0.00.130.551 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.551 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.593 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.881 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.416 I llm_load_vocab: special tokens cache size = 5
0.00.272.248 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.266 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.267 I llm_load_print_meta: arch             = gemma
0.00.272.267 I llm_load_print_meta: vocab type       = SPM
0.00.272.268 I llm_load_print_meta: n_vocab          = 256000
0.00.272.268 I llm_load_print_meta: n_merges         = 0
0.00.272.269 I llm_load_print_meta: vocab_only       = 0
0.00.272.269 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.269 I llm_load_print_meta: n_embd           = 2048
0.00.272.270 I llm_load_print_meta: n_layer          = 18
0.00.272.281 I llm_load_print_meta: n_head           = 8
0.00.272.282 I llm_load_print_meta: n_head_kv        = 1
0.00.272.282 I llm_load_print_meta: n_rot            = 256
0.00.272.283 I llm_load_print_meta: n_swa            = 0
0.00.272.283 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.283 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.284 I llm_load_print_meta: n_gqa            = 8
0.00.272.285 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.286 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.287 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.288 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.289 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.289 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.289 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.290 I llm_load_print_meta: n_ff             = 16384
0.00.272.290 I llm_load_print_meta: n_expert         = 0
0.00.272.291 I llm_load_print_meta: n_expert_used    = 0
0.00.272.291 I llm_load_print_meta: causal attn      = 1
0.00.272.291 I llm_load_print_meta: pooling type     = 0
0.00.272.291 I llm_load_print_meta: rope type        = 2
0.00.272.292 I llm_load_print_meta: rope scaling     = linear
0.00.272.293 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.294 I llm_load_print_meta: freq_scale_train = 1
0.00.272.295 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.295 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.295 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.296 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.296 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.296 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.297 I llm_load_print_meta: model type       = 2B
0.00.272.297 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.298 I llm_load_print_meta: model params     = 2.51 B
0.00.272.299 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.299 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.300 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.300 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.301 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.301 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.301 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.302 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.302 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.302 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.303 I llm_load_print_meta: max token length = 93
0.00.330.504 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.688 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.693 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.693 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.694 I llama_new_context_with_model: n_batch       = 2048
0.00.335.695 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.695 I llama_new_context_with_model: flash_attn    = 0
0.00.335.697 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.698 I llama_new_context_with_model: freq_scale    = 1
0.00.335.700 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.721 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.351.378 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.392 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.484 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.736 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.742 I llama_new_context_with_model: graph nodes  = 601
0.00.352.743 I llama_new_context_with_model: graph splits = 1
0.00.352.745 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.746 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.697 I main: llama threadpool init, n_threads = 4
0.00.427.713 I 
0.00.427.786 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.790 I 
0.00.427.832 I sampler seed: 3826319673
0.00.427.842 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.847 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.848 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.848 I 
 maneuvore.

The maneuvore is a small, nocturnal mammal that is found in the forests of North America. It is about the size of a house mouse

0.02.018.616 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6537.24 tokens per second)
0.02.018.618 I llama_perf_context_print:        load time =     426.94 ms
0.02.018.619 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.018.620 I llama_perf_context_print:        eval time =    1572.11 ms /    32 runs   (   49.13 ms per token,    20.35 tokens per second)
0.02.018.621 I llama_perf_context_print:       total time =    1590.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.621s
user	10m24.741s
sys	0m7.065s
