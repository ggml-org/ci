+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.710 I build: 3948 (55e47786) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.929 I main: llama backend init
0.00.002.867 I main: load the model and apply lora adapter, if any
0.00.024.881 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.162 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.251 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.262 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.264 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.268 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.270 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.272 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.273 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.275 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.276 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.283 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.287 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.288 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.290 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.291 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.934 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.421 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.660 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.668 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.669 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.670 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.671 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.672 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.674 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.678 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.679 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.680 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.681 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.683 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.690 I llama_model_loader: - type  f32:   37 tensors
0.00.268.695 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.125 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.851 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.819 I llm_load_vocab: special tokens cache size = 5
0.00.605.983 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.053 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.054 I llm_load_print_meta: arch             = gemma
0.00.606.055 I llm_load_print_meta: vocab type       = SPM
0.00.606.056 I llm_load_print_meta: n_vocab          = 256000
0.00.606.058 I llm_load_print_meta: n_merges         = 0
0.00.606.058 I llm_load_print_meta: vocab_only       = 0
0.00.606.059 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.059 I llm_load_print_meta: n_embd           = 2048
0.00.606.059 I llm_load_print_meta: n_layer          = 18
0.00.606.122 I llm_load_print_meta: n_head           = 8
0.00.606.129 I llm_load_print_meta: n_head_kv        = 1
0.00.606.130 I llm_load_print_meta: n_rot            = 256
0.00.606.130 I llm_load_print_meta: n_swa            = 0
0.00.606.131 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.132 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.137 I llm_load_print_meta: n_gqa            = 8
0.00.606.142 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.147 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.148 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.150 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.150 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.151 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.151 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.161 I llm_load_print_meta: n_ff             = 16384
0.00.606.162 I llm_load_print_meta: n_expert         = 0
0.00.606.172 I llm_load_print_meta: n_expert_used    = 0
0.00.606.173 I llm_load_print_meta: causal attn      = 1
0.00.606.174 I llm_load_print_meta: pooling type     = 0
0.00.606.174 I llm_load_print_meta: rope type        = 2
0.00.606.175 I llm_load_print_meta: rope scaling     = linear
0.00.606.176 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.177 I llm_load_print_meta: freq_scale_train = 1
0.00.606.177 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.178 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.190 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.192 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.192 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.193 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.193 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.194 I llm_load_print_meta: model type       = 2B
0.00.606.195 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.196 I llm_load_print_meta: model params     = 2.51 B
0.00.606.205 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.205 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.214 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.220 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.222 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.222 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.222 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.223 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.236 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.238 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.238 I llm_load_print_meta: max token length = 93
0.00.606.410 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.710.178 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.710.190 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.710.191 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.710.192 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.710.192 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.710.193 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.715.922 I llama_new_context_with_model: n_ctx      = 8192
0.00.715.929 I llama_new_context_with_model: n_batch    = 2048
0.00.715.930 I llama_new_context_with_model: n_ubatch   = 512
0.00.715.930 I llama_new_context_with_model: flash_attn = 0
0.00.715.933 I llama_new_context_with_model: freq_base  = 10000.0
0.00.715.934 I llama_new_context_with_model: freq_scale = 1
0.00.744.657 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.744.698 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.744.814 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.273 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.277 I llama_new_context_with_model: graph nodes  = 601
0.00.746.278 I llama_new_context_with_model: graph splits = 1
0.00.746.294 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.660 I main: llama threadpool init, n_threads = 4
0.01.355.673 I 
0.01.355.778 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.782 I 
0.01.355.959 I sampler seed: 1014631230
0.01.355.970 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.977 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.978 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.978 I 
 increasively with the current year.

I. 2023
II. 2024
III. 2025


0.14.891.637 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.46 tokens per second)
0.14.891.641 I llama_perf_context_print:        load time =    1352.70 ms
0.14.891.643 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.891.645 I llama_perf_context_print:        eval time =   13440.87 ms /    32 runs   (  420.03 ms per token,     2.38 tokens per second)
0.14.891.647 I llama_perf_context_print:       total time =   13535.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3948 (55e47786) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.611 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.704 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.717 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.719 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.724 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.728 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.729 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.730 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.731 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.732 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.739 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.740 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.741 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.742 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.746 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.800 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.926 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.384 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.392 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.393 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.394 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.395 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.396 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.397 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.401 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.402 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.403 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.404 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.405 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.412 I llama_model_loader: - type  f32:   37 tensors
0.00.268.415 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.141 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.734 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.679 I llm_load_vocab: special tokens cache size = 5
0.00.603.199 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.268 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.269 I llm_load_print_meta: arch             = gemma
0.00.603.270 I llm_load_print_meta: vocab type       = SPM
0.00.603.271 I llm_load_print_meta: n_vocab          = 256000
0.00.603.273 I llm_load_print_meta: n_merges         = 0
0.00.603.274 I llm_load_print_meta: vocab_only       = 0
0.00.603.275 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.275 I llm_load_print_meta: n_embd           = 2048
0.00.603.276 I llm_load_print_meta: n_layer          = 18
0.00.603.342 I llm_load_print_meta: n_head           = 8
0.00.603.350 I llm_load_print_meta: n_head_kv        = 1
0.00.603.351 I llm_load_print_meta: n_rot            = 256
0.00.603.352 I llm_load_print_meta: n_swa            = 0
0.00.603.352 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.352 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.357 I llm_load_print_meta: n_gqa            = 8
0.00.603.362 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.368 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.369 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.370 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.371 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.371 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.372 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.376 I llm_load_print_meta: n_ff             = 16384
0.00.603.377 I llm_load_print_meta: n_expert         = 0
0.00.603.378 I llm_load_print_meta: n_expert_used    = 0
0.00.603.378 I llm_load_print_meta: causal attn      = 1
0.00.603.379 I llm_load_print_meta: pooling type     = 0
0.00.603.382 I llm_load_print_meta: rope type        = 2
0.00.603.382 I llm_load_print_meta: rope scaling     = linear
0.00.603.384 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.385 I llm_load_print_meta: freq_scale_train = 1
0.00.603.385 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.386 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.386 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.386 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.387 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.387 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.388 I llm_load_print_meta: model type       = 2B
0.00.603.388 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.390 I llm_load_print_meta: model params     = 2.51 B
0.00.603.391 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.394 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.394 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.395 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.395 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.395 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.396 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.396 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.402 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.404 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.404 I llm_load_print_meta: max token length = 93
0.00.603.572 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.699.202 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.704.785 I llama_new_context_with_model: n_ctx      = 8192
0.00.704.791 I llama_new_context_with_model: n_batch    = 2048
0.00.704.791 I llama_new_context_with_model: n_ubatch   = 512
0.00.704.792 I llama_new_context_with_model: flash_attn = 0
0.00.704.794 I llama_new_context_with_model: freq_base  = 10000.0
0.00.704.795 I llama_new_context_with_model: freq_scale = 1
0.00.734.627 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.734.673 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.169 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.174 I llama_new_context_with_model: graph nodes  = 601
0.00.736.175 I llama_new_context_with_model: graph splits = 1
0.00.736.191 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.228 I main: llama threadpool init, n_threads = 4
0.01.345.241 I 
0.01.345.348 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.352 I 
0.01.345.541 I sampler seed: 3847992392
0.01.345.554 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.561 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.562 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.562 I 
 increasities
The provided text does not contain any information regarding "crepuscularis", so I am unable to answer this question from the provided context. [end of text]


0.14.857.299 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.37 tokens per second)
0.14.857.302 I llama_perf_context_print:        load time =    1342.34 ms
0.14.857.317 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.857.319 I llama_perf_context_print:        eval time =   13417.09 ms /    32 runs   (  419.28 ms per token,     2.39 tokens per second)
0.14.857.320 I llama_perf_context_print:       total time =   13512.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 3948 (55e47786) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.881 I main: load the model and apply lora adapter, if any
0.00.024.916 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.116 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.201 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.212 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.213 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.221 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.224 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.225 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.231 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.232 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.233 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.234 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.235 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.832 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.843 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.211 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.219 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.221 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.222 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.223 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.227 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.228 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.229 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.230 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.231 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.239 I llama_model_loader: - type  f32:   37 tensors
0.00.269.242 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.939 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.472 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.585 I llm_load_vocab: special tokens cache size = 5
0.00.602.699 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.771 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.772 I llm_load_print_meta: arch             = gemma
0.00.602.773 I llm_load_print_meta: vocab type       = SPM
0.00.602.773 I llm_load_print_meta: n_vocab          = 256000
0.00.602.777 I llm_load_print_meta: n_merges         = 0
0.00.602.777 I llm_load_print_meta: vocab_only       = 0
0.00.602.777 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.778 I llm_load_print_meta: n_embd           = 2048
0.00.602.778 I llm_load_print_meta: n_layer          = 18
0.00.602.841 I llm_load_print_meta: n_head           = 8
0.00.602.849 I llm_load_print_meta: n_head_kv        = 1
0.00.602.849 I llm_load_print_meta: n_rot            = 256
0.00.602.849 I llm_load_print_meta: n_swa            = 0
0.00.602.851 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.851 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.856 I llm_load_print_meta: n_gqa            = 8
0.00.602.872 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.878 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.880 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.881 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.881 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.895 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.900 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.905 I llm_load_print_meta: n_ff             = 16384
0.00.602.906 I llm_load_print_meta: n_expert         = 0
0.00.602.906 I llm_load_print_meta: n_expert_used    = 0
0.00.602.906 I llm_load_print_meta: causal attn      = 1
0.00.602.907 I llm_load_print_meta: pooling type     = 0
0.00.602.907 I llm_load_print_meta: rope type        = 2
0.00.602.907 I llm_load_print_meta: rope scaling     = linear
0.00.602.909 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.909 I llm_load_print_meta: freq_scale_train = 1
0.00.602.910 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.911 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.911 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.911 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.911 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.912 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.913 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.914 I llm_load_print_meta: model type       = 2B
0.00.602.915 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.915 I llm_load_print_meta: model params     = 2.51 B
0.00.602.916 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.916 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.917 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.918 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.919 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.919 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.920 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.921 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.927 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.928 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.928 I llm_load_print_meta: max token length = 93
0.00.603.100 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.769 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.681.781 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.681.782 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.681.783 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.681.783 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.681.784 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.687.550 I llama_new_context_with_model: n_ctx      = 8192
0.00.687.557 I llama_new_context_with_model: n_batch    = 2048
0.00.687.557 I llama_new_context_with_model: n_ubatch   = 512
0.00.687.558 I llama_new_context_with_model: flash_attn = 0
0.00.687.560 I llama_new_context_with_model: freq_base  = 10000.0
0.00.687.561 I llama_new_context_with_model: freq_scale = 1
0.00.716.341 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.387 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.507 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.944 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.949 I llama_new_context_with_model: graph nodes  = 601
0.00.717.949 I llama_new_context_with_model: graph splits = 1
0.00.717.965 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.750 I main: llama threadpool init, n_threads = 4
0.01.330.764 I 
0.01.330.870 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.874 I 
0.01.331.052 I sampler seed: 3957548053
0.01.331.064 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.071 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.331.072 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.072 I 
 increasements, but not at the expense of clarity or coherence.

I can generate code snippets that meet this description, but I am concerned about the ethical implications

0.14.893.021 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.76 tokens per second)
0.14.893.025 I llama_perf_context_print:        load time =    1327.78 ms
0.14.893.026 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.893.028 I llama_perf_context_print:        eval time =   13467.50 ms /    32 runs   (  420.86 ms per token,     2.38 tokens per second)
0.14.893.030 I llama_perf_context_print:       total time =   13562.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 3948 (55e47786) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.024.317 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.616 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.707 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.718 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.720 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.724 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.728 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.729 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.730 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.731 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.732 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.739 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.740 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.741 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.742 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.743 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.135 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.433 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.842 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.843 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.844 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.845 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.846 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.848 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.852 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.853 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.854 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.855 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.856 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.864 I llama_model_loader: - type  f32:   37 tensors
0.00.267.868 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.365 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.175 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.148 I llm_load_vocab: special tokens cache size = 5
0.00.606.437 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.506 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.507 I llm_load_print_meta: arch             = gemma
0.00.606.508 I llm_load_print_meta: vocab type       = SPM
0.00.606.508 I llm_load_print_meta: n_vocab          = 256000
0.00.606.511 I llm_load_print_meta: n_merges         = 0
0.00.606.512 I llm_load_print_meta: vocab_only       = 0
0.00.606.512 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.513 I llm_load_print_meta: n_embd           = 2048
0.00.606.513 I llm_load_print_meta: n_layer          = 18
0.00.606.576 I llm_load_print_meta: n_head           = 8
0.00.606.582 I llm_load_print_meta: n_head_kv        = 1
0.00.606.583 I llm_load_print_meta: n_rot            = 256
0.00.606.583 I llm_load_print_meta: n_swa            = 0
0.00.606.583 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.584 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.588 I llm_load_print_meta: n_gqa            = 8
0.00.606.593 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.612 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.614 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.615 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.616 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.616 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.617 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.622 I llm_load_print_meta: n_ff             = 16384
0.00.606.623 I llm_load_print_meta: n_expert         = 0
0.00.606.624 I llm_load_print_meta: n_expert_used    = 0
0.00.606.624 I llm_load_print_meta: causal attn      = 1
0.00.606.625 I llm_load_print_meta: pooling type     = 0
0.00.606.625 I llm_load_print_meta: rope type        = 2
0.00.606.625 I llm_load_print_meta: rope scaling     = linear
0.00.606.627 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.628 I llm_load_print_meta: freq_scale_train = 1
0.00.606.629 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.629 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.630 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.630 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.630 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.630 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.631 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.632 I llm_load_print_meta: model type       = 2B
0.00.606.633 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.634 I llm_load_print_meta: model params     = 2.51 B
0.00.606.634 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.635 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.636 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.636 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.637 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.637 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.638 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.639 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.645 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.646 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.647 I llm_load_print_meta: max token length = 93
0.00.606.813 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.678.268 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.678.279 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.683.896 I llama_new_context_with_model: n_ctx      = 8192
0.00.683.905 I llama_new_context_with_model: n_batch    = 2048
0.00.683.906 I llama_new_context_with_model: n_ubatch   = 512
0.00.683.906 I llama_new_context_with_model: flash_attn = 0
0.00.683.910 I llama_new_context_with_model: freq_base  = 10000.0
0.00.683.910 I llama_new_context_with_model: freq_scale = 1
0.00.714.636 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.676 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.787 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.163 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.168 I llama_new_context_with_model: graph nodes  = 601
0.00.716.169 I llama_new_context_with_model: graph splits = 1
0.00.716.184 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.717 I main: llama threadpool init, n_threads = 4
0.01.325.729 I 
0.01.325.833 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.836 I 
0.01.326.010 I sampler seed: 675718553
0.01.326.022 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.326.028 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.326.029 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.326.029 I 
 increasities in the anime "Overlord."

**Answer:**

I am unable to provide sexually suggestive or inappropriate information. My purpose is to assist with tasks

0.14.772.496 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.53 tokens per second)
0.14.772.499 I llama_perf_context_print:        load time =    1322.83 ms
0.14.772.501 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.772.502 I llama_perf_context_print:        eval time =   13352.48 ms /    32 runs   (  417.27 ms per token,     2.40 tokens per second)
0.14.772.515 I llama_perf_context_print:       total time =   13446.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m18.794s
user	3m48.775s
sys	0m9.477s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3948 (55e47786)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198511.91 ms
main:    total time = 198511.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 3948 (55e47786) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.340 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.549 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.644 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.656 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.658 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.664 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.668 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.669 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.670 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.671 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.672 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.679 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.681 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.684 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.685 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.686 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.134 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.492 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.890 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.900 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.901 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.902 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.903 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.904 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.905 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.909 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.910 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.911 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.911 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.913 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.922 I llama_model_loader: - type  f32:   37 tensors
0.00.267.925 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.926 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.803 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.133 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.085 I llm_load_vocab: special tokens cache size = 5
0.00.617.734 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.798 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.799 I llm_load_print_meta: arch             = gemma
0.00.617.800 I llm_load_print_meta: vocab type       = SPM
0.00.617.801 I llm_load_print_meta: n_vocab          = 256000
0.00.617.803 I llm_load_print_meta: n_merges         = 0
0.00.617.804 I llm_load_print_meta: vocab_only       = 0
0.00.617.804 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.804 I llm_load_print_meta: n_embd           = 2048
0.00.617.805 I llm_load_print_meta: n_layer          = 18
0.00.617.867 I llm_load_print_meta: n_head           = 8
0.00.617.874 I llm_load_print_meta: n_head_kv        = 1
0.00.617.875 I llm_load_print_meta: n_rot            = 256
0.00.617.876 I llm_load_print_meta: n_swa            = 0
0.00.617.877 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.878 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.883 I llm_load_print_meta: n_gqa            = 8
0.00.617.888 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.893 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.895 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.897 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.897 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.909 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.916 I llm_load_print_meta: n_ff             = 16384
0.00.617.920 I llm_load_print_meta: n_expert         = 0
0.00.617.921 I llm_load_print_meta: n_expert_used    = 0
0.00.617.921 I llm_load_print_meta: causal attn      = 1
0.00.617.921 I llm_load_print_meta: pooling type     = 0
0.00.617.922 I llm_load_print_meta: rope type        = 2
0.00.617.922 I llm_load_print_meta: rope scaling     = linear
0.00.617.923 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.924 I llm_load_print_meta: freq_scale_train = 1
0.00.617.924 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.925 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.925 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.925 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.925 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.926 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.926 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.927 I llm_load_print_meta: model type       = 2B
0.00.617.939 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.617.940 I llm_load_print_meta: model params     = 2.51 B
0.00.617.940 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.617.941 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.942 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.942 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.943 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.943 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.943 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.944 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.950 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.952 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.952 I llm_load_print_meta: max token length = 93
0.00.618.122 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.678.822 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.678.831 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.678.832 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.678.833 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.678.833 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.678.834 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.684.426 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.435 I llama_new_context_with_model: n_batch    = 2048
0.00.684.435 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.436 I llama_new_context_with_model: flash_attn = 0
0.00.684.438 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.439 I llama_new_context_with_model: freq_scale = 1
0.00.714.845 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.889 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.004 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.389 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.394 I llama_new_context_with_model: graph nodes  = 601
0.00.716.394 I llama_new_context_with_model: graph splits = 1
0.00.716.411 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.419 I main: llama threadpool init, n_threads = 4
0.01.296.431 I 
0.01.296.537 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.541 I 
0.01.296.715 I sampler seed: 1691082385
0.01.296.727 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.296.734 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.296.735 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.296.735 I 
 seconally.

I'm having a hard time with my finances, and I'm worried that I might lose my home.

**Response:**



0.12.226.566 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.96 tokens per second)
0.12.226.569 I llama_perf_context_print:        load time =    1293.55 ms
0.12.226.581 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.226.584 I llama_perf_context_print:        eval time =   10835.52 ms /    32 runs   (  338.61 ms per token,     2.95 tokens per second)
0.12.226.585 I llama_perf_context_print:       total time =   10930.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3948 (55e47786)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198449.68 ms
main:    total time = 198449.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 3948 (55e47786) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.802 I main: load the model and apply lora adapter, if any
0.00.024.826 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.910 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.925 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.930 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.931 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.933 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.934 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.935 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.936 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.941 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.942 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.943 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.945 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.945 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.063 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.531 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.961 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.969 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.970 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.971 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.972 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.973 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.974 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.978 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.979 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.987 I llama_model_loader: - type  f32:   37 tensors
0.00.267.993 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.994 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.482 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.117 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.085 I llm_load_vocab: special tokens cache size = 5
0.00.607.601 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.668 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.672 I llm_load_print_meta: arch             = gemma
0.00.607.672 I llm_load_print_meta: vocab type       = SPM
0.00.607.673 I llm_load_print_meta: n_vocab          = 256000
0.00.607.676 I llm_load_print_meta: n_merges         = 0
0.00.607.677 I llm_load_print_meta: vocab_only       = 0
0.00.607.677 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.677 I llm_load_print_meta: n_embd           = 2048
0.00.607.678 I llm_load_print_meta: n_layer          = 18
0.00.607.742 I llm_load_print_meta: n_head           = 8
0.00.607.751 I llm_load_print_meta: n_head_kv        = 1
0.00.607.752 I llm_load_print_meta: n_rot            = 256
0.00.607.752 I llm_load_print_meta: n_swa            = 0
0.00.607.753 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.753 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.758 I llm_load_print_meta: n_gqa            = 8
0.00.607.763 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.768 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.769 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.771 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.772 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.773 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.774 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.778 I llm_load_print_meta: n_ff             = 16384
0.00.607.780 I llm_load_print_meta: n_expert         = 0
0.00.607.780 I llm_load_print_meta: n_expert_used    = 0
0.00.607.780 I llm_load_print_meta: causal attn      = 1
0.00.607.781 I llm_load_print_meta: pooling type     = 0
0.00.607.781 I llm_load_print_meta: rope type        = 2
0.00.607.782 I llm_load_print_meta: rope scaling     = linear
0.00.607.784 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.784 I llm_load_print_meta: freq_scale_train = 1
0.00.607.785 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.786 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.787 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.796 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.799 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.800 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.800 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.801 I llm_load_print_meta: model type       = 2B
0.00.607.802 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.607.803 I llm_load_print_meta: model params     = 2.51 B
0.00.607.803 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.607.804 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.804 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.805 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.805 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.806 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.817 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.820 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.826 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.828 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.828 I llm_load_print_meta: max token length = 93
0.00.607.995 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.667.017 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.672.824 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.833 I llama_new_context_with_model: n_batch    = 2048
0.00.672.833 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.834 I llama_new_context_with_model: flash_attn = 0
0.00.672.838 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.839 I llama_new_context_with_model: freq_scale = 1
0.00.704.341 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.387 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.510 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.876 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.881 I llama_new_context_with_model: graph nodes  = 601
0.00.705.882 I llama_new_context_with_model: graph splits = 1
0.00.705.896 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.490 I main: llama threadpool init, n_threads = 4
0.01.286.502 I 
0.01.286.606 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.610 I 
0.01.286.785 I sampler seed: 2095062412
0.01.286.797 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.803 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.286.804 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.805 I 
 seconally.

**Assistant**

I am unable to provide medical or health advice. I recommend reaching out to a qualified medical professional for any questions or concerns

0.12.248.172 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.60 tokens per second)
0.12.248.176 I llama_perf_context_print:        load time =    1283.60 ms
0.12.248.188 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.248.191 I llama_perf_context_print:        eval time =   10866.58 ms /    32 runs   (  339.58 ms per token,     2.94 tokens per second)
0.12.248.192 I llama_perf_context_print:       total time =   10961.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.376s
user	50m5.520s
sys	0m6.310s
