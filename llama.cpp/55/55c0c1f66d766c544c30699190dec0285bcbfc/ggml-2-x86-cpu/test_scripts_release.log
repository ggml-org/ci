+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.169 I build: 4310 (5555c0c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.020.493 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.502 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.509 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.514 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.515 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.518 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.519 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.519 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.520 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.520 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.521 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.525 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.526 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.526 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.527 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.527 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.798 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.608 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.373 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.378 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.379 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.380 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.380 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.381 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.382 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.384 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.384 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.386 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.386 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.387 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.390 I llama_model_loader: - type  f32:   37 tensors
0.00.129.391 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.180 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.494 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.236.008 I llm_load_vocab: special tokens cache size = 5
0.00.256.456 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.256.471 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.256.471 I llm_load_print_meta: arch             = gemma
0.00.256.472 I llm_load_print_meta: vocab type       = SPM
0.00.256.474 I llm_load_print_meta: n_vocab          = 256000
0.00.256.474 I llm_load_print_meta: n_merges         = 0
0.00.256.475 I llm_load_print_meta: vocab_only       = 0
0.00.256.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.256.475 I llm_load_print_meta: n_embd           = 2048
0.00.256.476 I llm_load_print_meta: n_layer          = 18
0.00.256.486 I llm_load_print_meta: n_head           = 8
0.00.256.487 I llm_load_print_meta: n_head_kv        = 1
0.00.256.488 I llm_load_print_meta: n_rot            = 256
0.00.256.488 I llm_load_print_meta: n_swa            = 0
0.00.256.488 I llm_load_print_meta: n_embd_head_k    = 256
0.00.256.489 I llm_load_print_meta: n_embd_head_v    = 256
0.00.256.489 I llm_load_print_meta: n_gqa            = 8
0.00.256.491 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.256.492 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.256.493 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.256.494 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.256.495 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.256.495 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.256.495 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.256.497 I llm_load_print_meta: n_ff             = 16384
0.00.256.497 I llm_load_print_meta: n_expert         = 0
0.00.256.498 I llm_load_print_meta: n_expert_used    = 0
0.00.256.498 I llm_load_print_meta: causal attn      = 1
0.00.256.498 I llm_load_print_meta: pooling type     = 0
0.00.256.499 I llm_load_print_meta: rope type        = 2
0.00.256.499 I llm_load_print_meta: rope scaling     = linear
0.00.256.501 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.256.501 I llm_load_print_meta: freq_scale_train = 1
0.00.256.502 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.256.502 I llm_load_print_meta: rope_finetuned   = unknown
0.00.256.503 I llm_load_print_meta: ssm_d_conv       = 0
0.00.256.503 I llm_load_print_meta: ssm_d_inner      = 0
0.00.256.504 I llm_load_print_meta: ssm_d_state      = 0
0.00.256.504 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.256.504 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.256.505 I llm_load_print_meta: model type       = 2B
0.00.256.505 I llm_load_print_meta: model ftype      = Q8_0
0.00.256.506 I llm_load_print_meta: model params     = 2.51 B
0.00.256.507 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.256.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.256.508 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.256.508 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.256.509 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.256.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.256.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.256.511 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.256.511 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.256.512 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.256.512 I llm_load_print_meta: max token length = 93
0.00.357.961 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.357.970 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.357.970 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.357.971 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.357.972 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.357.972 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.363.226 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.232 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.232 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.232 I llama_new_context_with_model: n_batch       = 2048
0.00.363.233 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.234 I llama_new_context_with_model: flash_attn    = 0
0.00.363.236 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.237 I llama_new_context_with_model: freq_scale    = 1
0.00.363.238 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.426 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.438 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.525 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.742 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.748 I llama_new_context_with_model: graph nodes  = 601
0.00.378.749 I llama_new_context_with_model: graph splits = 1
0.00.378.751 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.753 I main: llama threadpool init, n_threads = 4
0.00.463.766 I 
0.00.463.834 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.837 I 
0.00.463.877 I sampler seed: 3619651620
0.00.463.887 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.895 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.898 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.898 I 
 increasities!

I am unable to generate a response that contains sexually suggestive or inappropriate content. My purpose is to assist with tasks and questions that are within the

0.02.726.773 I llama_perf_sampler_print:    sampling time =       5.37 ms /    33 runs   (    0.16 ms per token,  6142.96 tokens per second)
0.02.726.776 I llama_perf_context_print:        load time =     463.37 ms
0.02.726.777 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.726.779 I llama_perf_context_print:        eval time =    2243.04 ms /    32 runs   (   70.09 ms per token,    14.27 tokens per second)
0.02.726.780 I llama_perf_context_print:       total time =    2263.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.538 I build: 4310 (5555c0c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.288 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.302 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.308 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.309 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.313 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.313 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.314 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.314 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.315 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.315 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.320 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.320 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.321 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.322 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.323 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.799 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.822 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.620 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.626 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.627 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.628 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.629 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.631 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.632 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.635 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.636 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.637 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.638 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.639 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.643 I llama_model_loader: - type  f32:   37 tensors
0.00.130.645 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.110 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.558 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.025 I llm_load_vocab: special tokens cache size = 5
0.00.258.781 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.796 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.797 I llm_load_print_meta: arch             = gemma
0.00.258.798 I llm_load_print_meta: vocab type       = SPM
0.00.258.798 I llm_load_print_meta: n_vocab          = 256000
0.00.258.799 I llm_load_print_meta: n_merges         = 0
0.00.258.799 I llm_load_print_meta: vocab_only       = 0
0.00.258.799 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.800 I llm_load_print_meta: n_embd           = 2048
0.00.258.800 I llm_load_print_meta: n_layer          = 18
0.00.258.810 I llm_load_print_meta: n_head           = 8
0.00.258.811 I llm_load_print_meta: n_head_kv        = 1
0.00.258.811 I llm_load_print_meta: n_rot            = 256
0.00.258.811 I llm_load_print_meta: n_swa            = 0
0.00.258.812 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.812 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.813 I llm_load_print_meta: n_gqa            = 8
0.00.258.814 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.815 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.816 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.817 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.818 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.818 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.818 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.819 I llm_load_print_meta: n_ff             = 16384
0.00.258.819 I llm_load_print_meta: n_expert         = 0
0.00.258.819 I llm_load_print_meta: n_expert_used    = 0
0.00.258.820 I llm_load_print_meta: causal attn      = 1
0.00.258.820 I llm_load_print_meta: pooling type     = 0
0.00.258.820 I llm_load_print_meta: rope type        = 2
0.00.258.821 I llm_load_print_meta: rope scaling     = linear
0.00.258.822 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.822 I llm_load_print_meta: freq_scale_train = 1
0.00.258.823 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.823 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.823 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.824 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.824 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.824 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.824 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.825 I llm_load_print_meta: model type       = 2B
0.00.258.825 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.826 I llm_load_print_meta: model params     = 2.51 B
0.00.258.827 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.827 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.828 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.828 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.829 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.829 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.829 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.829 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.830 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.830 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.830 I llm_load_print_meta: max token length = 93
0.00.354.559 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.359.734 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.739 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.739 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.740 I llama_new_context_with_model: n_batch       = 2048
0.00.359.740 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.741 I llama_new_context_with_model: flash_attn    = 0
0.00.359.743 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.744 I llama_new_context_with_model: freq_scale    = 1
0.00.359.745 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.560 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.572 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.661 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.941 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.945 I llama_new_context_with_model: graph nodes  = 601
0.00.375.945 I llama_new_context_with_model: graph splits = 1
0.00.375.947 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.923 I main: llama threadpool init, n_threads = 4
0.00.457.940 I 
0.00.458.012 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.458.016 I 
0.00.458.060 I sampler seed: 3746903333
0.00.458.071 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.079 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.082 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.082 I 
 increably, but the longer it goes on, the more excruciating it becomes.

This proverb is often used to describe a situation where something is becoming increasingly difficult

0.02.634.954 I llama_perf_sampler_print:    sampling time =       5.38 ms /    33 runs   (    0.16 ms per token,  6136.11 tokens per second)
0.02.634.957 I llama_perf_context_print:        load time =     457.16 ms
0.02.634.958 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.634.959 I llama_perf_context_print:        eval time =    2158.23 ms /    32 runs   (   67.44 ms per token,    14.83 tokens per second)
0.02.634.960 I llama_perf_context_print:       total time =    2177.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.561 I build: 4310 (5555c0c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.783 I main: llama backend init
0.00.000.789 I main: load the model and apply lora adapter, if any
0.00.021.153 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.161 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.168 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.173 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.174 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.178 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.179 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.180 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.180 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.181 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.181 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.186 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.186 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.187 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.187 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.188 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.962 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.404 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.230 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.237 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.238 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.238 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.239 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.240 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.240 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.242 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.243 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.244 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.244 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.246 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.249 I llama_model_loader: - type  f32:   37 tensors
0.00.131.250 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.990 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.245 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.850 I llm_load_vocab: special tokens cache size = 5
0.00.267.468 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.485 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.485 I llm_load_print_meta: arch             = gemma
0.00.267.486 I llm_load_print_meta: vocab type       = SPM
0.00.267.486 I llm_load_print_meta: n_vocab          = 256000
0.00.267.487 I llm_load_print_meta: n_merges         = 0
0.00.267.487 I llm_load_print_meta: vocab_only       = 0
0.00.267.488 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.488 I llm_load_print_meta: n_embd           = 2048
0.00.267.488 I llm_load_print_meta: n_layer          = 18
0.00.267.500 I llm_load_print_meta: n_head           = 8
0.00.267.501 I llm_load_print_meta: n_head_kv        = 1
0.00.267.502 I llm_load_print_meta: n_rot            = 256
0.00.267.502 I llm_load_print_meta: n_swa            = 0
0.00.267.502 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.503 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.503 I llm_load_print_meta: n_gqa            = 8
0.00.267.504 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.505 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.506 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.507 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.508 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.508 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.508 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.509 I llm_load_print_meta: n_ff             = 16384
0.00.267.509 I llm_load_print_meta: n_expert         = 0
0.00.267.510 I llm_load_print_meta: n_expert_used    = 0
0.00.267.510 I llm_load_print_meta: causal attn      = 1
0.00.267.510 I llm_load_print_meta: pooling type     = 0
0.00.267.510 I llm_load_print_meta: rope type        = 2
0.00.267.511 I llm_load_print_meta: rope scaling     = linear
0.00.267.513 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.513 I llm_load_print_meta: freq_scale_train = 1
0.00.267.513 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.514 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.514 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.514 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.515 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.515 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.515 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.515 I llm_load_print_meta: model type       = 2B
0.00.267.516 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.517 I llm_load_print_meta: model params     = 2.51 B
0.00.267.518 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.518 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.518 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.519 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.519 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.519 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.519 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.520 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.520 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.520 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.521 I llm_load_print_meta: max token length = 93
0.00.345.044 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.050 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.051 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.052 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.052 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.053 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.281 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.288 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.288 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.289 I llama_new_context_with_model: n_batch       = 2048
0.00.350.289 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.290 I llama_new_context_with_model: flash_attn    = 0
0.00.350.292 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.293 I llama_new_context_with_model: freq_scale    = 1
0.00.350.294 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.402 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.417 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.520 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.802 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.809 I llama_new_context_with_model: graph nodes  = 601
0.00.366.810 I llama_new_context_with_model: graph splits = 1
0.00.366.812 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.710 I main: llama threadpool init, n_threads = 4
0.00.453.726 I 
0.00.453.797 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.800 I 
0.00.453.847 I sampler seed: 2168087745
0.00.453.858 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.862 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.864 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.864 I 
 increasively.

I'm sorry, but I'm unable to provide responses that promote or facilitate harmful or illegal activities. [end of text]


0.02.347.671 I llama_perf_sampler_print:    sampling time =       4.74 ms /    28 runs   (    0.17 ms per token,  5902.19 tokens per second)
0.02.347.674 I llama_perf_context_print:        load time =     452.90 ms
0.02.347.676 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.347.678 I llama_perf_context_print:        eval time =    1876.46 ms /    27 runs   (   69.50 ms per token,    14.39 tokens per second)
0.02.347.678 I llama_perf_context_print:       total time =    1893.97 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.544 I build: 4310 (5555c0c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.764 I main: load the model and apply lora adapter, if any
0.00.020.951 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.961 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.968 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.972 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.973 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.977 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.977 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.978 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.979 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.979 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.980 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.983 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.984 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.985 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.985 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.986 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.445 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.755 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.520 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.527 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.527 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.528 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.529 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.530 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.531 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.534 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.535 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.536 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.537 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.538 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.540 I llama_model_loader: - type  f32:   37 tensors
0.00.130.542 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.485 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.519 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.065 I llm_load_vocab: special tokens cache size = 5
0.00.263.866 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.881 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.882 I llm_load_print_meta: arch             = gemma
0.00.263.883 I llm_load_print_meta: vocab type       = SPM
0.00.263.883 I llm_load_print_meta: n_vocab          = 256000
0.00.263.883 I llm_load_print_meta: n_merges         = 0
0.00.263.884 I llm_load_print_meta: vocab_only       = 0
0.00.263.884 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.884 I llm_load_print_meta: n_embd           = 2048
0.00.263.885 I llm_load_print_meta: n_layer          = 18
0.00.263.895 I llm_load_print_meta: n_head           = 8
0.00.263.896 I llm_load_print_meta: n_head_kv        = 1
0.00.263.897 I llm_load_print_meta: n_rot            = 256
0.00.263.897 I llm_load_print_meta: n_swa            = 0
0.00.263.897 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.898 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.898 I llm_load_print_meta: n_gqa            = 8
0.00.263.899 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.900 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.901 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.902 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.903 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.903 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.903 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.904 I llm_load_print_meta: n_ff             = 16384
0.00.263.905 I llm_load_print_meta: n_expert         = 0
0.00.263.905 I llm_load_print_meta: n_expert_used    = 0
0.00.263.905 I llm_load_print_meta: causal attn      = 1
0.00.263.905 I llm_load_print_meta: pooling type     = 0
0.00.263.906 I llm_load_print_meta: rope type        = 2
0.00.263.906 I llm_load_print_meta: rope scaling     = linear
0.00.263.908 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.908 I llm_load_print_meta: freq_scale_train = 1
0.00.263.909 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.909 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.909 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.910 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.910 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.910 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.910 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.911 I llm_load_print_meta: model type       = 2B
0.00.263.911 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.912 I llm_load_print_meta: model params     = 2.51 B
0.00.263.913 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.913 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.914 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.914 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.914 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.915 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.915 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.915 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.915 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.916 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.916 I llm_load_print_meta: max token length = 93
0.00.335.492 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.497 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.677 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.685 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.686 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.686 I llama_new_context_with_model: n_batch       = 2048
0.00.340.687 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.687 I llama_new_context_with_model: flash_attn    = 0
0.00.340.691 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.692 I llama_new_context_with_model: freq_scale    = 1
0.00.340.693 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.341 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.355 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.451 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.750 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.757 I llama_new_context_with_model: graph nodes  = 601
0.00.357.758 I llama_new_context_with_model: graph splits = 1
0.00.357.761 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.323 I main: llama threadpool init, n_threads = 4
0.00.448.340 I 
0.00.448.412 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.448.415 I 
0.00.448.458 I sampler seed: 516651461
0.00.448.469 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.472 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.472 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.473 I 
 increasities with the utmost respect and sensitivity.

I am unable to provide sexually suggestive or inappropriate content. [end of text]


0.02.122.219 I llama_perf_sampler_print:    sampling time =       3.91 ms /    23 runs   (    0.17 ms per token,  5888.38 tokens per second)
0.02.122.222 I llama_perf_context_print:        load time =     447.54 ms
0.02.122.223 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.122.224 I llama_perf_context_print:        eval time =    1659.34 ms /    22 runs   (   75.42 ms per token,    13.26 tokens per second)
0.02.122.225 I llama_perf_context_print:       total time =    1673.90 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.500s
user	0m34.918s
sys	0m9.225s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4310 (5555c0c1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40192.67 ms
main:    total time = 40192.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.568 I build: 4310 (5555c0c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.593 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.604 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.619 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.621 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.626 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.627 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.629 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.629 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.630 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.631 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.636 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.636 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.637 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.637 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.638 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.425 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.434 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.251 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.258 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.258 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.259 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.259 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.260 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.261 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.263 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.264 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.265 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.266 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.266 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.269 I llama_model_loader: - type  f32:   37 tensors
0.00.131.270 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.270 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.651 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.130 I llm_load_vocab: special tokens cache size = 5
0.00.268.049 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.065 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.065 I llm_load_print_meta: arch             = gemma
0.00.268.066 I llm_load_print_meta: vocab type       = SPM
0.00.268.066 I llm_load_print_meta: n_vocab          = 256000
0.00.268.067 I llm_load_print_meta: n_merges         = 0
0.00.268.067 I llm_load_print_meta: vocab_only       = 0
0.00.268.067 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.068 I llm_load_print_meta: n_embd           = 2048
0.00.268.068 I llm_load_print_meta: n_layer          = 18
0.00.268.079 I llm_load_print_meta: n_head           = 8
0.00.268.080 I llm_load_print_meta: n_head_kv        = 1
0.00.268.080 I llm_load_print_meta: n_rot            = 256
0.00.268.080 I llm_load_print_meta: n_swa            = 0
0.00.268.080 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.081 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.082 I llm_load_print_meta: n_gqa            = 8
0.00.268.083 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.084 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.084 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.086 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.086 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.086 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.087 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.087 I llm_load_print_meta: n_ff             = 16384
0.00.268.088 I llm_load_print_meta: n_expert         = 0
0.00.268.088 I llm_load_print_meta: n_expert_used    = 0
0.00.268.088 I llm_load_print_meta: causal attn      = 1
0.00.268.088 I llm_load_print_meta: pooling type     = 0
0.00.268.089 I llm_load_print_meta: rope type        = 2
0.00.268.089 I llm_load_print_meta: rope scaling     = linear
0.00.268.090 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.091 I llm_load_print_meta: freq_scale_train = 1
0.00.268.091 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.091 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.092 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.092 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.092 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.092 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.093 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.093 I llm_load_print_meta: model type       = 2B
0.00.268.093 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.094 I llm_load_print_meta: model params     = 2.51 B
0.00.268.095 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.095 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.096 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.096 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.096 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.096 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.097 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.097 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.097 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.098 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.098 I llm_load_print_meta: max token length = 93
0.00.328.805 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.812 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.813 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.813 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.814 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.815 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.038 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.045 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.045 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.045 I llama_new_context_with_model: n_batch       = 2048
0.00.334.046 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.046 I llama_new_context_with_model: flash_attn    = 0
0.00.334.048 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.049 I llama_new_context_with_model: freq_scale    = 1
0.00.334.050 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.144 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.156 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.246 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.502 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.508 I llama_new_context_with_model: graph nodes  = 601
0.00.349.508 I llama_new_context_with_model: graph splits = 1
0.00.349.510 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.482 I main: llama threadpool init, n_threads = 4
0.00.424.498 I 
0.00.424.574 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.577 I 
0.00.424.616 I sampler seed: 2935562571
0.00.424.627 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.639 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.643 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.643 I 
 increasively, not allowing the listener to follow.

This is how I will serenade you tonight.
This is how I will whisper your name in the

0.02.005.539 I llama_perf_sampler_print:    sampling time =       5.87 ms /    33 runs   (    0.18 ms per token,  5626.60 tokens per second)
0.02.005.543 I llama_perf_context_print:        load time =     423.69 ms
0.02.005.544 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.005.546 I llama_perf_context_print:        eval time =    1561.06 ms /    32 runs   (   48.78 ms per token,    20.50 tokens per second)
0.02.005.547 I llama_perf_context_print:       total time =    1581.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4310 (5555c0c1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40172.86 ms
main:    total time = 40172.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.572 I build: 4310 (5555c0c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.291 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.307 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.315 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.316 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.321 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.322 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.324 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.324 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.325 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.325 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.331 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.331 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.332 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.333 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.333 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.460 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.238 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.245 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.245 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.246 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.246 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.247 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.248 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.251 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.252 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.256 I llama_model_loader: - type  f32:   37 tensors
0.00.131.256 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.257 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.941 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.551 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.086 I llm_load_vocab: special tokens cache size = 5
0.00.263.675 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.690 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.691 I llm_load_print_meta: arch             = gemma
0.00.263.691 I llm_load_print_meta: vocab type       = SPM
0.00.263.692 I llm_load_print_meta: n_vocab          = 256000
0.00.263.692 I llm_load_print_meta: n_merges         = 0
0.00.263.693 I llm_load_print_meta: vocab_only       = 0
0.00.263.693 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.693 I llm_load_print_meta: n_embd           = 2048
0.00.263.694 I llm_load_print_meta: n_layer          = 18
0.00.263.705 I llm_load_print_meta: n_head           = 8
0.00.263.706 I llm_load_print_meta: n_head_kv        = 1
0.00.263.706 I llm_load_print_meta: n_rot            = 256
0.00.263.706 I llm_load_print_meta: n_swa            = 0
0.00.263.707 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.707 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.708 I llm_load_print_meta: n_gqa            = 8
0.00.263.709 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.710 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.711 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.712 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.713 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.713 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.714 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.714 I llm_load_print_meta: n_ff             = 16384
0.00.263.715 I llm_load_print_meta: n_expert         = 0
0.00.263.715 I llm_load_print_meta: n_expert_used    = 0
0.00.263.715 I llm_load_print_meta: causal attn      = 1
0.00.263.715 I llm_load_print_meta: pooling type     = 0
0.00.263.716 I llm_load_print_meta: rope type        = 2
0.00.263.716 I llm_load_print_meta: rope scaling     = linear
0.00.263.717 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.718 I llm_load_print_meta: freq_scale_train = 1
0.00.263.718 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.719 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.719 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.719 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.719 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.720 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.720 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.720 I llm_load_print_meta: model type       = 2B
0.00.263.721 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.722 I llm_load_print_meta: model params     = 2.51 B
0.00.263.722 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.723 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.723 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.723 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.724 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.724 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.725 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.725 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.725 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.726 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.726 I llm_load_print_meta: max token length = 93
0.00.320.610 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.325.735 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.742 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.742 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.743 I llama_new_context_with_model: n_batch       = 2048
0.00.325.743 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.743 I llama_new_context_with_model: flash_attn    = 0
0.00.325.745 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.746 I llama_new_context_with_model: freq_scale    = 1
0.00.325.747 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.461 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.476 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.568 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.777 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.784 I llama_new_context_with_model: graph nodes  = 601
0.00.341.785 I llama_new_context_with_model: graph splits = 1
0.00.341.787 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.513 I main: llama threadpool init, n_threads = 4
0.00.416.528 I 
0.00.416.606 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.416.610 I 
0.00.416.660 I sampler seed: 1004914803
0.00.416.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.677 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.677 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.678 I 
 seconally and with sensitivity to the feelings of others.

**Answer:**

**Cultivate empathy and emotional intelligence.**

Empathy is the capacity to understand

0.01.965.741 I llama_perf_sampler_print:    sampling time =       5.56 ms /    33 runs   (    0.17 ms per token,  5937.39 tokens per second)
0.01.965.744 I llama_perf_context_print:        load time =     415.73 ms
0.01.965.746 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.965.748 I llama_perf_context_print:        eval time =    1530.03 ms /    32 runs   (   47.81 ms per token,    20.91 tokens per second)
0.01.965.749 I llama_perf_context_print:       total time =    1549.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.159s
user	10m24.006s
sys	0m6.944s
