+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.568 I build: 4082 (551edcea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.937 I main: load the model and apply lora adapter, if any
0.00.021.690 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.700 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.708 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.718 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.720 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.725 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.726 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.727 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.728 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.729 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.729 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.734 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.734 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.735 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.735 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.736 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.012 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.019 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.026 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.026 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.027 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.027 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.028 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.029 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.031 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.032 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.033 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.033 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.034 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.038 I llama_model_loader: - type  f32:   37 tensors
0.00.133.038 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.213 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.559 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.327 I llm_load_vocab: special tokens cache size = 5
0.00.284.373 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.393 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.394 I llm_load_print_meta: arch             = gemma
0.00.284.394 I llm_load_print_meta: vocab type       = SPM
0.00.284.395 I llm_load_print_meta: n_vocab          = 256000
0.00.284.395 I llm_load_print_meta: n_merges         = 0
0.00.284.396 I llm_load_print_meta: vocab_only       = 0
0.00.284.396 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.397 I llm_load_print_meta: n_embd           = 2048
0.00.284.397 I llm_load_print_meta: n_layer          = 18
0.00.284.408 I llm_load_print_meta: n_head           = 8
0.00.284.409 I llm_load_print_meta: n_head_kv        = 1
0.00.284.409 I llm_load_print_meta: n_rot            = 256
0.00.284.409 I llm_load_print_meta: n_swa            = 0
0.00.284.410 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.410 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.411 I llm_load_print_meta: n_gqa            = 8
0.00.284.412 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.413 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.414 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.415 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.416 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.416 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.416 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.417 I llm_load_print_meta: n_ff             = 16384
0.00.284.417 I llm_load_print_meta: n_expert         = 0
0.00.284.418 I llm_load_print_meta: n_expert_used    = 0
0.00.284.418 I llm_load_print_meta: causal attn      = 1
0.00.284.418 I llm_load_print_meta: pooling type     = 0
0.00.284.418 I llm_load_print_meta: rope type        = 2
0.00.284.419 I llm_load_print_meta: rope scaling     = linear
0.00.284.420 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.421 I llm_load_print_meta: freq_scale_train = 1
0.00.284.421 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.422 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.422 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.422 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.423 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.423 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.424 I llm_load_print_meta: model type       = 2B
0.00.284.424 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.425 I llm_load_print_meta: model params     = 2.51 B
0.00.284.426 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.426 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.427 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.427 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.427 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.428 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.429 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.429 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.429 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.430 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.430 I llm_load_print_meta: max token length = 93
0.00.383.801 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.383.808 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.383.809 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.383.810 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.383.810 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.383.811 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.389.270 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.278 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.278 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.279 I llama_new_context_with_model: n_batch       = 2048
0.00.389.279 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.280 I llama_new_context_with_model: flash_attn    = 0
0.00.389.283 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.284 I llama_new_context_with_model: freq_scale    = 1
0.00.389.285 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.406.151 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.406.167 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.406.269 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.559 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.407.565 I llama_new_context_with_model: graph nodes  = 601
0.00.407.565 I llama_new_context_with_model: graph splits = 1
0.00.407.567 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.112 I main: llama threadpool init, n_threads = 4
0.00.495.125 I 
0.00.495.203 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.495.206 I 
0.00.495.249 I sampler seed: 1676930072
0.00.495.260 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.263 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.264 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.265 I 
 increably. 

I understand that the answer is to multiply by 3, but I am unable to grasp the logic behind it.

Can someone please

0.02.820.827 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6615.88 tokens per second)
0.02.820.829 I llama_perf_context_print:        load time =     494.15 ms
0.02.820.831 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.820.832 I llama_perf_context_print:        eval time =    2305.44 ms /    32 runs   (   72.05 ms per token,    13.88 tokens per second)
0.02.820.833 I llama_perf_context_print:       total time =    2325.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.591 I build: 4082 (551edcea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.806 I main: llama backend init
0.00.000.993 I main: load the model and apply lora adapter, if any
0.00.021.921 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.938 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.946 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.947 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.952 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.953 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.954 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.955 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.955 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.956 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.961 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.962 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.963 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.964 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.133 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.778 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.741 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.750 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.750 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.751 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.752 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.752 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.753 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.756 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.757 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.757 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.758 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.763 I llama_model_loader: - type  f32:   37 tensors
0.00.133.764 I llama_model_loader: - type q8_0:  127 tensors
0.00.223.020 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.278.368 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.279.066 I llm_load_vocab: special tokens cache size = 5
0.00.300.066 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.300.087 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.300.088 I llm_load_print_meta: arch             = gemma
0.00.300.089 I llm_load_print_meta: vocab type       = SPM
0.00.300.090 I llm_load_print_meta: n_vocab          = 256000
0.00.300.090 I llm_load_print_meta: n_merges         = 0
0.00.300.090 I llm_load_print_meta: vocab_only       = 0
0.00.300.091 I llm_load_print_meta: n_ctx_train      = 8192
0.00.300.091 I llm_load_print_meta: n_embd           = 2048
0.00.300.091 I llm_load_print_meta: n_layer          = 18
0.00.300.103 I llm_load_print_meta: n_head           = 8
0.00.300.104 I llm_load_print_meta: n_head_kv        = 1
0.00.300.104 I llm_load_print_meta: n_rot            = 256
0.00.300.105 I llm_load_print_meta: n_swa            = 0
0.00.300.105 I llm_load_print_meta: n_embd_head_k    = 256
0.00.300.105 I llm_load_print_meta: n_embd_head_v    = 256
0.00.300.106 I llm_load_print_meta: n_gqa            = 8
0.00.300.107 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.300.108 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.300.109 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.300.110 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.300.111 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.300.111 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.300.111 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.300.112 I llm_load_print_meta: n_ff             = 16384
0.00.300.113 I llm_load_print_meta: n_expert         = 0
0.00.300.113 I llm_load_print_meta: n_expert_used    = 0
0.00.300.113 I llm_load_print_meta: causal attn      = 1
0.00.300.113 I llm_load_print_meta: pooling type     = 0
0.00.300.114 I llm_load_print_meta: rope type        = 2
0.00.300.114 I llm_load_print_meta: rope scaling     = linear
0.00.300.116 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.300.117 I llm_load_print_meta: freq_scale_train = 1
0.00.300.117 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.300.117 I llm_load_print_meta: rope_finetuned   = unknown
0.00.300.118 I llm_load_print_meta: ssm_d_conv       = 0
0.00.300.118 I llm_load_print_meta: ssm_d_inner      = 0
0.00.300.118 I llm_load_print_meta: ssm_d_state      = 0
0.00.300.118 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.300.119 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.300.119 I llm_load_print_meta: model type       = 2B
0.00.300.120 I llm_load_print_meta: model ftype      = Q8_0
0.00.300.121 I llm_load_print_meta: model params     = 2.51 B
0.00.300.121 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.300.122 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.300.122 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.300.123 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.300.124 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.300.124 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.300.125 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.300.125 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.300.125 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.300.126 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.300.126 I llm_load_print_meta: max token length = 93
0.00.395.089 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.400.907 I llama_new_context_with_model: n_seq_max     = 1
0.00.400.917 I llama_new_context_with_model: n_ctx         = 4096
0.00.400.918 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.400.918 I llama_new_context_with_model: n_batch       = 2048
0.00.400.918 I llama_new_context_with_model: n_ubatch      = 512
0.00.400.919 I llama_new_context_with_model: flash_attn    = 0
0.00.400.923 I llama_new_context_with_model: freq_base     = 10000.0
0.00.400.924 I llama_new_context_with_model: freq_scale    = 1
0.00.400.925 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.418.085 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.418.104 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.418.211 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.419.497 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.419.505 I llama_new_context_with_model: graph nodes  = 601
0.00.419.505 I llama_new_context_with_model: graph splits = 1
0.00.419.507 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.504.706 I main: llama threadpool init, n_threads = 4
0.00.504.728 I 
0.00.504.824 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.504.828 I 
0.00.504.878 I sampler seed: 2754564264
0.00.504.889 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.504.892 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.504.893 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.504.894 I 
 increably.

**Assistant**
I'm unable to provide responses that contain inappropriate or sexually suggestive content. [end of text]


0.02.221.573 I llama_perf_sampler_print:    sampling time =       4.00 ms /    25 runs   (    0.16 ms per token,  6253.13 tokens per second)
0.02.221.576 I llama_perf_context_print:        load time =     503.69 ms
0.02.221.578 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.221.580 I llama_perf_context_print:        eval time =    1701.30 ms /    24 runs   (   70.89 ms per token,    14.11 tokens per second)
0.02.221.581 I llama_perf_context_print:       total time =    1716.88 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.601 I build: 4082 (551edcea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.853 I main: llama backend init
0.00.001.044 I main: load the model and apply lora adapter, if any
0.00.021.872 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.884 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.892 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.897 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.898 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.904 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.905 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.906 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.907 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.908 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.908 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.916 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.919 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.920 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.921 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.922 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.417 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.349 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.358 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.359 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.359 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.360 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.360 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.361 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.363 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.364 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.365 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.366 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.367 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.372 I llama_model_loader: - type  f32:   37 tensors
0.00.133.373 I llama_model_loader: - type q8_0:  127 tensors
0.00.224.471 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.278.967 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.279.723 I llm_load_vocab: special tokens cache size = 5
0.00.300.719 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.300.738 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.300.738 I llm_load_print_meta: arch             = gemma
0.00.300.739 I llm_load_print_meta: vocab type       = SPM
0.00.300.740 I llm_load_print_meta: n_vocab          = 256000
0.00.300.740 I llm_load_print_meta: n_merges         = 0
0.00.300.741 I llm_load_print_meta: vocab_only       = 0
0.00.300.741 I llm_load_print_meta: n_ctx_train      = 8192
0.00.300.741 I llm_load_print_meta: n_embd           = 2048
0.00.300.742 I llm_load_print_meta: n_layer          = 18
0.00.300.754 I llm_load_print_meta: n_head           = 8
0.00.300.755 I llm_load_print_meta: n_head_kv        = 1
0.00.300.755 I llm_load_print_meta: n_rot            = 256
0.00.300.755 I llm_load_print_meta: n_swa            = 0
0.00.300.756 I llm_load_print_meta: n_embd_head_k    = 256
0.00.300.756 I llm_load_print_meta: n_embd_head_v    = 256
0.00.300.757 I llm_load_print_meta: n_gqa            = 8
0.00.300.758 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.300.759 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.300.760 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.300.761 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.300.761 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.300.762 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.300.762 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.300.763 I llm_load_print_meta: n_ff             = 16384
0.00.300.763 I llm_load_print_meta: n_expert         = 0
0.00.300.764 I llm_load_print_meta: n_expert_used    = 0
0.00.300.764 I llm_load_print_meta: causal attn      = 1
0.00.300.764 I llm_load_print_meta: pooling type     = 0
0.00.300.765 I llm_load_print_meta: rope type        = 2
0.00.300.765 I llm_load_print_meta: rope scaling     = linear
0.00.300.767 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.300.767 I llm_load_print_meta: freq_scale_train = 1
0.00.300.767 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.300.768 I llm_load_print_meta: rope_finetuned   = unknown
0.00.300.768 I llm_load_print_meta: ssm_d_conv       = 0
0.00.300.768 I llm_load_print_meta: ssm_d_inner      = 0
0.00.300.768 I llm_load_print_meta: ssm_d_state      = 0
0.00.300.769 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.300.769 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.300.770 I llm_load_print_meta: model type       = 2B
0.00.300.770 I llm_load_print_meta: model ftype      = Q8_0
0.00.300.771 I llm_load_print_meta: model params     = 2.51 B
0.00.300.772 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.300.772 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.300.773 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.300.773 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.300.773 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.300.774 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.300.774 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.300.774 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.300.775 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.300.775 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.300.775 I llm_load_print_meta: max token length = 93
0.00.382.037 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.382.043 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.382.044 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.382.045 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.382.045 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.382.046 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.387.619 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.628 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.628 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.628 I llama_new_context_with_model: n_batch       = 2048
0.00.387.629 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.630 I llama_new_context_with_model: flash_attn    = 0
0.00.387.633 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.634 I llama_new_context_with_model: freq_scale    = 1
0.00.387.635 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.403.878 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.403.894 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.003 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.255 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.260 I llama_new_context_with_model: graph nodes  = 601
0.00.405.260 I llama_new_context_with_model: graph splits = 1
0.00.405.262 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.493.493 I main: llama threadpool init, n_threads = 4
0.00.493.508 I 
0.00.493.596 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.493.599 I 
0.00.493.646 I sampler seed: 2900401224
0.00.493.658 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.661 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.664 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.665 I 
 seconally.

A man stands facing a mirror, examining his reflection. He notices something unusual - his eyes appear to glow with an unnatural light.

The

0.02.783.084 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6473.13 tokens per second)
0.02.783.087 I llama_perf_context_print:        load time =     492.42 ms
0.02.783.089 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.783.091 I llama_perf_context_print:        eval time =    2269.12 ms /    32 runs   (   70.91 ms per token,    14.10 tokens per second)
0.02.783.093 I llama_perf_context_print:       total time =    2289.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.544 I build: 4082 (551edcea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.955 I main: load the model and apply lora adapter, if any
0.00.021.513 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.525 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.533 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.542 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.543 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.550 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.551 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.552 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.553 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.554 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.555 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.562 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.564 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.565 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.570 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.570 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.672 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.405 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.318 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.326 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.328 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.329 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.330 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.331 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.335 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.336 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.337 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.338 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.339 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.344 I llama_model_loader: - type  f32:   37 tensors
0.00.133.345 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.704 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.101 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.899 I llm_load_vocab: special tokens cache size = 5
0.00.293.485 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.504 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.505 I llm_load_print_meta: arch             = gemma
0.00.293.505 I llm_load_print_meta: vocab type       = SPM
0.00.293.506 I llm_load_print_meta: n_vocab          = 256000
0.00.293.506 I llm_load_print_meta: n_merges         = 0
0.00.293.507 I llm_load_print_meta: vocab_only       = 0
0.00.293.507 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.507 I llm_load_print_meta: n_embd           = 2048
0.00.293.508 I llm_load_print_meta: n_layer          = 18
0.00.293.520 I llm_load_print_meta: n_head           = 8
0.00.293.521 I llm_load_print_meta: n_head_kv        = 1
0.00.293.521 I llm_load_print_meta: n_rot            = 256
0.00.293.521 I llm_load_print_meta: n_swa            = 0
0.00.293.522 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.522 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.523 I llm_load_print_meta: n_gqa            = 8
0.00.293.524 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.525 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.526 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.527 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.527 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.527 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.528 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.529 I llm_load_print_meta: n_ff             = 16384
0.00.293.529 I llm_load_print_meta: n_expert         = 0
0.00.293.529 I llm_load_print_meta: n_expert_used    = 0
0.00.293.530 I llm_load_print_meta: causal attn      = 1
0.00.293.530 I llm_load_print_meta: pooling type     = 0
0.00.293.531 I llm_load_print_meta: rope type        = 2
0.00.293.531 I llm_load_print_meta: rope scaling     = linear
0.00.293.532 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.533 I llm_load_print_meta: freq_scale_train = 1
0.00.293.533 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.533 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.534 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.534 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.534 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.534 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.535 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.535 I llm_load_print_meta: model type       = 2B
0.00.293.536 I llm_load_print_meta: model ftype      = Q8_0
0.00.293.536 I llm_load_print_meta: model params     = 2.51 B
0.00.293.537 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.293.538 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.538 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.538 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.539 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.539 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.539 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.540 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.540 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.541 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.541 I llm_load_print_meta: max token length = 93
0.00.364.337 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.364.346 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.369.518 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.527 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.527 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.527 I llama_new_context_with_model: n_batch       = 2048
0.00.369.528 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.529 I llama_new_context_with_model: flash_attn    = 0
0.00.369.532 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.533 I llama_new_context_with_model: freq_scale    = 1
0.00.369.534 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.450 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.468 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.562 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.826 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.833 I llama_new_context_with_model: graph nodes  = 601
0.00.386.833 I llama_new_context_with_model: graph splits = 1
0.00.386.836 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.815 I main: llama threadpool init, n_threads = 4
0.00.478.830 I 
0.00.478.917 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.478.920 I 
0.00.478.969 I sampler seed: 735914151
0.00.478.981 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.991 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.992 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.993 I 
 increably.

I have a question about the use of the term "exaggeration" in the context of social media.

**Context:**

In

0.02.978.070 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6774.79 tokens per second)
0.02.978.073 I llama_perf_context_print:        load time =     477.84 ms
0.02.978.074 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.978.076 I llama_perf_context_print:        eval time =    2479.00 ms /    32 runs   (   77.47 ms per token,    12.91 tokens per second)
0.02.978.077 I llama_perf_context_print:       total time =    2499.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.560s
user	0m38.370s
sys	0m9.598s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4082 (551edcea)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40237.28 ms
main:    total time = 40237.28 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.565 I build: 4082 (551edcea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.000.973 I main: load the model and apply lora adapter, if any
0.00.022.022 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.032 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.040 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.046 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.047 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.052 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.053 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.054 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.054 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.055 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.055 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.060 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.060 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.061 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.061 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.062 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.638 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.952 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.854 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.861 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.861 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.862 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.862 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.867 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.867 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.868 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.869 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.870 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.873 I llama_model_loader: - type  f32:   37 tensors
0.00.132.874 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.875 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.572 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.244 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.891 I llm_load_vocab: special tokens cache size = 5
0.00.276.945 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.960 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.960 I llm_load_print_meta: arch             = gemma
0.00.276.961 I llm_load_print_meta: vocab type       = SPM
0.00.276.962 I llm_load_print_meta: n_vocab          = 256000
0.00.276.962 I llm_load_print_meta: n_merges         = 0
0.00.276.962 I llm_load_print_meta: vocab_only       = 0
0.00.276.964 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.964 I llm_load_print_meta: n_embd           = 2048
0.00.276.964 I llm_load_print_meta: n_layer          = 18
0.00.276.976 I llm_load_print_meta: n_head           = 8
0.00.276.977 I llm_load_print_meta: n_head_kv        = 1
0.00.276.977 I llm_load_print_meta: n_rot            = 256
0.00.276.977 I llm_load_print_meta: n_swa            = 0
0.00.276.978 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.978 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.979 I llm_load_print_meta: n_gqa            = 8
0.00.276.980 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.981 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.982 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.983 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.983 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.983 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.984 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.985 I llm_load_print_meta: n_ff             = 16384
0.00.276.985 I llm_load_print_meta: n_expert         = 0
0.00.276.985 I llm_load_print_meta: n_expert_used    = 0
0.00.276.986 I llm_load_print_meta: causal attn      = 1
0.00.276.986 I llm_load_print_meta: pooling type     = 0
0.00.276.986 I llm_load_print_meta: rope type        = 2
0.00.276.987 I llm_load_print_meta: rope scaling     = linear
0.00.276.988 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.988 I llm_load_print_meta: freq_scale_train = 1
0.00.276.989 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.989 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.989 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.990 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.990 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.990 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.991 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.991 I llm_load_print_meta: model type       = 2B
0.00.276.992 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.993 I llm_load_print_meta: model params     = 2.51 B
0.00.276.994 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.995 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.995 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.997 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.997 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.997 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.998 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.999 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.999 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.999 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.000 I llm_load_print_meta: max token length = 93
0.00.339.409 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.339.418 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.339.419 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.339.420 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.339.420 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.339.421 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.344.661 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.668 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.668 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.669 I llama_new_context_with_model: n_batch       = 2048
0.00.344.669 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.669 I llama_new_context_with_model: flash_attn    = 0
0.00.344.672 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.673 I llama_new_context_with_model: freq_scale    = 1
0.00.344.674 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.489 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.504 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.598 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.887 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.893 I llama_new_context_with_model: graph nodes  = 601
0.00.361.893 I llama_new_context_with_model: graph splits = 1
0.00.361.895 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.858 I main: llama threadpool init, n_threads = 4
0.00.438.873 I 
0.00.438.947 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.950 I 
0.00.438.994 I sampler seed: 4283412900
0.00.439.006 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.008 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.009 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.011 I 
 increamically.

I am not sure how to properly format this sentence. 

Could you please format this sentence:

"The company's financial performance

0.02.114.127 I llama_perf_sampler_print:    sampling time =       5.56 ms /    33 runs   (    0.17 ms per token,  5933.12 tokens per second)
0.02.114.130 I llama_perf_context_print:        load time =     437.86 ms
0.02.114.131 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.114.132 I llama_perf_context_print:        eval time =    1655.15 ms /    32 runs   (   51.72 ms per token,    19.33 tokens per second)
0.02.114.133 I llama_perf_context_print:       total time =    1675.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4082 (551edcea)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40236.06 ms
main:    total time = 40236.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.609 I build: 4082 (551edcea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.821 I main: llama backend init
0.00.001.001 I main: load the model and apply lora adapter, if any
0.00.021.461 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.480 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.488 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.489 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.494 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.494 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.496 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.497 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.503 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.505 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.505 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.506 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.857 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.040 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.938 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.945 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.946 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.946 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.947 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.948 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.949 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.951 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.952 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.956 I llama_model_loader: - type  f32:   37 tensors
0.00.132.957 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.958 I llama_model_loader: - type q6_K:   19 tensors
0.00.224.505 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.279.510 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.280.255 I llm_load_vocab: special tokens cache size = 5
0.00.301.386 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.301.407 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.301.408 I llm_load_print_meta: arch             = gemma
0.00.301.408 I llm_load_print_meta: vocab type       = SPM
0.00.301.409 I llm_load_print_meta: n_vocab          = 256000
0.00.301.410 I llm_load_print_meta: n_merges         = 0
0.00.301.411 I llm_load_print_meta: vocab_only       = 0
0.00.301.437 I llm_load_print_meta: n_ctx_train      = 8192
0.00.301.441 I llm_load_print_meta: n_embd           = 2048
0.00.301.441 I llm_load_print_meta: n_layer          = 18
0.00.301.454 I llm_load_print_meta: n_head           = 8
0.00.301.456 I llm_load_print_meta: n_head_kv        = 1
0.00.301.456 I llm_load_print_meta: n_rot            = 256
0.00.301.457 I llm_load_print_meta: n_swa            = 0
0.00.301.457 I llm_load_print_meta: n_embd_head_k    = 256
0.00.301.458 I llm_load_print_meta: n_embd_head_v    = 256
0.00.301.459 I llm_load_print_meta: n_gqa            = 8
0.00.301.460 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.301.461 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.301.462 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.301.463 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.301.464 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.301.465 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.301.465 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.301.466 I llm_load_print_meta: n_ff             = 16384
0.00.301.466 I llm_load_print_meta: n_expert         = 0
0.00.301.467 I llm_load_print_meta: n_expert_used    = 0
0.00.301.467 I llm_load_print_meta: causal attn      = 1
0.00.301.468 I llm_load_print_meta: pooling type     = 0
0.00.301.468 I llm_load_print_meta: rope type        = 2
0.00.301.468 I llm_load_print_meta: rope scaling     = linear
0.00.301.470 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.301.471 I llm_load_print_meta: freq_scale_train = 1
0.00.301.471 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.301.472 I llm_load_print_meta: rope_finetuned   = unknown
0.00.301.472 I llm_load_print_meta: ssm_d_conv       = 0
0.00.301.472 I llm_load_print_meta: ssm_d_inner      = 0
0.00.301.475 I llm_load_print_meta: ssm_d_state      = 0
0.00.301.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.301.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.301.476 I llm_load_print_meta: model type       = 2B
0.00.301.477 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.301.478 I llm_load_print_meta: model params     = 2.51 B
0.00.301.478 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.301.479 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.301.479 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.301.480 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.301.480 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.301.480 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.301.481 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.301.482 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.301.482 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.301.483 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.301.483 I llm_load_print_meta: max token length = 93
0.00.360.082 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.365.481 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.488 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.489 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.489 I llama_new_context_with_model: n_batch       = 2048
0.00.365.489 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.490 I llama_new_context_with_model: flash_attn    = 0
0.00.365.493 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.494 I llama_new_context_with_model: freq_scale    = 1
0.00.365.495 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.105 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.121 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.217 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.498 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.506 I llama_new_context_with_model: graph nodes  = 601
0.00.383.506 I llama_new_context_with_model: graph splits = 1
0.00.383.508 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.821 I main: llama threadpool init, n_threads = 4
0.00.461.835 I 
0.00.461.917 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.920 I 
0.00.461.964 I sampler seed: 1997891724
0.00.461.975 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.977 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.978 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.978 I 
 increasities, and other forms of harassment, create a hostile work environment. This hostility can manifest in various forms, including verbal abuse, threats, intimidation, and

0.02.157.030 I llama_perf_sampler_print:    sampling time =       5.43 ms /    33 runs   (    0.16 ms per token,  6077.35 tokens per second)
0.02.157.032 I llama_perf_context_print:        load time =     460.80 ms
0.02.157.033 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.157.035 I llama_perf_context_print:        eval time =    1675.35 ms /    32 runs   (   52.35 ms per token,    19.10 tokens per second)
0.02.157.035 I llama_perf_context_print:       total time =    1695.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.607s
user	10m24.882s
sys	0m7.350s
